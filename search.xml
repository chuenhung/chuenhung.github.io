<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DBeaver 常用操作</title>
    <url>/2024/09/08/dbeaver_common_operations/</url>
    <content><![CDATA[<h2 id="快捷键"><a class="header-anchor" href="#快捷键"></a>快捷键</h2>
<p><strong>执行sql语句：ctrl+enter</strong><br>
<strong>sql模板(可以自定义设置)：sf、swhere、scount</strong><br>
<strong>格式化：ctrl+shift+f</strong><br>
<strong>转为大写：ctrl+shift+x</strong><br>
<strong>转为小写：ctrl+shift+y</strong><br>
<strong>放大/缩小sql编辑器的字体大小：ctrl+、ctrl-</strong></p>
<h2 id="SQL模板xml文件"><a class="header-anchor" href="#SQL模板xml文件"></a>SQL模板xml文件</h2>
<p>使用方法，新建一个xml -&gt; 使用下面的代码填充 -&gt; 在界面中导入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span>?&gt;</span><span class="tag">&lt;<span class="name">templates</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">&quot;true&quot;</span> <span class="attr">context</span>=<span class="string">&quot;sql&quot;</span> <span class="attr">deleted</span>=<span class="string">&quot;false&quot;</span> <span class="attr">description</span>=<span class="string">&quot;&quot;</span> <span class="attr">enabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">name</span>=<span class="string">&quot;delf&quot;</span>&gt;</span>delete from $&#123;table&#125;;<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">&quot;true&quot;</span> <span class="attr">context</span>=<span class="string">&quot;sql&quot;</span> <span class="attr">deleted</span>=<span class="string">&quot;false&quot;</span> <span class="attr">description</span>=<span class="string">&quot;删除&quot;</span> <span class="attr">enabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">name</span>=<span class="string">&quot;delw&quot;</span>&gt;</span>delete from $&#123;table&#125; where $&#123;column&#125;=&#x27;$&#123;value&#125;&#x27;;<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">&quot;true&quot;</span> <span class="attr">context</span>=<span class="string">&quot;sql&quot;</span> <span class="attr">deleted</span>=<span class="string">&quot;false&quot;</span> <span class="attr">description</span>=<span class="string">&quot;select row count&quot;</span> <span class="attr">enabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">id</span>=<span class="string">&quot;org.jkiss.dbeaver.templates.scount&quot;</span> <span class="attr">name</span>=<span class="string">&quot;scount&quot;</span>&gt;</span>select count(*) from $&#123;table&#125;;<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">&quot;true&quot;</span> <span class="attr">context</span>=<span class="string">&quot;sql&quot;</span> <span class="attr">deleted</span>=<span class="string">&quot;false&quot;</span> <span class="attr">description</span>=<span class="string">&quot;select * from &quot;</span> <span class="attr">enabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">id</span>=<span class="string">&quot;org.jkiss.dbeaver.templates.sf&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sf&quot;</span>&gt;</span>select * from $&#123;table&#125;;<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">&quot;true&quot;</span> <span class="attr">context</span>=<span class="string">&quot;sql&quot;</span> <span class="attr">deleted</span>=<span class="string">&quot;false&quot;</span> <span class="attr">description</span>=<span class="string">&quot;select with group by&quot;</span> <span class="attr">enabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sg&quot;</span>&gt;</span>select * from $&#123;table&#125; where $&#123;column&#125;=&#x27;$&#123;value&#125;&#x27; group by $&#123;column&#125;;<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">&quot;true&quot;</span> <span class="attr">context</span>=<span class="string">&quot;sql&quot;</span> <span class="attr">deleted</span>=<span class="string">&quot;false&quot;</span> <span class="attr">description</span>=<span class="string">&quot;select with order by&quot;</span> <span class="attr">enabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">id</span>=<span class="string">&quot;org.jkiss.dbeaver.templates.scob&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sorder&quot;</span>&gt;</span>select * from $&#123;table&#125; t order by $&#123;column&#125;;<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">&quot;true&quot;</span> <span class="attr">context</span>=<span class="string">&quot;sql&quot;</span> <span class="attr">deleted</span>=<span class="string">&quot;false&quot;</span> <span class="attr">description</span>=<span class="string">&quot;select with condition&quot;</span> <span class="attr">enabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">id</span>=<span class="string">&quot;org.jkiss.dbeaver.templates.swhere&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sw&quot;</span>&gt;</span>select * from $&#123;table&#125; where $&#123;column&#125;=&#x27;$&#123;value&#125;&#x27;;<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">&quot;true&quot;</span> <span class="attr">context</span>=<span class="string">&quot;sql&quot;</span> <span class="attr">deleted</span>=<span class="string">&quot;false&quot;</span> <span class="attr">description</span>=<span class="string">&quot;&quot;</span> <span class="attr">enabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">name</span>=<span class="string">&quot;updf&quot;</span>&gt;</span>update $&#123;table&#125; set  $&#123;column&#125;=&#x27;&#x27;;<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">&quot;true&quot;</span> <span class="attr">context</span>=<span class="string">&quot;sql&quot;</span> <span class="attr">deleted</span>=<span class="string">&quot;false&quot;</span> <span class="attr">description</span>=<span class="string">&quot;更新&quot;</span> <span class="attr">enabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">name</span>=<span class="string">&quot;updw&quot;</span>&gt;</span>update $&#123;table&#125; set  $&#123;column&#125;=&#x27;&#x27; where $&#123;column&#125;=&#x27;$&#123;value&#125;&#x27;;<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;/<span class="name">templates</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/c6e9f4739b3393b629de6b2314df284c.png" alt="在这里插入图片描述"></p>
<span id="more"></span>
<h2 id="删除表数据"><a class="header-anchor" href="#删除表数据"></a>删除表数据</h2>
<p><strong>相当于执行 truncate table 表名;</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/0a250c90c4c2a4ec65e665701a0fb5a0.png" alt="在这里插入图片描述"></p>
<h2 id="执行脚本文件"><a class="header-anchor" href="#执行脚本文件"></a>执行脚本文件</h2>
<p><strong>相当于命令行执行 source xxx.sql</strong><br>
<strong>这个功能适合数据量比较大的脚本文件，避免使用DBeaver打开后卡死。</strong><br>
<strong>需要确保SQL脚本文件格式为UTF-8，否则数据会出现乱码。</strong></p>
<p><strong>具体操作步骤如下：</strong><br>
<strong>一、选择数据库 -&gt; 工具 -&gt; 执行脚本</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/bd590613520386761001457d58aaddee.png" alt="在这里插入图片描述"><br>
<strong>二、选择本地脚本文件、等待执行完成</strong></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/91a668b0b67ca5fe0cc80b779f5dbd25.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/6c7f0cce3b53dbd4515c08479ad5438e.png" alt="在这里插入图片描述"></p>
<h2 id="导入脚本"><a class="header-anchor" href="#导入脚本"></a>导入脚本</h2>
<p><strong>这个功能适合平时项目中一些常用的查询sql 或者 数据量比较小的脚本文件。</strong></p>
<p><strong>一、选择文件 -&gt; 导入</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/d39203821f36a9587cc5e19c219114f0.png" alt="在这里插入图片描述"><br>
<strong>二、选择脚本 -&gt; 下一步</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/24b074a414e911f1ff8999b15e76e33d.png" alt="在这里插入图片描述"></p>
<p><strong>三、选择本地脚本文件夹 -&gt; 完成</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/553bbd80cd85d4dc05c397a1616e4612.png" alt="在这里插入图片描述"><br>
<strong>四、新导入的脚本都在项目tab下面</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/e16385b2eb3248d9c3399db9252024c6.png" alt="在这里插入图片描述"></p>
<h2 id="表数据的标题栏中显示中文注释-推荐"><a class="header-anchor" href="#表数据的标题栏中显示中文注释-推荐"></a>表数据的标题栏中显示中文注释 (推荐)</h2>
<p><strong>显示效果如下：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/084a1b234bb4b3eea6b4a3cd89ff4152.png" alt="在这里插入图片描述"><br>
<strong>设置成功以后，在数据tab、通过sql查询的结果标题都可以显示中文注释，非常实用！！！</strong></p>
<p><strong>具体操作步骤如下：</strong><br>
<strong>一、选择全局设置</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/a53101bc05d7083ff16aba1836329b53.png" alt="在这里插入图片描述"><br>
<strong>二、编辑器 -&gt; 数据编辑器 -&gt; 外观 -&gt; 在标题栏中显示列描述打勾</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/d7d9c913be02776168b47d39d69f32f2.png" alt="在这里插入图片描述"></p>
<h2 id="数据库导航显示表名-推荐"><a class="header-anchor" href="#数据库导航显示表名-推荐"></a>数据库导航显示表名 (推荐)</h2>
<p><strong>显示效果如下：</strong></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/4aafd17b8f6f29b1d3d7cd78c32a1f65.png" alt="在这里插入图片描述"></p>
<p><strong>具体操作步骤如下：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/001e84073b126edf1d8296e4433d08ff.png" alt="在这里插入图片描述"></p>
<h2 id="执行多行sql语句"><a class="header-anchor" href="#执行多行sql语句"></a>执行多行sql语句</h2>
<p><strong>DBeaver默认执行多行sql语句会报下面的错误：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/ae4dd3382411eeacc088327a2920bd68.png" alt="在这里插入图片描述"><br>
<strong>解决方法：</strong><br>
<strong>右键数据库链接 -&gt; 编辑连接 -&gt; 驱动属性 -&gt; allowMultiQueries 改为true -&gt;重新执行查询</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/7d3d791f237fdaa582fb906f594954d6.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/8c1d78d74382c8d53d0887e278597243.png" alt="在这里插入图片描述"><br>
<strong>把allowMultiQueries 改为true，重新执行查询即可。</strong></p>
<h2 id="ER图说明以及避坑"><a class="header-anchor" href="#ER图说明以及避坑"></a>ER图说明以及避坑</h2>
<p><strong>查看样式的部分功能说明：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/cd176fb7a3bef9dcd3350845eaaa282f.png" alt="在这里插入图片描述"><br>
修改查看样式，ER图不生效的话，<strong>需要删除后重新拖入 (如果还是不行，需要重启DBeaver)</strong>，这是DBeaver的一个bug，折腾了1下午：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/1cf93a7f54fc67ac49a8ec11d829d223.gif#pic_center" alt="在这里插入图片描述"></p>
<p><strong>对多张表生成ER图的方法：选择1-多张表，然后点击创建新的ER图</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/725d07ce5c3cd0e6fc88ad63c2a6d201.png" alt="在这里插入图片描述"></p>
<p><a href="https://blog.csdn.net/zbaby77/article/details/111832261#:~:text=%E7%82%B9%E5%87%BB%E5%B7%A5%E5%85%B7%E6%A0%8F%EF%BC%9ASQL%E7%BC%96%E8%BE%91%E5%99%A8-%E6%96%B0%E5%BB%BASQL%E7%BC%96%E8%BE%91%E5%99%A8%20%E6%96%B9%E6%B3%952%EF%BC%9A%20%E4%BB%8E%E5%88%AB%E4%BA%BA%E7%9A%84%E6%9C%BA%E5%99%A8%E4%B8%8A%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC%EF%BC%8C%E6%94%BE%E8%87%B3%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%AC%E5%9C%B0%E7%9B%AE%E5%BD%95%E4%B8%8B%EF%BC%9AC:Users%E7%94%A8%E6%88%B7%E5%90%8DAppDataRoamingDBeaverDataworkspace6General%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A6%E4%B8%8B%E8%A7%92%EF%BC%8CScripts%E5%8C%BA%E5%9F%9F%E5%88%B7%E6%96%B0%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%88%B0%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E4%BA%86%20%E7%BB%99%E8%84%9A%E6%9C%AC%E8%AE%BE%E7%BD%AE%E6%B4%BB%E5%8A%A8%E8%BF%9E%E6%8E%A5%EF%BC%88%E6%88%96%E8%80%85%E6%89%A7%E8%A1%8Csql%E7%9A%84%E6%97%B6%E5%80%99%20%E5%86%8D%E8%AE%BE%E7%BD%AE%EF%BC%89%EF%BC%9A,%E5%8F%B3%E9%94%AE-Associate%20with%20data%20source%20%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%EF%BC%8C%E7%82%B9%E5%87%BBselect%20%E7%84%B6%E5%90%8E%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0DateSources=%E4%BD%A0%E7%BB%91%E5%AE%9A%E7%9A%84%E6%95%B0%E6%8D%AE%E6%BA%90%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%EF%BC%89">参考链接1</a>、<a href="https://blog.csdn.net/wangjiziji123/article/details/132691637">参考链接2</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>解决springdoc-openapi-ui(Swagger3)跳转默认界面问题</title>
    <url>/2024/12/28/springdoc_openapi_ui_default_page/</url>
    <content><![CDATA[<h3 id="问题现象"><a class="header-anchor" href="#问题现象"></a>问题现象</h3>
<p>项目正确引入springdoc-openapi-ui依赖，但是访问/swagger-ui/index.html界面时，跳转到了默认的界面，如下图所示：<br>
<img src="https://i-blog.csdnimg.cn/direct/751330a9c99948db999ff049f0e71e64.png" alt="在这里插入图片描述"></p>
<span id="more"></span>
<h3 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h3>
<p><em><strong>1、升级maven依赖为1.8.0以上：</strong></em></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em><strong>2、增加springdoc的url配置：</strong></em></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="attr">swagger-ui:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启swagger界面</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/cxhl/v3/api-docs</span> <span class="comment"># 自定义搜索路径</span></span><br><span class="line">    <span class="comment">#path: swagger-ui.html # 自定义路径，默认为&quot;/swagger-ui/index.html&quot;</span></span><br></pre></td></tr></table></figure>
<p>修改后的界面，如下图所示：<br>
<img src="https://i-blog.csdnimg.cn/direct/7b00efedfa9540a884c501673414de81.png" alt="在这里插入图片描述"><br>
项目中的接口文档都出来了，完美解决！</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Swagger</tag>
        <tag>SpringDoc</tag>
      </tags>
  </entry>
  <entry>
    <title>Java抽象类使用@Autowired注入实例</title>
    <url>/2024/09/07/java_abstract_class_autowired/</url>
    <content><![CDATA[<p><strong>示例代码如下：</strong><br>
<strong>抽象类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractWaterMark</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AchievementApplicationService achievementApplicationService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AchievementApplication <span class="title function_">queryByCode</span><span class="params">(String code)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> achievementApplicationService.queryByCode(code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>增加子类（需要@Service注解）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WaterMark</span> <span class="keyword">extends</span> <span class="title class_">AbstractWaterMark</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>测试类(装配抽象类/子类)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WaterMark waterMark;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SingleResult <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AchievementApplication</span> <span class="variable">achievementApplication</span> <span class="operator">=</span> waterMark.queryByCode(<span class="string">&quot;ZGGX-ZF-YN-20220004&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SingleResult</span>(achievementApplication);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意事项：</strong></p>
<ul>
<li>
<p>装配抽象类也可以</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AbstractWaterMark abstractWaterMark;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用new WaterMark();的方式，依然会出现空指针异常</p>
</li>
<li>
<p>必须有子类，且子类使用@service注解修饰</p>
</li>
</ul>
<p><a href="https://blog.csdn.net/loney_wolf/article/details/103505788?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-103505788-blog-115423097.235%5Ev40%5Epc_relevant_rights_sort&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-103505788-blog-115423097.235%5Ev40%5Epc_relevant_rights_sort&amp;utm_relevant_index=5">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(十七)</title>
    <url>/2024/12/07/coding_notes_seventeen/</url>
    <content><![CDATA[<h2 id="MySQL触发器"><a class="header-anchor" href="#MySQL触发器"></a>MySQL触发器</h2>
<p><strong>语法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> 触发器名 </span><br><span class="line">触发器时间 触发事件</span><br><span class="line"><span class="keyword">ON</span> 表名 <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    执行语句</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong></p>
<p>1、触发器名 - 触发器的名称<br>
2、触发器时间 - 触发器触发的时机，值为 BEFORE或AFTER<br>
3、触发器事件 - 引起触发器触发的事件，值为INSERT或UPDATE或DELETE<br>
4、表名 - 触发触发器的表名，即该触发器是建立在那张表上面的<br>
5、执行语句 - 即为触发器出发后执行的操作。可以使用old和new关键字。</p>
<p><strong>示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span></span><br><span class="line"><span class="keyword">TRIGGER</span> `update_department_id` </span><br><span class="line">AFTER  <span class="keyword">UPDATE</span> </span><br><span class="line"><span class="keyword">ON</span> `wb_user`</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> wb_user_20230817 <span class="keyword">set</span> department_id <span class="operator">=</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">where</span> mobile <span class="operator">=</span> <span class="string">&#x27;187****785&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>
<p><strong>因为会造成死循环，在同一个表中不能使用insert/update/delter，否则会报错。</strong></p>
<span id="more"></span>
<p><strong>解决方法：</strong><br>
<strong>使用set语句(且要before update)</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF new.mobile <span class="operator">=</span><span class="string">&#x27;187****85&#x27;</span> <span class="keyword">or</span> new.mobile <span class="operator">=</span><span class="string">&#x27;187****86&#x27;</span> <span class="keyword">or</span> new.mobile <span class="operator">=</span><span class="string">&#x27;138****810&#x27;</span><span class="keyword">THEN</span></span><br><span class="line">  <span class="keyword">set</span> new.department_id <span class="operator">=</span> <span class="string">&#x27;6666&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong></p>
<ol>
<li>set要和before一起使用</li>
<li>不能使用update、insert、delete更改同表数据的值，否则会不断调用触发器从而造成死循环</li>
</ol>
<p><a href="https://www.cnblogs.com/big-xuzhou/p/10326398.html">参考链接</a>、<a href="https://blog.51cto.com/u_16213374/7116325">参考链接</a>、<a href="https://codeleading.com/article/58353161202/">参考链接</a></p>
<h2 id="ElasticSearch按日期分组查询每天的文档数量"><a class="header-anchor" href="#ElasticSearch按日期分组查询每天的文档数量"></a>ElasticSearch按日期分组查询每天的文档数量</h2>
<p><strong>示例hql:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 按日期分组聚合查询</span><br><span class="line"><span class="keyword">GET</span>  repetition<span class="operator">-</span><span class="keyword">result</span><span class="operator">/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: <span class="number">0</span>,</span><br><span class="line">  &quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;group_by_starttime&quot;: &#123;</span><br><span class="line">      &quot;date_histogram&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;createTime&quot;,</span><br><span class="line">        &quot;calendar_interval&quot;: &quot;1d&quot;,</span><br><span class="line">        &quot;offset&quot;: <span class="number">0</span>,</span><br><span class="line">        &quot;order&quot;: &#123;</span><br><span class="line">          &quot;_key&quot;: &quot;asc&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;keyed&quot;: <span class="literal">false</span>,</span><br><span class="line">        &quot;min_doc_count&quot;: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggregations&quot;: &#123;</span><br><span class="line">        &quot;count_id&quot;: &#123;</span><br><span class="line">          &quot;value_count&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;id.keyword&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>返回示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: <span class="number">22</span>,</span><br><span class="line">  &quot;timed_out&quot;: <span class="literal">false</span>,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: <span class="number">1</span>,</span><br><span class="line">    &quot;successful&quot;: <span class="number">1</span>,</span><br><span class="line">    &quot;skipped&quot;: <span class="number">0</span>,</span><br><span class="line">    &quot;failed&quot;: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: &#123;</span><br><span class="line">      &quot;value&quot;: <span class="number">10000</span>,</span><br><span class="line">      &quot;relation&quot;: &quot;gte&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot;: <span class="keyword">null</span>,</span><br><span class="line">    &quot;hits&quot;: []</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;group_by_starttime&quot;: &#123;</span><br><span class="line">      &quot;buckets&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: <span class="number">1691539200000</span>,</span><br><span class="line">          &quot;doc_count&quot;: <span class="number">71043</span>,</span><br><span class="line">          &quot;count_id&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: <span class="number">71043</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: <span class="number">1691625600000</span>,</span><br><span class="line">          &quot;doc_count&quot;: <span class="number">134818</span>,</span><br><span class="line">          &quot;count_id&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: <span class="number">134818</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: <span class="number">1691712000000</span>,</span><br><span class="line">          &quot;doc_count&quot;: <span class="number">1382</span>,</span><br><span class="line">          &quot;count_id&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: <span class="number">1382</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: <span class="number">1692144000000</span>,</span><br><span class="line">          &quot;doc_count&quot;: <span class="number">35</span>,</span><br><span class="line">          &quot;count_id&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: <span class="number">35</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: <span class="number">1692230400000</span>,</span><br><span class="line">          &quot;doc_count&quot;: <span class="number">25</span>,</span><br><span class="line">          &quot;count_id&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: <span class="number">25</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.saoniuhuo.com/question/detail-2753079.html">参考链接</a></p>
<h2 id="MySQL中order-by排序将null排在最前或者最后面"><a class="header-anchor" href="#MySQL中order-by排序将null排在最前或者最后面"></a>MySQL中order by排序将null排在最前或者最后面</h2>
<p>默认情况下，MySQL会认为NULL值比其他类型的数据小， 也就是说：<strong>在order by排序的时候，NULL是最小的。</strong></p>
<p>NULL排在后面、审批时间升序排列。两种实现方法如下：</p>
<p><strong>方法一:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> isnull(score_time),score_time <span class="keyword">asc</span>; </span><br></pre></td></tr></table></figure>
<p><strong>方法二 :</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> score_time <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">asc</span>,score_time <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>
<p><strong>ifnull(value)、is null：当值为null时返回1，不为null时返回0。</strong><br>
<a href="https://blog.csdn.net/qiziyu520/article/details/122433558">参考链接</a></p>
<h2 id="swagger3-0默认访问路径"><a class="header-anchor" href="#swagger3-0默认访问路径"></a>swagger3.0默认访问路径</h2>
<p>http://ip:端口/context-path/swagger-ui/index.html</p>
<p>示例：<br>
http://127.0.0.1:30304/management/swagger-ui/index.html</p>
<h2 id="swagger3-0模块化配置"><a class="header-anchor" href="#swagger3-0模块化配置"></a>swagger3.0模块化配置</h2>
<p><strong>配置代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Info;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springdoc.core.GroupedOpenApi;</span><br><span class="line"><span class="keyword">import</span> org.springdoc.core.customizers.OpenApiCustomiser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * swagger模块配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chuenhung</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2023/09/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringDocConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(SpringDocConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">groupedOpenApi</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;开始management模块 swagger模块配置&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .group(<span class="string">&quot;management模块接口文档&quot;</span>)</span><br><span class="line">                .packagesToScan(<span class="string">&quot;com.aspirecn.rewardmanagement&quot;</span>)</span><br><span class="line">                .addOpenApiCustomiser(openApiCustomiser())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OpenApiCustomiser <span class="title function_">openApiCustomiser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wfRestApiInfo -&gt; wfRestApiInfo</span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">                        .title(<span class="string">&quot;management模块接口文档&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;management模块接口文档&quot;</span>)</span><br><span class="line">                        .termsOfService(<span class="string">&quot;&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;1.0&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>效果如下：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/2055e948ebeaba47779b7ca0f6627814.png" alt="在这里插入图片描述"></p>
<h2 id="MySQL中要少用UNION，多用UNION-ALL"><a class="header-anchor" href="#MySQL中要少用UNION，多用UNION-ALL"></a>MySQL中要少用UNION，多用UNION ALL</h2>
<p>UNION去重是基于临时表。<br>
临时表特性是如果缓存够使用、内存缓存不够自动创建MyISAM引擎表，IO效率变差。<br>
少用UNION，多用UNION ALL。</p>
<h2 id="ElasticSearch-Bucket-Metric聚合分析及嵌套聚合"><a class="header-anchor" href="#ElasticSearch-Bucket-Metric聚合分析及嵌套聚合"></a>ElasticSearch Bucket &amp; Metric聚合分析及嵌套聚合</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/48586d2c97e64ba56743bcb06bce6175.png" alt="在这里插入图片描述"></p>
<p><strong>示例：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/9dccb9d48f6352b20abf193111b5de4c.png" alt="在这里插入图片描述"><br>
<a href="https://learnku.com/articles/38781">参考链接</a></p>
<h2 id="Mysql-case-when做空值和非空判断"><a class="header-anchor" href="#Mysql-case-when做空值和非空判断"></a>Mysql case when做空值和非空判断</h2>
<p><strong>示例代码：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> data <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">then</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;B&#x27;</span> <span class="keyword">end</span>) <span class="string">&#x27;C&#x27;</span></span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> data <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">then</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;B&#x27;</span> <span class="keyword">end</span>) <span class="string">&#x27;C&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="Nacos配置文件动态刷新的四种方法"><a class="header-anchor" href="#Nacos配置文件动态刷新的四种方法"></a>Nacos配置文件动态刷新的四种方法</h2>
<ul>
<li>使用Spring的@RefreshScope注解</li>
<li>使用Nacos的@NacosConfigurationProperties注解</li>
<li>使用Nacos的ConfigListener接口</li>
<li>使用Nacos的@NacosValue注解</li>
</ul>
<p>注意：<br>
<strong>1、使用的是spring-cloud-starter-alibaba-nacos-config依赖，@NacosValue注解获取不到值，官方也是推荐使用@value</strong><br>
<strong>2、使用@NacosConfigurationProperties注解时，即使没有前缀也要加上@ConfigurationProperties(prefix = “”)否则会获取不到值</strong><br>
<a href="https://blog.csdn.net/qq_39017153/article/details/132402409#:~:text=%F0%9F%8C%A0%20%E6%80%BB%E7%BB%93%201%20%E5%9C%A8Nacos%E4%B8%AD%EF%BC%8C%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E5%8F%AF%E4%BB%A5%E6%80%BB%E7%BB%93%E5%A6%82%E4%B8%8B%EF%BC%9A%20%E4%BD%BF%E7%94%A8Spring%20Cloud%20Config%20%2B,%E7%AB%AF%E7%82%B9%E6%9D%A5%E8%A7%A6%E5%8F%91%E9%85%8D%E7%BD%AE%E7%9A%84%E5%88%B7%E6%96%B0%E3%80%82%20...%202%20%E8%BF%99%E4%BA%9B%E6%96%B9%E5%BC%8F%E9%83%BD%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0Nacos%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0%EF%BC%8C%E4%BD%86%E6%A0%B9%E6%8D%AE%E5%85%B7%E4%BD%93%E5%9C%BA%E6%99%AF%E5%92%8C%E9%9C%80%E6%B1%82%EF%BC%8C%E9%80%89%E6%8B%A9%E6%9C%80%E9%80%82%E5%90%88%E7%9A%84%E6%96%B9%E5%BC%8F%E9%9D%9E%E5%B8%B8%E9%87%8D%E8%A6%81%E3%80%82%20%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BE%9D%E8%B5%96%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%BC%95%E5%85%A5%EF%BC%8C%E5%B9%B6%E7%A1%AE%E4%BF%9D%E4%BB%A3%E7%A0%81%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BA%86%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%92%8C%E6%96%B9%E5%BC%8F%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0%E3%80%82%203%20%E6%97%A0%E8%AE%BA%E9%80%89%E6%8B%A9%E5%93%AA%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%8C%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%83%BD%E5%A4%9F%E4%BD%BF%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%9C%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%EF%BC%8C%E9%81%BF%E5%85%8D%E4%BA%86%E9%87%8D%E5%90%AF%E5%BA%94%E7%94%A8%E6%88%96%E6%89%8B%E5%8A%A8%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E7%9A%84%E9%BA%BB%E7%83%A6%E3%80%82%20%E8%BF%99%E6%A0%B7%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%9B%B4%E7%81%B5%E6%B4%BB%E3%80%81%E9%AB%98%E6%95%88%E7%9A%84%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%92%8C%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E3%80%82">参考链接</a>、<a href="https://segmentfault.com/q/1010000021044375">参考链接</a></p>
<h2 id="JetCache的-Cached注解只有key支持获取方法参数中的值"><a class="header-anchor" href="#JetCache的-Cached注解只有key支持获取方法参数中的值"></a>JetCache的@Cached注解只有key支持获取方法参数中的值</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/15e55477da337a1b8a0b724a4704eb1f.png" alt="在这里插入图片描述"></p>
<h2 id="MySQL-union-all和order-by同时使用-排序会失效"><a class="header-anchor" href="#MySQL-union-all和order-by同时使用-排序会失效"></a>MySQL union all和order by同时使用[排序会失效]</h2>
<p><strong>例如：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> id,title,status,create_time,release_time </span><br><span class="line"><span class="keyword">from</span> t_notice</span><br><span class="line"><span class="keyword">where</span> status <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> create_time <span class="keyword">desc</span>) t1</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  <span class="keyword">from</span> (<span class="keyword">select</span> id,title,status,create_time,release_time </span><br><span class="line"><span class="keyword">from</span> t_notice</span><br><span class="line"><span class="keyword">where</span> status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> create_time <span class="keyword">desc</span>)t2</span><br></pre></td></tr></table></figure>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/5b6672af4bd916f3be9cb5515563dc0b.png" alt="在这里插入图片描述"></p>
<p><strong>可以看出union all合并的结果并不是两个子查询返回的结果。</strong></p>
<p><strong>即union all到顺序取决于数据库管理系统是如何存储和访问数据的。如果我们需要有序的结果集，可以使用ORDER BY语句对合并后的结果进行排序。</strong></p>
<p><a href="https://blog.csdn.net/zhouli2008/article/details/79780117">表合并(union)与排序(order by)不能共存的问题</a></p>
<h2 id="Windows-Nginx测试配置文件、启动、停止、重启命令"><a class="header-anchor" href="#Windows-Nginx测试配置文件、启动、停止、重启命令"></a>Windows Nginx测试配置文件、启动、停止、重启命令</h2>
<p>D:\Program Files\nginx-1.24.0&gt;nginx -t<br>
nginx: the configuration file D:\Program Files\nginx-1.24.0/conf/nginx.conf syntax is ok<br>
nginx: configuration file D:\Program Files\nginx-1.24.0/conf/nginx.conf test is successful</p>
<p>D:\Program Files\nginx-1.24.0&gt;nginx.exe</p>
<p>D:\Program Files\nginx-1.24.0&gt;nginx -s stop</p>
<p>D:\Program Files\nginx-1.24.0&gt;nginx -s reload</p>
<p>注意：配置文件需打开日志格式化log_format配置，否则会报错。</p>
<h2 id="查看Maven依赖的第三方jar的最低要求项目运行的-jar包实际编译jar-jdk版本"><a class="header-anchor" href="#查看Maven依赖的第三方jar的最低要求项目运行的-jar包实际编译jar-jdk版本"></a>查看Maven依赖的第三方jar的最低要求项目运行的(jar包实际编译jar)jdk版本</h2>
<p><strong>操作方法：</strong><br>
IDEA找到依赖的jar包 -&gt; 打开其中的任意一个class文件 -&gt; 查看最近要求项目运行的(jar包实际编译jar)jar<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/0b48a160a83f832dd7519f46f4a9d2fb.png" alt="在这里插入图片描述"></p>
<p><strong>Build-Jdk、Build-Jdk-Spec是该jar包推荐的jdk运行版本并不是实际编译的jar版本</strong></p>
<p><strong>升级项目jar包建议：<br>
1、在小版本中升级，尽量不要跨大版本<br>
2、一次只升级3-5个jar包，确保项目可以运行再升级其他的</strong><br>
<a href="https://blog.csdn.net/luzhensmart/article/details/86159821">参考链接</a>、<a href="https://blog.csdn.net/a364901254/article/details/102860142?spm=1001.2101.3001.6650.6&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-102860142-blog-86159821.235%5Ev38%5Epc_relevant_anti_t3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-102860142-blog-86159821.235%5Ev38%5Epc_relevant_anti_t3&amp;utm_relevant_index=10">参考链接</a></p>
<h2 id="导出excel接口需要controller方法返回值为void"><a class="header-anchor" href="#导出excel接口需要controller方法返回值为void"></a>导出excel接口需要controller方法返回值为void</h2>
<p>如果controller返回不是void可能会报下面的错误：<br>
<strong>No converter for XXX with preset Content-Type ‘application/vnd.ms-excel；charset=utf-8‘</strong></p>
<h2 id="MySQL字符串截取：左截取、右截取、按关键字截取"><a class="header-anchor" href="#MySQL字符串截取：左截取、右截取、按关键字截取"></a>MySQL字符串截取：左截取、右截取、按关键字截取</h2>
<p><strong>1、左截取LEFT(str,len)</strong><br>
str：被截取的字符串<br>
len：截取长度</p>
<p><strong>2、右截取RIGHT(str,len)</strong><br>
str：被截取的字符串<br>
len：截取长度</p>
<p><strong>3、截取特定长度的字符串SUBSTRING</strong><br>
语法：<br>
SUBSTRING(str,pos)<br>
str：被截取的字符串<br>
pos：从第几位开始截取</p>
<p><strong>示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 从字符串的倒数第<span class="number">3</span>个字符开始截取直至结束</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;TF-8220210412003-1&#x27;</span>, <span class="number">-3</span>)</span><br><span class="line"># 结果为：<span class="number">3</span><span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 从字符串的倒数第<span class="number">9</span>个字符开始，只截取<span class="number">3</span>个字符</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;TF-8220210412003-1&#x27;</span>, <span class="number">-9</span>, <span class="number">3</span>)</span><br><span class="line"># 结果为：<span class="number">041</span></span><br></pre></td></tr></table></figure>
<p><strong>4、按关键字进行截取：</strong><br>
语法: substring_index(str, delim, count)<br>
str：被截取的字符串<br>
delim：关键字<br>
count：关键字出现的次数</p>
<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 截取第二个&quot;-&quot;之前的所有的字符</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;集团公司-1109-1109&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"># 返回：集团公司<span class="number">-1109</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 截取倒数第二个&quot;-&quot;之前的所有的字符</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;集团公司-1109-1109&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="number">-2</span>);</span><br><span class="line"># 返回：<span class="number">1109</span><span class="number">-1109</span></span><br></pre></td></tr></table></figure>
<h2 id="xalan2-7-2升级2-7-3后运行报错"><a class="header-anchor" href="#xalan2-7-2升级2-7-3后运行报错"></a>xalan2.7.2升级2.7.3后运行报错</h2>
<p><strong>问题原因：</strong><br>
2.7.3版本没有依赖serializer。<br>
<strong>解决方法：</strong><br>
加入serializer依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xalan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xalan<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;xalan.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xalan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>serializer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;xalan.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.saoniuhuo.com/question/detail-2730072.html">参考链接</a></p>
<h2 id="spring-boot-starter-parent-与-spring-boot-dependencies的区别"><a class="header-anchor" href="#spring-boot-starter-parent-与-spring-boot-dependencies的区别"></a>spring-boot-starter-parent 与 spring-boot-dependencies的区别</h2>
<p>主要区别是：<br>
1、spring-boot-starter-parent继承自spring-boot-dependencies，即spring-boot-dependencies是spring-boot-starter-parent的父依赖<br>
2、spring-boot-starter-parent可以通过property覆盖内部的依赖，spring-boot-dependencies不可以 3、spring-boot-dependencies需要在dependencyManagement中使用 <scope>import</scope>的方式导入进来</p>
<p><a href="https://www.jianshu.com/p/0d97b5ec2aa7">参考链接</a></p>
<h2 id="IntelliJ-IDEA中的VM-Options、Program-Arguments和Environment-Variable的区别"><a class="header-anchor" href="#IntelliJ-IDEA中的VM-Options、Program-Arguments和Environment-Variable的区别"></a>IntelliJ IDEA中的VM Options、Program Arguments和Environment Variable的区别</h2>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">详细说明</th>
<th style="text-align:center">示例</th>
<th style="text-align:center">代码获取方式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">VM Options</td>
<td style="text-align:center">虚拟机参数，用于设置Java虚拟机的相关参数，例如内存大小、垃圾回收策略等。VM options需要以-D、-X或-XX开头，多个参数使用空格隔开。</td>
<td style="text-align:center">-Djasypt.encryptor.password=15d670c2d  -DmyTestConfig=测试</td>
<td style="text-align:center">1、<strong>SpringBoot可以读到</strong>，使用@Value注解获取。2、System.getProperty(“name”)方法获取</td>
</tr>
<tr>
<td style="text-align:center">Program Arguments</td>
<td style="text-align:center">项目参数，多个参数使用空格隔开。</td>
<td style="text-align:center">jasypt.encryptor.password=15d670c2d myTestConfig=测试</td>
<td style="text-align:center">main(String[] args)方法获取，<strong>SpringBoot读不到</strong></td>
</tr>
<tr>
<td style="text-align:center">Environment Variables</td>
<td style="text-align:center">环境变量，用于设置操作系统的环境变量，例如PATH、JAVA_HOME等。多个参数使用  分号; 隔开。</td>
<td style="text-align:center">jasypt.encryptor.password=15d670c2d;myTestConfig=测试</td>
<td style="text-align:center">1、<strong>SpringBoot可以读到</strong>，使用@Value注解获取。2、System.getenv(“name”)方法获取</td>
</tr>
</tbody>
</table>
<p><strong>其他说明：</strong></p>
<ul>
<li>SpringBoot获取配置文件优先级：<strong>配置文件配置 &lt; Environment Variables &lt; VM Options，即虚拟机配置参数优先级最高</strong></li>
<li>IDEA的Environment Variables相当于命令行 <strong>java --指定参数</strong>。</li>
<li>经测试，<strong>System.getenv()方法</strong>只可以获取环境变量的值，获取不到虚拟机参数的值。</li>
</ul>
<p><a href="https://blog.csdn.net/James_Hlh/article/details/118400591?spm=1018.2226.3001.9630.1&amp;extra%5Btitle%5D=Idea%E4%B8%AD%E7%9A%84VM%20Options%E3%80%81Program%20Arguments%E3%80%81Environment%20Variable%E5%85%A8%E8%A7%A3%E6%9E%90&amp;extra%5Butm_medium%5D=distribute.pc_search_result.none-task-cask-2~all~insert_cask~default-1-null.142%5Ev96%5Epc_search_result_base6&amp;extra%5Butm_source%5D=vip_chatgpt_common_search_pc_result">Idea中的VM Options、Program Arguments、Environment Variable全解析</a>、<a href="https://blog.csdn.net/yzlon/article/details/125351975?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Java%20-D%20%E5%92%8C--%E6%8C%87%E5%AE%9A%E5%8F%82%E6%95%B0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~sobaiduweb~default-2-125351975.nonecase&amp;spm=1018.2226.3001.4450">介绍Java -D和–命令行参数</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MySQL</tag>
        <tag>SpringBoot</tag>
        <tag>Nacos</tag>
        <tag>Elasticsearch</tag>
        <tag>JetCache</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(八)</title>
    <url>/2022/06/07/coding_notes_eight/</url>
    <content><![CDATA[<h2 id="mybatis的配置打印的是info级别日志-线上环境建议去除"><a class="header-anchor" href="#mybatis的配置打印的是info级别日志-线上环境建议去除"></a>mybatis的配置打印的是info级别日志  线上环境建议去除</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#打印sql</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="attr">call-setters-on-nulls:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="MySQL的GROUP-CONCAT给值加上单引号后再拼接"><a class="header-anchor" href="#MySQL的GROUP-CONCAT给值加上单引号后再拼接"></a>MySQL的GROUP_CONCAT给值加上单引号后再拼接</h2>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> GROUP_CONCAT(<span class="keyword">DISTINCT</span> <span class="string">&#x27;&#x27;&#x27;&#x27;</span>,待拼接字段,<span class="string">&#x27;&#x27;&#x27;&#x27;</span>) <span class="keyword">FROM</span> 表名</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> GROUP_CONCAT(<span class="keyword">DISTINCT</span> <span class="string">&#x27;&#x27;&#x27;&#x27;</span>,company,<span class="string">&#x27;&#x27;&#x27;&#x27;</span>)  <span class="keyword">from</span> t_awards_detail <span class="keyword">WHERE</span> company_type<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> t_awards_detail <span class="keyword">SET</span> company_type<span class="operator">=</span><span class="string">&#x27;3&#x27;</span></span><br></pre></td></tr></table></figure>
<p>返回数据：<br>
‘上海产业研究院’,‘上海公司’,‘上海曦智科技有限公司’</p>
<span id="more"></span>
<h2 id="Linux查询某个进程JVM占用情况"><a class="header-anchor" href="#Linux查询某个进程JVM占用情况"></a>Linux查询某个进程JVM占用情况</h2>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jstat -gc 进程号  刷新时间</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 查询进程6126的JVM占用情况 每隔3秒刷新一次</span><br><span class="line">jstat -gc 6126 3000</span><br></pre></td></tr></table></figure>
<h2 id="Linux查询某个进程CPU、内存占用情况"><a class="header-anchor" href="#Linux查询某个进程CPU、内存占用情况"></a>Linux查询某个进程CPU、内存占用情况</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top -H -p 进程<span class="built_in">id</span></span><br></pre></td></tr></table></figure>
<h2 id="MySQL的concat-、concat-ws-和group-concat-的用法"><a class="header-anchor" href="#MySQL的concat-、concat-ws-和group-concat-的用法"></a>MySQL的concat()、concat_ws()和group_concat()的用法</h2>
<p>group_concat()对多字段拼接操作示例代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">group_concat(column1,<span class="string">&#x27;拼接字符串&#x27;</span>column2 SEPARATOR <span class="string">&#x27;分割字符串&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>例如，筛选不同状态的数量、部门和用户拼接数据sql如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> STATUS,<span class="built_in">COUNT</span>(id),GROUP_CONCAT(reply_department,<span class="string">&#x27;-&#x27;</span>,reply_user SEPARATOR <span class="string">&#x27;、&#x27;</span>) </span><br><span class="line"><span class="keyword">FROM</span> t_sub_order <span class="keyword">WHERE</span> main_order_id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> status</span><br></pre></td></tr></table></figure>
<p>查询结果如下所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/81f5d136de30b1ef0ba83a9210548da0.png#pic_center" alt="在这里插入图片描述"><br>
<a href="https://baijiahao.baidu.com/s?id=1595349117525189591&amp;wfr=spider&amp;for=pc">参考链接</a></p>
<h2 id="Java导出大批量数据的优化过程"><a class="header-anchor" href="#Java导出大批量数据的优化过程"></a>Java导出大批量数据的优化过程</h2>
<ul>
<li>使用EasyExcel生成导出文件流</li>
<li>异步把文件流上传到服务器，成功后更新文件上传状态</li>
<li>用户去页面下载<br>
10W+ 的数据从生成Excel文件流到上传只要8秒，原来约要8分钟。<br>
<a href="https://www.cnblogs.com/wzh2010/p/13528320.html">参考链接</a></li>
</ul>
<h2 id="request-getParameter-“ticket”-方法"><a class="header-anchor" href="#request-getParameter-“ticket”-方法"></a>request.getParameter(“ticket”)方法</h2>
<ul>
<li>接口传参为form表单格式提交，即Content-Type为application/x-www-form-urlencoded类型</li>
<li>/web/auth/v1/login/getUserRight?ticket=1234567。<br>
只有这两种格式可以取到参数,取不到JSON格式的参数。</li>
</ul>
<h2 id="MySQL按中文拼音字母排序"><a class="header-anchor" href="#MySQL按中文拼音字母排序"></a>MySQL按中文拼音字母排序</h2>
<p>如果表字段使用的GBK编码的话，我们可以直接order by value ，因为GBK本身就是按照拼音字母排序ABCDEFGHIGK…，当第一位相同的时候会比较第二位，以此类推。 如果表字段使用的UTF-8编码的话，通常我们都会的编码，这样我们可以使用MySQL的convert方法开转换gbk进行排序。<br>
举例:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> TEST <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">CONVERT</span>(<span class="keyword">value</span> <span class="keyword">USING</span> GBK) <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<h2 id="自定义排序"><a class="header-anchor" href="#自定义排序"></a>自定义排序</h2>
<p>自定义排序是根据自己想要的特定字符串（数字）顺序进行排序。<br>
主要是使用函数 FIELD(str,str1,str2,str3,…)<br>
MySQL的自定义排序，str与str1、str2、str3…进行比较，并按照str1,str2,str3…的顺序输出，如果遇到str为null或者不存在str1,str2,str3…中的情况的则序列为0，<br>
例1:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> TEST <span class="keyword">ORDER</span> <span class="keyword">BY</span> FIELD(<span class="keyword">value</span>,<span class="string">&#x27;test1&#x27;</span>,<span class="string">&#x27;test2&#x27;</span>,<span class="string">&#x27;test3&#x27;</span>,<span class="string">&#x27;test4&#x27;</span>) <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<p>例2:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> TEST <span class="keyword">WHERE</span> <span class="keyword">VALUE</span> <span class="keyword">IN</span>(<span class="string">&#x27;test1&#x27;</span>,<span class="string">&#x27;test2&#x27;</span>,<span class="string">&#x27;test3&#x27;</span>,<span class="string">&#x27;test4&#x27;</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> FIELD(<span class="keyword">value</span>,<span class="string">&#x27;test1&#x27;</span>,<span class="string">&#x27;test2&#x27;</span>,<span class="string">&#x27;test3&#x27;</span>,<span class="string">&#x27;test4&#x27;</span>) <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span> </span><br></pre></td></tr></table></figure>
<h2 id="自定义排序-详细"><a class="header-anchor" href="#自定义排序-详细"></a>自定义排序(详细)</h2>
<ul>
<li>case when 转换实现自定义排序</li>
<li>mysql排序函数filed 实现自定义排序（推荐）</li>
<li>函数locate 实现自定义排序</li>
<li>函数lnstr 实现自定义排序</li>
<li>利用数据字典实现自定义排序</li>
</ul>
<p><a href="https://blog.csdn.net/quader/article/details/122761023?spm=1001.2101.3001.6650.8&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_antiscanv2&amp;utm_relevant_index=12">参考链接</a></p>
<h2 id="Linux将一个服务器上的文件或者文件夹复制到另一个服务器上"><a class="header-anchor" href="#Linux将一个服务器上的文件或者文件夹复制到另一个服务器上"></a>Linux将一个服务器上的文件或者文件夹复制到另一个服务器上</h2>
<h3 id="scp命令"><a class="header-anchor" href="#scp命令"></a>scp命令</h3>
<p><strong>命令语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 从本地主机传输文件到远程主机</span><br><span class="line">scp [本地文件路径] [用户名]@[远程主机IP地址]:[目标路径]</span><br><span class="line"></span><br><span class="line">// 从远程主机传输文件到本地主机</span><br><span class="line">scp [用户名]@[远程主机IP地址]:[远程文件路径] [本地目标路径]</span><br><span class="line"></span><br><span class="line">// 传输整个目录</span><br><span class="line">scp -r [本地目录路径] [用户名]@[远程主机IP地址]:[目标路径]</span><br><span class="line"></span><br><span class="line">// 指定端口</span><br><span class="line">scp -P [端口号] [本地文件路径] [用户名]@[远程主机IP地址]:[目标路径]</span><br></pre></td></tr></table></figure>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[award_dev@localhost ~]$ scp -r /opt/aspire/product/award_dev/testMove award_dev@10.12.7.182:/home/award_dev/</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The authenticity of host <span class="string">&#x27;10.12.7.182 (10.12.7.182)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ED25519 key fingerprint is SHA256:2wVRM0wwyLswkz2qgc/osZnRRvMlLRYrOSrHqTUVqVA.</span></span><br><span class="line"><span class="string">This host key is known by the following other names/addresses:</span></span><br><span class="line"><span class="string">    ~/.ssh/known_hosts:1: 10.12.7.124</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>10.12.7.182<span class="string">&#x27; (ED25519) to the list of known hosts.</span></span><br><span class="line"><span class="string">award_dev@10.12.7.182&#x27;</span>s password:</span><br></pre></td></tr></table></figure>
<p>密码输入成功就可以迁移过去，不过存在中文文件名的会有问题(文件名改为了数字且内容为空)。</p>
<p>解决中文文件名迁移问题：<br>
1、现在本地机器给待迁移文件夹打压缩包<br>
命令： tar -zcvf filename.tar.gz dir/file<br>
2、scp命令迁移到新服务器<br>
3、在新服务器中解压<br>
命令： tar -zxvf tarname.tar.gz -C 指定解压后文件存放地址<br>
<a href="https://blog.csdn.net/AnChenliang_1002/article/details/131466784">参考链接1</a>、<a href="https://www.cnblogs.com/shierlou-123/p/11211948.html">参考链接2</a></p>
<p><strong>如果远程服务器是sftp服务器，用scp命令可能会不成功，这时候需要使用sftp命令传输。</strong></p>
<h3 id="sftp命令"><a class="header-anchor" href="#sftp命令"></a>sftp命令</h3>
<p><strong>命令语法:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp -oPort=[端口号] [用户名]@[ip地址]</span><br></pre></td></tr></table></figure>
<p><strong>使用示例:</strong><br>
<strong>先进入本机待传文件的目录  -&gt;  用命令连接上远程sftp服务器  -&gt;  进入远程待接收文件的目录 -&gt; put 文件名</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[award_server@localhost jlwz-innovation]$ sftp -oPort=55521 package@10.217.247.13</span><br><span class="line">Authorized only. All activity will be monitored and reported</span><br><span class="line">package@10.217.247.13<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Connected to 10.217.247.13.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sftp&gt; cd /upload/jlwz/testsftp/</span></span><br><span class="line"><span class="string">sftp&gt; put reward-innovation-1.0.0.1-SNAPSHOT.jar</span></span><br><span class="line"><span class="string">Uploading reward-innovation-1.0.0.1-SNAPSHOT.jar to /upload/jlwz/testsftp/reward-innovation-1.0.0.1                       -SNAPSHOT.jar</span></span><br><span class="line"><span class="string">reward-innovation-1.0.0.1-SNAPSHOT.jar                                                  100%  221MB   1.8MB/s   02:02    s</span></span><br><span class="line"><span class="string">sftp&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="spring占位符打印日志"><a class="header-anchor" href="#spring占位符打印日志"></a>spring占位符打印日志</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">zero</span> <span class="operator">=</span> <span class="number">2</span>/<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">	log.error(<span class="string">&quot;测试占位符打印日志,&#123;&#125;,&#123;&#125;&quot;</span>,<span class="literal">null</span>,b,e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1、前面的参数必须和占位符一一对应。<br>
2、最后面参数是异常信息可以打印，非异常信息不会打印。<br>
3、占位符的值可以为null。</p>
<h2 id="Linux复制文件夹下面的所有文件到另一个文件夹"><a class="header-anchor" href="#Linux复制文件夹下面的所有文件到另一个文件夹"></a>Linux复制文件夹下面的所有文件到另一个文件夹</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r 当前路径/* 目标路径</span><br></pre></td></tr></table></figure>
<p>注意：目标路径必须先存在。<br>
例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r /home/award_dev/nginx-1.20.2/conf/* /usr/local/nginx/conf</span><br></pre></td></tr></table></figure>
<h2 id="Nginx指定安装位置"><a class="header-anchor" href="#Nginx指定安装位置"></a>Nginx指定安装位置</h2>
<p>默认位置是/usr/local/nginx，需要进入nginx-1.20.2目录后执行下面的命令<br>
./configure --prefix=/home/award_dev/nginx<br>
<a href="https://blog.csdn.net/sinat_38783046/article/details/120790092">参考链接</a></p>
<h2 id="Nginx安装步骤"><a class="header-anchor" href="#Nginx安装步骤"></a>Nginx安装步骤</h2>
<p><a href="https://www.cnblogs.com/cainiaoyige1/p/15785911.html">参考链接</a></p>
<h2 id="Linux查看端口"><a class="header-anchor" href="#Linux查看端口"></a>Linux查看端口</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 8888</span><br></pre></td></tr></table></figure>
<h2 id="SpringBoot-Vue-js前后端分离实现大文件分块上传"><a class="header-anchor" href="#SpringBoot-Vue-js前后端分离实现大文件分块上传"></a>SpringBoot+Vue.js前后端分离实现大文件分块上传</h2>
<p><a href="https://www.cnblogs.com/xiahj/p/15950975.html#%E8%83%BD%E4%B8%8D%E8%83%BD%E7%BB%99%E4%B8%8B%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81">参考链接</a></p>
<h2 id="Java-8-Predicate"><a class="header-anchor" href="#Java-8-Predicate"></a>Java 8 Predicate</h2>
<p><a href="https://www.jb51.net/article/211959.htm">参考链接</a></p>
<h2 id="SpringCloud读取配置中心配置"><a class="header-anchor" href="#SpringCloud读取配置中心配置"></a>SpringCloud读取配置中心配置</h2>
<p>需要引入下面的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bootstrap依赖，加载bootstrap.yml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>客户端添加spring-cloud-starter-config依赖后 会默认最高优先级读取(即使bootstrap.yml不配置)localhost:8888链接下的application.yml配置。<br>
具体可以通过http://10.12.7.182:8888/应用名(对应bootstrap引导文件中的config.name配置)/profile 访问查看读取的配置  例如：http://10.12.7.182:8888/webbas32-gateway-v1/dev<br>
或者直接访问文件 http://10.12.7.182:8888/webbas32-application-gateway-v1-dev.yml<br>
<strong>spring-cloud-starter-bootstrap依赖非必须</strong><br>
<a href="https://www.cnblogs.com/fengzheng/p/11242128.html">参考链接</a></p>
<h2 id="SpringBoot的jasypt加解密"><a class="header-anchor" href="#SpringBoot的jasypt加解密"></a>SpringBoot的jasypt加解密</h2>
<p>StringEncryptor类中有加解密方法<br>
配置文件配置ENC(“密文”)后，@Value注解可以自动解密<br>
<a href="https://www.cnblogs.com/mihutao/p/16174167.html">参考链接1</a>、<a href="https://blog.csdn.net/qq_42320804/article/details/122940896">参考链接2</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>MySQL</tag>
        <tag>SpringBoot</tag>
        <tag>MyBatis</tag>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(九)</title>
    <url>/2022/09/03/coding_notes_nine/</url>
    <content><![CDATA[<p>作为码农平时搜集一些小知识点个人认为是个不错的习惯，书上说</p>
<blockquote>
<p>好记性不如烂笔头</p>
</blockquote>
<p>我想即使是以前忽略或者新get的很简单的东西，自己动手记下来不管如何印象也会更深刻。</p>
<span id="more"></span>
<h2 id="ZipOutputStream打包文件成一个zip，自定义写入文件夹和文件"><a class="header-anchor" href="#ZipOutputStream打包文件成一个zip，自定义写入文件夹和文件"></a>ZipOutputStream打包文件成一个zip，自定义写入文件夹和文件</h2>
<p>Java实现将文件(包括压缩包)、文件夹压缩成zip，并且压缩包里面保留文件夹结构<br>
<a href="https://www.cnblogs.com/zeng1994/p/7862288.html">参考链接</a>、<a href="https://www.bilibili.com/video/BV1wK4y1Z7h9?spm_id_from=333.337.search-card.all.click">参考链接</a> 、<a href="https://blog.csdn.net/wolfies/article/details/79523181">参考链接</a></p>
<h2 id="Get请求且用-号形式传参，那么list参数必须加-RequestParam主键否则会报错"><a class="header-anchor" href="#Get请求且用-号形式传参，那么list参数必须加-RequestParam主键否则会报错"></a>Get请求且用?号形式传参，那么list参数必须加@RequestParam主键否则会报错</h2>
<p><a href="https://blog.csdn.net/weixin_43404791/article/details/105664692?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-105664692-blog-88707785.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-105664692-blog-88707785.pc_relevant_default&amp;utm_relevant_index=1">参考链接</a></p>
<h2 id="Java7文件复制方法"><a class="header-anchor" href="#Java7文件复制方法"></a>Java7文件复制方法</h2>
<p>Java源码中有Files.copy(source, target, options)方法，options可以不传值。<br>
例如：D:/a.txt文件要复制到E:/xx/b.txt中，先要得到得到两文件的path。<br>
Ps：这里要求目标文件b.txt文件不存在(存在会报错)，而且目标文件的路径必须要有，源代码方法中没有创建dir的方法。<br>
参考代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//要确认拷贝的路径存在</span></span><br><span class="line"><span class="type">File</span> <span class="variable">destDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:/xx&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!(destDir.exists()&amp;&amp; destDir.isDirectory())) &#123;</span><br><span class="line">	destDir.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">File</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:/xx/b.txt&quot;</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	Files.copy(source.toPath(), dest.toPath());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">	 e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="linux查看进程占用端口的方法"><a class="header-anchor" href="#linux查看进程占用端口的方法"></a>linux查看进程占用端口的方法</h2>
<p>方法一：<br>
1、netstat -lntp<br>
找到端口对应的应用的ID<br>
2、ps -ef |grep 进程ID<br>
方法二：<br>
lsof -i:端口号<br>
输出的列表的pid就是进程号</p>
<h2 id="在Java的switch中使用枚举判断"><a class="header-anchor" href="#在Java的switch中使用枚举判断"></a>在Java的switch中使用枚举判断</h2>
<p>在Java的switch中使用枚举的code或者name会报错，必须使用枚举类。<br>
需要在枚举类中加入一个根据编码获取枚举类的方法。<br>
参考代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 审核状态枚举（预审页面）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chuenhung</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">PreApprovalStatusEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">	TO_APPROVAL(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;待审核&quot;</span>),</span><br><span class="line">	REJECT(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;已退回&quot;</span>),</span><br><span class="line">	AGREE(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;审核通过&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">	PreApprovalStatusEnum(String code, String name) &#123;</span><br><span class="line">		<span class="built_in">this</span>.code = code;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> code;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据编码获取枚举</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span>: code</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> PreApprovalStatusEnum</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@author</span> Chuenhung</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@date</span> 2022/6/13</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> PreApprovalStatusEnum <span class="title function_">getEnumByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (StringUtil.isNotEmpty(code)) &#123;</span><br><span class="line">			<span class="keyword">for</span> (PreApprovalStatusEnum enu : PreApprovalStatusEnum.values()) &#123;</span><br><span class="line">				<span class="keyword">if</span> (code.equals(enu.getCode())) &#123;</span><br><span class="line">					<span class="keyword">return</span> enu;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch case示例代码</span></span><br><span class="line"><span class="keyword">switch</span> (PreApprovalStatusEnum.getEnumByCode(status))&#123;</span><br><span class="line">		<span class="keyword">case</span> TO_APPROVAL:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> REJECT:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> AGREE:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>Ps: <strong>case后面的枚举不能带类名</strong>，否则会<strong>报</strong>&quot;<strong>An enum switch case label must be the unqualified name of an enumeration constant</strong>&quot;<strong>错误</strong>。<br>
<a href="https://blog.csdn.net/weixin_44712870/article/details/115773612">参考链接</a></p>
<h2 id="MySQL创建的临时表会全表扫描，很影响性能"><a class="header-anchor" href="#MySQL创建的临时表会全表扫描，很影响性能"></a>MySQL创建的临时表会全表扫描，很影响性能</h2>
<h2 id="Nginx配置学习"><a class="header-anchor" href="#Nginx配置学习"></a>Nginx配置学习</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">location /portal &#123;</span><br><span class="line">	proxy_pass http:<span class="comment">//10.12.7.182:7001;</span></span><br><span class="line">	proxy_set_header Host $http_host;</span><br><span class="line">	proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">	proxy_set_header Cookie $http_cookie;</span><br><span class="line">	client_max_body_size 1000m;</span><br><span class="line">	fastcgi_buffers <span class="number">8</span> 256k;</span><br><span class="line">	fastcgi_buffer_size 64k;</span><br><span class="line">	gzip on;</span><br><span class="line">	gzip_min_length 50k;</span><br><span class="line">	gzip_comp_level <span class="number">5</span>;</span><br><span class="line">	gzip_vary on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该配置(portal、proxy_pass后面无/)举例：<br>
原始请求链接：http://10.12.7.182:5001/portal/carousel/getList<br>
实际请求链接：http://10.12.7.182:7001/portal/carousel/getList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">location /portal/ &#123;</span><br><span class="line">	proxy_pass http:<span class="comment">//10.12.7.182:7001/;</span></span><br><span class="line">	proxy_set_header Host $http_host;</span><br><span class="line">	proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">	proxy_set_header Cookie $http_cookie;</span><br><span class="line">	client_max_body_size 1000m;</span><br><span class="line">	fastcgi_buffers <span class="number">8</span> 256k;</span><br><span class="line">	fastcgi_buffer_size 64k;</span><br><span class="line">	gzip on;</span><br><span class="line">	gzip_min_length 50k;</span><br><span class="line">	gzip_comp_level <span class="number">5</span>;</span><br><span class="line">	gzip_vary on;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>该配置(portal、proxy_pass后面有/)举例：<br>
原始请求链接：http://10.12.7.182:5001/portal/carousel/getList<br>
实际请求链接：http://10.12.7.182:7001/carousel/getList</p>
<h2 id="Nginx配置返回文本或者JSON"><a class="header-anchor" href="#Nginx配置返回文本或者JSON"></a>Nginx配置返回文本或者JSON</h2>
<p>参考代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">location /proxy_reward/web/login/findemployeebyphone &#123;</span><br><span class="line">    default_type application/json;</span><br><span class="line">	add_header Content-Type <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>;</span><br><span class="line">    add_header Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    add_header Access-Control-Allow-Origin *;</span><br><span class="line">    add_header Cache-Control <span class="keyword">public</span>;</span><br><span class="line">    add_header Cache-Control max-age=<span class="number">300</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span> <span class="string">&#x27;&#123;&quot;status&quot;:&quot;200&quot;,&quot;data&quot;:&#123;&quot;companyId&quot;:&quot;1781&quot;,&quot;name&quot;:&quot;张三&quot;,&quot;mobile&quot;:&quot;12345678901&quot;,&quot;email&quot;:&quot;123@163.com&quot;&#125;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://t.zoukankan.com/freeweb-p-5944894.html">参考链接</a></p>
<h2 id="Nginx负载均衡配置"><a class="header-anchor" href="#Nginx负载均衡配置"></a>Nginx负载均衡配置</h2>
<p>参考代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">upstream test&#123;</span><br><span class="line">	server <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>;</span><br><span class="line">	server <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">	listen <span class="number">80</span>;</span><br><span class="line">	server_name test.com;</span><br><span class="line">	charset utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">location /nacos &#123;</span><br><span class="line">	proxy_pass http:<span class="comment">//test/;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/liang715200/p/15203446.html">参考链接</a></p>
<h2 id="validation相关注解速查"><a class="header-anchor" href="#validation相关注解速查"></a>validation相关注解速查</h2>
<p><a href="https://www.cnblogs.com/kiramie/p/15123474.html">参考链接</a></p>
<h2 id="Git修改-gitignore文件修改后刷新"><a class="header-anchor" href="#Git修改-gitignore文件修改后刷新"></a>Git修改.gitignore文件修改后刷新</h2>
<ul>
<li>
<p>刷新命令</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached .</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>提交代码命令</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;update .gitignore&quot;</span></span><br><span class="line">git push origin</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="ApplicationContext发布事件和处理事件示例代码"><a class="header-anchor" href="#ApplicationContext发布事件和处理事件示例代码"></a>ApplicationContext发布事件和处理事件示例代码</h2>
<p>要发布的事件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformDocEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TransformDocEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发布事件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">applicationContext.publishEvent(<span class="keyword">new</span> <span class="title class_">TransformDocEvent</span>(doc));</span><br></pre></td></tr></table></figure>
<p>处理事件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformDocListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async(&quot;MyThreadPool&quot;)</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(TransformDocEvent event)</span> &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="FastStone-Capture有两种滚动截屏方式"><a class="header-anchor" href="#FastStone-Capture有两种滚动截屏方式"></a>FastStone Capture有两种滚动截屏方式</h2>
<p>1、按住CTRL键选取截取范围，再点击滚动条下面的向下箭头<br>
2、点击鼠标左键即可自动捕捉窗口全部页面(适用于页面禁用滚动条的时候)</p>
<h2 id="RestTemplate学习"><a class="header-anchor" href="#RestTemplate学习"></a>RestTemplate学习</h2>
<p>1、RestTemplate是Spring提供的用于访问Rest服务的客户端，RestTemplate提供了多种便捷访问远程Http服务的方法，能够大大提高客户端的编写效率。<br>
2、调用RestTemplate的默认构造函数，RestTemplate对象在底层通过使用java.net包下的实现创建HTTP 请求，可以通过使用ClientHttpRequestFactory指定不同的HTTP请求方式。<br>
3、ClientHttpRequestFactory接口主要提供了两种实现方式</p>
<ul>
<li>一种是SimpleClientHttpRequestFactory，使用J2SE提供的方式（既java.net包提供的方式）创建底层的Http请求连接。</li>
<li>另一种方式是使用HttpComponentsClientHttpRequestFactory方式，底层使用HttpClient访问远程的Http服务，使用HttpClient可以配置连接池和证书等信息。</li>
</ul>
<p>RestTemplate的getForObject完成get请求、postForObject完成post请求、put对应的完成put请求、delete完成delete请求；还有execute可以执行任何请求的方法，需要你设置RequestMethod来指定当前请求类型。</p>
<p><a href="https://www.shuzhiduo.com/A/A7zgYg6P54/">参考链接</a></p>
<h2 id="使用RestTemplate发送post请求"><a class="header-anchor" href="#使用RestTemplate发送post请求"></a>使用RestTemplate发送post请求</h2>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RestTemplate也可以通过@Autowired注入到Spring容器。 </span></span><br><span class="line"><span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line"><span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line"><span class="type">MediaType</span> <span class="variable">type</span> <span class="operator">=</span> MediaType.parseMediaType(<span class="string">&quot;application/json; charset=UTF-8&quot;</span>);</span><br><span class="line">headers.setContentType(type);</span><br><span class="line">headers.add(<span class="string">&quot;Accept&quot;</span>, MediaType.APPLICATION_JSON.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求参数</span></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;typeId&quot;</span>,<span class="number">9</span>);</span><br><span class="line">map.put(<span class="string">&quot;dontQueryEmpty&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(map);</span><br><span class="line">HttpEntity&lt;String&gt; formEntity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;String&gt;(jsonObj.toString(), headers);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://10.12.7.124:18081/manage/awards/querysecondclasslist&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.postForObject(url, formEntity, String.class);</span><br></pre></td></tr></table></figure>
<p>如果直接使用在postForObject中把对象传入很容易出现no suitable HttpMessageConverter found for request type的错误，建议直接先转成字符串，见jsonObj.otString()。<br>
<strong>使用RestTemplate调用接口确实非常优雅，几行代码就解决了。</strong></p>
<h2 id="Swagger常用注解"><a class="header-anchor" href="#Swagger常用注解"></a>Swagger常用注解</h2>
<p><a href="https://blog.51cto.com/u_15463439/5239486?abTest=51cto">参考链接</a></p>
<h2 id="使用IDEA合并远程其他分支到本地"><a class="header-anchor" href="#使用IDEA合并远程其他分支到本地"></a>使用IDEA合并远程其他分支到本地</h2>
<ul>
<li>鼠标放到项目目录上右击</li>
<li>点击Git</li>
<li>点击Repository</li>
<li>点击pull</li>
<li>在Branchs to merge中选择远程分支</li>
</ul>
<p>建议合并前把本地分支的代码先提交到远程仓库，方便解决冲突</p>
<h2 id="Transactional与-Async同时使用事务会失效"><a class="header-anchor" href="#Transactional与-Async同时使用事务会失效"></a>@Transactional与@Async同时使用事务会失效</h2>
<p>@Transactional与@Async同时使用事务会失效，在Transactional注解中的多线程也会导致事物失效<br>
<a href="https://blog.csdn.net/qq_27376871/article/details/114672176">参考链接</a></p>
<p><strong>事务失效问题解决：</strong><br>
方法一：@Async与@Transactional不使用在同一个方法上<br>
方法二：手动提交事务及回滚事务<br>
<a href="https://blog.csdn.net/weixin_38405253/article/details/124811395?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-124811395-blog-124446118.pc_relevant_multi_platform_featuressortv2dupreplace&amp;spm=1001.2101.3001.4242.3&amp;utm_relevant_index=7">参考链接</a></p>
<p>方法三：将需要事务的方法放到另一个类中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        b.dd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dd</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/a_hasaigei/article/details/124446118?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-124446118-blog-114672176.pc_relevant_aa&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-124446118-blog-114672176.pc_relevant_aa&amp;utm_relevant_index=1">参考链接</a></p>
<p><strong>经过测试，直接在service实现类的方法同时加两个注解，事务和多线程都不会失效。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">achievementRepetitionService.checkAchievementRepetition();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Async(&quot;RepetitionThreadPool&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkAchievementRepetition</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>经过测试，service实现类的非异步方法调用异步方法，多线程失效，事务不会失效。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkAchievementRepetition</span><span class="params">()</span> &#123;</span><br><span class="line">	insert();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Async(&quot;RepetitionThreadPool&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="几种常见限流算法-方式"><a class="header-anchor" href="#几种常见限流算法-方式"></a>几种常见限流算法(方式)</h2>
<p><strong>限流算法</strong></p>
<ul>
<li>固定窗口算法<br>
固定窗口算法又叫计数器算法，是一种简单方便的限流算法。主要通过一个支持原子操作的计数器来累计 1 秒内的请求次数，当 1 秒内计数达到限流阈值时触发拒绝策略。每过 1 秒，计数器重置为 0 开始重新计数。</li>
<li>滑动窗口算法<br>
固定窗口算法假如 QPS为2，但是当遇到时间窗口的临界突变时，如 1s 中的后 500 ms 和第 2s 的前 500ms 时，虽然是加起来是 1s 时间，却可以被请求 4 次。<br>
滑动窗口算法是对固定窗口算法的改进，可以每 500ms 滑动一次窗口，可以发现窗口滑动的间隔越短，时间窗口的临界突变问题发生的概率也就越小，不过只要有时间窗口的存在，还是有可能发生时间窗口的临界突变问题。</li>
<li>滑动日志算法<br>
滑动日志算法是实现限流的另一种方法，这种方法比较简单。基本逻辑就是记录下所有的请求时间点，新请求到来时先判断最近指定时间范围内的请求数量是否超过指定阈值，由此来确定是否达到限流，这种方式没有了时间窗口突变的问题，限流比较准确，但是因为要记录下每次请求的时间点，所以占用的内存较多。</li>
<li>漏桶算法<br>
漏桶算法中的漏桶是一个形象的比喻，这里可以用生产者消费者模式进行说明，请求是一个生产者，每一个请求都如一滴水，请求到来后放到一个队列（漏桶）中，而桶底有一个孔，不断的漏出水滴，就如消费者不断的在消费队列中的内容，消费的速率（漏出的速度）等于限流阈值。即假如 QPS 为 2，则每 1s / 2= 500ms 消费一次。漏桶的桶有大小，就如队列的容量，当请求堆积超过指定容量时，会触发拒绝策略。</li>
<li>令牌桶算法<br>
令牌桶算法同样是实现限流是一种常见的思路，最为常用的 Google 的 Java 开发工具包 Guava 中的限流工具类 RateLimiter 就是令牌桶的一个实现。令牌桶的实现思路类似于生产者和消费之间的关系。<br>
系统服务作为生产者，按照指定频率向桶（容器）中添加令牌，如 QPS 为 2，每 500ms 向桶中添加一个令牌，如果桶中令牌数量达到阈值，则不再添加。<br>
请求执行作为消费者，每个请求都需要去桶中拿取一个令牌，取到令牌则继续执行；如果桶中无令牌可取，就触发拒绝策略，可以是超时等待，也可以是直接拒绝本次请求，由此达到限流目的。</li>
<li>Redis分布式限流<br>
Redis 是一个开源的内存数据库，可以用来作为数据库、缓存、消息中间件等。Redis 是单线程的，IO多路复用，又在内存中操作，所以速度极快，得益于 Redis 的各种特性，所以使用 Redis 实现一个限流工具是十分方便的。</li>
</ul>
<p><strong>总结</strong></p>
<ul>
<li>窗口算法实现简单，逻辑清晰，可以很直观的得到当前的 QPS 情况，但是会有时间窗口的临界突变问题，而且不像桶一样有队列可以缓冲。</li>
<li>桶算法虽然稍微复杂，不好统计 QPS 情况，但是桶算法也有优势所在。<br>
漏桶模式消费速率恒定，可以很好的保护自身系统，可以对流量进行整形，但是面对突发流量不能快速响应。<br>
令牌桶模式可以面对突发流量，但是启动时会有缓慢加速的过程，不过常见的开源工具中已经对此优化。</li>
</ul>
<p><a href="https://www.wdbyte.com/java/rate-limiter.html">参考链接</a></p>
<h2 id="SpringBoot使用Redis教程-共五步"><a class="header-anchor" href="#SpringBoot使用Redis教程-共五步"></a>SpringBoot使用Redis教程(共五步)</h2>
<p><a href="https://www.cnblogs.com/cococici/p/16413565.html">参考链接</a></p>
<h2 id="用RestTemplate调用对方接口一直报400-Bad-Request，但是用PostMan没问题"><a class="header-anchor" href="#用RestTemplate调用对方接口一直报400-Bad-Request，但是用PostMan没问题"></a>用RestTemplate调用对方接口一直报400 Bad Request，但是用PostMan没问题</h2>
<p>MediaType type = MediaType.parseMediaType(“application/json; charset=UTF-8”);<br>
<strong>把charset=utf-8去掉就可以了，对方接口解析请求头有问题</strong></p>
<h2 id="EasyExcel大数据导入导出"><a class="header-anchor" href="#EasyExcel大数据导入导出"></a>EasyExcel大数据导入导出</h2>
<p>思路：<strong>分批次查询(分页查询)+循环写入Excel，及时清理查询的list，防止OOM</strong><br>
1、查询出此次要导出的数据量count，根据count和自定义的每次查询数量size（我是10000）来计算出一共要查询n次。（防止一次查询数据量过大导致OOM）<br>
2、循环n次，每次查询size大小的数据。然后导出到同一个sheet的excel中。注意，每次循环完clear掉list数据，防止占用内存<br>
3、循环中会有一个问题，就是你在循环过程中别人新插入了数据怎么办，我的做法是最开始查询count的时候根据创建时间排序，获取最新的创建时间，然后后面的循环都使用这个创建时间作为搜索条件。这样就只会查询到和count相符合的数据了。<br>
注意：导出数据超过6w条的时候excel格式要用xlsx。<br>
<a href="https://blog.csdn.net/Bonie_juzi/article/details/116046721">参考链接</a>、<a href="https://www.jianshu.com/p/25ce1866e6b1">参考链接(含代码)</a>、<a href="https://blog.csdn.net/vnjohn/article/details/125980327?spm=1001.2014.3001.5502">参考链接</a></p>
<h2 id="EasyExcel大数据导入"><a class="header-anchor" href="#EasyExcel大数据导入"></a>EasyExcel大数据导入</h2>
<p>思路：<strong>分批次写入数据库，及时清理读取的list，防止OOM</strong><br>
<a href="https://www.jianshu.com/p/25ce1866e6b1">参考链接(含代码)</a></p>
<h2 id="Windows查看CPU核数和线程数"><a class="header-anchor" href="#Windows查看CPU核数和线程数"></a>Windows查看CPU核数和线程数</h2>
<p><strong>方法一：</strong><br>
第一步：开始菜单-&gt;运行-&gt;cmd-&gt;输入 wmic<br>
第二步(方法一)：<br>
分别输入下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wmic:root\cli&gt;cpu get NumberOfCores</span><br><span class="line">NumberOfCores</span><br><span class="line">6</span><br><span class="line">wmic:root\cli&gt;cpu get NumberOfLogicalProcessors</span><br><span class="line">NumberOfLogicalProcessors</span><br><span class="line">12</span><br></pre></td></tr></table></figure>
<p>第二步(方法二)</p>
<ul>
<li>输入 cpu get *</li>
<li>底部滑动条往右拖</li>
<li>NumberOfCores为核数 NumberOfLogicalProcessors为逻辑cpu数(线程数)</li>
</ul>
<p><strong>方法二：</strong><br>
在任务管理器中的性能页面中查看，如下图所示：<br>
<img src="https://img-blog.csdnimg.cn/2b659cacdaea47dabdbe6b3b376a89ac.png#pic_center" alt="在这里插入图片描述"><br>
<strong>方法三：</strong><br>
运行dxdiag命令</p>
<h2 id="Linux查看物理CPU个数、CPU核心数、逻辑CPU的个数-线程数-、型号、内核信息"><a class="header-anchor" href="#Linux查看物理CPU个数、CPU核心数、逻辑CPU的个数-线程数-、型号、内核信息"></a>Linux查看物理CPU个数、CPU核心数、逻辑CPU的个数(线程数)、型号、内核信息</h2>
<p>1、物理CPU数<br>
实际机器中插槽上的CPU个数，查询命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[award_dev@localhost ~]$ <span class="built_in">cat</span> /proc/cpuinfo |grep <span class="string">&quot;physical id&quot;</span>|<span class="built_in">sort</span> |<span class="built_in">uniq</span>|<span class="built_in">wc</span> -l</span><br><span class="line">16</span><br></pre></td></tr></table></figure>
<p>2、CPU核心数<br>
一块物理CPU上能处理数据的芯片组数量。也就是说一个物理CPU上可能会有多个核心，日常中说的双核、四核就是指的CPU核心。查询命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[award_dev@localhost ~]$ <span class="built_in">cat</span> /proc/cpuinfo |grep <span class="string">&quot;cores&quot;</span>|<span class="built_in">uniq</span></span><br><span class="line">cpu cores: 1</span><br></pre></td></tr></table></figure>
<p>3、逻辑CPU的个数(线程数)<br>
逻辑CPU数量=物理cpu数量 x CPU核心数 x 2(如果支持并开启ht)。<br>
查询命令如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[award_dev@localhost ~]$ <span class="built_in">cat</span> /proc/cpuinfo |grep <span class="string">&quot;processor&quot;</span>|<span class="built_in">wc</span> -l</span><br><span class="line">16</span><br></pre></td></tr></table></figure>
<p>从结果可以看出，我的机器不支持(或不开启)ht。<br>
一般情况，我们认为一颗cpu可以有多核，加上intel的超线程技术(HT),可以在逻辑上再分一倍数量的cpu core出来；所以逻辑CPU的值理论上是可以超过100%的。</p>
<p>​<br>
4、CPU数量及型号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[award_dev@localhost ~]$ <span class="built_in">cat</span> /proc/cpuinfo | grep name | <span class="built_in">cut</span> -f2 -d: | <span class="built_in">uniq</span> -c</span><br><span class="line">     16  Intel(R) Xeon(R) Gold 5118 CPU @ 2.30GHz</span><br></pre></td></tr></table></figure>
<p>​<br>
5、查看当前操作系统内核信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[award_dev@localhost ~]$ <span class="built_in">uname</span> -a</span><br><span class="line">Linux localhost.localdomain 3.10.0-1160.el7.x86_64 <span class="comment">#1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>
<p>Ps：Linux下top查看的CPU也是逻辑CPU个数</p>
<p><a href="https://blog.csdn.net/fengyuyeguirenenen/article/details/124121284">参考链接</a>、<a href="https://blog.csdn.net/weixin_57794111/article/details/125974242">参考链接</a></p>
<h2 id="超线程"><a class="header-anchor" href="#超线程"></a>超线程</h2>
<p>一个CPU核可以执行一个线程，由英特尔开发超线程技术可以把一个线程模拟出两个线程来使用，使得单个核心用起来像两个核心一样，以充分发挥CPU的性能。<br>
通常：<strong>逻辑CPU数量=物理cpu数量 x CPU核心数，若不相等则表示CPU支持超线程技术</strong>。</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MySQL</tag>
        <tag>MyBatis</tag>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年北京冬奥会奖牌榜</title>
    <url>/2022/02/20/beijing_winter_olympics/</url>
    <content><![CDATA[<p>2022年北京冬奥会中国超美国跻身冬奥奖牌榜前三，并且金牌数和奖牌数均创历史新高。厉害了！ 我的国。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/2fe69094de88a3c2aa07fbb27e896959.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/cb401e26a74acb18d7c1e110802c56e5.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>奥运会</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8新特性学习</title>
    <url>/2022/12/19/Java8_new_features/</url>
    <content><![CDATA[<h2 id="Lambda表达式"><a class="header-anchor" href="#Lambda表达式"></a>Lambda表达式</h2>
<h3 id="为什么使用Lambda表达式"><a class="header-anchor" href="#为什么使用Lambda表达式"></a>为什么使用Lambda表达式</h3>
<ul>
<li>Lambda是一个<strong>匿名函数，相当于匿名内部类</strong></li>
<li>只有<strong>函数式接口(可以用@FunctionalInterface注解修饰)</strong> 可以使用Lambda表达式</li>
<li>使用 Lambda省略了写实现类的繁琐步骤，可以写出更简洁、更灵活的代码，使Java的语言表达能力得到了提升。</li>
</ul>
<h3 id="Lambda表达式语法"><a class="header-anchor" href="#Lambda表达式语法"></a>Lambda表达式语法</h3>
<p>Lambda 表达式在Java 语言中引入了一个新的操作符, “<strong>-&gt;</strong>”， 它将 Lambda 分为两个部分：<br>
<strong>左侧：指定了 Lambda表达式的参数列表</strong><br>
<strong>右侧：指定了 Lambda体，即 Lambda表达式要执行的功能。</strong></p>
<span id="more"></span>
<h4 id="语法格式一：无参数，无返回值"><a class="header-anchor" href="#语法格式一：无参数，无返回值"></a>语法格式一：无参数，无返回值</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">() -&gt; System.out.println(<span class="string">&quot;Hello Lambda!&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="语法格式二：有一个参数，并且无返回值"><a class="header-anchor" href="#语法格式二：有一个参数，并且无返回值"></a>语法格式二：有一个参数，并且无返回值</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(x) -&gt; System.out.println(x);</span><br></pre></td></tr></table></figure>
<h4 id="语法格式三：若只有一个参数，小括号可以省略不写"><a class="header-anchor" href="#语法格式三：若只有一个参数，小括号可以省略不写"></a>语法格式三：若只有一个参数，小括号可以省略不写</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x -&gt; System.out.println(x)</span><br></pre></td></tr></table></figure>
<h4 id="语法格式四：有两个以上的参数，有返回值，并且-Lambda体中有多条语句"><a class="header-anchor" href="#语法格式四：有两个以上的参数，有返回值，并且-Lambda体中有多条语句"></a>语法格式四：有两个以上的参数，有返回值，并且 Lambda体中有多条语句</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com = (x, y) -&gt; &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;函数式接口&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="语法格式五：若-Lambda体中只有一条语句，-return和大括号都可以省略不写"><a class="header-anchor" href="#语法格式五：若-Lambda体中只有一条语句，-return和大括号都可以省略不写"></a>语法格式五：若 Lambda体中只有一条语句， return和大括号都可以省略不写</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com = (x, y) -&gt; Integer.compare(x, y);</span><br></pre></td></tr></table></figure>
<h4 id="语法格式六：参数列表的数据类型可以省略不写"><a class="header-anchor" href="#语法格式六：参数列表的数据类型可以省略不写"></a>语法格式六：参数列表的数据类型可以省略不写</h4>
<p>JVM编译器可以通过上下文推断出参数列表对应的数据类型，Lambda 表达式中无需指定类型，程序依然可以编译，即**“类型推断”**。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Integer推荐省略</span></span><br><span class="line">(Integer x, Integer y) -&gt; Integer.compare(x, y);</span><br></pre></td></tr></table></figure>
<p><strong>语法速记口诀：</strong><br>
上联：左右遇一括号省<br>
下联：左侧推断类型省<br>
横批：能省则省</p>
<h2 id="函数式接口"><a class="header-anchor" href="#函数式接口"></a>函数式接口</h2>
<h3 id="什么是函数式接口"><a class="header-anchor" href="#什么是函数式接口"></a>什么是函数式接口</h3>
<ul>
<li>只包含一个抽象方法的接口，称为函数式接口。</li>
<li>可以通过 Lambda 表达式来创建该接口的实现类。</li>
</ul>
<p>函数式接口只会有一个抽象方法，<strong>default方法不属于抽象方法，接口重写了Object的公共方法也不算入内</strong>，所以Comparator是函数式接口。</p>
<h3 id="Java内置函数式接口"><a class="header-anchor" href="#Java内置函数式接口"></a>Java内置函数式接口</h3>
<h4 id="四大核心接口"><a class="header-anchor" href="#四大核心接口"></a>四大核心接口</h4>
<table>
<thead>
<tr>
<th style="text-align:center">接口名</th>
<th style="text-align:center">参数类型</th>
<th style="text-align:center">返回类型</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Consumer&lt;T&gt; 消费型接口</td>
<td style="text-align:center">T</td>
<td style="text-align:center">void</td>
<td style="text-align:center">void accept(T t); <br>适合“传递参数没有返回值”的场景</td>
</tr>
<tr>
<td style="text-align:center">Supplier&lt;T&gt; 供给型接口</td>
<td style="text-align:center">无</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T get(); <br>适合“没有参数有返回值”的场景</td>
</tr>
<tr>
<td style="text-align:center">Function&lt;T,R&gt; 函数型接口</td>
<td style="text-align:center">T</td>
<td style="text-align:center">R</td>
<td style="text-align:center">R apply(T t); <br>适合“传递参数有返回值”的场景</td>
</tr>
<tr>
<td style="text-align:center">Predicate&lt;T&gt; 断定型接口</td>
<td style="text-align:center">T</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">boolean test(T t); <br>适合“传递参数返回boolean值”的场景</td>
</tr>
</tbody>
</table>
<h4 id="其他接口"><a class="header-anchor" href="#其他接口"></a>其他接口</h4>
<table>
<thead>
<tr>
<th style="text-align:center">接口名</th>
<th style="text-align:center">参数类型</th>
<th style="text-align:center">返回类型</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">BiFunction&lt;T, U, R&gt;</td>
<td style="text-align:center">T, U</td>
<td style="text-align:center">R</td>
<td style="text-align:center">R apply(T t, U u); <br>适合“传递两个参数有返回值”的场景</td>
</tr>
<tr>
<td style="text-align:center">UnaryOperator&lt;T&gt; (Function子接口)</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T apply(T t); <br>进行一元运算，适合“传递一个参数有返回值”的场景</td>
</tr>
<tr>
<td style="text-align:center">BinaryOperator&lt;T&gt;(BiFunction 子接口)</td>
<td style="text-align:center">T, T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T apply(T t1, T t2); <br>进行二元运算，适合“传递两个参数有返回值”的场景</td>
</tr>
<tr>
<td style="text-align:center">BiConsumer&lt;T, U&gt;</td>
<td style="text-align:center">T</td>
<td style="text-align:center">void</td>
<td style="text-align:center">void accept(T t, U u); <br>适合“传递两个参数没有返回值”的场景</td>
</tr>
</tbody>
</table>
<h2 id="方法引用、构造器引用、数组引用"><a class="header-anchor" href="#方法引用、构造器引用、数组引用"></a>方法引用、构造器引用、数组引用</h2>
<h3 id="方法引用"><a class="header-anchor" href="#方法引用"></a>方法引用</h3>
<p>若Lambda 体中的功能，已经有方法提供了实现，可以使用方法引用。<br>
可以将<strong>方法引用理解 Lambda 表达式的另外一种表现形式</strong>。<br>
使用操作符 “<strong>::</strong>” 将方法名和对象或类的名字分隔开来。<br>
主要有下面三种使用情况：</p>
<ul>
<li><strong>对象::实例方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1</span></span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line">Consumer&lt;String&gt; con = (str) -&gt; ps.println(str);</span><br><span class="line">con.accept(<span class="string">&quot;Hello World！&quot;</span>);</span><br><span class="line"></span><br><span class="line">Consumer&lt;String&gt; con2 = ps::println;</span><br><span class="line">con2.accept(<span class="string">&quot;Hello Java8！&quot;</span>);</span><br><span class="line"><span class="comment">// 示例2</span></span><br><span class="line"><span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">101</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">9999.99</span>);</span><br><span class="line">Supplier&lt;String&gt; sup = () -&gt; emp.getName();</span><br><span class="line">System.out.println(sup.get());</span><br><span class="line"></span><br><span class="line">Supplier&lt;String&gt; sup2 = emp::getName;</span><br><span class="line">System.out.println(sup2.get());</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>类::静态方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1</span></span><br><span class="line">BiFunction&lt;Double, Double, Double&gt; fun = (x, y) -&gt; Math.max(x, y);</span><br><span class="line">System.out.println(fun.apply(<span class="number">1.5</span>, <span class="number">22.2</span>));</span><br><span class="line">BiFunction&lt;Double, Double, Double&gt; fun2 = Math::max;</span><br><span class="line">System.out.println(fun2.apply(<span class="number">1.2</span>, <span class="number">1.5</span>));</span><br><span class="line"><span class="comment">// 示例2</span></span><br><span class="line">Comparator&lt;Integer&gt; com = (x, y) -&gt; Integer.compare(x, y);</span><br><span class="line">Comparator&lt;Integer&gt; com2 = Integer::compare;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>类::实例方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1</span></span><br><span class="line">BiPredicate&lt;String, String&gt; bp = (x, y) -&gt; x.equals(y);</span><br><span class="line">System.out.println(bp.test(<span class="string">&quot;abcde&quot;</span>, <span class="string">&quot;abcde&quot;</span>));</span><br><span class="line">BiPredicate&lt;String, String&gt; bp2 = String::equals;</span><br><span class="line">System.out.println(bp2.test(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abc&quot;</span>));</span><br><span class="line"><span class="comment">// 示例2</span></span><br><span class="line">Function&lt;Employee, String&gt; fun = (e) -&gt; e.show();</span><br><span class="line">System.out.println(fun.apply(<span class="keyword">new</span> <span class="title class_">Employee</span>()));</span><br><span class="line">Function&lt;Employee, String&gt; fun2 = Employee::show;</span><br><span class="line">System.out.println(fun2.apply(<span class="keyword">new</span> <span class="title class_">Employee</span>()));</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li><strong>方法引用所引用的方法的参数列表与返回值类型，需要与函数式接口中抽象方法的参数列表和返回值类型保持一致。</strong></li>
<li><strong>若Lambda 的参数列表的第一个参数，是实例方法的调用者，第二个参数(或无参)是实例方法的参数时，格式： ClassName::MethodName</strong></li>
</ul>
<h3 id="构造器引用"><a class="header-anchor" href="#构造器引用"></a>构造器引用</h3>
<p><strong>构造器的参数列表，需要与函数式接口中参数列表保持一致。</strong><br>
<strong>语法格式：</strong><br>
<strong>类名 :: new</strong><br>
示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;String, Employee&gt; fun = Employee::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure>
<h3 id="数组引用"><a class="header-anchor" href="#数组引用"></a>数组引用</h3>
<p><strong>语法格式：</strong><br>
<strong>类型[] :: new</strong><br>
示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;Integer, String[]&gt; fun = (length) -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line">String[] strs = fun.apply(<span class="number">10</span>);</span><br><span class="line">System.out.println(strs.length);</span><br><span class="line">Function&lt;Integer, String[]&gt; fun2 = String[]::<span class="keyword">new</span>;</span><br><span class="line">String[] strs2 = fun2.apply(<span class="number">15</span>);</span><br><span class="line">System.out.println(strs2.length);</span><br></pre></td></tr></table></figure>
<h2 id="强大的Stream-API"><a class="header-anchor" href="#强大的Stream-API"></a>强大的Stream API</h2>
<p>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p>
<h3 id="什么是Stream"><a class="header-anchor" href="#什么是Stream"></a>什么是Stream</h3>
<p>Stream是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。<br>
<strong>集合讲的是数据，流讲的是计算！</strong></p>
<p><strong>注意：</strong></p>
<ul>
<li>Stream 自己不会存储元素。</li>
<li>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</li>
<li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li>
</ul>
<h3 id="Stream操作的三个步骤"><a class="header-anchor" href="#Stream操作的三个步骤"></a>Stream操作的三个步骤</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/e911c77e8f0cf374b2b1d188e71eb3d3.png" alt="在这里插入图片描述"><br>
Stream操作的三个步骤如下：</p>
<ul>
<li><strong>创建 Stream</strong><br>
一个数据源（如：集合、数组），获取一个流</li>
<li><strong>中间操作</strong><br>
一个中间操作链，对数据源的数据进行处理</li>
<li><strong>终止操作(终端操作)</strong><br>
一个终止操作，执行中间操作链，并产生结果</li>
</ul>
<p>示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有的中间操作不会做任何的处理</span></span><br><span class="line">Stream&lt;Employee&gt; stream = emps.stream()</span><br><span class="line">	.filter((e) -&gt; &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;测试中间操作&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> e.getAge() &lt;= <span class="number">35</span>;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="comment">//只有当做终止操作时，所有的中间操作会一次性的全部执行，称为“惰性求值”</span></span><br><span class="line">stream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h3 id="创建Stream"><a class="header-anchor" href="#创建Stream"></a>创建Stream</h3>
<p><strong>一、Java8 中的Collection接口被扩展，提供了两个获取流的方法：</strong></p>
<ul>
<li>default Stream<E> stream() : 返回一个顺序流</li>
<li>default Stream<E> parallelStream() : 返回一个并行流</li>
</ul>
<p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、 Collection提供了两个方法  stream() 与 parallelStream()</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Stream&lt;String&gt; stream = list.stream(); <span class="comment">//获取一个顺序流</span></span><br><span class="line">Stream&lt;String&gt; parallelStream = list.parallelStream(); <span class="comment">//获取一个并行流</span></span><br></pre></td></tr></table></figure>
<p><strong>二、由数组创建流</strong><br>
Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：<br>
static <T> Stream<T> stream(T[] array): 返回一个流。</p>
<p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2、 通过 Arrays 中的 stream() 获取一个数组流</span></span><br><span class="line">Integer[] nums = <span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">10</span>];</span><br><span class="line">Stream&lt;Integer&gt; stream1 = Arrays.stream(nums);</span><br></pre></td></tr></table></figure>
<p><strong>三、用静态方法Stream.of()</strong><br>
可以使用静态方法 Stream.of(), 创建一个流。它可以接收任意数量的参数。<br>
public static<T> Stream<T> of(T… values) : 返回一个流。<br>
示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3、通过 Stream 类中静态方法 of()</span></span><br><span class="line">Stream&lt;Integer&gt; stream2 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br></pre></td></tr></table></figure>
<p><strong>四、创建无限流</strong><br>
示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代</span></span><br><span class="line">Stream&lt;Integer&gt; stream3 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">2</span>).limit(<span class="number">10</span>);</span><br><span class="line">stream3.forEach(System.out::println);</span><br><span class="line"><span class="comment">//生成</span></span><br><span class="line">Stream&lt;Double&gt; stream4 = Stream.generate(Math::random).limit(<span class="number">2</span>);</span><br><span class="line">stream4.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h3 id="中间操作"><a class="header-anchor" href="#中间操作"></a>中间操作</h3>
<p>多个中间操作可以连接起来形成一个流水线，<strong>除非流水线上触发终止操作，否则中间操作不会执行任何的处理</strong>！而在终止操作时一次性全部处理，称为**“惰性求值”**。</p>
<h4 id="筛选与切片"><a class="header-anchor" href="#筛选与切片"></a>筛选与切片</h4>
<p><strong>常用方法如下：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">filter(Predicate p)</td>
<td style="text-align:center"><strong>过滤：</strong> 接收 Lambda ， 从流中排除某些元素。</td>
</tr>
<tr>
<td style="text-align:center">limit(long maxSize)</td>
<td style="text-align:center"><strong>截断流：</strong> 使其元素不超过给定数量。</td>
</tr>
<tr>
<td style="text-align:center">skip(long n)</td>
<td style="text-align:center"><strong>跳过元素：</strong> 返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。<br>与 <strong>limit(n)</strong> 互补</td>
</tr>
<tr>
<td style="text-align:center">distinct()</td>
<td style="text-align:center"><strong>去重：</strong> 通过流所生成元素的hashCode()和equals()去除重复元素</td>
</tr>
</tbody>
</table>
<p><strong>示例代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、filter过滤</span></span><br><span class="line"><span class="comment">//所有的中间操作不会做任何的处理</span></span><br><span class="line">Stream&lt;Employee&gt; stream = emps.stream()</span><br><span class="line">	.filter((e) -&gt; &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;测试中间操作&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> e.getAge() &lt;= <span class="number">35</span>;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="comment">//只有当做终止操作时，所有的中间操作会一次性的全部执行，称为“惰性求值”</span></span><br><span class="line">stream.forEach(System.out::println);</span><br><span class="line"><span class="comment">// 2、limit截断流</span></span><br><span class="line">emps.stream()</span><br><span class="line">	.filter((e) -&gt; &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;短路！&quot;</span>); <span class="comment">// &amp;&amp;  ||</span></span><br><span class="line">		<span class="keyword">return</span> e.getSalary() &gt;= <span class="number">5000</span>;</span><br><span class="line">	&#125;)</span><br><span class="line">	.limit(<span class="number">3</span>)</span><br><span class="line">	.forEach(System.out::println);</span><br><span class="line"><span class="comment">// 3、skip跳过元素</span></span><br><span class="line">emps.parallelStream()</span><br><span class="line">	.filter((e) -&gt; e.getSalary() &gt;= <span class="number">5000</span>)</span><br><span class="line">	.skip(<span class="number">2</span>)</span><br><span class="line">	.forEach(System.out::println);</span><br><span class="line"><span class="comment">// 4、distinct去重</span></span><br><span class="line">emps.stream()</span><br><span class="line">	.distinct()</span><br><span class="line">	.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h4 id="映射"><a class="header-anchor" href="#映射"></a>映射</h4>
<p><strong>常用方法如下：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">map(Function f)</td>
<td style="text-align:center">接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td>
</tr>
<tr>
<td style="text-align:center">mapToDouble(ToDoubleFunction f)</td>
<td style="text-align:center">接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的DoubleStream。</td>
</tr>
<tr>
<td style="text-align:center">mapToInt(ToIntFunction f)</td>
<td style="text-align:center">接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的IntStream。</td>
</tr>
<tr>
<td style="text-align:center">mapToLong(ToLongFunction f)</td>
<td style="text-align:center">接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的LongStream。</td>
</tr>
<tr>
<td style="text-align:center">flatMap(Function f)</td>
<td style="text-align:center">接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td>
</tr>
</tbody>
</table>
<p><strong>示例代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     List&lt;String&gt; strList = Arrays.asList(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;eee&quot;</span>);</span><br><span class="line">     <span class="comment">// 1、map简单使用</span></span><br><span class="line">     Stream&lt;String&gt; stream = strList.stream()</span><br><span class="line">             .map(String::toUpperCase);</span><br><span class="line">     stream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">     Stream&lt;Stream&lt;Character&gt;&gt; stream2 = strList.stream()</span><br><span class="line">             .map(Test::filterCharacter);</span><br><span class="line">     <span class="comment">// 输出aaabbbcccdddeeeaaabbbcccdddeee</span></span><br><span class="line">     stream2.forEach((sm) -&gt; &#123;</span><br><span class="line">         sm.forEach(System.out::print);</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2、flatMap使用：相当于List的addAll()</span></span><br><span class="line">     Stream&lt;Character&gt; stream3 = strList.stream()</span><br><span class="line">             .flatMap(Test::filterCharacter);</span><br><span class="line">     <span class="comment">// 输出aaabbbcccdddeeeaaabbbcccdddeee</span></span><br><span class="line">     stream3.forEach(System.out::print);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把字符串中的每一个字符加入到list，返回流</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title function_">filterCharacter</span><span class="params">(String str)</span>&#123;</span><br><span class="line">     List&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">     <span class="keyword">for</span> (Character ch : str.toCharArray()) &#123;</span><br><span class="line">         list.add(ch);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> list.stream();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="排序"><a class="header-anchor" href="#排序"></a>排序</h4>
<p><strong>常用方法如下：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sorted()</td>
<td style="text-align:center">产生一个新流，按自然顺序排序。</td>
</tr>
<tr>
<td style="text-align:center">sorted(Comparator comp)</td>
<td style="text-align:center">产生一个新流，按比较器顺序排序。</td>
</tr>
</tbody>
</table>
<p><strong>示例代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自然排序</span></span><br><span class="line">emps.stream()</span><br><span class="line">	.map(Employee::getName)</span><br><span class="line">	.sorted()</span><br><span class="line">	.forEach(System.out::println);</span><br><span class="line"><span class="comment">// 定制排序</span></span><br><span class="line">emps.stream()</span><br><span class="line">	.sorted((x, y) -&gt; &#123;</span><br><span class="line">		<span class="keyword">if</span>(x.getAge() == y.getAge())&#123;</span><br><span class="line">			<span class="keyword">return</span> x.getName().compareTo(y.getName());</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> Integer.compare(x.getAge(), y.getAge());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h3 id="终止操作-终端操作"><a class="header-anchor" href="#终止操作-终端操作"></a>终止操作(终端操作)</h3>
<p><strong>注意：</strong><br>
<strong>流进行了终止操作后，不能再次使用。</strong></p>
<h4 id="查找与匹配"><a class="header-anchor" href="#查找与匹配"></a>查找与匹配</h4>
<p><strong>常用方法如下：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">allMatch(Predicate p)</td>
<td style="text-align:center">检查是否匹配所有元素</td>
</tr>
<tr>
<td style="text-align:center">anyMatch(Predicate p)</td>
<td style="text-align:center">检查是否至少匹配一个元素</td>
</tr>
<tr>
<td style="text-align:center">noneMatch(Predicate p)</td>
<td style="text-align:center">检查是否没有匹配所有元素</td>
</tr>
<tr>
<td style="text-align:center">findFirst()</td>
<td style="text-align:center">返回第一个元素</td>
</tr>
<tr>
<td style="text-align:center">findAny()</td>
<td style="text-align:center">返回当前流中的任意元素</td>
</tr>
</tbody>
</table>
<p><strong>示例代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">bl</span> <span class="operator">=</span> emps.stream()</span><br><span class="line">	.allMatch((e) -&gt; e.getStatus().equals(Status.BUSY));</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">bl1</span> <span class="operator">=</span> emps.stream()</span><br><span class="line">	.anyMatch((e) -&gt; e.getStatus().equals(Status.BUSY));</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">bl2</span> <span class="operator">=</span> emps.stream()</span><br><span class="line">	.noneMatch((e) -&gt; e.getStatus().equals(Status.BUSY));</span><br><span class="line"></span><br><span class="line">Optional&lt;Employee&gt; op = emps.stream()</span><br><span class="line">	.sorted((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()))</span><br><span class="line">	.findFirst();</span><br><span class="line">System.out.println(op.get());</span><br><span class="line"></span><br><span class="line">Optional&lt;Employee&gt; op2 = emps.parallelStream()</span><br><span class="line">	.filter((e) -&gt; e.getStatus().equals(Status.FREE))</span><br><span class="line">	.findAny();</span><br><span class="line">System.out.println(op2.get());</span><br></pre></td></tr></table></figure>
<h4 id="内部迭代"><a class="header-anchor" href="#内部迭代"></a>内部迭代</h4>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">forEach(Consumer c)</td>
<td style="text-align:center">内部迭代</td>
</tr>
</tbody>
</table>
<h4 id="最值、数量"><a class="header-anchor" href="#最值、数量"></a>最值、数量</h4>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count()</td>
<td style="text-align:center">返回流中元素总数</td>
</tr>
<tr>
<td style="text-align:center">max(Comparator c)</td>
<td style="text-align:center">返回流中最大值</td>
</tr>
<tr>
<td style="text-align:center">min(Comparator c)</td>
<td style="text-align:center">返回流中最小值</td>
</tr>
</tbody>
</table>
<p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> emps.stream()</span><br><span class="line">				 .filter((e) -&gt; e.getStatus().equals(Status.FREE))</span><br><span class="line">				 .count();</span><br><span class="line"></span><br><span class="line">Optional&lt;Double&gt; op = emps.stream()</span><br><span class="line">	.map(Employee::getSalary)</span><br><span class="line">	.max(Double::compare);</span><br><span class="line"></span><br><span class="line">Optional&lt;Employee&gt; op2 = emps.stream()</span><br><span class="line">	.min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));</span><br></pre></td></tr></table></figure>
<h4 id="归约"><a class="header-anchor" href="#归约"></a>归约</h4>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">reduce(T iden, BinaryOperator b)</td>
<td style="text-align:center">可以将流中元素反复结合起来，得到一个值。<br>返回 T。</td>
</tr>
<tr>
<td style="text-align:center">reduce(BinaryOperator b)</td>
<td style="text-align:center">可以将流中元素反复结合起来，得到一个值。<br>返回Optional<T></td>
</tr>
</tbody>
</table>
<p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> list.stream()</span><br><span class="line">	.reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line">Optional&lt;Double&gt; op = emps.stream()</span><br><span class="line">	.map(Employee::getSalary)</span><br><span class="line">	.reduce(Double::sum);</span><br><span class="line">System.out.println(op.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索名字中 “六” 出现的次数</span></span><br><span class="line">Optional&lt;Integer&gt; sum = emps.stream()</span><br><span class="line">	.map(Employee::getName)</span><br><span class="line">	.flatMap(Test::filterCharacter)</span><br><span class="line">	.map((ch) -&gt; &#123;</span><br><span class="line">		<span class="keyword">if</span>(ch.equals(<span class="string">&#x27;六&#x27;</span>))</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;).reduce(Integer::sum);</span><br><span class="line">System.out.println(sum.get());</span><br></pre></td></tr></table></figure>
<h4 id="收集"><a class="header-anchor" href="#收集"></a>收集</h4>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">collect(Collector c)</td>
<td style="text-align:center">将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法</td>
</tr>
</tbody>
</table>
<p>Collector 接口中方法的实现决定了如何对流执行收集操作(如收集到 List、Set、Map)。但是Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/0947ac10d1c3b84988ed999ced2ab805.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/1a2accbdf16be8d16786ae03c9301286.png" alt="在这里插入图片描述"></p>
<p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;DeptInfoVo&gt; deptInfoVoList = getDeptInfoVoData();</span><br><span class="line">Set&lt;String&gt; set = deptInfoVoList.stream()</span><br><span class="line">        .map(DeptInfoVo::getDeptName)</span><br><span class="line">        .collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">HashSet&lt;String&gt; hashSet = deptInfoVoList.stream()</span><br><span class="line">        .map(DeptInfoVo::getDeptName)</span><br><span class="line">        .collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分组</span></span><br><span class="line">Map&lt;Status, List&lt;Employee&gt;&gt; map = emps.stream()</span><br><span class="line">.collect(Collectors.groupingBy(Employee::getStatus));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多级分组</span></span><br><span class="line">Map&lt;Status, Map&lt;String, List&lt;Employee&gt;&gt;&gt; map = emps.stream()</span><br><span class="line">			.collect(Collectors.groupingBy(Employee::getStatus, Collectors.groupingBy((e) -&gt; &#123;</span><br><span class="line">				<span class="keyword">if</span>(e.getAge() &gt;= <span class="number">60</span>)</span><br><span class="line">					<span class="keyword">return</span> <span class="string">&quot;老年&quot;</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(e.getAge() &gt;= <span class="number">35</span>)</span><br><span class="line">					<span class="keyword">return</span> <span class="string">&quot;中年&quot;</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="keyword">return</span> <span class="string">&quot;成年&quot;</span>;</span><br><span class="line">			&#125;)));</span><br></pre></td></tr></table></figure>
<h2 id="接口中的默认方法与静态方法"><a class="header-anchor" href="#接口中的默认方法与静态方法"></a>接口中的默认方法与静态方法</h2>
<h3 id="默认方法"><a class="header-anchor" href="#默认方法"></a>默认方法</h3>
<p>Java 8中允许接口中包含具有具体实现的方法，该方法称为“默认方法”，默认方法使用 <strong>default</strong>关键字修饰。</p>
<p><strong>接口默认方法的类优先原则：</strong><br>
一个子类继承了一个父类，同时实现了一个接口。这个父类和接口有同名(默认)的方法，则字类调用方法会优先调用父类的方法。<br>
示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;嘿嘿嘿&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;哈哈哈哈&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">ParentClass</span>  &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SubClass</span> <span class="variable">subClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubClass</span>();</span><br><span class="line">        <span class="comment">// 输出：嘿嘿嘿</span></span><br><span class="line">        System.out.println(subClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><strong>当然，如果子类再重写方法的话，以子类的为准。</strong></p>
<p><strong>接口默认方法冲突的解决方法：</strong><br>
如果一个父接口提供一个方法，而另一个父接口接口也提供了一个具有相同名称和参数列表的方法（<strong>不管方法是否是默认方法）</strong>，那么<strong>必须重写该方法来解决冲突</strong>。<br>
示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;嘿嘿嘿嘿&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterfaceTwo</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;哈哈哈哈&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span>,MyInterfaceTwo &#123;</span><br><span class="line">    <span class="comment">// 必须重写该方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// return MyInterface.super.getName();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是子类重写的方法&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SubClass</span> <span class="variable">subClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubClass</span>();</span><br><span class="line">        <span class="comment">// 输出：我是子类重写的方法</span></span><br><span class="line">        System.out.println(subClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_44722237/article/details/116765731">Java中Super的用法</a></p>
<h3 id="静态方法"><a class="header-anchor" href="#静态方法"></a>静态方法</h3>
<p>Java8接口中允许添加静态方法。<br>
示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是静态方法&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    	<span class="comment">//输出：我是静态方法</span></span><br><span class="line">        System.out.println(MyInterface.getName());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="新时间日期API"><a class="header-anchor" href="#新时间日期API"></a>新时间日期API</h2>
<h3 id="简介"><a class="header-anchor" href="#简介"></a>简介</h3>
<p>SimpleDateFormat有线程安全问题,且Date类不好用。<br>
Java8提供了LocalDate、LocalTime和LocalDateTime 类，它们的实例是<strong>不可变的对象</strong>，<strong>做任何操作都会新生成一个对象</strong>，分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的日期或时间，并不包含当前的时间信息。也不包含与时区相关的信息。</p>
<p>注：ISO-8601日历系统是国际标准化组织制定的现代公民的日期和时间的表示法<br>
相关方法如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/26d1d44563dea83463dd9888d57d79b2.png" alt="在这里插入图片描述"><br>
<strong>示例代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println(ldt);</span><br><span class="line">System.out.println(ldt.getYear());</span><br><span class="line">System.out.println(ldt.getMonthValue());</span><br><span class="line">System.out.println(ldt.getDayOfMonth());</span><br><span class="line">System.out.println(ldt.getHour());</span><br><span class="line">System.out.println(ldt.getMinute());</span><br><span class="line">System.out.println(ldt.getSecond());</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ld2</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2016</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">System.out.println(ld2);</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt3</span> <span class="operator">=</span> ld2.plusYears(<span class="number">20</span>);</span><br><span class="line">System.out.println(ldt3);</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt4</span> <span class="operator">=</span> ld2.minusMonths(<span class="number">2</span>);</span><br><span class="line">System.out.println(ldt4);</span><br></pre></td></tr></table></figure>
<h3 id="Instant时间戳"><a class="header-anchor" href="#Instant时间戳"></a>Instant时间戳</h3>
<p>Instant用于“时间戳”的运算。它是以Unix元年(传统的设定为UTC时区1970年1月1日午夜时分)开始所经历的毫秒数进行运算。<br>
<strong>示例代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认使用 UTC 时区</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">ins</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">System.out.println(ins);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用东8区</span></span><br><span class="line"><span class="type">OffsetDateTime</span> <span class="variable">odt</span> <span class="operator">=</span> ins.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">System.out.println(odt);</span><br><span class="line"><span class="comment">// 获取毫秒数</span></span><br><span class="line">System.out.println(ins.toEpochMilli());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1970元年之后5秒</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">ins2</span> <span class="operator">=</span> Instant.ofEpochSecond(<span class="number">5</span>);</span><br><span class="line">System.out.println(ins2);</span><br></pre></td></tr></table></figure>
<h3 id="Duration和Period"><a class="header-anchor" href="#Duration和Period"></a>Duration和Period</h3>
<p><strong>1、Duration: 用于计算两个“时间”间隔</strong><br>
<strong>2、Period:用于计算两个“日期”间隔</strong></p>
<p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Instant</span> <span class="variable">ins1</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Instant</span> <span class="variable">ins2</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">System.out.println(<span class="string">&quot;所耗费时间为：&quot;</span> + Duration.between(ins1, ins2));</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">ld1</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">ld2</span> <span class="operator">=</span> LocalDate.of(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="type">Period</span> <span class="variable">pe</span> <span class="operator">=</span> Period.between(ld2, ld1);</span><br><span class="line">System.out.println(pe.getYears());</span><br><span class="line">System.out.println(pe.getMonths());</span><br><span class="line">System.out.println(pe.getDays());</span><br></pre></td></tr></table></figure>
<h3 id="时间校正器"><a class="header-anchor" href="#时间校正器"></a>时间校正器</h3>
<ul>
<li>TemporalAdjuster : 时间校正器。有时我们可能需要获<br>
取例如：将日期调整到“下个周日”等操作。</li>
<li>TemporalAdjuster<strong>s</strong>: 该类通过静态方法提供了大量的常<br>
用 TemporalAdjuster 的实现。</li>
</ul>
<p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println(ldt);</span><br><span class="line"><span class="comment">// 获取下一个星期天</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt3</span> <span class="operator">=</span> ldt.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));</span><br><span class="line">System.out.println(ldt3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义：下一个工作日</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt5</span> <span class="operator">=</span> ldt.with((l) -&gt; &#123;</span><br><span class="line">	<span class="type">LocalDateTime</span> <span class="variable">ldt4</span> <span class="operator">=</span> (LocalDateTime) l;</span><br><span class="line">	<span class="type">DayOfWeek</span> <span class="variable">dow</span> <span class="operator">=</span> ldt4.getDayOfWeek();</span><br><span class="line">	<span class="keyword">if</span>(dow.equals(DayOfWeek.FRIDAY))&#123;</span><br><span class="line">		<span class="keyword">return</span> ldt4.plusDays(<span class="number">3</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dow.equals(DayOfWeek.SATURDAY))&#123;</span><br><span class="line">		<span class="keyword">return</span> ldt4.plusDays(<span class="number">2</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ldt4.plusDays(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(ldt5);</span><br></pre></td></tr></table></figure>
<h3 id="解析和格式化日期或时间"><a class="header-anchor" href="#解析和格式化日期或时间"></a>解析和格式化日期或时间</h3>
<p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DateTimeFormatter dtf = DateTimeFormatter.ISO_LOCAL_DATE;</span></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">dtf</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss E&quot;</span>);</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">String</span> <span class="variable">strDate</span> <span class="operator">=</span> ldt.format(dtf);</span><br><span class="line">System.out.println(strDate);</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">newLdt</span> <span class="operator">=</span> ldt.parse(strDate, dtf);</span><br><span class="line">System.out.println(newLdt);</span><br></pre></td></tr></table></figure>
<h3 id="带时区的时间或日期"><a class="header-anchor" href="#带时区的时间或日期"></a>带时区的时间或日期</h3>
<p>Java8 中加入了对时区的支持，带时区的时间为分别为：ZonedDate、ZonedTime、ZonedDateTime。其中每个时区都对应着 ID，地区ID都为 “{区域}/{城市}”的格式，<br>
例如 ：Asia/Shanghai。</p>
<p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line">System.out.println(ldt);</span><br><span class="line"></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">zdt</span> <span class="operator">=</span> ZonedDateTime.now(ZoneId.of(<span class="string">&quot;US/Pacific&quot;</span>));</span><br><span class="line">System.out.println(zdt);</span><br></pre></td></tr></table></figure>
<h3 id="与传统日期处理的转换"><a class="header-anchor" href="#与传统日期处理的转换"></a>与传统日期处理的转换</h3>
<p>相关方法如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/4992341485cd431269527c2c655ef388.png" alt="在这里插入图片描述"></p>
<h2 id="Optional类"><a class="header-anchor" href="#Optional类"></a>Optional类</h2>
<p>Optional<T> 类(java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。<br>
<strong>常用方法如下：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Optional.of(T t)</td>
<td style="text-align:center">创建一个 Optional实例</td>
</tr>
<tr>
<td style="text-align:center">Optional.empty()</td>
<td style="text-align:center">创建一个空的 Optional实例</td>
</tr>
<tr>
<td style="text-align:center">Optional.ofNullable(T t)</td>
<td style="text-align:center">若 t 不为 null,创建 Optional 实例,否则创建空实例。相当于Optional.of(T t)+Optional.empty()</td>
</tr>
<tr>
<td style="text-align:center">isPresent()</td>
<td style="text-align:center">判断是否包含值</td>
</tr>
<tr>
<td style="text-align:center">orElse(T t)</td>
<td style="text-align:center">如果调用对象包含值，返回该值，否则返回t</td>
</tr>
<tr>
<td style="text-align:center">orElseGet(Supplier s)</td>
<td style="text-align:center">如果调用对象包含值，返回该值，否则返回 s 获取的值</td>
</tr>
<tr>
<td style="text-align:center">map(Function f)</td>
<td style="text-align:center">如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()</td>
</tr>
<tr>
<td style="text-align:center">flatMap(Function mapper)</td>
<td style="text-align:center">与 map 类似，要求返回值必须是Optional</td>
</tr>
</tbody>
</table>
<h2 id="JVM的新特性"><a class="header-anchor" href="#JVM的新特性"></a>JVM的新特性</h2>
<p>使用元空间Metaspace代替持久代PermGen space。<br>
在JVM参数方面，使用-XX:MetaSpaceSize和-XX:MaxMetaspaceSize代替原来的-XX:PermSize和-XX:MaxPermSize。</p>
<h2 id="优化HashMap"><a class="header-anchor" href="#优化HashMap"></a>优化HashMap</h2>
<p>从 <strong>“数组+链表”</strong> 数据结构改为了 <strong>“数组+（链表/红黑树）”</strong>。<br>
当链表长度大于8，且HashMap总容量大于64，会将链表自动转为红黑树。<br>
添加元素比链表慢，其他的都比链表更快速。</p>
<h2 id="重复注解"><a class="header-anchor" href="#重复注解"></a>重复注解</h2>
<p>Java8允许在同一声明类型（类，属性，或方法）的多次使用同一个注解,这就是重复注解。Java8开始注解可以应用在任何地方。<br>
<strong>Java8之前对重复注解的支持</strong><br>
示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Authority &#123;</span><br><span class="line">     String <span class="title function_">role</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Authorities &#123;</span><br><span class="line">    Authority[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RepeatAnnotationUseOldVersion</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Authorities(&#123;@Authority(role=&quot;Admin&quot;),@Authority(role=&quot;Manager&quot;)&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomeThing</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Java8之前，重复注解实现是<strong>由另一个注解来存储重复注解</strong>。<br>
在使用时候，用存储注解Authorities来扩展重复注解。<br>
很明显，<strong>这种方式可读性不是很好</strong>。</p>
<p><strong>Java8对重复注解的支持</strong><br>
示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repeatable(Authorities.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Authority &#123;</span><br><span class="line">    String <span class="title function_">role</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Authorities &#123;</span><br><span class="line">   Authority[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RepeatAnnotationUseNewVersion</span> &#123;</span><br><span class="line">   <span class="meta">@Authority(role=&quot;Admin&quot;)</span></span><br><span class="line">   <span class="meta">@Authority(role=&quot;Manager&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomeThing</span><span class="params">()</span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不同的地方是，创建重复注解Authority时，<strong>加上@Repeatable,指向存储注解Authorities</strong>。<br>
在使用时候，直接可以重复使用Authority注解。<br>
从上面例子看出，java 8里面做法<strong>更适合常规的思维，可读性强一点</strong>。</p>
<p>说明：本笔记整理自<strong>尚硅谷Java8新特性课程</strong>以及互联网，仅供学习使用。</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java List对象拷贝(属性相同)</title>
    <url>/2022/01/08/list_object_copy/</url>
    <content><![CDATA[<h2 id="方法一"><a class="header-anchor" href="#方法一"></a>方法一</h2>
<ul>
<li>循环originList</li>
<li>用Fastjson或者Gson把每一个元素转为JSON字符串</li>
<li>再把JSON字符串转为Java目标实体对象</li>
<li>把目标实体对象加入到集合中<br>
Gson代码如下：</li>
</ul>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;T&gt; distinList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"><span class="keyword">for</span> (Object  obj : originList) &#123;</span><br><span class="line">	<span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> gson.fromJson(gson.toJson(obj),T.class);</span><br><span class="line">	<span class="comment">// do something</span></span><br><span class="line">	distinList.add(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法一适用于需要对单个属性处理的场景，如果不需要对单个属性单独处理参考方法二。</p>
<h2 id="方法二"><a class="header-anchor" href="#方法二"></a>方法二</h2>
<ul>
<li>用Fastjson或者Gson把list转为JSON字符串</li>
<li>再把JSON字符串转为Java实体集合对象<br>
Gson代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">List&lt;T&gt; distinList = gson.fromJson(gson.toJson(originList),<span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;T&gt;&gt;()&#123;&#125;.getType());</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>《罗辑思维（全5册）》读书笔记</title>
    <url>/2022/02/20/logical_thinking/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/07b2acdc328a2e3024386fb42c035db7.jpeg" width="460px" align="center"></img></p>
<p>书名：罗辑思维（全5册）：认知篇、历史篇、商业篇、人物篇、人文篇<br>
作者：罗振宇<br>
读完时间：2022年2月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<h3 id="知识大迁移，人人都是福尔摩斯"><a class="header-anchor" href="#知识大迁移，人人都是福尔摩斯"></a>知识大迁移，人人都是福尔摩斯</h3>
<ul>
<li>
<p>过去的学习，是面对已知的学习；现在的学习，是面对未知的学习。人人都是福尔摩斯。</p>
</li>
<li>
<p>打个比方，过去水很少，而自己这个容器太大。往自己这个空桶里装水，当然是装得越多越好。而现在，这水已经多得像大海，就别想往自己身体里装了，学会在水里面游泳就好。</p>
</li>
</ul>
<h3 id="为什么要做一个“斯多葛”"><a class="header-anchor" href="#为什么要做一个“斯多葛”"></a>为什么要做一个“斯多葛”</h3>
<ul>
<li>我们必须全力以赴，同时又不抱任何希望。不管做什么事，都要把它当作是全世界最重要的一件事，但同时又知道这件事根本无关紧要。</li>
</ul>
<h3 id="第3章-实战：提升个体战斗力"><a class="header-anchor" href="#第3章-实战：提升个体战斗力"></a>第3章 实战：提升个体战斗力</h3>
<ul>
<li>
<p>靠谱就是凡事有交代、件件有着落、事事有回音。</p>
</li>
<li>
<p>你不必追求名利、升职加薪，随着你的能力逐步上台阶，名、利、权这些东西，是自然而来的。</p>
</li>
</ul>
<h3 id="什么是会工作"><a class="header-anchor" href="#什么是会工作"></a>什么是会工作</h3>
<ul>
<li>靠谱就是凡事有交代、件件有着落、事事有回音。</li>
</ul>
<h3 id="你会搞关系吗"><a class="header-anchor" href="#你会搞关系吗"></a>你会搞关系吗</h3>
<ul>
<li>一个会搞关系的人，其实需要的不是所谓的高情商，也不是讨好别人，而是有让别人觉得舒服的能力，更重要的是你的好奇心和跨界学习能力。</li>
</ul>
<h3 id="宇航员如何面对风险"><a class="header-anchor" href="#宇航员如何面对风险"></a>宇航员如何面对风险</h3>
<ul>
<li>真正的风险我们是无法彻底消除的。在风险到来的时候，真正能拯救我们的是自我情绪的控制。</li>
</ul>
<h3 id="第1章-我们为什么要读历史"><a class="header-anchor" href="#第1章-我们为什么要读历史"></a>第1章 我们为什么要读历史</h3>
<ul>
<li>读历史不是为了知道未来，而是为了理解现实，并对未来保持想象力。</li>
</ul>
<h3 id="04-大航海时代的强国如何走向衰弱"><a class="header-anchor" href="#04-大航海时代的强国如何走向衰弱"></a>04 大航海时代的强国如何走向衰弱</h3>
<p>伊比利亚文化来源于伊比利亚半岛西班牙葡萄牙的传统，这种文化热衷享乐，行动迟缓，经济上不思进取，乐于搞福利国家。</p>
<blockquote>
<p>西班牙本国人宁可受穷，也不愿意劳动。就算工作，他们也要找轻松的行业，满足于少干活就能糊口的生活方式。于是，在西班牙、葡萄牙滋生出一种被称为“伊比利亚文化”的观念。这种观念热衷享乐、鄙视生产、歧视劳动者，追求奢华、追求娱乐，从根本上讲是一种反生产的文化形态。前几年，巴西中央银行行长还慨叹说：我们(指巴西人)恐怕很难摆脱伊比利亚文化的影响。</p>
</blockquote>
<ul>
<li>西班牙本国人宁可受穷，也不愿意劳动。就算工作，他们也要找轻松的行业，满足于少干活就能糊口的生活方式。于是，在西班牙、葡萄牙滋生出一种被称为“伊比利亚文化”的观念。这种观念热衷享乐、鄙视生产、歧视劳动者，追求奢华、追求娱乐，从根本上讲是一种反生产的文化形态。前几年，巴西中央银行行长还慨叹说：我们(指巴西人)恐怕很难摆脱伊比利亚文化的影响。</li>
</ul>
<h3 id="03-建立全新模式的帝国"><a class="header-anchor" href="#03-建立全新模式的帝国"></a>03 建立全新模式的帝国</h3>
<ul>
<li>它不是通过占有大量领土和人口，而是仅仅在世界上控制一些点，比如一些岛屿，建立军事基地，通过强大的军事实力，在全球投放其商品、服务、资本、制度、文化和影响力。说白了，美国不是“占有模式”的帝国，而是“影响力”模式的帝国。</li>
</ul>
<h3 id="04-现代社会的官僚系统"><a class="header-anchor" href="#04-现代社会的官僚系统"></a>04 现代社会的官僚系统</h3>
<ul>
<li>官僚主义最重要的后果就是——每个人只关注自己当前的目标和行动，至于这些行动堆在一起产生了什么结果，他们管不着，也不想管。</li>
</ul>
<h3 id="05-请让庸众停止迫害"><a class="header-anchor" href="#05-请让庸众停止迫害"></a>05 请让庸众停止迫害</h3>
<ul>
<li>
<p>从1861年开始，英国人就废除了同性恋者要判死刑的法律，但是活罪还是难免。从那一天起，一直到1967年的一百多年间，对同性恋行为还是要判刑，只不过比较轻，两年的监禁或者是苦役。一共判了五万多人，其中既包括图灵，还包括那个著名的英伦才子王尔德，他是1895年到1897年，坐了两年的苦役牢。</p>
</li>
<li>
<p>庸众的迫害真的是无处不在，因为别人的生活观念、行为方式我们看不惯，就要扑上去谩骂，真是戾气满天。</p>
</li>
</ul>
<h3 id="03-只看得到一件大事"><a class="header-anchor" href="#03-只看得到一件大事"></a>03 只看得到一件大事</h3>
<ul>
<li>他以为扩大朝鲜战争，把中国卷进来，我也一样能打得赢，可是美国图什么，你本来只是要打赢朝鲜战争，这就好比我们开个窗户发现打不开，难道要把屋顶给掀了吗？打仗总得有个为什么吧？如果跟中国全面开战，你真的有把握打得赢吗？请问美国这个血流到什么时候为止？麦克阿瑟作为军人，考虑的仅仅是打不打得赢的问题，可是作为总统的杜鲁门，他得考虑划算不划算的问题，这就是麦克阿瑟作为一个刺猬完全想不到的世界。</li>
</ul>
<h3 id="阅读——从经典到经验"><a class="header-anchor" href="#阅读——从经典到经验"></a>阅读——从经典到经验</h3>
<ul>
<li>阅读如此美好，任何功利心、虚荣心的杂质都是对它的玷污。</li>
</ul>
<h3 id="人类为什么会养猫"><a class="header-anchor" href="#人类为什么会养猫"></a>人类为什么会养猫</h3>
<ul>
<li>比如猫的体格，平均4公斤，抱着猫和抱人类新生儿的感觉差不多。猫的叫声，能让人联想到小孩的哭声。有研究还表明，在进化历史上，猫可能有段时间有意调整过自己的发声，就是为了能更准确地模仿人类小孩哭。人一听猫叫，马上爱心泛滥。</li>
</ul>
<h3 id="什么味道才叫地道"><a class="header-anchor" href="#什么味道才叫地道"></a>什么味道才叫地道</h3>
<p>明代时期辣椒传入中国。史料记载贵州、湖南一带最早开始吃辣椒的时间在清乾隆年间，而普遍开始吃辣椒更迟至道光以后。</p>
<blockquote>
<p>辣椒原产地是美洲，美洲的农作物能传出来，靠的是哥伦布大航海。辣椒传入中国，就不可能早于1492年哥伦布到达美洲。1492年是中国的大明弘治五年。事实上，辣椒、土豆和番茄，这些原产地在美洲的食材传入中国，是明朝末年的事情。而四川人普遍吃辣，那还得追溯到清代初年。</p>
</blockquote>
<ul>
<li>
<p>辣椒原产地是美洲，美洲的农作物能传出来，靠的是哥伦布大航海。辣椒传入中国，就不可能早于1492年哥伦布到达美洲。1492年是中国的大明弘治五年。事实上，辣椒、土豆和番茄，这些原产地在美洲的食材传入中国，是明朝末年的事情。而四川人普遍吃辣，那还得追溯到清代初年。</p>
</li>
<li>
<p>因为明末战乱，四川人口大减，所以清代立国之后，就从各地引入人口到四川，这就是著名的“湖广填四川”。换句话说，今天土生土长的四川人在清代以前，大多都不是四川本地人。移居四川的人不管是自愿的还是被迫的，大概率都是穷人。生活贫苦，没有太多优质的食物来源，经常吃一些野菜或者经过腌制、熏制、发酵的食物，而辣是调味品中比较有遮蔽性的，能够掩盖食材中不新鲜的味道。辣椒其实是这样流行起来的。说起来都是穷人的事，都是泪。</p>
</li>
<li>
<p>饮食文化传播的方向，一般是从劳务输出地区传入劳务输入地区，简单来说，就是贫困地区的人去发达地区打工，会把家乡饮食带过去。</p>
</li>
</ul>
<h3 id="聪明人为什么往往不好打交道"><a class="header-anchor" href="#聪明人为什么往往不好打交道"></a>聪明人为什么往往不好打交道</h3>
<ul>
<li>站在人类社交天性的角度理解，真正让我们觉得紧张的原因是：一旦站到了很多人面前演讲，就让一个风险大增——不喜欢自己、拒绝自己的人数大增。</li>
</ul>
<h3 id="什么是“瘾”"><a class="header-anchor" href="#什么是“瘾”"></a>什么是“瘾”</h3>
<p>咖啡最开始是用于祭祀</p>
<blockquote>
<p>它真正变成饮品，是大概800多年前的事。当时就有人做罪恶的贩奴生意，一些中东地区的人贩子把非洲的奴隶带到了中东。更具体点，是也门一个叫摩卡港的地方。第一杯现代意义上的咖啡，是在这里被发明出来的。人们还用港口的名字给它命名，也就是摩卡咖啡。巧的是，摩卡这个地方又偏偏是个港口，传播能力很强。所以咖啡的喝法，很快就从这里传遍了整个阿拉伯世界。</p>
</blockquote>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL表备份语句（包括索引等）</title>
    <url>/2022/01/09/mysql_backup_table_sql/</url>
    <content><![CDATA[<h2 id="快速备份表字段和数据-不包含主键、索引"><a class="header-anchor" href="#快速备份表字段和数据-不包含主键、索引"></a>快速备份表字段和数据(不包含主键、索引)</h2>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>新表名<span class="operator">&gt;</span>  </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="operator">&lt;</span>旧表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="快速备份表字段-不包含主键、索引"><a class="header-anchor" href="#快速备份表字段-不包含主键、索引"></a>快速备份表字段(不包含主键、索引)</h2>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>新表名<span class="operator">&gt;</span>  </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="operator">&lt;</span>旧表名<span class="operator">&gt;</span> <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">&lt;&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h2 id="备份表字段-包含主键、索引-和数据"><a class="header-anchor" href="#备份表字段-包含主键、索引-和数据"></a>备份表字段(包含主键、索引)和数据</h2>
<p>第一步，备份表字段(包含主键、索引)，语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>新表名<span class="operator">&gt;</span> <span class="keyword">LIKE</span> <span class="operator">&lt;</span>旧表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<p>第二步，迁移数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>  <span class="operator">&lt;</span>新表名<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="operator">&lt;</span>旧表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL把带有分隔符的数据迁移到另一个表</title>
    <url>/2022/01/08/mysql_migrate_delimited_data/</url>
    <content><![CDATA[<h2 id="需求"><a class="header-anchor" href="#需求"></a>需求</h2>
<p>需要把t_achievement表的所属公司id（company_id）、所属公司名称（company_name）、insert_time字段迁移到t_achievement_company_map表，其中company_id和company_name都是通过&quot;、&quot;拼接。这个时候就需要<a href="https://blog.csdn.net/weixin_45127309/article/details/104504970?utm_term=mysql%E5%B0%86%E4%B8%80%E6%9D%A1%E6%95%B0%E6%8D%AE%E6%8B%86%E5%88%86&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-1-104504970&amp;spm=3001.4430">根据分隔符将一行数据拆分成多行数据</a>。t_achievement_company_map表结构如下图所示：</p>
<span id="more"></span>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_achievement_company_map` (</span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键id&#x27;</span>,</span><br><span class="line">	`type` <span class="type">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;所属类别   1研发单位  2销售单位  3所属公司&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">	`achievement_id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;成果库id&#x27;</span>,</span><br><span class="line">	`company_id` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;t_company表id&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">	`company_name` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;t_company表name&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">	`insert_time` <span class="type">BIGINT</span>(<span class="number">19</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;录入时间&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)</span><br><span class="line">COMMENT<span class="operator">=</span><span class="string">&#x27;集团级成果库与公司关联表&#x27;</span></span><br><span class="line"><span class="keyword">COLLATE</span><span class="operator">=</span><span class="string">&#x27;utf8_general_ci&#x27;</span></span><br><span class="line">ENGINE<span class="operator">=</span>InnoDB</span><br><span class="line">AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h2 id="关键函数"><a class="header-anchor" href="#关键函数"></a>关键函数</h2>
<p>substring_index(str,delim,count)</p>
<ul>
<li>str是要处理的字符串</li>
<li>delim是分隔符</li>
<li>count如果是正数从左往右计数，如果是负数从右往左计数<br>
举几个例子：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 返回550000</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;550000、680000、470000、120000&#x27;</span>,<span class="string">&#x27;、&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">-- 返回550000、680000、470000</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;550000、680000、470000、120000&#x27;</span>,<span class="string">&#x27;、&#x27;</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">-- 返回120000</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;550000、680000、470000、120000&#x27;</span>,<span class="string">&#x27;、&#x27;</span>,<span class="number">-1</span>)</span><br><span class="line"><span class="comment">-- 返回680000、470000、120000</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;550000、680000、470000、120000&#x27;</span>,<span class="string">&#x27;、&#x27;</span>,<span class="number">-3</span>)</span><br></pre></td></tr></table></figure>
<h2 id="迁移步骤（方法一）"><a class="header-anchor" href="#迁移步骤（方法一）"></a>迁移步骤（方法一）</h2>
<h3 id="先查询出cmpany-id字段长度最大的记录"><a class="header-anchor" href="#先查询出cmpany-id字段长度最大的记录"></a>先查询出cmpany_id字段长度最大的记录</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(length(company_id)) <span class="keyword">FROM</span> t_achievement;</span><br><span class="line"><span class="comment">-- 返回company_id为&quot;110000、120000、130000、150000、170100、490200&quot;</span></span><br><span class="line"><span class="keyword">SELECT</span> achievement_id,company_id,company_name <span class="keyword">FROM</span> t_achievement <span class="keyword">WHERE</span> length(company_id)<span class="operator">=</span><span class="number">51</span>;</span><br></pre></td></tr></table></figure>
<h3 id="往auto-increment表插入数据"><a class="header-anchor" href="#往auto-increment表插入数据"></a>往auto_increment表插入数据</h3>
<p>auto_increment表的建表sql如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `auto_increment` (</span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">COLLATE</span><span class="operator">=</span><span class="string">&#x27;utf8_general_ci&#x27;</span></span><br><span class="line">ENGINE<span class="operator">=</span>InnoDB</span><br><span class="line">;</span><br></pre></td></tr></table></figure>
<p>上面查询出的最大company_id为&quot;110000、120000、130000、150000、170100、490200&quot;。所以至少需要在auto_increment表中插入6条记录。</p>
<h3 id="开始迁移"><a class="header-anchor" href="#开始迁移"></a>开始迁移</h3>
<p>如果有些company_id不足6个就会重复，加入DISTINCT去重就行。具体代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_achievement_company_map(TYPE,achievement_id,company_id,company_name,insert_time)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">DISTINCT</span> <span class="string">&#x27;3&#x27;</span>, </span><br><span class="line">	 a.achievement_id <span class="keyword">AS</span> achievement_id,</span><br><span class="line">    substring_index(</span><br><span class="line">        substring_index(</span><br><span class="line">            a.company_id,</span><br><span class="line">            <span class="string">&#x27;、&#x27;</span>,</span><br><span class="line">            b.id<span class="operator">+</span> <span class="number">1</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&#x27;、&#x27;</span> ,<span class="operator">-</span> <span class="number">1</span></span><br><span class="line">    ) <span class="keyword">AS</span> company_id,</span><br><span class="line">    substring_index(</span><br><span class="line">        substring_index(</span><br><span class="line">            a.company_name,</span><br><span class="line">            <span class="string">&#x27;、&#x27;</span>,</span><br><span class="line">            b.id<span class="operator">+</span> <span class="number">1</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&#x27;、&#x27;</span> ,<span class="operator">-</span> <span class="number">1</span></span><br><span class="line">    ) <span class="keyword">AS</span> company_name,</span><br><span class="line">    a.insert_time <span class="keyword">AS</span> insert_time</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    t_achievement a</span><br><span class="line"><span class="keyword">JOIN</span> auto_increment b <span class="keyword">ON</span> b.id <span class="operator">&lt;</span> (</span><br><span class="line">    length(a.company_id) <span class="operator">-</span> length(</span><br><span class="line">        REPLACE (a.company_id, <span class="string">&#x27;、&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    ) <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> company_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> company_name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>
<h2 id="迁移步骤（方法二）"><a class="header-anchor" href="#迁移步骤（方法二）"></a>迁移步骤（方法二）</h2>
<p>利用MySQL的help_topic中的help_topic_id，即把auto_increment 替换为mysql.help_topic、id替换为help_topic_id。具体代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.t_achievement_company_map(TYPE,achievement_id,company_id,company_name,insert_time)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">DISTINCT</span> <span class="string">&#x27;3&#x27;</span>, </span><br><span class="line">	 a.achievement_id <span class="keyword">AS</span> achievement_id,</span><br><span class="line">    substring_index(</span><br><span class="line">        substring_index(</span><br><span class="line">            a.company_id,</span><br><span class="line">            <span class="string">&#x27;、&#x27;</span>,</span><br><span class="line">            b.help_topic_id<span class="operator">+</span> <span class="number">1</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&#x27;、&#x27;</span> ,<span class="operator">-</span> <span class="number">1</span></span><br><span class="line">    ) <span class="keyword">AS</span> company_id,</span><br><span class="line">    substring_index(</span><br><span class="line">        substring_index(</span><br><span class="line">            a.company_name,</span><br><span class="line">            <span class="string">&#x27;、&#x27;</span>,</span><br><span class="line">            b.help_topic_id<span class="operator">+</span> <span class="number">1</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&#x27;、&#x27;</span> ,<span class="operator">-</span> <span class="number">1</span></span><br><span class="line">    ) <span class="keyword">AS</span> company_name,</span><br><span class="line">    a.insert_time <span class="keyword">AS</span> insert_time</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    test.t_achievement a</span><br><span class="line"><span class="keyword">JOIN</span> mysql.help_topic b <span class="keyword">ON</span> b.help_topic_id  <span class="operator">&lt;</span> (</span><br><span class="line">    length(a.company_id) <span class="operator">-</span> length(</span><br><span class="line">        REPLACE (a.company_id, <span class="string">&#x27;、&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    ) <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> company_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> company_name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(十)</title>
    <url>/2022/11/10/coding_notes_ten/</url>
    <content><![CDATA[<h2 id="synchronized锁定的对象"><a class="header-anchor" href="#synchronized锁定的对象"></a>synchronized锁定的对象</h2>
<p><strong>synchronized修饰的作用：</strong><br>
让多个线程排队依次获取某个资源，保证数据不会出错(原子性)。<br>
<strong>synchronized锁定的元素:</strong></p>
<ul>
<li>修饰方法
<ul>
<li>静态方法，锁定的是类</li>
<li>普通方法，锁定的时方法的调用者</li>
</ul>
</li>
<li>修饰代码块，锁定的时传入的对象</li>
</ul>
<h2 id="Java线程内存模型-JMM-定义的8中原子操作"><a class="header-anchor" href="#Java线程内存模型-JMM-定义的8中原子操作"></a>Java线程内存模型(JMM)定义的8中原子操作</h2>
<ul>
<li>read(读取)：从主内存中读取数据</li>
<li>load(载入)：将主内存读取到的数据写入工作内存</li>
<li>use(使用)：从工作内存读取数据来计算</li>
<li>assgin(赋值)：将计算好的值重新赋值到工作内存中</li>
<li>store(存储)：将工作内存数据写入主内存，会经过总线，到总线后就开始广播其他线程</li>
<li>write(写入)：将store过去的变量值赋值给主内存中的变量</li>
<li>lock(锁定)：将主内存变量加锁，标识为线程独占状态</li>
<li>unlock(解锁)：将主内存变量解锁，解锁后其他线程可以锁定该变量<br>
<strong>MESI缓存一致性协议：</strong><br>
多个cpu从主内存读取同一个数据到各自的高速缓存，当其中某个cpu修改了缓存里的数据，该数据会马上同步回主内存，其他cpu通过<strong>总线嗅探机制</strong>可以感知到数据的变化从而将自己缓存里的数据失效。<br>
一般lock锁加在线程的赋值之后，存储之前，这样的锁的粒度不大。volatile保证数据可见性、synchronized保证原子性。</li>
</ul>
<span id="more"></span>
<h2 id="MySQL分区学习"><a class="header-anchor" href="#MySQL分区学习"></a>MySQL分区学习</h2>
<p><a href="https://www.cnblogs.com/yeyuzhuanjia/p/16149744.html">参考链接</a>、<a href="https://mp.weixin.qq.com/s/RI9kRqvboxPI-rfE4jPqrw">参考链接</a>、<a href="https://www.cnblogs.com/yaowen/p/16547595.html">参考链接</a></p>
<h2 id="根据hash中的键模糊删除"><a class="header-anchor" href="#根据hash中的键模糊删除"></a>根据hash中的键模糊删除</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据hash中的键模糊删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key redis的key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> item item hash的键</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">removeHashItem</span><span class="params">(String key, String item)</span>&#123;</span><br><span class="line"></span><br><span class="line">	ArrayList&lt;String&gt; items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	<span class="comment">// 模糊查询出准确的item</span></span><br><span class="line">	redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">RedisCallback</span>() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> Object <span class="title function_">doInRedis</span><span class="params">(RedisConnection connection)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">			Cursor&lt;Map.Entry&lt;<span class="type">byte</span>[], <span class="type">byte</span>[]&gt;&gt; entryCursor = connection.hScan(key.getBytes(), ScanOptions.scanOptions().match(<span class="string">&quot;*&quot;</span> + item + <span class="string">&quot;*&quot;</span>).count(<span class="number">1800</span>).build());</span><br><span class="line">			<span class="keyword">while</span>(entryCursor.hasNext())&#123;</span><br><span class="line">				Map.Entry&lt;<span class="type">byte</span>[], <span class="type">byte</span>[]&gt; next = entryCursor.next();</span><br><span class="line">				<span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(next.getKey());</span><br><span class="line">				<span class="comment">// 将查询出的item放入list</span></span><br><span class="line">				items.add(key);</span><br><span class="line">			&#125;</span><br><span class="line">			connection.close();</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="comment">// 批量删除对应key中的item</span></span><br><span class="line">	<span class="keyword">for</span> (String str: items)&#123;</span><br><span class="line">		redisTemplate.opsForHash().delete(key, str);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="union和ordery-by一起使用报-Incorrect-usage-of-UNION-and-ORDER-BY-错误的解决方法"><a class="header-anchor" href="#union和ordery-by一起使用报-Incorrect-usage-of-UNION-and-ORDER-BY-错误的解决方法"></a>union和ordery by一起使用报&quot;Incorrect usage of UNION and ORDER BY&quot;错误的解决方法</h2>
<h3 id="原因"><a class="header-anchor" href="#原因"></a>原因</h3>
<p><strong>每条字句都使用order by会报错。</strong></p>
<h3 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h3>
<p><strong>方法一：只在最后一条字句使用order by，意思是对整个结果集进行order by</strong><br>
参考代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;l%&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;%m%&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>
<p><strong>方法二：union后整体改为临时表</strong><br>
参考代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;l%&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;%m%&#x27;</span>)tmp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> tmp.score <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>
<p><strong>方法三：每一层都改为临时表再union</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;l%&#x27;</span>) t1</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;%m%&#x27;</span>) t2</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/xinpz/article/details/106714234?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-106714234-blog-84915938.pc_relevant_multi_platform_whitelistv6&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-106714234-blog-84915938.pc_relevant_multi_platform_whitelistv6&amp;utm_relevant_index=3">参考链接</a></p>
<h2 id="Spring-Cloud-Config多服务共享公共配置"><a class="header-anchor" href="#Spring-Cloud-Config多服务共享公共配置"></a>Spring Cloud Config多服务共享公共配置</h2>
<p>参考代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">innovation</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">reward-innovation-v1,common</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://10.12.7.124:8888</span></span><br><span class="line">      <span class="attr">failFast:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">main.allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>该代码读取配置中心的common-test.yml和reward-innovation-v1-test.yml文件</strong></p>
<p><a href="https://www.cnblogs.com/werewolfBoy/p/13973036.html">参考链接</a></p>
<h2 id="解决SpringBoot启动报错：NoClassDefFoundError-org-springframework-data-redis-connection-RedisStreamCommands"><a class="header-anchor" href="#解决SpringBoot启动报错：NoClassDefFoundError-org-springframework-data-redis-connection-RedisStreamCommands"></a>解决SpringBoot启动报错：NoClassDefFoundError: org/springframework/data/redis/connection/RedisStreamCommands</h2>
<p>查重管理的时候，在测试环境碰到一模一样的问题。</p>
<p><a href="https://blog.csdn.net/dengchao1013/article/details/104302874">参考链接</a></p>
<h2 id="查看Java进程当前使用的JVM参数"><a class="header-anchor" href="#查看Java进程当前使用的JVM参数"></a>查看Java进程当前使用的JVM参数</h2>
<p><strong>1、jps命令查看当前进程id</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[award_dev@localhost reward_taskjob]$ jps -l</span><br><span class="line">32496 reward-taskjob-202209151113-SNAPSHOT.jar</span><br><span class="line">4931 award-webbas-config-2022-08-29-122959.jar</span><br><span class="line">3187 reward-innovation-202209172040-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p><strong>2、jinfo -flags 进程id 命令查看当前进程使用的JVM参数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[award_dev@localhost reward_taskjob]$ jinfo -flags 32496</span><br><span class="line">Attaching to process ID 32496, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.121-b13</span><br><span class="line">Non-default VM flags: -XX:CICompilerCount=12 -XX:ConcGCThreads=3 -XX:G1HeapRegionSize=1048576 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=null -XX:InitialHeapSize=1289748480 -XX:MarkStackSize=4194304 -XX:MaxHeapSize=2147483648 -XX:MaxNewSize=1287651328 -XX:MinHeapDeltaBytes=1048576 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseG1GC</span><br><span class="line">Command line:  -Dlog4j2.formatMsgNoLookups=<span class="literal">true</span> -DENV_CONFIG_IP=10.12.7.181 -DENV_CONFIG_PORT=9888 -DENV_TYPE=dev -Dname=reward-taskjob-202209151113-SNAPSHOT.jar -Djava.awt.headless=<span class="literal">true</span> -Djava.net.preferIPv4Stack=<span class="literal">true</span> -Duser.timezone=Asia/Shanghai -Djava.io.tmpdir=/opt/aspire/product/award_dev/reward_taskjob/data/tmp -Xms1230m -Xmx2g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=./logs/java_heapdump.hprof -XX:+PrintGCDateStamps -Xloggc:/opt/aspire/product/award_dev/reward_taskjob/logs/gclog/gc-reward-taskjob-202209151113-SNAPSHOT.jar-20220919102315.log -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+UseG1GC</span><br></pre></td></tr></table></figure>
<h2 id="RestTemplate使用Ribbon实现负载均衡的调用"><a class="header-anchor" href="#RestTemplate使用Ribbon实现负载均衡的调用"></a>RestTemplate使用Ribbon实现负载均衡的调用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line">RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接通过服务名调用，Eureka会去找。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">restTemplate.postForObject(<span class="string">&quot;http://webbas32-manage-v1/web/login/findemployeebyphone&quot;</span>, formEntity, String.class);</span><br></pre></td></tr></table></figure>
<p><strong>其中webbas32-manage-v1为接口提供方的服务名</strong><br>
<strong>调用方的Eureka配置需要添加，fetchRegistry: true //表示可以从Eureka Server获取注册的服务信息</strong></p>
<h2 id="RestTemplate-postForObject泛型丢失-返回LinkedHashMap-的问题解决方法"><a class="header-anchor" href="#RestTemplate-postForObject泛型丢失-返回LinkedHashMap-的问题解决方法"></a>RestTemplate.postForObject泛型丢失(返回LinkedHashMap)的问题解决方法</h2>
<p><strong>问题：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/f041c8c5eae77b974e9e3650f471959e.png#pic_center" alt="在这里插入图片描述"><br>
如上图所示，data类型本应该为MemberInfoVo，但是泛型丢失变为LinkedHashMap。</p>
<p><strong>解决方法：</strong><br>
参考代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParameterizedTypeReference&lt;ResponseMsg&lt;MemberInfoVo&gt;&gt; typeRef = <span class="keyword">new</span> <span class="title class_">ParameterizedTypeReference</span>&lt;ResponseMsg&lt;MemberInfoVo&gt;&gt;() &#123;&#125;;</span><br><span class="line">ResponseEntity&lt;ResponseMsg&lt;MemberInfoVo&gt;&gt; result = restTemplate.exchange(findEmployeeUrl, HttpMethod.POST, formEntity, typeRef);</span><br><span class="line">ResponseMsg&lt;MemberInfoVo&gt; responseMsg = result.getBody(); </span><br></pre></td></tr></table></figure>
<p><strong>成功效果：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/7398960fdc994e9c615553469d4ab879.png#pic_center" alt="在这里插入图片描述"><br>
<a href="https://blog.csdn.net/qq_40162735/article/details/100063040">参考链接</a></p>
<h2 id="MyBatis批量更新"><a class="header-anchor" href="#MyBatis批量更新"></a>MyBatis批量更新</h2>
<p><a href="https://blog.csdn.net/suya2011/article/details/121280725">参考链接</a></p>
<h2 id="Spring-Cloud-Eureka自我保护机制"><a class="header-anchor" href="#Spring-Cloud-Eureka自我保护机制"></a>Spring Cloud Eureka自我保护机制</h2>
<p><a href="https://www.cnblogs.com/linjiqin/p/10087462.html">参考链接</a></p>
<h2 id="Spring-Cloud-Eureka控制台相关配置参数学习"><a class="header-anchor" href="#Spring-Cloud-Eureka控制台相关配置参数学习"></a>Spring Cloud Eureka控制台相关配置参数学习</h2>
<p><a href="https://blog.csdn.net/yucaifu1989/article/details/105792901?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-105792901-blog-124334087.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-105792901-blog-124334087.pc_relevant_default&amp;utm_relevant_index=2">参考链接</a></p>
<h2 id="SpringBoot配置默认sql级别info、sql打印级别为debug"><a class="header-anchor" href="#SpringBoot配置默认sql级别info、sql打印级别为debug"></a>SpringBoot配置默认sql级别info、sql打印级别为debug</h2>
<p><strong>SpringBoot的默认使用的日志框架为logback，且默认的日志级别均为INFO。<br>
为了打印sql日志信息，我们只需把对应dao层包下的日志级别改为DEBUG。</strong></p>
<p>示例代码如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># log  </span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:log4j2-dev.xml</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">	<span class="comment"># dao层包下的日志级别修改</span></span><br><span class="line">    <span class="attr">com:</span></span><br><span class="line">      <span class="attr">aspirecn:</span></span><br><span class="line">        <span class="attr">rewardmanagement:</span></span><br><span class="line">          <span class="attr">mapper:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/m0_38001814/article/details/89378665">参考链接</a></p>
<h2 id="IDEA解决完所有冲突但是分支还是在Merging状态的解决方法"><a class="header-anchor" href="#IDEA解决完所有冲突但是分支还是在Merging状态的解决方法"></a>IDEA解决完所有冲突但是分支还是在Merging状态的解决方法</h2>
<p><strong>1、通过git status命令查看信息(关键)：</strong><br>
All conflicts fixed but you are still merging(use “git commit” to conclude merge)<br>
<strong>2、根据第一步的信息提示做操作</strong><br>
示例操作如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&#x27;合并master&#x27;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/qq_24735877/article/details/80847372">参考链接</a></p>
<h2 id="SpringBoot中使用-Value读取配置文件中的list、map"><a class="header-anchor" href="#SpringBoot中使用-Value读取配置文件中的list、map"></a>SpringBoot中使用@Value读取配置文件中的list、map</h2>
<p><strong>配置文件代码：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">myList:</span> <span class="string">item1,item2,item3</span></span><br><span class="line"><span class="attr">myMap:</span> <span class="string">&quot;&#123;key1: &#x27;value1&#x27;, key2: &#x27;value2&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>Java代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;&#x27;$&#123;myList&#125;&#x27;.split(&#x27;,&#x27;)&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Value(&quot;#&#123;$&#123;myMap&#125;&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">private</span> Map&lt;String,String&gt; myMap;</span><br></pre></td></tr></table></figure>
<p>注意：<br>
上面的list配置中，<strong>一定不要</strong>用&quot;&quot;把list所有的成员value包起来，要不然解析报错。<br>
上面的map配置中，<strong>一定要用&quot;&quot;</strong> 把map所对应的value包起来，要不然解析解析报错。</p>
<p><a href="https://www.cnblogs.com/duanxz/p/4520627.html">参考链接</a></p>
<h2 id="SpringBoot中多个-ControllerAdvice全局异常处理"><a class="header-anchor" href="#SpringBoot中多个-ControllerAdvice全局异常处理"></a>SpringBoot中多个@ControllerAdvice全局异常处理</h2>
<p><strong>多个ControllerAdvice，优先级由@Order决定，order的数值越小 则优先级越高。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsControllerAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：@ControllerAdvice只能对controller抛出的异常处理</strong></p>
<p><a href="https://blog.csdn.net/u014320421/article/details/121409365?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-121409365-blog-106361438.pc_relevant_aa_2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-121409365-blog-106361438.pc_relevant_aa_2&amp;utm_relevant_index=5">多个@ControllerAdvice全局异常处理(含多个实用场景)</a>、<br>
<a href="https://blog.csdn.net/gaoshan12345678910/article/details/106361438">@ControllerAdvice优先级设定</a></p>
<h2 id="SpringCloud-zuul路由手动配置"><a class="header-anchor" href="#SpringCloud-zuul路由手动配置"></a>SpringCloud zuul路由手动配置</h2>
<p><strong>示例代码：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">api-a:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-a/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">service-ribbon</span></span><br><span class="line">    <span class="attr">api-b:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-b/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">service-feign</span></span><br></pre></td></tr></table></figure>
<p><strong>zuul路由配置说明：api-a、api-b是路由名称可以随便取，serviceId是服务的id(对应spring.application.name)。<br>
上面配置表示，以/api-a/ 开头的请求都转发给service-ribbon服务；以/api-b/开头的请求都转发给service-feign服务。</strong></p>
<h2 id="SpringCloud-zuul的路由默认自动配置"><a class="header-anchor" href="#SpringCloud-zuul的路由默认自动配置"></a>SpringCloud zuul的路由默认自动配置</h2>
<p>zuul可以自动根据Eureka服务器中所注册的服务自动完成路由映射、负载均衡。<br>
在Eureka上注册了两个服务：<br>
1、服务名management，端口18081<br>
2、服务名gateway，端口7001<br>
请求路径，127.0.0.1:7001/management/addressBook/getList，网关zuul会把请求转发给management服务，<br>
实际请求路径127.0.0.1:18081/addressBook/getList</p>
<p><a href="https://www.csdn.net/tags/MtjaggwsNjMyMTgtYmxvZwO0O0OO0O0O.html">参考链接</a></p>
<h2 id="dependencyManagement标签的作用"><a class="header-anchor" href="#dependencyManagement标签的作用"></a>dependencyManagement标签的作用</h2>
<p><strong>在Maven中dependencyManagement的作用其实相当于一个对所依赖jar包进行版本管理的管理器。</strong><br>
<strong>jar的版本判断的两种途径：</strong></p>
<ul>
<li>如果dependencies里的dependency自己没有声明version元素，那么maven就会到dependencyManagement里面去找有没有对该artifactId和groupId进行过版本声明。如果有，就继承它，如果没有就会报错，告诉你必须为dependency声明一个version。</li>
<li>如果dependencies中的dependency声明了version，那么无论dependencyManagement中有无对该jar的version声明，都以dependency里的version为准。</li>
</ul>
<p><strong>示例代码如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--只是对版本进行管理，不会实际引入jar  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--会实际下载jar包  --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="http://t.zoukankan.com/wk-missQ1-p-14049836.html">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>MySQL</tag>
        <tag>SpringBoot</tag>
        <tag>Redis</tag>
        <tag>RestTemplate</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(七)</title>
    <url>/2022/02/01/coding_notes_seven/</url>
    <content><![CDATA[<p>作为码农平时搜集一些小知识点个人认为是个不错的习惯，书上说</p>
<blockquote>
<p>好记性不如烂笔头</p>
</blockquote>
<p>我想即使是以前忽略或者新get的很简单的东西，自己动手记下来不管如何印象也会更深刻。</p>
<span id="more"></span>
<h2 id="Java导入1W条数据耗时超过100秒"><a class="header-anchor" href="#Java导入1W条数据耗时超过100秒"></a>Java导入1W条数据耗时超过100秒</h2>
<p>项目中导入一个含合并单元格的Excel，1W条数据耗时超过100秒。Excel模板如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/746a79cc15e45875c5366d974975818a.png" alt="在这里插入图片描述"></p>
<p><strong>数据库设计：</strong><br>
合并单元格部分(框红部分)存入主表，后面的部分存入详细表。<br>
目前代码逻辑：</p>
<ul>
<li>循环插入主表</li>
<li>然后把主表返回的主键封装到详细表的所需数据，批量插入详细表</li>
</ul>
<p><strong>问题原因：</strong><br>
导入1W条数据(如果全部未合并单元格)会循环插入主表数据库1W次，然后循环插入从表数据库1W次，效率及其低。</p>
<p><strong>解决方法：</strong></p>
<ul>
<li>把数据库主键自增改为UUID，通过Java代码生成<br>
UUID uuid = UUID.randomUUID();</li>
<li>封装主表数据批量插入、封装详细表数据批量插入</li>
</ul>
<p>修改完成后1.1W条数据第一次12秒，之后大概6秒左右就可以插入完。</p>
<h2 id="Java正则表达式的几种实现方式"><a class="header-anchor" href="#Java正则表达式的几种实现方式"></a>Java正则表达式的几种实现方式</h2>
<ul>
<li>方法一</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern.matches(regex, str);</span><br></pre></td></tr></table></figure>
<ul>
<li>方法二</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.matches(regex);</span><br></pre></td></tr></table></figure>
<ul>
<li>方法三</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(str);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> m.matches();</span><br></pre></td></tr></table></figure>
<p>Matcher中的find()方法可以获取匹配的具体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(m.find()) &#123;</span><br><span class="line">		System.out.println(m.start());</span><br><span class="line">		System.out.println(m.end());</span><br><span class="line">		System.out.println(m.group());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Linux查询进程、杀进程命令"><a class="header-anchor" href="#Linux查询进程、杀进程命令"></a>Linux查询进程、杀进程命令</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查询进程</span><br><span class="line">ps -ef|grep xxx.jar</span><br><span class="line">UID       PID       PPID      C     STIME    TTY       TIME         CMD</span><br><span class="line"></span><br><span class="line">zzw      14124   13991      0     00:38      pts/0      00:00:00    grep --color=auto dae</span><br><span class="line"></span><br><span class="line">// 杀进程命令</span><br><span class="line"><span class="built_in">kill</span> -9 进程号</span><br></pre></td></tr></table></figure>
<h2 id="Linux查看输出日志命令"><a class="header-anchor" href="#Linux查看输出日志命令"></a>Linux查看输出日志命令</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//  实时查看</span><br><span class="line"><span class="built_in">tail</span> -f 文件名</span><br><span class="line">// 查看最后1000行日志</span><br><span class="line"><span class="built_in">tail</span> -n 1000 文件名</span><br></pre></td></tr></table></figure>
<h2 id="IDEA远程Debug调试"><a class="header-anchor" href="#IDEA远程Debug调试"></a>IDEA远程Debug调试</h2>
<p><strong>1、使用下面的JVM参数运行远程服务器的项目</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar -Xdebug -Xrunjdwp:transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=5005 kjcgkyg-0.0.1-SNAPSHOT.jar &amp;</span><br></pre></td></tr></table></figure>
<p><strong>2、在IDEA中连接远程服务器</strong></p>
<p><a href="https://www.jianshu.com/p/302dc10217c0">使用IDEA进行远程调试</a></p>
<h2 id="spring-注解-primary解析"><a class="header-anchor" href="#spring-注解-primary解析"></a>spring 注解@primary解析</h2>
<p>@primary的作用是在多个类同时实现一个接口时，优先选择Bean注入。可以直接在类上使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperaSinger</span> <span class="keyword">implements</span> <span class="title class_">Singer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sing</span><span class="params">(String lyrics)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am OperaSinger: &quot;</span>+lyrics;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以在配置类的方法中使用,这种方法会被@Qualifier(value = “operaSinger”)注解覆盖：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="keyword">public</span> Singer <span class="title function_">getSinger</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是CustomerConfiguration.getSinger！！！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MetalSinger</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/liaoguolingxian/article/details/70176666">参考链接</a></p>
<h2 id="Resource可以和-Qualifier有一样的作用"><a class="header-anchor" href="#Resource可以和-Qualifier有一样的作用"></a>@Resource可以和@Qualifier有一样的作用</h2>
<p><a href="https://blog.csdn.net/qq_36567005/article/details/80611139">参考链接</a></p>
<h2 id="MySQL根据多字段查询出重复记录"><a class="header-anchor" href="#MySQL根据多字段查询出重复记录"></a>MySQL根据多字段查询出重复记录</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> t_awards <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (</span><br><span class="line"> <span class="keyword">SELECT</span>  id <span class="keyword">FROM</span> t_awards <span class="keyword">GROUP</span> <span class="keyword">BY</span> id,award_year,award_product</span><br><span class="line"> <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="MySQL取整的函数"><a class="header-anchor" href="#MySQL取整的函数"></a>MySQL取整的函数</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 向上取整</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(<span class="number">1</span><span class="operator">/</span><span class="number">2</span>);  <span class="operator">/</span><span class="operator">/</span> <span class="number">1</span></span><br><span class="line"># 向下取整</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">0.6</span>);  <span class="operator">/</span><span class="operator">/</span> <span class="number">0</span></span><br><span class="line"># 四舍五入</span><br><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">1.5</span>);  <span class="operator">/</span><span class="operator">/</span> <span class="number">2</span>  </span><br></pre></td></tr></table></figure>
<h2 id="MySQL-8-0忘记密码怎么办"><a class="header-anchor" href="#MySQL-8-0忘记密码怎么办"></a>MySQL 8.0忘记密码怎么办</h2>
<p><a href="https://www.cnblogs.com/feiyangbaqingchun/p/9751184.html">参考链接1</a>、<a href="https://www.cnblogs.com/zyulike/p/13913009.html">参考链接2</a></p>
<h2 id="MySQL-8-0官网解压版安装详细教程"><a class="header-anchor" href="#MySQL-8-0官网解压版安装详细教程"></a>MySQL 8.0官网解压版安装详细教程</h2>
<p><a href="https://www.cnblogs.com/puhongjun/p/10076039.html">参考链接</a></p>
<h2 id="exists和in的区别"><a class="header-anchor" href="#exists和in的区别"></a>exists和in的区别</h2>
<ul>
<li>in引导的子查询只能返回一个字段，exists子查询可以有多个字段</li>
<li>exists使用循环的方式，由outer表的记录数决定循环的次数，对于exists的影响最大，所以，外表的记录越小，子查询结果集较大时适用于exists</li>
<li>in 先执行子查询，子查询的结果返回去重之后，再执行主查询，所以，子查询的返回结果越少，越适合使用in关键字。</li>
</ul>
<h2 id="MySQL用一个表更新另一个表"><a class="header-anchor" href="#MySQL用一个表更新另一个表"></a>MySQL用一个表更新另一个表</h2>
<p><a href="https://blog.csdn.net/weixin_42724467/article/details/88873183">参考链接</a></p>
<h2 id="git回滚commit的近几次版本"><a class="header-anchor" href="#git回滚commit的近几次版本"></a>git回滚commit的近几次版本</h2>
<ul>
<li><strong>方法一</strong><br>
回退最近几次提交<br>
git  reset  --soft  head~最后次数</li>
<li><strong>方法二</strong><br>
git log、git  reset  --hard commitId<br>
回退到commitId时的代码</li>
<li><strong>方法三</strong><br>
git log<br>
然后用IDEA操作<br>
回退到commitId时的代码</li>
</ul>
<p><a href="https://blog.csdn.net/qq_30614883/article/details/80996656">参考链接1</a>、<a href="https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting">参考链接2</a></p>
<h2 id="MySQL根据年份和id排序后-取前后五条数据的SQL"><a class="header-anchor" href="#MySQL根据年份和id排序后-取前后五条数据的SQL"></a>MySQL根据年份和id排序后,取前后五条数据的SQL</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/6e3360966c4604f143d2db08b51f5fb5.png" alt="在这里插入图片描述"><br>
思路：可以先通过连接工具观察，然后一步一步调试写出sql。例子中的2022和199作为参数传过来的前后五条sql如下所示：<br>
<strong>前五条sql:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,project_code,project_name</span><br><span class="line"><span class="keyword">FROM</span> t_project_base_info</span><br><span class="line"><span class="keyword">WHERE</span> delete_flag <span class="operator">=</span> <span class="number">0</span> <span class="keyword">AND</span> ((project_year <span class="operator">=</span> <span class="number">2022</span> <span class="keyword">and</span> id <span class="operator">&gt;</span> <span class="number">199</span>) <span class="keyword">or</span> project_year <span class="operator">&gt;</span> <span class="number">2022</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> project_year <span class="keyword">asc</span>,id <span class="keyword">asc</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><strong>后五条sql:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,project_code,project_name</span><br><span class="line"><span class="keyword">FROM</span> t_project_base_info</span><br><span class="line"><span class="keyword">WHERE</span> delete_flag <span class="operator">=</span> <span class="number">0</span> <span class="keyword">AND</span> ((project_year <span class="operator">=</span> <span class="number">2022</span> <span class="keyword">and</span> id <span class="operator">&lt;</span> <span class="number">199</span>) <span class="keyword">or</span> project_year <span class="operator">&lt;</span> <span class="number">2022</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> project_year <span class="keyword">desc</span>,id <span class="keyword">desc</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure>
<h2 id="MyBatis映射集合，参数传入多个"><a class="header-anchor" href="#MyBatis映射集合，参数传入多个"></a>MyBatis映射集合，参数传入多个</h2>
<p>xml映射文件代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;nextList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.aspirecn.kjcgkmh.rms.vo.RecommendedReadingVo&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;selectNextList&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;&#123;id=id,projectYear=project_year,cgkCompanyCode=cgk_company_code,roleKey=roleKey&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中，id、project_year、cgk_company_code是当前表的字段，id、projectYear、cgkCompanyCode作为SQL查询参数传入id为selectNextList的SQL。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 后五条 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectNextList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.aspirecn.kjcgkmh.rms.vo.RecommendedReadingVo&quot;</span>&gt;</span></span><br><span class="line">  SELECT project_code,project_name</span><br><span class="line">  FROM t_project_base_info</span><br><span class="line">  WHERE delete_flag = 0 and cgk_company_code !=100</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;roleKey != null and roleKey != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and cgk_company_code = #&#123;cgkCompanyCode&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  and ((project_year = #&#123;projectYear&#125; and id <span class="symbol">&amp;lt;</span> #&#123;id&#125;) or project_year <span class="symbol">&amp;lt;</span> #&#123;projectYear&#125;)</span><br><span class="line">  order by project_year desc,id desc</span><br><span class="line">  LIMIT 0,5</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 前五条 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPreviousList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.aspirecn.kjcgkmh.rms.vo.RecommendedReadingVo&quot;</span>&gt;</span></span><br><span class="line">  SELECT project_code,project_name</span><br><span class="line">  FROM t_project_base_info</span><br><span class="line">  WHERE delete_flag = 0 and cgk_company_code !=100</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;roleKey != null and roleKey != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and cgk_company_code = #&#123;cgkCompanyCode&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  and ((project_year = #&#123;projectYear&#125; and id &gt; #&#123;id&#125;) or project_year &gt; #&#123;projectYear&#125;)</span><br><span class="line">  order by project_year asc,id asc</span><br><span class="line">  LIMIT 0,5</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Mapper.java代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;RecommendedReadingVo&gt; <span class="title function_">selectNextList</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br></pre></td></tr></table></figure>
<p>注意，因为接收有多个参数，<strong>方法的参数应该为map类型(即使只有一个参数)</strong>，否则会报错！</p>
<h2 id="Springboot获取配置文件属性的几种方法"><a class="header-anchor" href="#Springboot获取配置文件属性的几种方法"></a>Springboot获取配置文件属性的几种方法</h2>
<p><a href="https://blog.csdn.net/baidu_35160588/article/details/100749171">参考链接1</a>、<a href="https://www.cnblogs.com/zad27/p/10483484.html">参考链接2</a></p>
<h2 id="BeanMap不能进行put操作"><a class="header-anchor" href="#BeanMap不能进行put操作"></a>BeanMap不能进行put操作</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BeanMap</span> <span class="variable">map</span> <span class="operator">=</span> BeanMap.create(req);</span><br><span class="line"><span class="comment">// 不能进行put操作,没有效果</span></span><br><span class="line">map.put(<span class="string">&quot;cgkCompanyCode&quot;</span>,companyCode);</span><br></pre></td></tr></table></figure>
<h2 id="SpringBoot配置集合-数组"><a class="header-anchor" href="#SpringBoot配置集合-数组"></a>SpringBoot配置集合(数组)</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// yml配置文件中</span></span><br><span class="line">rolekey:</span><br><span class="line">  interfaceAndRms: [<span class="number">13</span>,<span class="number">18</span>]</span><br><span class="line"><span class="comment">// Java代码中（：后面的表示若配置文件取不到用默认值）</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;interfaceAndRms:13,18&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; interfaceAndRms;   	</span><br></pre></td></tr></table></figure>
<h2 id="MySQL替换指定字段中的字符串"><a class="header-anchor" href="#MySQL替换指定字段中的字符串"></a>MySQL替换指定字段中的字符串</h2>
<p>MySQL有replace函数<br>
<strong>语法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">replace (`field_name`,<span class="string">&#x27;from_str&#x27;</span>,<span class="string">&#x27;to_str&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把t_achievement表的company_name字段中的&quot;,&quot;的替换为&quot;、&quot;</span></span><br><span class="line"><span class="keyword">UPDATE</span> t_achievement</span><br><span class="line"><span class="keyword">SET</span> company_name <span class="operator">=</span> replace(company_name, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;、&#x27;</span>)</span><br><span class="line"><span class="keyword">WHERE</span> company_name <span class="keyword">LIKE</span> <span class="string">&#x27;%,%&#x27;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/mafeng/p/11412783.html">参考链接</a></p>
<h2 id="SpringBoot事务学习"><a class="header-anchor" href="#SpringBoot事务学习"></a>SpringBoot事务学习</h2>
<p>1、确保在启动类中添加了@EnableTransactionManagement注解，在seivice中添加@Transactional 注解<br>
Spring底层会设置数据库开启事务、不自动提交，所以加上上面两个注解就可以了。<br>
2、事务回滚<br>
Spring事务默认只在发生未被捕获的RuntimeExcetpion时才回滚。可以捕获到异常后抛出新的RuntimeExcetpion，推荐这种方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入失败后抛出自定义异常(继承RuntimeExcetpion)，事务才能回滚</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">                            achievementTagMapper.insertSelective(achievementTag);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            log.error(<span class="string">&quot;AchievementServiceImpl.importAchievement批量插入achievementTag表失败：&quot;</span>, e.getMessage());</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CommonsException</span>(MessageCode.Insert_Error, e);</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure>
<p>也可以捕获异常后添加<br>
TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();代码<br>
手动回滚，这样上层就无需去处理异常，但是这样接口出错信息返回不到前端了。</p>
<p>service类中不加@Transactional注解，方法A调用方法B<br>
1、注解加在方法A，方法B不加：<br>
①方法A异常(抛出)<br>
方法A中事务回滚，不走方法B<br>
②方法B异常(抛出)<br>
方法A，方法B事务都回滚</p>
<p>2、注解加在方法B，方法A不加：<br>
①方法A异常(抛出)<br>
方法A中事务不回滚，不走方法B<br>
②方法B异常(抛出)<br>
方法A事务不回滚，方法B回滚</p>
<p>service类中加@Transactional注解，相当于所有方法都加了注解</p>
<p><a href="https://blog.csdn.net/HD243608836/article/details/106681658?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~OPENSEARCH~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~OPENSEARCH~default-1.no_search_link">参考链接</a></p>
<h2 id="查看MySQL事务开启"><a class="header-anchor" href="#查看MySQL事务开启"></a>查看MySQL事务开启</h2>
<p><a href="https://my.oschina.net/u/3576777/blog/3109998">参考链接</a></p>
<h2 id="Java替换最后一个字符"><a class="header-anchor" href="#Java替换最后一个字符"></a>Java替换最后一个字符</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 替换最后一个字符</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: text 要操作的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: currentStr 最后一个字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: targetStr  想替换为的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liquanhong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/11/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replaceLast</span><span class="params">(String text, String currentStr, String targetStr)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> text.replaceFirst(<span class="string">&quot;(?s)&quot;</span> + currentStr + <span class="string">&quot;(?!.*?&quot;</span> + currentStr + <span class="string">&quot;)&quot;</span>, targetStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;、1232、43424、、55、、&quot;</span>;</span><br><span class="line"><span class="comment">// 输出：、1232、43424、、55、</span></span><br><span class="line">System.out.println(replaceLast(str,<span class="string">&quot;、&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br></pre></td></tr></table></figure>
<h2 id="Java替换第一个字符"><a class="header-anchor" href="#Java替换第一个字符"></a>Java替换第一个字符</h2>
<p>用Java String自带的replaceFirst方法，第一个参数是正则表达式<br>
例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;、1232、43424、、55、、&quot;</span>;</span><br><span class="line"><span class="comment">// 输出：1232、43424、、55、、</span></span><br><span class="line">System.out.println(str.replaceFirst(<span class="string">&quot;、&quot;</span>, <span class="string">&quot;&quot;</span> ));</span><br></pre></td></tr></table></figure>
<h2 id="MySQL查询Text字段会非常慢-IO慢-，高并发下会特别明显。"><a class="header-anchor" href="#MySQL查询Text字段会非常慢-IO慢-，高并发下会特别明显。"></a>MySQL查询Text字段会非常慢(IO慢)，高并发下会特别明显。</h2>
<p>列表查询尽量不要查这个字段。可以改为blob数据类型，得代码转换。</p>
<h2 id="bootstrap-yml配置"><a class="header-anchor" href="#bootstrap-yml配置"></a>bootstrap.yml配置</h2>
<ul>
<li>SpringBoot 项目中如果没有依赖spring-cloud-context的话不会读取到bootstrap.properties(yml)文件，bootstrap.yml配置是SpringCloud项目才会用到的。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-cloud-context 加这个才能激活bootstrap.yml配置 注意springBoot的版本不能太高 否则项目起不来--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>bootstrap中的相同配置会被覆盖，bootstrap中的相同配置会被覆盖(亲自测试)，所以application中不要配置bootstrap中已有的配置。</li>
<li>applicaiton中的配置按优先级，以第一次读取的为准。即优先级从高到低，高优先级的配置覆盖低优先级的配置，所有配置会形成互补配置。</li>
<li>一般服务名和配置中心信息在bootstrp文件中指定。</li>
</ul>
<h2 id="BeanMap存在很多问题，最好用反射转换对象为Java原生Map"><a class="header-anchor" href="#BeanMap存在很多问题，最好用反射转换对象为Java原生Map"></a>BeanMap存在很多问题，最好用反射转换对象为Java原生Map</h2>
<h2 id="MySQL操作binlog相关命令"><a class="header-anchor" href="#MySQL操作binlog相关命令"></a>MySQL操作binlog相关命令</h2>
<ul>
<li>查询所有相关日志<br>
SHOW MASTER logs;</li>
<li>最新使用的日志<br>
SHOW MASTER status;</li>
<li>查询指定日志文件修改<br>
SHOW BINLOG EVENTS IN ‘binlog.000014’;</li>
<li>把指定时间开始的binlog导出为sql文件<br>
mysqlbinlog --no-defaults --start-datetime=“2021-12-08 16:00:00” “D:\Program Files\mysql-8.0.27-winx64\Data\binlog.000014” &gt; D:\export\test1.sql</li>
</ul>
<h2 id="IDEA有时候修改父项目pom-xml，子项目没有引用到父项目的jar包"><a class="header-anchor" href="#IDEA有时候修改父项目pom-xml，子项目没有引用到父项目的jar包"></a>IDEA有时候修改父项目pom.xml，子项目没有引用到父项目的jar包</h2>
<p>解决方法：先看父项目中是否引用到，如果父项目有子项目没有，清理IDEA缓存重启一下(已经这样解决两次了)。</p>
<h2 id="Linux查看端口占用情况"><a class="header-anchor" href="#Linux查看端口占用情况"></a>Linux查看端口占用情况</h2>
<p>命令：lsof -i:端口号<br>
例子：<br>
查看服务器 8000 端口的占用情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lsof -i:<span class="number">8000</span></span><br></pre></td></tr></table></figure>
<p>COMMAND   PID USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME<br>
nodejs  26993 root   10u  IPv4 37999514      0t0  TCP *:8000 (LISTEN)<br>
可以看到 8000 端口已经被轻 nodejs 服务占用。</p>
<h2 id="Java8中list转map如果Key重复的解决方法"><a class="header-anchor" href="#Java8中list转map如果Key重复的解决方法"></a>Java8中list转map如果Key重复的解决方法</h2>
<p>若不处理会抛异常<br>
java.lang.IllegalStateException: Duplicate key 11<br>
<strong>解决方法：用第二个key覆盖第一个key。</strong><br>
示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,String&gt; roleKeyMap = allRoleList.stream()</span><br><span class="line">                .collect(Collectors.toMap(Role::getName, Role::getRoleKey, (key1, key2) -&gt; key2));</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/zlj1217/article/details/81611834">参考链接</a></p>
<h2 id="HttpClient的一些方法"><a class="header-anchor" href="#HttpClient的一些方法"></a>HttpClient的一些方法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">httpResponse = httpClient.execute(httpPost);</span><br><span class="line"><span class="comment">// 获取状态码</span></span><br><span class="line"><span class="type">int</span> statusCode=httpResponse.getStatusLine().getStatusCode();</span><br><span class="line"><span class="comment">// 从响应对象中获取响应内容并转为String</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(httpResponse.getEntity());</span><br><span class="line"><span class="comment">// 把result转为HashMap</span></span><br><span class="line"><span class="type">HashMap</span> <span class="variable">resultMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(result, HashMap.class);</span><br></pre></td></tr></table></figure>
<h2 id="MySQL模糊匹配表名拼接删表语句"><a class="header-anchor" href="#MySQL模糊匹配表名拼接删表语句"></a>MySQL模糊匹配表名拼接删表语句</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">drop</span>不支持删表</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT( <span class="string">&#x27;drop table &#x27;</span>, TABLE_NAME, <span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> information_schema.tables</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="keyword">LIKE</span> <span class="string">&#x27;wb_role_%&#x27;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>MySQL</tag>
        <tag>SpringBoot</tag>
        <tag>IntelliJ IDEA</tag>
        <tag>MyBatis</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyExcel导出自定义合并单元格的策略</title>
    <url>/2022/02/13/easyexcel_customize_the_policy_for_merging_cells/</url>
    <content><![CDATA[<h2 id="需求概述"><a class="header-anchor" href="#需求概述"></a>需求概述</h2>
<p>项目中需要导出的Excel如下所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/df430c6c56104ce982f02a655701d609.png#pic_center" alt="在这里插入图片描述"><br>
目前的列表是查询出所有行的数据，前端再去按主键进行合并的。所以，<strong>导出时只要Excel下一行的主键相同，就合并上一行框红的列。</strong></p>
<p>目前网上找到的EasyExcel自定义合并单元格都是ExcelFillCellMergeStrategy，这个工具类只要下一行的cell和上一行的cell内容相同就会合并，不符合目前的需求。本例也是在此基础上进行逻辑修改。 <a href="https://blog.csdn.net/Chen_1999/article/details/121905597?utm_medium=distribute.pc_relevant.none-task-blog-2defaultbaidujs_utm_term~default-1.pc_relevant_default&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4">参考链接</a>。</p>
<span id="more"></span>
<h2 id="测试代码"><a class="header-anchor" href="#测试代码"></a>测试代码</h2>
<p>引入相关依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ExcelModel类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ContentRowHeight(15)</span> <span class="comment">//内容行高</span></span><br><span class="line"><span class="meta">@HeadRowHeight(20)</span><span class="comment">//表头行高</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelModel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RESEXCELNAME</span> <span class="operator">=</span> <span class="string">&quot;document.xlsx&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TEMPLATEEXCELNAME</span> <span class="operator">=</span> <span class="string">&quot;文章管理&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;.xlsx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * notice</span></span><br><span class="line"><span class="comment">     * 当采用模板上传Excel且.needHead(false)设置了不生成标题头  <span class="doctag">@ColumnWidth</span>(10)标签将无效，根据模板头的长度来走</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ColumnWidth(10)</span><span class="comment">//单元格长度</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;序号&quot;, index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> String order;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(20)</span><span class="comment">//单元格长度</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;文章标题&quot;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(15)</span><span class="comment">//单元格长度</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;单位&quot;, index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String company;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(15)</span><span class="comment">//单元格长度</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;编号&quot;, index = 3)</span></span><br><span class="line">    <span class="keyword">private</span> String documentCode;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(12)</span><span class="comment">//单元格长度</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;发文日期&quot;, index = 4)</span></span><br><span class="line">    <span class="keyword">private</span> String publishDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(25)</span><span class="comment">//单元格长度</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;意见&quot;, index = 5)</span></span><br><span class="line">    <span class="keyword">private</span> String idea;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ExcelFillCellMergeStrategy类(核心)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * EasyExcel导出自定义合并单元格策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liquanhong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2022/01/21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelFillCellMergeStrategy</span> <span class="keyword">implements</span> <span class="title class_">CellWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要从第几行开始合并，0表示第1行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mergeRowIndex</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 合并的哪些列，比如为4时，当前行id和上一行id相同则合并前五列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mergeColumnRegion</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelFillCellMergeStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelFillCellMergeStrategy</span><span class="params">(<span class="type">int</span> mergeRowIndex, <span class="type">int</span> mergeColumnRegion)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mergeRowIndex = mergeRowIndex;</span><br><span class="line">        <span class="built_in">this</span>.mergeColumnRegion = mergeColumnRegion;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="comment">// 隐藏id列</span></span><br><span class="line">        writeSheetHolder.getSheet().setColumnHidden(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDataConverted</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer integer, Boolean aBoolean)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;CellData&gt; list, Cell cell, Head head, Integer integer, Boolean aBoolean)</span> &#123;</span><br><span class="line">        <span class="comment">//当前行</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">curRowIndex</span> <span class="operator">=</span> cell.getRowIndex();</span><br><span class="line">        <span class="comment">//当前列</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">curColIndex</span> <span class="operator">=</span> cell.getColumnIndex();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (curRowIndex &gt; mergeRowIndex) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mergeColumnRegion; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (curColIndex &lt;= mergeColumnRegion) &#123;</span><br><span class="line">                    mergeWithPreviousRow(writeSheetHolder, cell, curRowIndex, curColIndex);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前单元格向上合并：当前行的id和上一行的id相同则合并前面（mergeColumnRegion+1）列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell             当前单元格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> curRowIndex      当前行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> curColIndex      当前列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mergeWithPreviousRow</span><span class="params">(WriteSheetHolder writeSheetHolder, Cell cell, <span class="type">int</span> curRowIndex, <span class="type">int</span> curColIndex)</span> &#123;</span><br><span class="line">        <span class="comment">// 当前行的第一个Cell</span></span><br><span class="line">        <span class="type">Cell</span> <span class="variable">curFirstCell</span> <span class="operator">=</span> cell.getSheet().getRow(curRowIndex).getCell(<span class="number">0</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">curFirstData</span> <span class="operator">=</span> curFirstCell.getCellTypeEnum() == CellType.STRING ? curFirstCell.getStringCellValue() : curFirstCell.getNumericCellValue();</span><br><span class="line">        <span class="comment">// 上一行的第一个Cell</span></span><br><span class="line">        <span class="type">Cell</span> <span class="variable">preFirstCell</span> <span class="operator">=</span> cell.getSheet().getRow(curRowIndex - <span class="number">1</span>).getCell(<span class="number">0</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">preFirstData</span> <span class="operator">=</span> preFirstCell.getCellTypeEnum() == CellType.STRING ? preFirstCell.getStringCellValue() : preFirstCell.getNumericCellValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前行的id和上一行的id相同则合并前面（mergeColumnRegion+1）列</span></span><br><span class="line">        <span class="keyword">if</span> (curFirstData.equals(preFirstData)) &#123;</span><br><span class="line">            <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> writeSheetHolder.getSheet();</span><br><span class="line">            List&lt;CellRangeAddress&gt; mergeRegions = sheet.getMergedRegions();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isMerged</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mergeRegions.size() &amp;&amp; !isMerged; i++) &#123;</span><br><span class="line">                <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddr</span> <span class="operator">=</span> mergeRegions.get(i);</span><br><span class="line">                <span class="comment">// 若上一个单元格已经被合并，则先移出原有的合并单元，再重新添加合并单元</span></span><br><span class="line">                <span class="keyword">if</span> (cellRangeAddr.isInRange(curRowIndex - <span class="number">1</span>, curColIndex)) &#123;</span><br><span class="line">                    sheet.removeMergedRegion(i);</span><br><span class="line">                    cellRangeAddr.setLastRow(curRowIndex);</span><br><span class="line">                    sheet.addMergedRegion(cellRangeAddr);</span><br><span class="line">                    isMerged = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 若上一个单元格未被合并，则新增合并单元</span></span><br><span class="line">            <span class="keyword">if</span> (!isMerged) &#123;</span><br><span class="line">                <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(curRowIndex - <span class="number">1</span>, curRowIndex, curColIndex, curColIndex);</span><br><span class="line">                sheet.addMergedRegion(cellRangeAddress);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ExportTest测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        List&lt;ExcelModel&gt; datas = getData();</span><br><span class="line">        String filename=<span class="string">&quot;E:\\Downloads\\测试导出合并单元格Excel.xlsx&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">        <span class="keyword">if</span>(!file1.exists())&#123;</span><br><span class="line">            file1.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印单个sheel页</span></span><br><span class="line">        EasyExcel.write(filename, ExcelModel.class )</span><br><span class="line">                .autoCloseStream(Boolean.TRUE)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">ExcelFillCellMergeStrategy</span>())</span><br><span class="line">                .sheet(<span class="string">&quot;测试导出合并单元格Excel&quot;</span>).doWrite(datas);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;ExcelModel&gt; <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;ExcelModel&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ExcelModel</span> <span class="variable">model1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExcelModel</span>();</span><br><span class="line">        model1.setOrder(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        model1.setTitle(<span class="string">&quot;标题111&quot;</span>);</span><br><span class="line">        model1.setCompany(<span class="string">&quot;单位111&quot;</span>);</span><br><span class="line">        model1.setDocumentCode(<span class="string">&quot;编号111&quot;</span>);</span><br><span class="line">        model1.setIdea(<span class="string">&quot;意见111&quot;</span>);</span><br><span class="line">        model1.setPublishDate(<span class="string">&quot;2022-01-21&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ExcelModel</span> <span class="variable">model2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExcelModel</span>();</span><br><span class="line">        model2.setOrder(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        model2.setTitle(<span class="string">&quot;标题111&quot;</span>);</span><br><span class="line">        model2.setCompany(<span class="string">&quot;单位222&quot;</span>);</span><br><span class="line">        model2.setDocumentCode(<span class="string">&quot;编号222&quot;</span>);</span><br><span class="line">        model2.setIdea(<span class="string">&quot;意见111&quot;</span>);</span><br><span class="line">        model2.setPublishDate(<span class="string">&quot;2022-01-21&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ExcelModel</span> <span class="variable">model3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExcelModel</span>();</span><br><span class="line">        model3.setOrder(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        model3.setTitle(<span class="string">&quot;标题333&quot;</span>);</span><br><span class="line">        model3.setCompany(<span class="string">&quot;单位222&quot;</span>);</span><br><span class="line">        model3.setDocumentCode(<span class="string">&quot;编号222&quot;</span>);</span><br><span class="line">        model3.setIdea(<span class="string">&quot;意见333&quot;</span>);</span><br><span class="line">        model3.setPublishDate(<span class="string">&quot;2022-01-21&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ExcelModel</span> <span class="variable">model4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExcelModel</span>();</span><br><span class="line">        model4.setOrder(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        model4.setTitle(<span class="string">&quot;标题444&quot;</span>);</span><br><span class="line">        model4.setCompany(<span class="string">&quot;单位444&quot;</span>);</span><br><span class="line">        model4.setDocumentCode(<span class="string">&quot;编号444&quot;</span>);</span><br><span class="line">        model4.setIdea(<span class="string">&quot;意见444&quot;</span>);</span><br><span class="line">        model4.setPublishDate(<span class="string">&quot;2022-01-21&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ExcelModel</span> <span class="variable">model5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExcelModel</span>();</span><br><span class="line">        model5.setOrder(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">        model5.setTitle(<span class="string">&quot;标题555&quot;</span>);</span><br><span class="line">        model5.setCompany(<span class="string">&quot;单位555&quot;</span>);</span><br><span class="line">        model5.setDocumentCode(<span class="string">&quot;编号555&quot;</span>);</span><br><span class="line">        model5.setIdea(<span class="string">&quot;意见555&quot;</span>);</span><br><span class="line">        model5.setPublishDate(<span class="string">&quot;2022-01-21&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(model1);</span><br><span class="line">        list.add(model2);</span><br><span class="line">        list.add(model3);</span><br><span class="line">        list.add(model4);</span><br><span class="line">        list.add(model5);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试代码运行结果"><a class="header-anchor" href="#测试代码运行结果"></a>测试代码运行结果</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/18ab6200958dd1d2b4810ef3644c1d7a.png" alt="在这里插入图片描述"><br>
其中序号列是隐藏的。另外，CellWriteHandler接口方法的执行顺序为beforeCellCreate()-&gt;afterCellCreate()-&gt;afterCellDataConverted()-&gt;afterCellDispose()。</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式学习</title>
    <url>/2022/12/19/regular_expression/</url>
    <content><![CDATA[<h2 id="入门"><a class="header-anchor" href="#入门"></a>入门</h2>
<h3 id="开始和结束"><a class="header-anchor" href="#开始和结束"></a>开始和结束</h3>
<p>正则表达式中 <strong>^</strong> 指定的是一个字符串的开始，<strong>$</strong> 指定的是一个字符串的结束。<br>
例如，<br>
匹配以p开头的python字符串:<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/7b9907f03e435a91eadcae38298ee307.png" alt="在这里插入图片描述"><br>
匹配以n结尾的python字符串:<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/5332f7fb34ad15551a87d4b5bfee496d.png" alt="在这里插入图片描述"></p>
<span id="more"></span>
<h3 id="字符组"><a class="header-anchor" href="#字符组"></a>字符组[]</h3>
<p><strong>[]表示匹配括号中的任意一个字符，-表示字符范围，^表示不匹配后面的所有字符</strong></p>
<p>例如：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/fbc1ac07b39fe957d2e2f9b4418b4460.png" alt="在这里插入图片描述"><br>
可以发现 <strong>[Pp]</strong> 既可以匹配大写的P也可以匹配小写的p</p>
<p>例如：</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/868a1e0a40e9f5485030c228d6cc0838.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/f8b9eb6e01271e3e32ce3c811169b74b.png" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">^[^xy]1$ 可以匹配 a1、b1、c1，但是不能匹配x1、y1</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_45242865/article/details/121540017">参考链接：正则表达式 “中括号[]” 内需要转义的字符</a></p>
<h3 id="区间"><a class="header-anchor" href="#区间"></a>区间[]</h3>
<p>正则表达式引擎在字符组中使用 <strong>连字符-</strong> 代表区间，依照这个规则，我们可以总结出三点：</p>
<ul>
<li>要匹配任意数字，可以写成 <strong>[0-9]</strong></li>
<li>要匹配所有小写字母，可以写成 <strong>[a-z]</strong></li>
<li>要匹配所有大写字母，可以写成 <strong>[A-Z]</strong></li>
</ul>
<h3 id="特殊字符转义"><a class="header-anchor" href="#特殊字符转义"></a>特殊字符转义</h3>
<p>在正则中使用 \ 就可以进行对特殊符号进行转义。<br>
例如，匹配圆括号：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">\(</span><br></pre></td></tr></table></figure>
<h3 id="取反"><a class="header-anchor" href="#取反"></a>取反</h3>
<p>通过在字符数组开头使用 <strong>^</strong> 字符实现取反操作。<br>
例如：匹配不包含数字的字符组：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/dc013fd65a0e103662d11d601d05285e.png" alt="在这里插入图片描述"></p>
<h3 id="快捷匹配数字和字母"><a class="header-anchor" href="#快捷匹配数字和字母"></a>快捷匹配数字和字母</h3>
<p><strong>下面是快捷匹配元字符与取反元字符：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">元字符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\w</td>
<td style="text-align:center">与任意单词字符匹配，任意单词字符表示 [A-Z]、 [a-z]、[0-9]、_</td>
</tr>
<tr>
<td style="text-align:center">\d</td>
<td style="text-align:center">与任意数字匹配</td>
</tr>
<tr>
<td style="text-align:center">\W</td>
<td style="text-align:center">与任意非单词字符匹配</td>
</tr>
<tr>
<td style="text-align:center">\D</td>
<td style="text-align:center">与任意非数字匹配</td>
</tr>
</tbody>
</table>
<h3 id="匹配空白"><a class="header-anchor" href="#匹配空白"></a>匹配空白</h3>
<p><strong>\s</strong> 快捷方式可以匹配空白字符，比如空格，tab、换行等。</p>
<h3 id="任意字符"><a class="header-anchor" href="#任意字符"></a>任意字符</h3>
<p><strong>.</strong> 代表匹配任何单个字符，<strong>它只能出现在方括号以外</strong>。</p>
<p>注意：<strong>.</strong> 不能匹配换行符（\n）</p>
<h3 id="重复次数和区间"><a class="header-anchor" href="#重复次数和区间"></a>重复次数和区间</h3>
<p><strong>重复次数：</strong><br>
在一个字符组后加上 <strong>{N}</strong>  就可以表示在它之前的字符组出现<strong>N</strong> 次。<br>
<strong>重复区间：</strong><br>
在一个字符组后加上 <strong>{M,N}</strong>，M是下界而N是上界。<br>
例如：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/42c10d81b87ae5100b633c40fa59677c.png" alt="在这里插入图片描述"><br>
<strong>\d{3,4}</strong>  既可以匹配3个数字也可以匹配4个数字，不过当有4个数字的时候，优先匹配的是4个数字，这是因为正则表达式默认是贪婪模式，即尽可能的匹配更多字符，而要使用非贪婪模式，我们要在表达式后面加上 <strong>?</strong> 号。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/260b4c0cdbe1bbe615280800783ea050.png" alt="在这里插入图片描述"><br>
<strong>开闭区间：</strong><br>
在一个字符组后加上 <strong>{M,}</strong>，M是下界，无上界。<br>
例如：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/e9e7c0ae52ececb0c221f83c58f70108.png" alt="在这里插入图片描述"><br>
表示匹配一个或无数个数字。</p>
<h3 id="或者条件"><a class="header-anchor" href="#或者条件"></a>或者条件</h3>
<p>使用<strong>分组、字符组</strong>的同时还可以使用 <strong>或者条件</strong>。<br>
例如：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/5f12194367697c28e56b74691b18cdc3.png" alt="在这里插入图片描述"><br>
表示要提取所有相关的后缀名。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/042dbf44f0b8bf6e172703252e399642.png" alt="在这里插入图片描述"><br>
表示匹配字符组中为<strong>北或者大</strong>的。</p>
<h2 id="进阶"><a class="header-anchor" href="#进阶"></a>进阶</h2>
<h3 id="分组"><a class="header-anchor" href="#分组"></a>分组</h3>
<p>要实现分组很简单，使用 <strong>()</strong> 即可。<br>
例如：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/deced49c69159bcff9dc64bf0fbd9ba5.png" alt="在这里插入图片描述"><br>
这段正则表达式将文本分成了两组，第一组为：0731，第二组为8825951。<br>
分组有一个非常重要的功能——<strong>捕获数据</strong>。所以()被称为捕获分组，用来捕获数据，当我们想要从匹配好的数据中<strong>提取关键数据</strong>的时候可以使用分组。</p>
<h3 id="非捕获分组"><a class="header-anchor" href="#非捕获分组"></a>非捕获分组</h3>
<p>有时候，我们并不需要捕获某个分组的内容，但是又想使用分组的特性。<br>
这个时候就可以使用非捕获组 <strong>(?:表达式)</strong> ，<strong>不获取匹配结果，不进行存储供以后使用</strong>。<br>
例如，<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/4616217653b66aaea3c99c0eadb76772.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/d07b03f66f990abfdb39e69524c2ba57.png" alt="在这里插入图片描述"><br>
通过上面的例子可以看出，<strong>使用 ?: 后续引用分组 \1 无效</strong></p>
<h3 id="分组的引用"><a class="header-anchor" href="#分组的引用"></a>分组的引用</h3>
<p>使用 <strong>\N</strong> 可以引用编号为<strong>N</strong>的分组。<br>
例如：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/5f2e70a40d60fa1a187a666c58346ac4.png" alt="在这里插入图片描述"></p>
<h3 id="向后查找：正向先行断言"><a class="header-anchor" href="#向后查找：正向先行断言"></a>向后查找：正向先行断言</h3>
<p><strong>(?=表达式)</strong>，指<strong>在某个位置向右看，表示所在位置右侧必须能匹配表达式。</strong><br>
例如：<br>
我喜欢你 我喜欢 我喜欢我 喜欢 喜欢你<br>
如果要取出<strong>喜欢</strong>两个字，<strong>要求这个喜欢后面有你</strong>，这个时候就要这么写：<strong>喜欢(?=你)</strong>，这就是正向先行断言。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/5ad476dc44ef5fca8a243ae472b6c73c.png" alt="在这里插入图片描述"></p>
<h3 id="向后查找：反向先行断言"><a class="header-anchor" href="#向后查找：反向先行断言"></a>向后查找：反向先行断言</h3>
<p><strong>(?!表达式)</strong> 的作用是保证右边不能出现某字符。<br>
例如：<br>
我喜欢你 我喜欢 我喜欢我 喜欢 喜欢你<br>
如果要取出喜欢两个字，<strong>要求这个喜欢后面没有你</strong>，这个时候就要这么写：<strong>喜欢(?!你)</strong>，这就是反向先行断言。</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/3268bc18034278448bfe8f90da1f3458.png" alt="在这里插入图片描述"><br>
匹配不能包含 test 的字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/^((?!test).)*$/</span><br></pre></td></tr></table></figure>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/a92d4fdd41b9b8c5cc0b1c913ef4bb87.png" alt="在这里插入图片描述"><br>
匹配不能包含 test 和 name:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/^((?!test|name).)*$/</span><br></pre></td></tr></table></figure>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/4fa95cd08ba8517f43ccb7f2a127d2e2.png" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向后查找：不以&quot;-&quot;开头的</span></span><br><span class="line">^(?!-)  </span><br><span class="line"><span class="comment">// 向后查找：不以&quot;-&quot;结尾的</span></span><br><span class="line">(?!-)$</span><br><span class="line"><span class="comment">// 不包含给定特殊字符的</span></span><br><span class="line">^[^!@#$%^&amp;*()【】]&#123;<span class="number">0</span>,&#125;$</span><br><span class="line"><span class="comment">// 只能输入中文、字母、数字和中文顿号</span></span><br><span class="line">^[\u4E00-\u9FA5A-Za-z0-<span class="number">9</span>、]+$</span><br><span class="line"><span class="comment">// 只能输入中文、字母、数字和中文顿号，并且不以中文顿号开头和结尾</span></span><br><span class="line">^(?!、)([\u4E00-\u9FA5A-Za-z0-<span class="number">9</span>、]+)(?&lt;!、)$</span><br></pre></td></tr></table></figure>
<h3 id="向前查找：正向后行断言"><a class="header-anchor" href="#向前查找：正向后行断言"></a>向前查找：正向后行断言</h3>
<p>先行断言和后行断言只有一个区别，<strong>即先行断言从左往右看，后行断言从右往左看</strong>。<br>
<strong>(?&lt;=表达式)</strong>，指在某个位置向左看，表示所在位置左侧必须能匹配表达式。<br>
例如：<br>
如果要取出喜欢两个字，<strong>要求喜欢的前面有我，后面有你</strong>，这个时候就要这么写：<strong>(?&lt;=我)喜欢(?=你)</strong>。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/a9f795b9c522214d624443d740366279.png" alt="在这里插入图片描述"></p>
<h3 id="向前查找：反向后行断言"><a class="header-anchor" href="#向前查找：反向后行断言"></a>向前查找：反向后行断言</h3>
<p><strong>(?&lt;!表达式)</strong>，指在某个位置向左看，表示所在位置左侧不能匹配表达式。<br>
例如：<br>
如果要取出喜欢两个字，<strong>要求喜欢的前面没有我，后面没有你</strong>，这个时候就要这么写：<strong>(?&lt;!我)喜欢(?!你)</strong>。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/981a685685a34677e290a502c7903ef3.png" alt="在这里插入图片描述"></p>
<h2 id="常用元字符整理"><a class="header-anchor" href="#常用元字符整理"></a>常用元字符整理</h2>
<table>
<thead>
<tr>
<th style="text-align:center">元字符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:center">给特殊字符转义。例“\\”匹配“\”</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">匹配一个字符串的开始</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:center">匹配一个字符串的结束</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">匹配前面的子表达式任意次。等价于{0,}</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">匹配前面的子表达式一次或多次(大于等于1次）。等价于{1,}</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:center">匹配前面的子表达式零次或一次。。等价于{0,1}</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:center">当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少地匹配所搜索的字符串，而默认的贪婪模式则尽可能多地匹配所搜索的字符串。</td>
</tr>
<tr>
<td style="text-align:center">{n}</td>
<td style="text-align:center">n是一个非负整数。匹配确定的n次。</td>
</tr>
<tr>
<td style="text-align:center">{n,}</td>
<td style="text-align:center">n是一个非负整数。至少匹配n次。</td>
</tr>
<tr>
<td style="text-align:center">{n,m}</td>
<td style="text-align:center">m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">匹配除“\n”和&quot;\r&quot;之外的任何单个字符。要匹配包括“\n”和&quot;\r&quot;在内的任何字符，请使用像“[\s\S]”的模式。</td>
</tr>
<tr>
<td style="text-align:center">|</td>
<td style="text-align:center">或者。例如x|y，匹配x或y</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">取反。例如[^0-9]，匹配不包含数字的字符组</td>
</tr>
<tr>
<td style="text-align:center">(pattern)</td>
<td style="text-align:center">匹配pattern并获取这一匹配，即分组。一个正则表达式中最多可以保存9个组</td>
</tr>
<tr>
<td style="text-align:center">(?:pattern)</td>
<td style="text-align:center">非捕获分组，匹配pattern但不获取匹配结果，不进行存储供以后使用。</td>
</tr>
<tr>
<td style="text-align:center">(?=pattern)</td>
<td style="text-align:center">正向先行断言，在某个位置向右看，表示所在位置右侧能匹配表达式。</td>
</tr>
<tr>
<td style="text-align:center">(?!pattern)</td>
<td style="text-align:center">反向先行断言，在某个位置向右看，保证右侧不能匹配表达式。</td>
</tr>
<tr>
<td style="text-align:center">(?&lt;=pattern)</td>
<td style="text-align:center">正向后行断言，在某个位置向左看，表示所在位置左侧能匹配表达式。</td>
</tr>
<tr>
<td style="text-align:center">(?&lt;!pattern)</td>
<td style="text-align:center">反向后行断言，在某个位置向左看，保证左侧不能匹配表达式。</td>
</tr>
<tr>
<td style="text-align:center">\b</td>
<td style="text-align:center">匹配一个单词的边界，也就是指单词和空格间的位置。</td>
</tr>
<tr>
<td style="text-align:center">\B</td>
<td style="text-align:center">匹配一个非单词的边界。</td>
</tr>
<tr>
<td style="text-align:center">\d</td>
<td style="text-align:center">与任意数字匹配</td>
</tr>
<tr>
<td style="text-align:center">\W</td>
<td style="text-align:center">与任意非单词字符匹配</td>
</tr>
<tr>
<td style="text-align:center">\D</td>
<td style="text-align:center">与任意非数字匹配</td>
</tr>
<tr>
<td style="text-align:center">\w</td>
<td style="text-align:center">与任意单词字符匹配，任意单词字符表示 [A-Z]、 [a-z]、[0-9]、_</td>
</tr>
<tr>
<td style="text-align:center">\f</td>
<td style="text-align:center">匹配一个换页符。</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td style="text-align:center">匹配一个制表符。</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td style="text-align:center">匹配一个换行符。</td>
</tr>
<tr>
<td style="text-align:center">\r</td>
<td style="text-align:center">匹配一个回车符。</td>
</tr>
<tr>
<td style="text-align:center">\s</td>
<td style="text-align:center">匹配一个空白符，即不可见字符，包括空格、制表符、换页符等等</td>
</tr>
<tr>
<td style="text-align:center">\S</td>
<td style="text-align:center">匹配一个非空白符，，即可见字符</td>
</tr>
</tbody>
</table>
<p><a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215">参考链接</a></p>
<h2 id="相关网站"><a class="header-anchor" href="#相关网站"></a>相关网站</h2>
<h3 id="在线测试网站"><a class="header-anchor" href="#在线测试网站"></a>在线测试网站</h3>
<p><strong>菜鸟工具：</strong><br>
<a href="https://c.runoob.com/front-end/854/">参考链接</a><br>
<strong>有详细的语法解释，但是&quot;/&quot;需要转义：</strong><br>
<a href="https://regexr-cn.com/">参考链接</a></p>
<h3 id="题目练习网站"><a class="header-anchor" href="#题目练习网站"></a>题目练习网站</h3>
<p><a href="https://www.codejiaonang.com/#/">参考链接</a></p>
<h2 id="其他笔记"><a class="header-anchor" href="#其他笔记"></a>其他笔记</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、正斜杠/在Java正则表达式中不是特殊字符，不需要转义。 <span class="string">&quot;\\\\/&quot;</span>等效于<span class="string">&quot;/&quot;</span></span><br><span class="line"><span class="number">2</span>、Java Match类中的matches()方法是完全匹配，即整个字符串必须匹配该正则表达式；find()方法是部分匹配，即在整个字符串中，寻找匹配该正则表达式的子字符串序列，只要找到这样的子字符串，即返回<span class="literal">true</span>。</span><br><span class="line"><span class="number">3</span>、(ab)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;,表示ab一起连续出现最少<span class="number">1</span>次，最多三次。ab&#123;<span class="number">1</span>,<span class="number">3</span>&#125;,表示a后面紧跟的b出现的最少一次，最多三次。这就是括号分组的意义。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis实现多层级collection嵌套查询</title>
    <url>/2022/09/03/mybatis_collection/</url>
    <content><![CDATA[<h3 id="数据结构"><a class="header-anchor" href="#数据结构"></a>数据结构</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/b25f7348089d4d621a28d251bdf03015.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="实体类"><a class="header-anchor" href="#实体类"></a>实体类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AchievementRepetitionVo</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;成果编号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;成果名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;成果介绍&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String introduce;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;查重范围文档数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer checkNum;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;最高相似度&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal maxRate;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;成果对比明细&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;RepetitionDetailVo&gt; detailList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RepetitionDetailVo</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;对比成果名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String contractName;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;对比成果介绍&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String contractIntroduce;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;对比明细&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;RepetitionContractVo&gt; contractList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RepetitionContractVo</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;检测成果句子&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String s1;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;对比成果库句子&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String s2;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;相似度&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal rate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="第一层查询实现逻辑"><a class="header-anchor" href="#第一层查询实现逻辑"></a>第一层查询实现逻辑</h3>
<p>1、外层service将code字段传入queryRepetitionReport方法，该方法查询的code作为参数(column=&quot;{code=code}&quot;)传给queryDetailList<br>
2、mybatis循环调用queryDetailList</p>
<p><strong>相关代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AchievementRepetitionVo <span class="title function_">queryRepetitionReport</span><span class="params">(String code)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;QueryRepetitionReportMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;AchievementRepetitionVo&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;code&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;code&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;introduce&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;introduce&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;check_num&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;checkNum&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;rate&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span> <span class="attr">property</span>=<span class="string">&quot;maxRate&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;detailList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;RepetitionDetailVo&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">select</span>=<span class="string">&quot;queryDetailList&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">column</span>=<span class="string">&quot;&#123;code=code&#125;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryRepetitionReport&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;QueryRepetitionReportMap&quot;</span>&gt;</span></span><br><span class="line">	select rate.code,application.name,rate.check_num,rate.rate,rate.introduce</span><br><span class="line">	from t_achievement_repetition_rate rate</span><br><span class="line">	left join t_achievement_application application on rate.code = application.code</span><br><span class="line">	where rate.code = #&#123;code&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="第二层查询实现逻辑"><a class="header-anchor" href="#第二层查询实现逻辑"></a>第二层查询实现逻辑</h3>
<p>queryDetailList接收上一层查询返回的code字段，每一次执行queryDetailList方法都会把查询出的code、contrast_code字段传给queryContractList方法<br>
mybatis再循环调用queryContractList方法。</p>
<p><strong>相关代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;RepetitionDetailVo&gt; <span class="title function_">queryDetailList</span><span class="params">(String code)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;QueryRepetitionDetailMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.aspirecn.rewardinnovation.entity.vo.achievementrepetition.RepetitionDetailVo&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;contractName&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;contractName&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;contractIntroduce&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;contractIntroduce&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;contractList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.aspirecn.rewardinnovation.entity.vo.achievementrepetition.RepetitionContractVo&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">select</span>=<span class="string">&quot;queryContractList&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">column</span>=<span class="string">&quot;&#123;code=code,contrastCode=contrast_code&#125;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryDetailList&quot;</span>  <span class="attr">resultMap</span>=<span class="string">&quot;QueryRepetitionDetailMap&quot;</span>&gt;</span></span><br><span class="line">	select result.code,application.name as contractName,result.contrast_code,result.contrast_introduce as contractIntroduce</span><br><span class="line">	from t_achievement_repetition_result result</span><br><span class="line">	left join t_achievement_application application on application.code = result.contrast_code</span><br><span class="line">	where result.code = #&#123;code&#125;</span><br><span class="line">	union</span><br><span class="line">	select result.contrast_code as code,application.name as contractName,result.code as contrast_code,result.introduce as contractIntroduce</span><br><span class="line">	from t_achievement_repetition_result result</span><br><span class="line">	left join t_achievement_application application on application.code = result.code</span><br><span class="line">	where result.contrast_code = #&#123;code&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="第三层查询实现逻辑"><a class="header-anchor" href="#第三层查询实现逻辑"></a>第三层查询实现逻辑</h3>
<p>queryContractList接收上一层查询返回的code、contrastCode字段，<br>
mybatis再循环调用queryContractList方法<br>
<strong>相关代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;RepetitionContractVo&gt; <span class="title function_">queryContractList</span><span class="params">(String code, String contrastCode)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryContractList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;RepetitionContractVo&quot;</span>&gt;</span></span><br><span class="line">	select result.s1,result.s2,result.rate</span><br><span class="line">	from t_achievement_repetition_result result</span><br><span class="line">	where result.code = #&#123;code&#125; and result.contrast_code = #&#123;contrastCode&#125;</span><br><span class="line">	union all</span><br><span class="line">	select result.s1,result.s2,result.rate</span><br><span class="line">	from t_achievement_repetition_result result</span><br><span class="line">	where result.contrast_code = #&#123;code&#125; and result.code = #&#123;contrastCode&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="总结"><a class="header-anchor" href="#总结"></a>总结</h3>
<p>其实就是Collection放到resultMap,下一层把上一层的查询结果作为条件传入。<br>
<a href="https://chuenhung.gitee.io/2022/02/01/coding_notes_seven/#MyBatis%E6%98%A0%E5%B0%84%E9%9B%86%E5%90%88%EF%BC%8C%E5%8F%82%E6%95%B0%E4%BC%A0%E5%85%A5%E5%A4%9A%E4%B8%AA">参考链接</a></p>
<h3 id="碰到问题及解决方案"><a class="header-anchor" href="#碰到问题及解决方案"></a>碰到问题及解决方案</h3>
<p><strong>问题现象：</strong><br>
第二层或者第三层的映射文件加上<strong>parameterType=“string”</strong>，如下面的代码所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryDetailList&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;QueryRepetitionDetailMap&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryContractList&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;RepetitionContractVo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>会报<strong>nested exception is org.apache.ibatis.reflection.ReflectionException: There is no setter for property named ‘code’ in 'class java.lang.String</strong>错误。</p>
<p><strong>错误分析：</strong><br>
String类没有code的set方法。<br>
<strong>问题原因：</strong><br>
数据类型不一致。<br>
<strong>解决方案：</strong></p>
<ul>
<li>MyBatis collection使用标签column=&quot;{code=code,name=name}&quot;,Mapper中使用HashMap或者对象接收。</li>
<li>MyBatis collection使用标签column=“code”，Mapper中使用基本数据类型接收。</li>
</ul>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualBox网络连接方式学习笔记</title>
    <url>/2022/11/06/network_connection_mode_of_VirtualBox/</url>
    <content><![CDATA[<h2 id="VirtualBox的7种网络接入模式详解"><a class="header-anchor" href="#VirtualBox的7种网络接入模式详解"></a>VirtualBox的7种网络接入模式详解</h2>
<p><a href="https://www.jb51.net/article/243423.htm">参考链接</a>、<a href="https://zhuanlan.zhihu.com/p/403513377">参考链接</a></p>
<h2 id="各网络模式的默认情况下，网络连接情况"><a class="header-anchor" href="#各网络模式的默认情况下，网络连接情况"></a>各网络模式的默认情况下，网络连接情况</h2>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">NAT模式</th>
<th style="text-align:center">桥接模式</th>
<th style="text-align:center">Host-Only模式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">虚拟机 -&gt; 宿主机</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">默认不能，需要设置</td>
</tr>
<tr>
<td style="text-align:center">宿主机 ——&gt; 虚拟机</td>
<td style="text-align:center">x</td>
<td style="text-align:center">√</td>
<td style="text-align:center">默认不能，需要设置</td>
</tr>
<tr>
<td style="text-align:center">虚拟机 ——&gt; 虚拟机</td>
<td style="text-align:center">x</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">虚拟机 ——&gt; 同局域网下其他主机</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">默认不能，需要设置</td>
</tr>
<tr>
<td style="text-align:center">同局域网下其他主机 ——&gt; 虚拟机</td>
<td style="text-align:center">x</td>
<td style="text-align:center">√</td>
<td style="text-align:center">默认不能，需要设置</td>
</tr>
</tbody>
</table>
<p><a href="https://www.cnblogs.com/mysticbinary/p/16595169.html">参考链接</a></p>
<span id="more"></span>
<h2 id="配置网络地址转换-NAT-模式"><a class="header-anchor" href="#配置网络地址转换-NAT-模式"></a>配置网络地址转换(NAT)模式</h2>
<p>NAT模式下，宿主机访问虚拟机，虚拟机可以访问宿主机，虚拟机可以访问互联网。</p>
<h3 id="访问外网"><a class="header-anchor" href="#访问外网"></a>访问外网</h3>
<p><strong>选择对应虚拟机 -&gt; 设置 -&gt; 网络 -&gt; 选择连接方式为NAT -&gt; 选择控制芯片</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/a703f5bf7e9baef95afc2bb399336dd3.png#pic_center" alt="在这里插入图片描述"><br>
这样配置以后，启动虚拟机，执行<strong>ping www.baidu.com</strong>有响应说明配置成功。如果没有响应换一个控制芯片试试，上图框红的两个控制芯片是可以的。</p>
<h3 id="宿主机访问虚拟机"><a class="header-anchor" href="#宿主机访问虚拟机"></a>宿主机访问虚拟机</h3>
<p>配置步骤如下：<br>
<strong>选择对应虚拟机 -&gt; 设置 -&gt; 网络 -&gt; 端口转发(主机为222,子系统为22,其他不用填)</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/4ee69b856339bef5a572b2eaa156eff5.png#pic_center" alt="在这里插入图片描述"><br>
<strong>配置完重启虚拟机后</strong>，宿主机访问虚拟机连接如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/6a3c43dae765f2659d436a1a6fd1ba83.png#pic_center" alt="在这里插入图片描述"><br>
<strong>注意，这种模式文件传输非常慢，本地上传一个10多KB的文件到虚拟机花费差不多2分钟。</strong></p>
<h2 id="配置桥接模式"><a class="header-anchor" href="#配置桥接模式"></a>配置桥接模式</h2>
<p>桥接模式下，虚拟机和宿主机在同一网段，虚拟机可以访问外网，宿主机可以访问虚拟机，虚拟机可以访问宿主机同一局域网的其他机器。具体配置步骤如下所示：</p>
<h3 id="网络连接方式设置"><a class="header-anchor" href="#网络连接方式设置"></a>网络连接方式设置</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/b000a2493909d3107df85b8d44338863.png" alt="在这里插入图片描述"><br>
<strong>这里的MAC地址和网卡配置文件的HWADDR一致</strong>，否则会重启网络服务失败。<br>
确定界面名称是网络的适配器，一般默认的没问题。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/0421f313bd0ba0066f9041bebc5d30d4.png" alt="在这里插入图片描述"><br>
<strong>配置完桥接模式，启动虚拟机，网络就是通的，只是IP不固定。</strong></p>
<h3 id="修改网卡配置文件"><a class="header-anchor" href="#修改网卡配置文件"></a>修改网卡配置文件</h3>
<p>这一步的目的是固定虚拟机的IP地址。<br>
<strong>先查看宿主机的网络信息：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/dd785cc8810be04d3f51c3f5189312e8.png" alt="在这里插入图片描述"><br>
<strong>修改虚拟机的网卡配置文件：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line"><span class="comment"># 改为静态</span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line"><span class="comment"># 和ifcfg-enpXXX名一致</span></span><br><span class="line">NAME=enp0s3</span><br><span class="line"><span class="comment"># 可以不写，但是写了就不能和其他网卡相同。可以用uuidgen命令生成。</span></span><br><span class="line">UUID=40263cbd-6ed4-497c-9321-7326e27d4a29</span><br><span class="line"><span class="comment"># 和ifcfg-enpXXX名一致</span></span><br><span class="line">DEVICE=enp0s3</span><br><span class="line"><span class="comment"># 改为yes，即开机</span></span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 和宿主机在同一网段不同ip</span></span><br><span class="line">IPADDR=10.1.18.156</span><br><span class="line"><span class="comment"># 和宿主机保持一致，否则会重启失败</span></span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"><span class="comment"># 和宿主机保持一致，否则会重启失败</span></span><br><span class="line">GATEWAY=10.1.18.1</span><br><span class="line"><span class="comment"># 可以注销，不然得写正确，否则会重启失败</span></span><br><span class="line">HWADDR=08:00:27:CB:CB:8E</span><br><span class="line"><span class="comment"># 不要写宿主机的字符串！可以网上查一个服务器，下面用的Google的DNS服务器</span></span><br><span class="line">DNS1=8.8.8.8</span><br></pre></td></tr></table></figure>
<h3 id="测试网络"><a class="header-anchor" href="#测试网络"></a>测试网络</h3>
<p>配置正常后，直接ping www.baidu.com就可以联通了。宿主机访问虚拟机，连接方式如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/18c746d8ade85997334d58bb32773b07.png" alt="在这里插入图片描述"></p>
<p><a href="https://blog.csdn.net/weixin_45536587/article/details/124279045">参考链接</a>、<a href="https://blog.csdn.net/qq_42383970/article/details/119001039">参考链接</a></p>
<h2 id="NAT-HostOnly模式组合"><a class="header-anchor" href="#NAT-HostOnly模式组合"></a>NAT+HostOnly模式组合</h2>
<h3 id="设置主机网络管理器"><a class="header-anchor" href="#设置主机网络管理器"></a>设置主机网络管理器</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/f36faab786cd327d327f72e42d291117.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/8f5f0f8bbc8e58d4bf94c16fb688aef4.png" alt="在这里插入图片描述"><br>
这个是VirtualBox的默认设置，不是这个可以改为这个，后续配置文件就不需要改了。</p>
<h3 id="网络连接方式设置-v2"><a class="header-anchor" href="#网络连接方式设置-v2"></a>网络连接方式设置</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/fcff321284c013161e3a2332bbfc6d8e.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/1d7b487aed4d7843d080fdf1fb9b469e.png" alt="在这里插入图片描述"><br>
设置好后，启动虚拟机。</p>
<h3 id="虚拟机网卡配置文件修改"><a class="header-anchor" href="#虚拟机网卡配置文件修改"></a>虚拟机网卡配置文件修改</h3>
<p><strong>Nat模式启动虚拟机就可以访问外网，直接ping www.baidu.com是可以连通的。</strong></p>
<h4 id="修改默认网卡配置文件-NAT"><a class="header-anchor" href="#修改默认网卡配置文件-NAT"></a>修改默认网卡配置文件(NAT)</h4>
<p>先用<strong>ip route</strong>命令查看网卡配置文件，如下可以看到默认配置文件是/etc/sysconfig/network-scripts/<strong>ifcfg-enp0s17</strong>,如果该配置文件命名不一致需要修改，并修改里面内容的名称。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ip route</span><br><span class="line">default via 10.0.2.2 dev enp0s17 proto dhcp metric 101</span><br><span class="line">10.0.2.0/24 dev enp0s17 proto kernel scope <span class="built_in">link</span> src 10.0.2.15 metric 101</span><br><span class="line">192.168.56.0/24 dev enp0s8 proto kernel scope <span class="built_in">link</span> src 192.168.56.102 metric 100</span><br></pre></td></tr></table></figure>
<p>然后<strong>修改&quot;ONBOOT=yes&quot;</strong>,修改后配置文件如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=enp0s17</span><br><span class="line">UUID=2f3b7238-96e2-4aa2-9a78-17270e4b8f5d</span><br><span class="line">DEVICE=enp0s17</span><br><span class="line"><span class="comment"># 设置为yes</span></span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
<h4 id="修改网卡2配置文件-HostOnly"><a class="header-anchor" href="#修改网卡2配置文件-HostOnly"></a>修改网卡2配置文件(HostOnly)</h4>
<p>网卡2为HostOnly网络连接模式的配置文件，需要设置为静态ip，修改后的配置文件如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TYPE=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="comment"># BOOTPROTO改为static，意为静态模式</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;static&quot;</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line"><span class="comment"># NAME改为enp0s8，和文件名称后缀ifcfg-xxx保持一致。和ip route中的网卡2后缀一致。</span></span><br><span class="line">NAME=<span class="string">&quot;enp0s8&quot;</span></span><br><span class="line"><span class="comment"># 可以不写，但是写了就不能和其他网卡相同。可以用uuidgen命令生成。</span></span><br><span class="line">UUID=<span class="string">&quot;87a8c150-3d1a-4111-97aa-816692dcf504&quot;</span></span><br><span class="line"><span class="comment"># DEVICE改为enp0s8，和文件名称后缀ifcfg-xxx保持一致。和ip route中的网卡2后缀一致。</span></span><br><span class="line">DEVICE=<span class="string">&quot;enp0s8&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="comment"># IPADDR需要在指定的IP范围内（可以在VirtualBox主机网络配置管理器DHCP服务器中查看）</span></span><br><span class="line">IPADDR=192.168.56.102</span><br><span class="line"><span class="comment"># NETMASK也和指定的服务器子网掩码一致（可以在VirtualBox主机网络配置管理器DHCP服务器中查看）</span></span><br><span class="line">NETMASK=255.255.255.0</span><br></pre></td></tr></table></figure>
<h3 id="宿主机通过静态ip-HostOnly方式-访问虚拟机"><a class="header-anchor" href="#宿主机通过静态ip-HostOnly方式-访问虚拟机"></a>宿主机通过静态ip(HostOnly方式)访问虚拟机</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/acdce70966feb02b8e9754ebb84b45c6.png" alt="在这里插入图片描述"><br>
经测试，这种模式文件传输非常快。</p>
<p><strong>NAT+HostOnly模式与桥接模式不同的是，IPADDR、网关的配置。</strong></p>
<ul>
<li>NAT+HostOnly模式不用配置网关，IPADDR参考的是VirtualBox主机网络配置</li>
<li>桥接模式要配置网关，IPADDR参考的是config/all命令返回的配置</li>
</ul>
<p><a href="https://blog.csdn.net/y1534414425/article/details/122347295">参考链接</a></p>
<h2 id="碰到问题"><a class="header-anchor" href="#碰到问题"></a>碰到问题</h2>
<h3 id="使用service-network-restart命令失败，要么配置文件问题-确定配置文件名和路由一致-，要么网卡没选对。"><a class="header-anchor" href="#使用service-network-restart命令失败，要么配置文件问题-确定配置文件名和路由一致-，要么网卡没选对。"></a>使用service network restart命令失败，要么配置文件问题(确定配置文件名和路由一致)，要么网卡没选对。</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ip route</span><br><span class="line">default via 10.0.2.2 dev enp0s17 proto dhcp metric 101</span><br><span class="line">10.0.2.0/24 dev enp0s17 proto kernel scope <span class="built_in">link</span> src 10.0.2.15 metric 101</span><br><span class="line">192.168.56.0/24 dev enp0s8 proto kernel scope <span class="built_in">link</span> src 192.168.56.101 metric 100</span><br></pre></td></tr></table></figure>
<p><strong>ip route</strong>命令输出<strong>enp0s17</strong> ，即网卡配置文件为/etc/sysconfig/network-scripts/ifcfg-enp0s17。如果该配置文件命名不一致需要修改，并修改里面内容的名称。</p>
<p><strong>注意enp0s9不等于enp0s09,配置文件名多个0也会启动失败！</strong></p>
<h3 id="Job-for-network-service-failed-See-‘systemctl-status-network-service’-and-journalctl-xn’问题的解决方法-含重启网络管理相关命令"><a class="header-anchor" href="#Job-for-network-service-failed-See-‘systemctl-status-network-service’-and-journalctl-xn’问题的解决方法-含重启网络管理相关命令"></a>Job for network.service failed. See ‘systemctl status network.service’ and 'journalctl -xn’问题的解决方法(含重启网络管理相关命令)</h3>
<p><a href="https://blog.csdn.net/weixin_39663255/article/details/80892774?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-80892774-blog-103117357.pc_relevant_aa_2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-80892774-blog-103117357.pc_relevant_aa_2&amp;utm_relevant_index=2">参考链接</a>、<a href="https://blog.csdn.net/m0_49513457/article/details/123027989">参考链接</a></p>
<h3 id="ip-route没有显示路由信息，检查下网络管理有没有开启"><a class="header-anchor" href="#ip-route没有显示路由信息，检查下网络管理有没有开启"></a>ip route没有显示路由信息，检查下网络管理有没有开启</h3>
<p><strong>执行下面两个命令如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig NetworkManager on</span><br><span class="line">service NetworkManager start</span><br></pre></td></tr></table></figure>
<h3 id="桥接模式下，无法访问外网"><a class="header-anchor" href="#桥接模式下，无法访问外网"></a>桥接模式下，无法访问外网</h3>
<p>防火墙开启是不影响的，<strong>检查下DNS服务器。</strong></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VirtualBox</tag>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins学习笔记</title>
    <url>/2022/11/05/study_of_jenkins/</url>
    <content><![CDATA[<h2 id="Jenkins构建项目的几种方式"><a class="header-anchor" href="#Jenkins构建项目的几种方式"></a>Jenkins构建项目的几种方式</h2>
<p><a href="https://www.jianshu.com/p/693857e8b43b?u_atoken=c9b8e448-e5a0-4550-a040-5274ba3e9725&amp;u_asession=01lCSqeojNFLNgiaimTaTyd11QdAw7afGqmrQvdG0kjnJuXJkqcR3ymixEibifC_JkX0KNBwm7Lovlpxjd_P_q4JsKWYrT3W_NKPr8w6oU7K_b8XInk0h7XgprZYVXoc3v61cRpK6RrRpbRcNX0dn1LmBkFo3NEHBv0PZUm6pbxQU&amp;u_asig=05ReNMps794XZLa2116BvqUeufNIjyBecV-FhOTQGha9uOnJGfTgcExc5QNnRkxZ9uzf9G0FWYDgLVtJgqCC3yQtaLeeKSP3UvXhEhndvhlNKZba-OFbguTSfJTEUQZhch_G8Sf2ZtbWJWJabf-YRktFZjYIDW0pkopRKrKqm8aK_9JS7q8ZD7Xtz2Ly-b0kmuyAKRFSVJkkdwVUnyHAIJzZUCddwWBIp6xMictOI8feDNLCyhYfy__qzb_JxMUlopFkLEP8FFBW9mXuUlqJJ5YO3h9VXwMyh6PgyDIVSG1W_eNMwJKOSMEj1agbxDCIdUIRox2heX479OC2z3E-OFfoAuJfH8V9sOgdzEo4BfmpiUPNYjdMWb1TJ-lvKzyC4JmWspDxyAEEo4kbsryBKb9Q&amp;u_aref=/CUKTk9Q6GuE91us7H7ejr5%2b11M=">参考简书很有用的一篇文章</a></p>
<h2 id="Jenkins简单的PipeLine流水线脚本"><a class="header-anchor" href="#Jenkins简单的PipeLine流水线脚本"></a>Jenkins简单的PipeLine流水线脚本</h2>
<p><strong>Windows</strong>：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">	agent any</span><br><span class="line">	stages &#123;</span><br><span class="line">		stage(<span class="string">&#x27;Pull code&#x27;</span>) &#123;</span><br><span class="line">			steps &#123;</span><br><span class="line">				checkout([<span class="attr">$class:</span> <span class="string">&#x27;GitSCM&#x27;</span>, <span class="attr">branches:</span> [[<span class="attr">name:</span> <span class="string">&#x27;*/master&#x27;</span>]], <span class="attr">extensions:</span> [], <span class="attr">userRemoteConfigs:</span> [[<span class="attr">credentialsId:</span> <span class="string">&#x27;4f77bfb0-49cc-4359-9b4a-99b190e5c92b&#x27;</span>, <span class="attr">url:</span> <span class="string">&#x27;https://gitee.com/chuenhung/export-java-bean.git&#x27;</span>]]])</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">&#x27;Build project&#x27;</span>) &#123;</span><br><span class="line">			steps &#123;</span><br><span class="line">				bat <span class="string">&quot;mvn clean package&quot;</span></span><br><span class="line">				archiveArtifacts <span class="string">&#x27;**/target/*.jar&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Linux</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">把bat改为sh</span><br></pre></td></tr></table></figure>
<p><strong>注意：pipeline、stages、stage、steps、checkout…这些词不能改</strong></p>
<p>构建遇到问题：java.lang.NoSuchMethodError: No such DSL method ‘pipeline’ found among steps [bat, build, checkout, container, containerLog, input, junit, library, libraryResource, load, milestone, node, parallel, podTemplate, powershell, properties<br>
解决方法：成功安装PipeLine插件。</p>
<span id="more"></span>
<h2 id="Jenkins项目构建细节-定时构建、参数化构建等"><a class="header-anchor" href="#Jenkins项目构建细节-定时构建、参数化构建等"></a>Jenkins项目构建细节(定时构建、参数化构建等)</h2>
<p><a href="https://www.jianshu.com/p/17385df9cff2">参考链接</a></p>
<h2 id="Jenkins远程部署Jar包-非流水线方式"><a class="header-anchor" href="#Jenkins远程部署Jar包-非流水线方式"></a>Jenkins远程部署Jar包(非流水线方式)</h2>
<h3 id="安装Publish-Over-SSH-插件"><a class="header-anchor" href="#安装Publish-Over-SSH-插件"></a>安装Publish Over SSH 插件</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/0012f7a8801d586ad93c53a1ddd580f0.png" alt="在这里插入图片描述"></p>
<h3 id="配置Publish-Over-SSH"><a class="header-anchor" href="#配置Publish-Over-SSH"></a>配置Publish Over SSH</h3>
<p>点击<strong>Manage Jenkins-&gt;Configure System</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/f515a09b48340e372c1bce3c701c9d6d.png" alt="在这里插入图片描述"><br>
<strong>找到Publish over SSH-&gt;修改用户密码</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/aa6c07192cec93574bb477bc7ef95949.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/dbac90c49e49180824616e522bb6e7b5.png" alt="在这里插入图片描述"></p>
<p><strong>填写服务名、服务器ip、用户名、服务器文件夹等信息</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/f1f2b710ce4ef8b6b1081e517d4eddfb.png" alt="!"><br>
<strong>填写完成后，点击Test Configuration 返回Success说明配置没问题。</strong></p>
<h3 id="项目构建配置"><a class="header-anchor" href="#项目构建配置"></a>项目构建配置</h3>
<p><strong>在对应构建的项目配置中(非PipeLine)，Post Steps选择Send files or execute commands over SSH</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/5c30feff90926bf35b293f7cc12953fe.png" alt="在这里插入图片描述"><br>
<strong>填写下面的配置：</strong><br>
其中，<strong>Remote directory是在之前的 Publish over SSH配置追加</strong>。比如之前配置了/usr/local/testJenkins/，这里填写/test/upload，最终上传的路径就会变成/usr/local/testJenkins/test/upload<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/e87aeeba0ddf0f86898dd41eeda34713.png" alt="在这里插入图片描述"><br>
最后，重新构建，看日志等着构建成功就好。这里传输如果文件过大速度会比较慢。<br>
<a href="https://blog.csdn.net/m0_51527921/article/details/124906363">参考链接1</a>、<a href="https://www.likecs.com/show-204353443.html#sc=1300">参考链接2</a></p>
<h2 id="Jenkins远程部署Jar包-流水线方式"><a class="header-anchor" href="#Jenkins远程部署Jar包-流水线方式"></a>Jenkins远程部署Jar包(流水线方式)</h2>
<p>测试通过的脚本如下：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> CONFIG_NAME = <span class="string">&quot;LocalCentos&quot;</span> <span class="comment">// SSH Server配置的名字</span></span><br><span class="line"><span class="keyword">def</span> SOURCE_FILES = <span class="string">&quot;**/target/*.jar&quot;</span></span><br><span class="line"><span class="keyword">def</span> REMOTE_DIRECTORY = <span class="string">&quot;&quot;</span> <span class="comment">//追加SSH Server配置的目录</span></span><br><span class="line"><span class="keyword">def</span> REMOVE_PREFIX = <span class="string">&quot;/target&quot;</span></span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">	agent any</span><br><span class="line">	stages &#123;</span><br><span class="line">		stage(<span class="string">&#x27;Pull code&#x27;</span>) &#123;</span><br><span class="line">			steps &#123;</span><br><span class="line">				checkout([<span class="attr">$class:</span> <span class="string">&#x27;GitSCM&#x27;</span>, <span class="attr">branches:</span> [[<span class="attr">name:</span> <span class="string">&#x27;*/master&#x27;</span>]], <span class="attr">extensions:</span> [], <span class="attr">userRemoteConfigs:</span> [[<span class="attr">credentialsId:</span> <span class="string">&#x27;4f77bfb0-49cc-4359-9b4a-99b190e5c92b&#x27;</span>, <span class="attr">url:</span> <span class="string">&#x27;https://gitee.com/chuenhung/export-java-bean.git&#x27;</span>]]])</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">&#x27;Build project&#x27;</span>) &#123;</span><br><span class="line">			steps &#123;</span><br><span class="line">				bat <span class="string">&quot;mvn clean package&quot;</span></span><br><span class="line">				archiveArtifacts <span class="string">&#x27;**/target/*.jar&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">&#x27;Deploy project&#x27;</span>) &#123;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sshPublisher(</span><br><span class="line">					<span class="symbol">failOnError:</span> <span class="literal">false</span>,</span><br><span class="line">					<span class="symbol">publishers:</span> [</span><br><span class="line">						sshPublisherDesc(</span><br><span class="line">							<span class="symbol">configName:</span> <span class="string">&quot;$&#123;CONFIG_NAME&#125;&quot;</span>,</span><br><span class="line">							<span class="symbol">transfers:</span> [</span><br><span class="line">								sshTransfer(</span><br><span class="line">									<span class="symbol">sourceFiles:</span> <span class="string">&quot;$&#123;SOURCE_FILES&#125;&quot;</span>,</span><br><span class="line">									<span class="symbol">remoteDirectory:</span> <span class="string">&quot;$&#123;REMOTE_DIRECTORY&#125;&quot;</span>,</span><br><span class="line">									<span class="symbol">removePrefix:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">									<span class="symbol">flatten:</span> <span class="literal">true</span>,</span><br><span class="line">									<span class="symbol">execCommand:</span> <span class="string">&quot;&quot;</span>,<span class="comment">//上传后执行的脚本</span></span><br><span class="line">									<span class="symbol">execTimeout:</span> <span class="number">1800000</span><span class="comment">//执行脚本超时时间</span></span><br><span class="line">								)</span><br><span class="line">							],</span><br><span class="line">							<span class="symbol">sshRetry:</span> [</span><br><span class="line">								<span class="symbol">retries:</span> <span class="number">0</span>  <span class="comment">//重试次数</span></span><br><span class="line">							]</span><br><span class="line">						   )</span><br><span class="line">						]</span><br><span class="line">					)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/cfzy/p/16562925.html#_label1">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Jenkins</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>《人生的智慧》读书笔记</title>
    <url>/2022/03/05/wisdom_of_life/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/9e546b692e683e3da7c275668bb19171.jpeg" width="460px" align="center"></img></p>
<p>书名：人生的智慧<br>
作者：叔本华<br>
读完时间：2022年2月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<h3 id="第3章-人是什么"><a class="header-anchor" href="#第3章-人是什么"></a>第3章 人是什么</h3>
<ul>
<li>
<p>所以，对人的幸福来说，最关键的是人的主体的优良素质，包括高贵的品格、出色的智力、快乐的性格和健康的身体——总而言之，就是“健康的身体和健康的灵魂”（尤维纳利斯）。因此对于这些好处我们应该努力地维持和改善，而不应该一心扑在获取外在的财产和荣誉上。</p>
</li>
<li>
<p>外在的客体方面是对立的，艰苦和贫乏的生活导致了痛苦，而安逸富足的生活则会导致无聊。所以，地位较低的劳动阶层永远都在与贫乏，也就是痛苦做斗争，而上流社会的富人则绝望地挣扎在无聊中。</p>
</li>
<li>
<p>无聊真正的来源就是内在的空虚，它促使人永远不停地向外部寻求刺激，努力用某些事物来激活自己的精神和情绪。</p>
</li>
</ul>
<h3 id="第4章-人的财产"><a class="header-anchor" href="#第4章-人的财产"></a>第4章 人的财产</h3>
<ul>
<li>
<p>只考察一个人实际拥有的财产没有任何意义，就像在计算分数时只计算分子而没有计算分母。</p>
</li>
<li>
<p>穷人并不会由于无法得到巨额财富而痛苦不堪，但富人在计划失败或期望落空时，就会忽略自己已经拥有的数量可观的财富，也不会以此来自我安慰。</p>
</li>
</ul>
<h3 id="第5章-人在他人心中的位置"><a class="header-anchor" href="#第5章-人在他人心中的位置"></a>第5章 人在他人心中的位置</h3>
<ul>
<li>那些具有突出的个人素质的人能够更清楚地认识到自己民族的缺点，因为每时每刻都能看到这些缺点。但是，如果一个可怜的傻瓜在世界上找不到任何能够引以为傲的东西，那么他就只剩下最后一招：为自己所属的民族而自豪。他从这一点得到了安慰，所以他对此充满感激，时刻准备着用自己的“牙齿和指甲”捍卫自己民族的所有缺点和愚蠢。</li>
</ul>
<h3 id="第6章-建议和格言"><a class="header-anchor" href="#第6章-建议和格言"></a>第6章 建议和格言</h3>
<ul>
<li>
<p>我们应该尽可能追求简单的关系，甚至单调的生活，只要不会导致无聊，就会对我们幸福感的提升大有好处，因为这样做就能让我们更少地感觉到生活，从而更少地感觉到生活的重负，因为它是生活的本质</p>
</li>
<li>
<p>如果你发现有许多人生活比你幸福，那你就想想有多少人比你的情况还要惨吧。</p>
</li>
<li>
<p>世界上有三种类型的贵族：第一类是出身和地位决定的贵族；第二类是金钱财富决定的贵族；第三类则是精神思想决定的贵族。最后一类是真正高贵的人</p>
</li>
<li>
<p>在日常生活中，庸人和智者之间最大的差异就在于在思考是否有可能出现危险时，庸人只提出而且只思考一个问题：以前是否发生过类似的危险，智者却考虑什么事情有可能会发生，而且牢记这句西班牙谚语：“一年之内都没有发生的事有可能几分钟之内就会发生。”当然，这两类人提到的问题不一样是很正常的，因为需要洞察力才能为将来做打算，而只需要感官就能了解已经发生的事。但我们应该以这句话为格言：为邪恶之神而做出的牺牲是不能逃避的。换言之，为了减少不幸发生的可能，我们就必须花费时间、人力、金钱，忍受烦琐和不便，并且减少自己的需求。我们牺牲的越多，发生不幸的可能性就越小、离我们越远。在这方面，购买保险就是一个很好的例子。这是众生供奉给邪恶之神的牺牲。</p>
</li>
</ul>
<h3 id="第7章-人生的各个阶段"><a class="header-anchor" href="#第7章-人生的各个阶段"></a>第7章 人生的各个阶段</h3>
<ul>
<li>
<p>我们前半生的最后阶段，也就是青年时代，拥有的优势要比后半生多很多，但是在青年时期，我们对幸福的追求反而成为对我们造成困扰、为我们带来不幸的原因。</p>
</li>
<li>
<p>一切幸福都是虚假的，只有痛苦才是真实的。</p>
</li>
<li>
<p>从年轻人的角度来观察，生活就是没有尽头的未来；但是从老年人的角度来看的话，生活就成了短暂的过去。</p>
</li>
<li>
<p>有一个人生活了足够长的时间之后，也就是当他年老时，才会懂得生活极其短暂。对于年轻人来说，时间的行进速度是很慢的，所以，在最初的四分之一的生命中，我们不仅非常快乐，而且还觉得时间最为悠远。</p>
</li>
<li>
<p>所有坚果里面都是空心的，无论他们外面包裹着怎样的金衣。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(十一)</title>
    <url>/2023/05/01/coding_notes_eleven/</url>
    <content><![CDATA[<h2 id="Hexo博客-Next主题图片防盗链问题"><a class="header-anchor" href="#Hexo博客-Next主题图片防盗链问题"></a>Hexo博客 Next主题图片防盗链问题</h2>
<p><strong>问题场景</strong>：打开博客，所有引用外部链接的图片均无法正常加载，但是所有图片复制链接在浏览器请求是可以加载的。<br>
<strong>问题原因</strong>：目标网站图片设置了防盗链。<br>
<strong>解决方案</strong>：在 <strong>\themes\next\layout_partials\head.swig</strong>文件中加一行代码即可。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/bc9371e3f88d70a6670cd3d9c11d9195.png#pic_center" alt="在这里插入图片描述"><br>
<a href="https://blog.csdn.net/weixin_48290187/article/details/124400855">参考链接</a>、<a href="https://www.cnblogs.com/ranxi169/p/16711700.html">参考链接</a></p>
<h2 id="Springboot-Druid数据库密码加密配置步骤"><a class="header-anchor" href="#Springboot-Druid数据库密码加密配置步骤"></a>Springboot Druid数据库密码加密配置步骤</h2>
<p><strong>方式一：</strong></p>
<ul>
<li>找到druid包的位置，CMD命令行执行下面的命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> druid-1.2.6.jar com.alibaba.druid.filter.config.ConfigTools 数据库密码 &gt; pwd.txt</span><br></pre></td></tr></table></figure>
<ul>
<li>把项目中的解密公钥和密文改为pwd.txt中的publicKey、password</li>
</ul>
<span id="more"></span>
<p><strong>方式二：</strong></p>
<ul>
<li>在项目中运行下面的代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;a123456&quot;</span>;</span><br><span class="line">	String[] arr = ConfigTools.genKeyPair(<span class="number">512</span>);</span><br><span class="line">	System.out.println(<span class="string">&quot;password:&quot;</span> + password);</span><br><span class="line">	System.out.println(<span class="string">&quot;privateKey:&quot;</span> + arr[<span class="number">0</span>]);</span><br><span class="line">	System.out.println(<span class="string">&quot;publicKey:&quot;</span> + arr[<span class="number">1</span>]);</span><br><span class="line">	System.out.println(<span class="string">&quot;password:&quot;</span> + ConfigTools.encrypt(arr[<span class="number">0</span>], password));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>把项目中的解密公钥、密文分别改为上面代码中输出的publicKey、password</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li><strong>Druid的版本一定要一致</strong><br>
用druid-1.1.9.jar生成的公钥和密文在druid-1.2.6.jar中项目直接解密失败</li>
<li><strong>公钥和密文一定要同时替换</strong><br>
同一个Jar包多次生成公钥，前后几个字符串是一样的，但是中间的不一样。</li>
</ul>
<p><a href="https://blog.csdn.net/xiha_zhu/article/details/126423798">参考链接</a>、<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">参考链接</a></p>
<h2 id="Java统计字符串出现的次数"><a class="header-anchor" href="#Java统计字符串出现的次数"></a>Java统计字符串出现的次数</h2>
<ul>
<li><strong>方法一：使用Java8的流和Lambda表达式</strong><br>
<strong>代码示例：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;你好/454/545/&quot;</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> str.chars().filter(ch -&gt; ch == <span class="string">&#x27;/&#x27;</span>).count();</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure>
<p><strong>返回结果：</strong><br>
3</p>
<ul>
<li><strong>方法二：使用Spring框架中的StringUtils</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> StringUtils.countOccurrencesOf(<span class="string">&quot;你好/454/545/&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>方法三：使用commons-lang3工具类中的StringUtils</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> StringUtils.countMatches(<span class="string">&quot;你好/454/545/&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>方法四：使用HashMap</strong></li>
</ul>
<p><strong>该方法可以统计字符串中每个字符出现的次数:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Character, Integer&gt; <span class="title function_">countsOfCharacter</span><span class="params">(String str)</span>&#123;</span><br><span class="line">	<span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line">	Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">char</span> c : chars) &#123;</span><br><span class="line">		<span class="keyword">if</span> (map.containsKey(c)) &#123;</span><br><span class="line">			map.put(c, map.get(c) + <span class="number">1</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			map.put(c,<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>调用示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;你好/454/545/&quot;</span>;</span><br><span class="line">Map&lt;Character, Integer&gt; map = countsOfCharacter(str);</span><br><span class="line">System.out.println(map.get(<span class="string">&quot;/&quot;</span>.charAt(<span class="number">0</span>)));</span><br></pre></td></tr></table></figure>
<p><strong>返回结果：</strong><br>
3</p>
<p><a href="https://blog.csdn.net/allway2/article/details/126324663">参考链接</a></p>
<h2 id="Java获取某个字符在字符串中出现第N次的位置"><a class="header-anchor" href="#Java获取某个字符在字符串中出现第N次的位置"></a>Java获取某个字符在字符串中出现第N次的位置</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取某个字符在字符串中出现第N次的位置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: data 字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: str 子字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: num 子字符串出现的第N次</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int 字符串出现的位置，未匹配到返回-1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndexOf</span> <span class="params">(String data, String str, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">	<span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(str);</span><br><span class="line">	<span class="type">Matcher</span> <span class="variable">findMatcher</span> <span class="operator">=</span> pattern.matcher(data);</span><br><span class="line">	<span class="comment">// 标记遍历字符串的位置</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">indexNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (findMatcher.find()) &#123;</span><br><span class="line">		indexNum++;</span><br><span class="line">		<span class="keyword">if</span>(indexNum == num)&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 未匹配到返回-1</span></span><br><span class="line">	<span class="keyword">if</span>(!data.contains(str) || indexNum &lt; num || num&lt;<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> findMatcher.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Maven激活指定profile"><a class="header-anchor" href="#Maven激活指定profile"></a>Maven激活指定profile</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn package -P 待激活的profile</span><br><span class="line">示例：mvn package -P dev</span><br></pre></td></tr></table></figure>
<h2 id="Maven中resources标签的用法详解"><a class="header-anchor" href="#Maven中resources标签的用法详解"></a>Maven中resources标签的用法详解</h2>
<p>一旦pom当中添加resource，指定某一个文件，就会导致resources其他文件(java文件不会丢)打包的时候丢失。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">include</span>&gt;</span>a.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>打包文件中只有a.properties。</strong></p>
<p><strong>另外，当filtering为false时，配置文件用@@，取不到值。</strong></p>
<p><a href="https://www.jb51.net/article/235392.htm">参考链接</a></p>
<h2 id="MySQL-字符集不一致报错"><a class="header-anchor" href="#MySQL-字符集不一致报错"></a>MySQL 字符集不一致报错</h2>
<p><strong>Cause: java.sql.SQLException: Incorrect string value: ‘\xE9\x87\x91\xE5\x87\xA1…’ for column ‘username’ at row 1<br>
; uncategorized SQLException for SQL []; SQL state [HY000]</strong></p>
<p><strong>检查建表时字符集：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/6fe421df293b7f0c00f227f1afc31658.png" alt="在这里插入图片描述"><br>
<strong>在MySQL 8.0版本之前,默认字符集为latin1。</strong></p>
<p><strong>解决方法：</strong><br>
<strong>建表时添加默认字符集，示例代码如下：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">COMMENT<span class="operator">=</span><span class="string">&#x27;用户信息历史表&#x27;</span></span><br><span class="line">ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 </span><br></pre></td></tr></table></figure>
<h2 id="EasyExcel日期格式化"><a class="header-anchor" href="#EasyExcel日期格式化"></a>EasyExcel日期格式化</h2>
<p><strong>添加@DateTimeFormat注解</strong>，参考代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.format.DateTimeFormat;</span><br><span class="line"><span class="meta">@ExcelProperty(value=&quot;申请日&quot;,index = 8)</span></span><br><span class="line"><span class="meta">@ColumnWidth(12)</span></span><br><span class="line"><span class="meta">@DateTimeFormat(&quot;yyyy/MM/dd&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date applyDate;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/qq_44749491/article/details/127879946">参考链接</a></p>
<h2 id="Configuration、-Component、-Controller等注解"><a class="header-anchor" href="#Configuration、-Component、-Controller等注解"></a>@Configuration、@Component、@Controller等注解</h2>
<p><strong>@Configuration注解</strong>:</p>
<ul>
<li>本质上还是@Component</li>
<li>配置类必须以类的形式提供（不能是工厂方法返回的实例），允许通过生成子类在运行时增强（cglib 动态代理）</li>
<li>配置类不能是 final 类（没法动态代理）</li>
<li>配置类必须是非本地的（即不能在方法中声明，不能是 private）</li>
<li>@Bean 方法可能不会反过来创建进一步的配置类（也就是返回的 bean 如果带有 @Configuration，也不会被特殊处理，只会作为普通的 bean）</li>
</ul>
<p>@Component、@Controller、@Service、@Repository<strong>这四个注解实际上没有任何本质区别</strong>，只是后三者只是涉及一些命名规范而已，四者的注解效果确实一致。关于这里的命名规范就好比苹果叫苹果，你不会说苹果是菠萝。这样的好处显然易见，听到别人说苹果，你就知道是苹果，不会想到菠萝。<br>
<strong>实际上这四个注解实际上没有任何本质区别</strong>，如果你喜欢，你完全可以把这四个注解当成一个注解用，当然这样的话老板可能就不喜欢你了。<br>
<a href="https://juejin.cn/post/6844904034596290568">参考链接</a>、<a href="https://blog.csdn.net/baidu_41634343/article/details/95176401">参考链接</a></p>
<h2 id="Java泛型方法"><a class="header-anchor" href="#Java泛型方法"></a>Java泛型方法</h2>
<p>在方法中出现了泛型的结构，这样的方法叫做泛型方法。<br>
<strong>泛型参数与类的泛型参数没有任何关系，换句话说，泛型方法所属的类是不是泛型类都没有关系</strong>。<br>
<strong>泛型方法可以声明为static。 方法使用类的泛型不能声明为static。</strong></p>
<h2 id="Java泛型-类型通配符："><a class="header-anchor" href="#Java泛型-类型通配符："></a>Java泛型-类型通配符：&lt;?&gt;</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;?&gt;是List&lt;String&gt;、List&lt;Object&gt;等各种泛型List的父类。</span><br><span class="line">&lt;?&gt;不能用在泛型方法、泛型类的声明上</span><br><span class="line">不能在List&lt;?&gt;中添加元素(除了<span class="literal">null</span>)。</span><br><span class="line">可以读取List&lt;?&gt;中的元素，类型为Object。</span><br></pre></td></tr></table></figure>
<h2 id="Java泛型-有限制的通配符-上下界"><a class="header-anchor" href="#Java泛型-有限制的通配符-上下界"></a>Java泛型-有限制的通配符(上下界)</h2>
<ul>
<li>上界extends<br>
使用时指定的类型必须是继承某个类(或者实现某个接口)，即**&lt;=**</li>
<li>下界super<br>
使用时指定的类型不能小于操作的类(或接口)，即**&gt;=**</li>
</ul>
<p><strong>示例代码如下：</strong></p>
<p><strong>定义类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubOrder</span> <span class="keyword">extends</span> <span class="title class_">Order</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试通配符初始化：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Order</span>&gt; list1 = <span class="literal">null</span>;</span><br><span class="line">        List&lt;? <span class="built_in">super</span> Order&gt; list2 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Order&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;SubOrder&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Object&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list1 = list3;</span><br><span class="line">        list1 = list4;</span><br><span class="line">        <span class="comment">// list1 = list5; // 编译报错</span></span><br><span class="line"></span><br><span class="line">        list2 = list3;</span><br><span class="line">        <span class="comment">// list2 = list4;// 编译报错</span></span><br><span class="line">        list2 = list5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试通配符取值：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Order</span>&gt; list1 = <span class="literal">null</span>;</span><br><span class="line">        List&lt;? <span class="built_in">super</span> Order&gt; list2 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Order&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;SubOrder&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Object&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list1 = list4;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> list1.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// SubOrder subOrder = list1.get(0); 编译报错</span></span><br><span class="line">        </span><br><span class="line">        list2 = list3;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> list2.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// Order order = list2.get(0); 编译错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试通配符添加值：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Order</span>&gt; list1 = <span class="literal">null</span>;</span><br><span class="line">        List&lt;? <span class="built_in">super</span> Order&gt; list2 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Order&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;SubOrder&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Object&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list1 = list4;</span><br><span class="line">        <span class="comment">// list1.add(new SubOrder()); 编译错误</span></span><br><span class="line">        <span class="comment">// list1.add(new Order()); 编译错误：因为?可能小于Order甚至比SubOrder都小。这儿不可以，根据多态上面也就不可以</span></span><br><span class="line"></span><br><span class="line">        list2 = list3;</span><br><span class="line">        list2.add(<span class="keyword">new</span> <span class="title class_">Order</span>());</span><br><span class="line">        list2.add(<span class="keyword">new</span> <span class="title class_">SubOrder</span>());<span class="comment">// 多态</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringBoot下mybatis-plus如何打印sql日志和参数到日志文件"><a class="header-anchor" href="#SpringBoot下mybatis-plus如何打印sql日志和参数到日志文件"></a>SpringBoot下mybatis-plus如何打印sql日志和参数到日志文件</h2>
<p><a href="https://www.jb51.net/article/239936.htm">参考链接(很详细)</a></p>
<h2 id="Maven的mirror镜像和仓库"><a class="header-anchor" href="#Maven的mirror镜像和仓库"></a>Maven的mirror镜像和仓库</h2>
<h3 id="mirror简介"><a class="header-anchor" href="#mirror简介"></a>mirror简介</h3>
<p>说明：</p>
<ul>
<li>Maven优先从镜像中下载，找不到再从中央仓库(默认配置)下载<br>
默认中央仓库地址：https://repo.maven.apache.org/maven2</li>
<li>可以配置多个</li>
<li>id可以随便写，不重复就行</li>
<li>name对仓库进行一些描述</li>
</ul>
<p><strong>如果配置多个mirror，首先按照搜索顺序优先级搜索，相同优先级的repository根据配置顺序搜索。</strong></p>
<h3 id="mirrorOf的不同类型"><a class="header-anchor" href="#mirrorOf的不同类型"></a>mirrorOf的不同类型</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对所有仓库id镜像，你配置的所有仓库都不起作用了</span></span><br><span class="line">mirrorOf=*? </span><br><span class="line"><span class="comment">// 镜像my-repo-id，你配置的my-repo-id仓库不起作用了</span></span><br><span class="line">mirrorOf=my-repo-id </span><br><span class="line"><span class="comment">// !表示非运算，排除你配置的my-repo-id仓库，其他仓库都被镜像了。就是请求下载my-repo-id的仓库的jar不使用mirror的url下载，其他都是用mirror配置的url下载</span></span><br><span class="line">mirrorOf=*,!my-repo-id? </span><br><span class="line"><span class="comment">// 如果本地库存在就用本地库的，如果本地没有所有下载就用mirror配置的url下载</span></span><br><span class="line">mirrorOf=external:*? </span><br></pre></td></tr></table></figure>
<h3 id="仓库jar包下载顺序"><a class="header-anchor" href="#仓库jar包下载顺序"></a>仓库jar包下载顺序</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">本地仓库 -&gt; settings_profile_repo -&gt; pom_profile_repo -&gt; pom_repositories -&gt; settings_mirror -&gt; central</span><br></pre></td></tr></table></figure>
<h3 id="仓库分类"><a class="header-anchor" href="#仓库分类"></a>仓库分类</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/0664faeeb03d3c7220f5ef06254f768c.png#pic_center" alt="在这里插入图片描述"><br>
<a href="https://www.jianshu.com/p/c4f02c5bdfc7">(简书)Maven中配置mirrorOf和仓库</a><br>
<a href="https://blog.csdn.net/Alexshi5/article/details/86709769/?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1--blog-81564562.pc_relevant_3mothn_strategy_recovery&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4">(CSDN)深入理解Maven的私服(Nexus)和仓库(Repository)以及settings中的mirror和mirrorOf</a></p>
<h2 id="在windows环境下，后台运行jar包并打印后台日志"><a class="header-anchor" href="#在windows环境下，后台运行jar包并打印后台日志"></a>在windows环境下，后台运行jar包并打印后台日志</h2>
<p><strong>run.bat脚本如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@echo</span> off</span><br><span class="line">%<span class="number">1</span> mshta vbscript:CreateObject(<span class="string">&quot;WScript.Shell&quot;</span>).Run(<span class="string">&quot;%~s0 ::&quot;</span>,<span class="number">0</span>,FALSE)(window.close)&amp;&amp;exit</span><br><span class="line">java -jar reward-portal-<span class="number">2023</span>-<span class="number">02</span>-<span class="number">02.</span>jar &gt;StartupLog.log  <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p><strong>注意：run.bat放在和jar包同一个目录</strong></p>
<p><a href="https://blog.csdn.net/weixin_47148475/article/details/126747188?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-126747188-blog-126401338.pc_relevant_landingrelevant&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4">参考链接</a>、<a href="https://blog.csdn.net/qq_19072921/article/details/126401338">参考链接</a></p>
<h2 id="停止Windows环境下的Java服务"><a class="header-anchor" href="#停止Windows环境下的Java服务"></a>停止Windows环境下的Java服务</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看进程号</span><br><span class="line">// 下面两种方法都可以,端口号为SpringBoot项目的server.port</span><br><span class="line">jps -l</span><br><span class="line">netstat -aon|findstr <span class="string">&quot;端口号&quot;</span> </span><br><span class="line">// 停止服务</span><br><span class="line">taskkill -f -pid 进程号</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
        <tag>Springboot</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Java ZipOutputStream实现将文件列表或者文件夹压缩成zip</title>
    <url>/2022/06/09/zipoutputstream/</url>
    <content><![CDATA[<h2 id="需求概述"><a class="header-anchor" href="#需求概述"></a>需求概述</h2>
<p>支持按勾选的成果申请记录批量下载附件。按&quot;年份&quot;+“成果名称&quot;将对应的成果附件放入文件夹，最后将所有文件夹打包成一个压缩包，名称未&quot;成果附件”+“下载时间(精确到秒)”。例如：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/53246fe999cf1a44c0d8dd7959527119.jpeg#pic_center" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/fde75984ad1430aa9347d6b7b1b908e8.jpeg#pic_center" alt="在这里插入图片描述"></p>
<span id="more"></span>
<h2 id="工具类"><a class="header-anchor" href="#工具类"></a>工具类</h2>
<p>在网上找了个Zip压缩工具类，基本满足了我的需求，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Zip压缩工具类：支持压缩文件列表(包括压缩包)和文件夹</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chuenhung</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2022/06/08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BUFFER_SIZE</span> <span class="operator">=</span> <span class="number">2</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcFiles 需要压缩的文件列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 输出流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RuntimeException 压缩失败会抛出运行时异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">toZip</span><span class="params">(List&lt;File&gt; srcFiles ,OutputStream out)</span> <span class="keyword">throws</span> RuntimeException, FileNotFoundException &#123;</span><br><span class="line">        <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zos = <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(out);</span><br><span class="line">            <span class="keyword">for</span> (File srcFile : srcFiles) &#123;</span><br><span class="line">                <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[BUFFER_SIZE];</span><br><span class="line">                zos.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(srcFile.getName()));</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">                <span class="keyword">while</span> ((len = in.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    zos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line">                zos.closeEntry();</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;zip error from ZipUtil&quot;</span>,e);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(zos != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    zos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcFiles 需要压缩的文件列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outDir 输出文件目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RuntimeException 压缩失败会抛出运行时异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">toZip</span><span class="params">(List&lt;File&gt; srcFiles ,String outDir)</span> <span class="keyword">throws</span> RuntimeException, FileNotFoundException &#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(outDir));</span><br><span class="line">        <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zos = <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(out);</span><br><span class="line">            <span class="keyword">for</span> (File srcFile : srcFiles) &#123;</span><br><span class="line">                <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[BUFFER_SIZE];</span><br><span class="line">                zos.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(srcFile.getName()));</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">                <span class="keyword">while</span> ((len = in.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    zos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line">                zos.closeEntry();</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;zip error from ZipUtil&quot;</span>,e);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(zos != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    zos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outDirList 压缩文件夹路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> KeepDirStructure 是否保留原来的目录结构,</span></span><br><span class="line"><span class="comment">     * 			true:保留目录结构;</span></span><br><span class="line"><span class="comment">     *			false:所有文件跑到压缩包根目录下(注意：不保留目录结构可能会出现同名文件,会压缩失败)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RuntimeException 压缩失败会抛出运行时异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">toZip</span><span class="params">(List&lt;String&gt; outDirList, OutputStream out,</span></span><br><span class="line"><span class="params">                             <span class="type">boolean</span> KeepDirStructure)</span> <span class="keyword">throws</span> RuntimeException, Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zos = <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(out);</span><br><span class="line">            List&lt;File&gt; sourceFileList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String dir : outDirList) &#123;</span><br><span class="line">                <span class="type">File</span> <span class="variable">sourceFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir);</span><br><span class="line">                sourceFileList.add(sourceFile);</span><br><span class="line">            &#125;</span><br><span class="line">            compress(sourceFileList, zos, KeepDirStructure);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;zip error from ZipUtil&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (zos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    zos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归压缩方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceFile 源文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> zos zip输出流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 压缩后的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> KeepDirStructure 是否保留原来的目录结构,</span></span><br><span class="line"><span class="comment">     * 			true:保留目录结构;</span></span><br><span class="line"><span class="comment">     *			false:所有文件跑到压缩包根目录下(注意：不保留目录结构可能会出现同名文件,会压缩失败)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">compress</span><span class="params">(File sourceFile, ZipOutputStream zos,</span></span><br><span class="line"><span class="params">                                 String name, <span class="type">boolean</span> KeepDirStructure)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[BUFFER_SIZE];</span><br><span class="line">        <span class="keyword">if</span> (sourceFile.isFile()) &#123;</span><br><span class="line">            zos.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(name));</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(sourceFile);</span><br><span class="line">            <span class="keyword">while</span> ((len = in.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                zos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Complete the entry</span></span><br><span class="line">            zos.closeEntry();</span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            File[] listFiles = sourceFile.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (listFiles == <span class="literal">null</span> || listFiles.length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (KeepDirStructure) &#123;</span><br><span class="line">                    zos.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(name + <span class="string">&quot;/&quot;</span>));</span><br><span class="line">                    zos.closeEntry();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (File file : listFiles) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (KeepDirStructure) &#123;</span><br><span class="line">                        compress(file, zos, name + <span class="string">&quot;/&quot;</span> + file.getName(),</span><br><span class="line">                                KeepDirStructure);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        compress(file, zos, file.getName(), KeepDirStructure);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">compress</span><span class="params">(List&lt;File&gt; sourceFileList,</span></span><br><span class="line"><span class="params">                                 ZipOutputStream zos, <span class="type">boolean</span> KeepDirStructure)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[BUFFER_SIZE];</span><br><span class="line">        <span class="keyword">for</span> (File sourceFile : sourceFileList) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sourceFile.getName();</span><br><span class="line">            <span class="keyword">if</span> (sourceFile.isFile()) &#123;</span><br><span class="line">                zos.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(name));</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(sourceFile);</span><br><span class="line">                <span class="keyword">while</span> ((len = in.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    zos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line">                zos.closeEntry();</span><br><span class="line">                in.close();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                File[] listFiles = sourceFile.listFiles();</span><br><span class="line">                <span class="keyword">if</span> (listFiles == <span class="literal">null</span> || listFiles.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (KeepDirStructure) &#123;</span><br><span class="line">                        zos.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(name + <span class="string">&quot;/&quot;</span>));</span><br><span class="line">                        zos.closeEntry();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (File file : listFiles) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (KeepDirStructure) &#123;</span><br><span class="line">                            compress(file, zos, name + <span class="string">&quot;/&quot;</span> + file.getName(),</span><br><span class="line">                                    KeepDirStructure);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            compress(file, zos, file.getName(),</span><br><span class="line">                                    KeepDirStructure);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>业务中需要删除临时文件夹以及下面的所有文件，用到的工具类代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chuenhung</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2022/06/09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件或文件夹</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: file 如果是文件删除该文件，如果是文件夹删除该文件夹以及下面的所有文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> chuenhung</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/6/9/</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteFile</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String[] childFilePaths = file.list();</span><br><span class="line">            <span class="keyword">for</span> (String childFilePath : childFilePaths) &#123;</span><br><span class="line">                <span class="type">File</span> <span class="variable">childFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file.getAbsolutePath() + <span class="string">&quot;/&quot;</span> + childFilePath);</span><br><span class="line">                deleteFile(childFile);</span><br><span class="line">            &#125;</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/zeng1994/p/7862288.html">参考链接1</a>、<a href="https://blog.csdn.net/wolfies/article/details/79523181">参考链接2</a></p>
<h2 id="业务代码"><a class="header-anchor" href="#业务代码"></a>业务代码</h2>
<p>核心逻辑就是要把每个成果申请的所有文件放入到成果申请临时文件夹中，成果申请临时文件夹名：“年份”+“成果名称”，然后对每个成果申请文件夹压缩，最后删除临时文件夹。我在代码中也有详细地写注释，业务代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchDownload</span><span class="params">(HttpServletResponse response, HttpServletRequest request, List&lt;Long&gt; idList)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="comment">// 1、参数校验</span></span><br><span class="line">	<span class="keyword">if</span>(CollectionUtil.isEmpty(idList))&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CommonsException</span>(MessageCode.PARAM_NULL);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 2、设置response相关内容(包括文件名)</span></span><br><span class="line">	<span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">	builder.append(<span class="string">&quot;成果附件&quot;</span>);</span><br><span class="line">	builder.append(DateUtil.getNowDate(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>));</span><br><span class="line">	builder.append(<span class="string">&quot;.zip&quot;</span>);</span><br><span class="line">	<span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span>  HttpHelper.createDownloadFileName(builder.toString());</span><br><span class="line">	response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">	response.setContentType(<span class="string">&quot;application/force-download&quot;</span>);</span><br><span class="line">	response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span>+fileName);</span><br><span class="line">	<span class="comment">// 3、根据成果主键批量查询成果信息</span></span><br><span class="line">	Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">	map.put(<span class="string">&quot;idList&quot;</span>,idList);</span><br><span class="line">	List&lt;AchievementApplication&gt; applicationList = achievementApplicationMapper.queryAchievementApplicationList(map);</span><br><span class="line">	<span class="keyword">if</span>(CollectionUtil.isEmpty(applicationList))&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CommonsException</span>(MessageCode.DATA_NOT_FOUND);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 4、把每个成果申请的所有文件放入到成果申请临时文件夹中，成果申请临时文件夹名：年份+成果名称</span></span><br><span class="line">	<span class="comment">// 每一个压缩的成果附件路径</span></span><br><span class="line">	List&lt;String&gt; outDirList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	<span class="keyword">for</span>(AchievementApplication application: applicationList)&#123;</span><br><span class="line">		<span class="keyword">if</span>(StringUtil.isNotEmpty(application.getAttachment()))&#123;</span><br><span class="line">			List&lt;AttachmentFileBo&gt; attachmentFileBoList = attachmentService.listFormalAttachmentFile(application.getAttachment());</span><br><span class="line">			<span class="keyword">if</span>(CollectionUtil.isNotEmpty(attachmentFileBoList))&#123;</span><br><span class="line">				<span class="comment">// 成果申请临时文件夹名：年份+成果名称</span></span><br><span class="line">				builder.delete(<span class="number">0</span>,builder.length());</span><br><span class="line">				builder.append(application.getYear());</span><br><span class="line">				builder.append(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">				builder.append(application.getName());</span><br><span class="line">				<span class="comment">// 循环对每个成果申请的所有文件压缩</span></span><br><span class="line">				List&lt;String&gt; fileNameList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">				<span class="comment">// 每个成果的临时复制后存放的文件夹，之后对这个文件夹压缩</span></span><br><span class="line">				<span class="type">String</span> <span class="variable">outDir</span> <span class="operator">=</span> attachementUploadUrl+builder.toString();</span><br><span class="line">				<span class="type">File</span> <span class="variable">outDirFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(outDir);</span><br><span class="line">				outDirFile.mkdirs();</span><br><span class="line">				<span class="keyword">for</span>(AttachmentFileBo fileBo: attachmentFileBoList)&#123;</span><br><span class="line">					<span class="comment">// 每个成果如有重复附件名则不处理</span></span><br><span class="line">					<span class="keyword">if</span>(!fileNameList.contains(fileBo.getFileName()))&#123;</span><br><span class="line">						<span class="type">File</span> <span class="variable">sourceFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(attachementUploadUrl+fileBo.getFileSaveName());</span><br><span class="line">						<span class="keyword">if</span> (!sourceFile.exists()) &#123;</span><br><span class="line">							log.error(<span class="string">&quot;AchievementApplicationServiceImpl.batchDownload附件&#123;&#125;丢失&quot;</span>,fileBo.getFileName());</span><br><span class="line">							<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CommonsException</span>(MessageCode.ATTACHMENT_LOST, <span class="string">&quot;附件：&quot;</span> + fileBo.getFileName() + <span class="string">&quot;丢失&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="comment">// 复制到临时文件夹</span></span><br><span class="line">						<span class="type">File</span> <span class="variable">destinctFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(outDir+<span class="string">&quot;/&quot;</span>+fileBo.getFileName());</span><br><span class="line">						Files.copy(sourceFile.toPath(), destinctFile.toPath());</span><br><span class="line">					&#125;</span><br><span class="line">					fileNameList.add(fileBo.getFileName());</span><br><span class="line">				&#125;</span><br><span class="line">				outDirList.add(outDir);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 4、对成果申请文件夹压缩</span></span><br><span class="line">	<span class="keyword">if</span>(CollectionUtil.isNotEmpty(outDirList))&#123;</span><br><span class="line">		ZipUtil.toZip(outDirList, response.getOutputStream(),<span class="literal">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 5、删除临时文件夹</span></span><br><span class="line">	<span class="keyword">for</span>(String outDir: outDirList)&#123;</span><br><span class="line">		<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(outDir);</span><br><span class="line">		FileUtils.deleteFile(file);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot配置文件顺序学习</title>
    <url>/2022/07/23/springboot_config_study/</url>
    <content><![CDATA[<p>1、SpringBoot的总体读取顺序优先级<strong>包外大于包内,properties大于yml</strong>。<br>
2、 SpringBoot的总体读取顺序如下所示：</p>
<ul>
<li>config/application.properties（项目同级目录中config目录下）</li>
<li>config/application.yml</li>
<li>application.properties（项目同级目录下）</li>
<li>application.yml</li>
<li>resources/config/application.properties（项目resources目录中config目录下）</li>
<li>resources/config/application.yml</li>
<li>resources/application.properties（项目的resources目录下）</li>
<li>resources/application.yml</li>
</ul>
<p>项目同级目录，相当于生产环境中的JAR包。</p>
<span id="more"></span>
<p>3、配置文件中只要有<strong>spring.profiles.active=dev</strong>代码程序就会激活。<br>
如果该代码在包内，程序会优先读取包外的配置(<strong>包外的conf/application-dev.properties-&gt;conf/application-dev.yml-&gt;application-dev.properties-&gt;application-dev.yml</strong>)再读取包内的配置。如果配置在包外，很容易理解，就不赘述了。<br>
举个例子，项目包的部署后的目录结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">│─SpringBootTest</span><br><span class="line">│  │  application-dev.properties</span><br><span class="line">│  │  application.properties</span><br><span class="line">│  │  SpringBootDemo-<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT.jar</span><br><span class="line">│  └──config</span><br><span class="line">│          application-dev.properties</span><br><span class="line">│          application.yml</span><br></pre></td></tr></table></figure>
<p><strong>spring.profiles.active=dev</strong>代码在包SpringBootDemo-0.0.1-SNAPSHOT.jar中，其他地方没有。经过测试，发现配置文件的优先级如下所示**(数字越小优先级越高)**：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">│─SpringBootTest</span><br><span class="line">│  │  application-dev.properties (<span class="number">2</span>)</span><br><span class="line">│  │  application.properties (<span class="number">4</span>)</span><br><span class="line">│  │  SpringBootDemo-<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT.jar (<span class="number">5</span>)</span><br><span class="line">│  └──config</span><br><span class="line">│          application-dev.properties (<span class="number">1</span>)</span><br><span class="line">│          application.yml (<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p><strong>包外的dev配置读完,再读包外其他配置，最后读包内的配置。</strong></p>
<p>另一个例子，项目包的部署后的目录结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">├─SpringBootTest</span><br><span class="line">│  │  application.properties</span><br><span class="line">│  │  SpringBootDemo-<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT.jar</span><br><span class="line">│  └──config</span><br><span class="line">│          application.yml</span><br></pre></td></tr></table></figure>
<p><strong>spring.profiles.active=dev</strong>代码在包SpringBootDemo-0.0.1-SNAPSHOT.jar中，其他地方没有。经过测试，发现配置文件的优先级如下所示**(数字越小优先级越高)**：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">├─SpringBootTest</span><br><span class="line">│  │  application.properties (<span class="number">2</span>)</span><br><span class="line">│  │  SpringBootDemo-<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT.jar (<span class="number">3</span>)</span><br><span class="line">│  └──config</span><br><span class="line">│          application.yml (<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><strong>包外的配置读完,再读包内的配置。</strong><br>
综上两个例子，可以知道，即使包内有激活profiles的代码会生效，但<strong>如果包外有配置会先读包外的配置，并不会优先读包内的dev配置</strong>。</p>
<p>4、yml和properties混用容易出问题，最好都用同一种格式。<br>
5、现网都要有外置的配置文件，且需要激活profile，这样可以保证优先读取包外的配置。</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(十三)</title>
    <url>/2023/06/01/coding_notes_thirteen/</url>
    <content><![CDATA[<h2 id="MySQL数据库生成自动增长序号"><a class="header-anchor" href="#MySQL数据库生成自动增长序号"></a>MySQL数据库生成自动增长序号</h2>
<p><strong>变量需要每次初始化为0，否则会自增</strong><br>
<strong>参考代码：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (<span class="variable">@i</span>:<span class="operator">=</span><span class="variable">@i</span><span class="operator">+</span><span class="number">1</span>) <span class="keyword">AS</span> orderNo , p.proposition_code <span class="keyword">AS</span> propositionCode , p.proposition_name <span class="keyword">AS</span> propositionName</span><br><span class="line"><span class="keyword">FROM</span>  t_proposition_collect p,(<span class="keyword">SELECT</span> <span class="variable">@i</span> :<span class="operator">=</span> <span class="number">0</span>) <span class="keyword">AS</span> i</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/tzhuwb/article/details/77285609?spm=1001.2101.3001.6650.5&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-5-77285609-blog-125642944.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-5-77285609-blog-125642944.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=10">参考链接</a></p>
<span id="more"></span>
<h2 id="MySQL修改密码"><a class="header-anchor" href="#MySQL修改密码"></a>MySQL修改密码</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 这种方式可能报语法错误</span><br><span class="line"><span class="keyword">set</span> password <span class="keyword">for</span> root<span class="variable">@localhost</span> <span class="operator">=</span> password(<span class="string">&#x27;密码&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="SpringBoot定时任务"><a class="header-anchor" href="#SpringBoot定时任务"></a>SpringBoot定时任务</h2>
<p><strong>在类上使用@EnableScheduling和@Component注解，在方法中使用@Scheduled注解。</strong><br>
@Scheduled注解支持cron表达式。<br>
<strong>参考代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AchievementRepetitionJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RepetitionStorageService repetitionStorageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;$&#123;com.aspire.achievement.repetition.job.insert-into-task.cron:0/20 * * * * ? &#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertIntoTaskJob</span><span class="params">()</span> &#123;</span><br><span class="line">        repetitionStorageService.insertIntoTaskJob();</span><br><span class="line">        log.info(<span class="string">&quot;查重任务表插入数据 (定时任务)执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/wangxj_2017/article/details/120450737">参考链接</a></p>
<h2 id="解决Mybatis出现的各种Parameter-’-’-not-found-Available-parameters-are"><a class="header-anchor" href="#解决Mybatis出现的各种Parameter-’-’-not-found-Available-parameters-are"></a>解决Mybatis出现的各种Parameter ’ ’ not found. Available parameters are [ , ]</h2>
<p>Mybatis中如果有多个参数，在xml中使用参数名会包错。<br>
<strong>示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateStatus</span><span class="params">(Long id, String status)</span>;</span><br></pre></td></tr></table></figure>
<p><strong>方法一：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加@Param注解</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateStatus</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id, <span class="meta">@Param(&quot;status&quot;)</span> String status)</span>;</span><br></pre></td></tr></table></figure>
<p><strong>方法二(推荐)：</strong><br>
MyBatis3.5+， 在JDK8下使用新反射特性，若传递多参数时，不使用@Param标注每个参数名，则需<strong>开启javac的-parameters编译参</strong>数。<br>
<strong>在Maven的pom.xml中增加下面的配置：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven.compiler.plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">compilerArgument</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">compilerArgument</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Mybatis 3.5.5正常不会报错 但是某些同事打包还会报错，加上@Param注解双重保险。</p>
<p><a href="https://zhuanlan.zhihu.com/p/456978222">参考链接</a></p>
<h2 id="Mybatis的foreach标签遍历map"><a class="header-anchor" href="#Mybatis的foreach标签遍历map"></a>Mybatis的foreach标签遍历map</h2>
<p><strong>遍历map时，index是元素的key，item为元素的value。</strong><br>
示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;tagsMap.entrySet()&quot;</span> <span class="attr">index</span>=<span class="string">&quot;key&quot;</span> <span class="attr">item</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">  and  tags-&gt; #&#123;key&#125; = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="SpringBoot项目打包"><a class="header-anchor" href="#SpringBoot项目打包"></a>SpringBoot项目打包</h2>
<p>1、打包方式注意为jar、父项目为pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、需要引入spring-boot-maven-plugin</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springboot.plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果打包方式为pom，会少很多文件。</p>
<h2 id="SpringBoot-Async使用注意事项"><a class="header-anchor" href="#SpringBoot-Async使用注意事项"></a>SpringBoot @Async使用注意事项</h2>
<p><strong>必须不同类间调用</strong><br>
例如：A类 --&gt; B类的@Async方法，可以异步调用<br>
<strong>如果在同一个类中调用，会变同步执行</strong><br>
例如：A类.B()–&gt;A类.@Async C()</p>
<p><strong>原因：</strong><br>
底层实现是代理对注解扫描实现的，B方法上没有注解，没有生成相应的代理类。<br>
当然把@Async加到类上也能解决但所有方法都异步了，一般不这么用。</p>
<h2 id="Spring-Cloud-Config-bootstrap文件（重要）"><a class="header-anchor" href="#Spring-Cloud-Config-bootstrap文件（重要）"></a>Spring Cloud Config bootstrap文件（重要）</h2>
<p><strong>bootstrap.yml读多个文件时，后面的配置覆盖前面的配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: webbas32-manage-v1</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      name: common,webbas32-application-manage-v1</span><br><span class="line">      profile: $&#123;ENV_TYPE:test&#125;</span><br><span class="line">      uri: http:<span class="comment">//$&#123;ENV_CONFIG_IP:10.12.7.124&#125;:$&#123;ENV_CONFIG_PORT:8888&#125;</span></span><br><span class="line">      failFast: <span class="literal">true</span></span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">  main.allow-bean-definition-overriding: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>webbas32-application-manage-v1-test.yml文件的配置会覆盖common-test.yml文件的配置,所以一般公用配置放在前面。</strong></p>
<h2 id="Fastjson的JSONObject学习"><a class="header-anchor" href="#Fastjson的JSONObject学习"></a>Fastjson的JSONObject学习</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/ee692cb338c78e46eb274827a442151c.png#pic_center" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/ca0d4d8023be7430886acdc75a1d0f0e.png#pic_center" alt="在这里插入图片描述"><br>
<strong>Fastjson 的JSONObject实际类型是Map，可以获取、遍历它的key和value。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JSONObject</span> <span class="keyword">extends</span> <span class="title class_">JSON</span> <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;String, Object&gt;, Cloneable, Serializable, InvocationHandler &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.parseObject(contrastResultVo.getDetail());</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, Object&gt; entry: jsonObject.entrySet())&#123;</span><br><span class="line">	<span class="type">JSONObject</span> <span class="variable">jsonObjectValue</span> <span class="operator">=</span> (JSONObject)entry.getValue();</span><br><span class="line">	<span class="type">BigDecimal</span> <span class="variable">prob</span> <span class="operator">=</span> jsonObjectValue.getObject(<span class="string">&quot;prob&quot;</span>, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;BigDecimal&gt;()&#123;&#125;);</span><br><span class="line">	<span class="keyword">if</span>(prob != <span class="literal">null</span> &amp;&amp; prob.compareTo(configRate) &gt; -<span class="number">1</span> )&#123;</span><br><span class="line">	   <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> jsonObjectValue.getObject(<span class="string">&quot;s1&quot;</span>, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;String&gt;()&#123;&#125;);</span><br><span class="line">	   <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> jsonObjectValue.getObject(<span class="string">&quot;s2&quot;</span>, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;String&gt;()&#123;&#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.freesion.com/article/4845411825/">参考链接</a></p>
<h2 id="Fastjson的parseObject不支持泛型"><a class="header-anchor" href="#Fastjson的parseObject不支持泛型"></a>Fastjson的parseObject不支持泛型</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListResult</span>&lt;T&gt;&#123;</span><br><span class="line">	<span class="keyword">protected</span> String status;</span><br><span class="line">	<span class="keyword">protected</span> String message;</span><br><span class="line">	<span class="keyword">private</span> List&lt;T&gt; data;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>解决方法一：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多转换一次</span></span><br><span class="line"><span class="type">ListResult</span> <span class="variable">rateResult</span> <span class="operator">=</span> JSONObject.parseObject(result,ListResult.class);</span><br><span class="line">List&lt;RepetitionRateVo&gt; list =  JSONObject.parseArray(rateResult.getData().toString() ,RepetitionRateVo.class);</span><br></pre></td></tr></table></figure>
<p><strong>解决方法二(推荐)：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用泛型化类 TypeReference</span></span><br><span class="line">ListResult&lt;RepetitionRateVo&gt; list = JSONObject.parseObject(result,<span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;ListResult&lt;RepetitionRateVo&gt;&gt;()&#123;&#125;);</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/TZ845195485/article/details/127591488?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-127591488-blog-121508097.235%5Ev27%5Epc_relevant_3mothn_strategy_and_data_recovery&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">参考链接</a></p>
<h2 id="RestTemplate-接收泛型化参数"><a class="header-anchor" href="#RestTemplate-接收泛型化参数"></a>RestTemplate 接收泛型化参数</h2>
<p><strong>示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParameterizedTypeReference&lt;ResponseMsg&lt;MemberInfoVo&gt;&gt; typeRef = <span class="keyword">new</span> <span class="title class_">ParameterizedTypeReference</span>&lt;ResponseMsg&lt;MemberInfoVo&gt;&gt;() &#123;&#125;;</span><br><span class="line">ResponseEntity&lt;ResponseMsg&lt;MemberInfoVo&gt;&gt; result = restTemplate.exchange(findEmployeeUrl, HttpMethod.POST, formEntity, typeRef);</span><br><span class="line">log.info(<span class="string">&quot;commonCallUniuser69 接口调用返回数据：&#123;&#125;&quot;</span>,result);</span><br><span class="line"><span class="keyword">if</span>(result != <span class="literal">null</span> &amp;&amp; result.getBody() != <span class="literal">null</span>)&#123;</span><br><span class="line">	responseMsg = result.getBody();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringBoot-Maven项目打包报-Error-assembling-JAR错误解决"><a class="header-anchor" href="#SpringBoot-Maven项目打包报-Error-assembling-JAR错误解决"></a>SpringBoot Maven项目打包报 Error assembling JAR错误解决</h2>
<p><strong>需要指定启动类：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.aspire.achievement.repetition.AchievementRepetitionApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Linux-给文件加可执行权限"><a class="header-anchor" href="#Linux-给文件加可执行权限"></a>Linux 给文件加可执行权限</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 最高权限</span><br><span class="line"><span class="built_in">chmod</span> 775 文件名</span><br><span class="line">// 可执行权限</span><br><span class="line"><span class="built_in">chmod</span> +x 文件名</span><br></pre></td></tr></table></figure>
<h2 id="Spring事务报错：-org-springframework-transaction-UnexpectedRollbackException"><a class="header-anchor" href="#Spring事务报错：-org-springframework-transaction-UnexpectedRollbackException"></a>Spring事务报错： org.springframework.transaction.UnexpectedRollbackException</h2>
<p><a href="https://blog.csdn.net/u012045045/article/details/107124841/">参考链接</a>、<a href="https://developer.aliyun.com/article/736614">参考链接</a></p>
<h2 id="Mybatis这种方式批量插入list，只返回list第一条数据的主键"><a class="header-anchor" href="#Mybatis这种方式批量插入list，只返回list第一条数据的主键"></a>Mybatis这种方式批量插入list，只返回list第一条数据的主键</h2>
<p><strong>示例代码如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertList&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;propositionCollectAddList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">		insert into t_proposition_collect</span><br><span class="line">		<span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;(&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.propositionCode != null&quot;</span>&gt;</span></span><br><span class="line">				proposition_code,</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.propositionName != null&quot;</span>&gt;</span></span><br><span class="line">				proposition_name,</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;values (&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.propositionCode != null&quot;</span>&gt;</span></span><br><span class="line">				#&#123;item.propositionCode,jdbcType=VARCHAR&#125;,</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.propositionName != null&quot;</span>&gt;</span></span><br><span class="line">				#&#123;item.propositionName,jdbcType=VARCHAR&#125;,</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Spring-jasypt加密"><a class="header-anchor" href="#Spring-jasypt加密"></a>Spring jasypt加密</h2>
<p><strong>添加依赖：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>配置文件修改：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 公钥</span></span><br><span class="line">jasypt:</span><br><span class="line">  encryptor:</span><br><span class="line">    password: 15d670c2d2be4dba8f8e1596c5bc457e</span><br><span class="line"><span class="comment">// 加密示例	</span></span><br><span class="line">ENC(v7hGT7XN3unK9TFOr4/oNaxGnPCpIbr6)</span><br></pre></td></tr></table></figure>
<h2 id="MySQL-insert语句使用case-when"><a class="header-anchor" href="#MySQL-insert语句使用case-when"></a>MySQL insert语句使用case when</h2>
<p><strong>示例sql:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name(id, code, name)</span><br><span class="line"><span class="keyword">SELECT</span> id, </span><br><span class="line">       code,</span><br><span class="line">    <span class="keyword">CASE</span> introduce</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">&#x27;2020&#x27;</span> </span><br><span class="line">        <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">&#x27;Black&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="string">&#x27;Manuel&#x27;</span> </span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line"><span class="keyword">FROM</span> table_name_two</span><br></pre></td></tr></table></figure>
<h2 id="MySQL-now-和sysdate-的区别"><a class="header-anchor" href="#MySQL-now-和sysdate-的区别"></a>MySQL now()和sysdate()的区别</h2>
<p><a href="https://blog.csdn.net/weixin_29051811/article/details/113952112">参考链接</a></p>
<h2 id="Linux-nohup打印日志"><a class="header-anchor" href="#Linux-nohup打印日志"></a>Linux nohup打印日志</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar  app_name.jar &gt;  /home/log/app_name.log &amp;</span><br><span class="line"><span class="built_in">nohup</span> java -jar  app_name.jar &gt;&gt; /home/log/app_name-$(<span class="built_in">date</span> +%Y-%m-%d).<span class="built_in">log</span> 2&gt;&amp;1 &amp; 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/lovetl/p/12780553.html">参考链接</a></p>
<h2 id="validation的校验顺序"><a class="header-anchor" href="#validation的校验顺序"></a>validation的校验顺序</h2>
<p><a href="https://blog.csdn.net/weixin_40803257/article/details/89400055?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-89400055-blog-126075344.235%5Ev27%5Epc_relevant_3mothn_strategy_and_data_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-89400055-blog-126075344.235%5Ev27%5Epc_relevant_3mothn_strategy_and_data_recovery&amp;utm_relevant_index=5">参考链接</a></p>
<h2 id="Red-Hat、Centos、Ubuntu之间的关系图解"><a class="header-anchor" href="#Red-Hat、Centos、Ubuntu之间的关系图解"></a>Red Hat、Centos、Ubuntu之间的关系图解</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/7b505f778ad847e01c3e238ddf0a4e1e.png" alt="在这里插入图片描述"><br>
<a href="https://www.likecs.com/show-203619030.html">参考链接</a></p>
<h2 id="CentOS-7-忘记密码解决方法"><a class="header-anchor" href="#CentOS-7-忘记密码解决方法"></a>CentOS 7 忘记密码解决方法</h2>
<p>注意最后面是执行：<strong>exec /sbin/init</strong> 命令。<br>
<a href="https://blog.csdn.net/qq_34383510/article/details/119619897">参考链接</a></p>
<h2 id="CentOS-7-修改密码的方法"><a class="header-anchor" href="#CentOS-7-修改密码的方法"></a>CentOS 7 修改密码的方法</h2>
<p>修改root密码只需要输入<strong>passwd</strong>命令，然后输入两遍密码即可。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/1ce6407871c86cad624dd1b7e24b2890.png" alt="在这里插入图片描述"><br>
非root用户密码修改，参考下面链接：<br>
<a href="https://yuntue.com/post/43957.html">参考链接</a></p>
<h2 id="CentOS-7关闭防火墙命令"><a class="header-anchor" href="#CentOS-7关闭防火墙命令"></a>CentOS 7关闭防火墙命令</h2>
<p>1、命令行界面输入命令<strong>systemctl status firewalld.service</strong>并按下回车键。</p>
<p>2、然后在下方可以查看得到<strong>active（running）</strong>，此时说明防火墙已经被打开了。</p>
<p>3、在命令行中输入<strong>systemctl stop firewalld.service</strong>命令，进行关闭防火墙。</p>
<p>4、然后再使用命令<strong>systemctl status firewalld.service</strong>，在下方出现<strong>disavtive（dead）</strong>，这权样就说明防火墙已经关闭。</p>
<p>5、再在命令行中输入命令<strong>systemctl disable firewalld.service</strong>命令，即可永久关闭防火墙。</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>MySQL</tag>
        <tag>SpringBoot</tag>
        <tag>Linux</tag>
        <tag>Redis</tag>
        <tag>RestTemplate</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(十五)</title>
    <url>/2023/08/11/coding_notes_fifteen/</url>
    <content><![CDATA[<h2 id="在Java中将类作为参数传递-泛型"><a class="header-anchor" href="#在Java中将类作为参数传递-泛型"></a>在Java中将类作为参数传递(泛型)</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">示例代码如下：</span><br><span class="line"><span class="comment">// 示例方法</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">downloadErrorData</span><span class="params">(Class&lt;T&gt; className)</span>&#123;</span><br><span class="line">	List&lt;T&gt; downloadList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用示例</span></span><br><span class="line">importService.downloadErrorData(PropositionExpertImportVo.class);</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="IDEA快捷键：查看该方法调用了哪些方法、被哪些方法调用"><a class="header-anchor" href="#IDEA快捷键：查看该方法调用了哪些方法、被哪些方法调用"></a>IDEA快捷键：查看该方法调用了哪些方法、被哪些方法调用</h2>
<h3 id="快捷键：ctrl-alt-h"><a class="header-anchor" href="#快捷键：ctrl-alt-h"></a>快捷键：ctrl+alt+h</h3>
<p><strong>查看该方法被哪些方法调用(即调用链)</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/6c3f88e882c68a462d42cbcc79e7fb57.png" alt="在这里插入图片描述"></p>
<p><strong>查看该方法调用了哪些方法</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/9c937b3965b8508082e67530c14b33e3.png" alt="在这里插入图片描述"></p>
<h2 id="IDEA快捷键：快速从controller跳转到serviceImpl"><a class="header-anchor" href="#IDEA快捷键：快速从controller跳转到serviceImpl"></a>IDEA快捷键：快速从controller跳转到serviceImpl</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/252fc23b4a9ce45c0550e62a4ada7f7e.png" alt="在这里插入图片描述"><br>
<strong>快捷键：CTRL+T</strong></p>
<h2 id="IDEA快捷键：实现接口的方法"><a class="header-anchor" href="#IDEA快捷键：实现接口的方法"></a>IDEA快捷键：实现接口的方法</h2>
<p><strong>进入到实现类中，按 ALT+SHIFT+P</strong></p>
<h2 id="IDEA-快捷键：快速包裹代码"><a class="header-anchor" href="#IDEA-快捷键：快速包裹代码"></a>IDEA 快捷键：快速包裹代码</h2>
<p>实现快速生成if-else、for、try-catch-finally语句。<br>
<strong>快捷键：CTRL+ALT+T</strong></p>
<h2 id="IDEA插件EasyYapi安装"><a class="header-anchor" href="#IDEA插件EasyYapi安装"></a>IDEA插件EasyYapi安装</h2>
<p><a href="http://www.taodudu.cc/news/show-5345568.html?action=onClick">参考链接</a>、<a href="http://news.sohu.com/a/664107269_121118947">参考链接</a></p>
<h2 id="IDEA生成接口文档插件Doc-View"><a class="header-anchor" href="#IDEA生成接口文档插件Doc-View"></a>IDEA生成接口文档插件Doc View</h2>
<ul>
<li>支持文档预览、文档修改</li>
<li>支持批量导出MarkDown文件到本地</li>
<li>支持上传文档到YAPI、Show Doc、语雀平台</li>
<li>支持Swagger和普通注释，支持多种字段必填配置</li>
</ul>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/7fdc326d5fbfa1d4458e25a321791ab7.png" alt="在这里插入图片描述"><br>
<a href="https://plugins.jetbrains.com/plugin/15305-doc-view">官网</a></p>
<h2 id="RunApi介绍"><a class="header-anchor" href="#RunApi介绍"></a>RunApi介绍</h2>
<p><a href="https://www.showdoc.com.cn/runapi/30291">介绍和下载地址</a>、<a href="https://github.com/star7th/showdoc/issues">Github</a></p>
<h2 id="Java方法传参机制-Java只有值传递"><a class="header-anchor" href="#Java方法传参机制-Java只有值传递"></a>Java方法传参机制(Java只有值传递)</h2>
<h3 id="实参和形参"><a class="header-anchor" href="#实参和形参"></a>实参和形参</h3>
<p>1、实参：用于传递给方法的参数，必须有确定的值。<br>
2、形参：用于定义方法、接收实参，不需要确定的值。</p>
<h3 id="值传递和引用传递"><a class="header-anchor" href="#值传递和引用传递"></a>值传递和引用传递</h3>
<p>1、值传递：方法接收的是实参值创建的一个副本，对形参的修改不会影响到实参。<br>
2、引用传递：方法接收的值是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参。</p>
<h3 id="总结"><a class="header-anchor" href="#总结"></a>总结</h3>
<ul>
<li>Java只有值传递、Java只有值传递、Java只有值传递。</li>
<li>Java实参传递给方法实际上是传递了一个副本。基本数据拷贝值，引用类型数据拷贝引用。</li>
<li>Java实参和形参相当于遥控器，对象相当于电视机。遥控器可以改变电视机的内容，但是不能改变原来的遥控器。</li>
</ul>
<p><a href="https://www.bilibili.com/video/BV1xL4y1w7jy/?spm_id_from=333.880.my_history.page.click">参考链接</a>、<br>
<a href="https://www.bilibili.com/video/BV1q34y1s72a/?spm_id_from=333.880.my_history.page.click">参考链接</a></p>
<h2 id="Java只能值传递实际案例分析"><a class="header-anchor" href="#Java只能值传递实际案例分析"></a>Java只能值传递实际案例分析</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;ImportErrorVo&gt; errorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">SaveRedisDto</span> <span class="variable">saveRedisDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SaveRedisDto</span>();</span><br><span class="line">saveRedisDto.setErrorList(errorList);</span><br><span class="line"></span><br><span class="line"><span class="type">ImportErrorVo</span> <span class="variable">importErrorVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImportErrorVo</span>(<span class="number">1</span>,<span class="string">&quot;我是第一行&quot;</span>);</span><br><span class="line">errorList.add(importErrorVo);</span><br><span class="line"><span class="comment">// 改变errorList的引用指向</span></span><br><span class="line">errorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">System.out.println(saveRedisDto.getErrorList());</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;ImportErrorVo&gt; errorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">SaveRedisDto</span> <span class="variable">saveRedisDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SaveRedisDto</span>();</span><br><span class="line">saveRedisDto.setErrorList(errorList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变errorList的引用指向</span></span><br><span class="line">errorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">ImportErrorVo</span> <span class="variable">importErrorVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImportErrorVo</span>(<span class="number">1</span>,<span class="string">&quot;我是第一行&quot;</span>);</span><br><span class="line">errorList.add(importErrorVo);</span><br><span class="line"></span><br><span class="line">System.out.println(saveRedisDto.getErrorList());</span><br></pre></td></tr></table></figure>
<p><strong>saveRedisDto.setErrorList会创建一个errorList的引用副本传递，这个引用副本一直指向最开始的对象。</strong><br>
<strong>后续如果改变errorList的引用指向，并不会影响saveRedisDto的getErroList的指向。</strong></p>
<h2 id="Java-阻塞队列BlockingQueue提供的四种方法"><a class="header-anchor" href="#Java-阻塞队列BlockingQueue提供的四种方法"></a>Java 阻塞队列BlockingQueue提供的四种方法</h2>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">抛异常</th>
<th style="text-align:center">特定值</th>
<th style="text-align:center">阻塞</th>
<th style="text-align:center">超时</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">插入</td>
<td style="text-align:center">add(o)</td>
<td style="text-align:center">offer(o)</td>
<td style="text-align:center">put(o)</td>
<td style="text-align:center">offer(o, timeout, timeunit)</td>
</tr>
<tr>
<td style="text-align:center">移除</td>
<td style="text-align:center">remove(o)</td>
<td style="text-align:center">poll(o)-jdk8不存在了</td>
<td style="text-align:center">take(o)</td>
<td style="text-align:center">poll(timeout, timeunit)</td>
</tr>
<tr>
<td style="text-align:center">检查</td>
<td style="text-align:center">contains(o)</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h2 id="Java-7批量关闭流工具类"><a class="header-anchor" href="#Java-7批量关闭流工具类"></a>Java 7批量关闭流工具类</h2>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">(AutoCloseable... t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (AutoCloseable closeable : t) &#123;</span><br><span class="line">        <span class="keyword">if</span> (closeable != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                closeable.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.<span class="keyword">error</span>(<span class="string">&quot;批量关闭流异常：&quot;</span>,e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>适用于：<strong>不在try里面创建的流，也就是说需要手动关闭的</strong><br>
<a href="https://blog.csdn.net/m0_52559040/article/details/122881422">参考链接</a></p>
<h2 id="Spring-Configuration注解"><a class="header-anchor" href="#Spring-Configuration注解"></a>Spring @Configuration注解</h2>
<ul>
<li>@ComponentScan就相当于spring配置文件中的<a href="context:component-scan">context:component-scan</a>，主要作用就是去扫描指定包下使用注解的类，然后将使用注解的类注入到spring容器中。</li>
<li>@Configuration注解的类就相当于spring配置文件，可以在该类中配置使用@bean注解将类注入容器中，相当于xml文件中的<bean/>标签。 启动spring项目时只需要指定被@configuration标识的配置类就行，而不需要去加载繁琐的xml了。</li>
</ul>
<h2 id="YAPI安装"><a class="header-anchor" href="#YAPI安装"></a>YAPI安装</h2>
<p><a href="https://hellosean1025.github.io/yapi/devops/index.html">官网-部署文档</a>、<br>
<a href="https://github.com/YMFE/yapi">Github-源代码</a></p>
<h2 id="MySQL所有数据库varchar字段长度不能超过65535"><a class="header-anchor" href="#MySQL所有数据库varchar字段长度不能超过65535"></a>MySQL所有数据库varchar字段长度不能超过65535</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/558c9c3e6f02ffc95796a9e61a1c2c86.png" alt="在这里插入图片描述"></p>
<h2 id="MySQL-SUBSTRING-INDEX函数"><a class="header-anchor" href="#MySQL-SUBSTRING-INDEX函数"></a>MySQL SUBSTRING_INDEX函数</h2>
<p>把字符串截取后，返回指定字符串。<br>
如果字符串中没有分割符，会返回整个字符串。<br>
示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 返回 ZGGX-MT-SH</span></span><br><span class="line"><span class="keyword">select</span> SUBSTRING_INDEX(<span class="string">&#x27;ZGGX-MT-SH-20230013&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">-- 返回 20230013</span></span><br><span class="line"><span class="keyword">select</span> SUBSTRING_INDEX(<span class="string">&#x27;ZGGX-MT-SH-20230013&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 返回整个字符串 ZGGXMTSH20230013</span></span><br><span class="line"><span class="keyword">select</span> SUBSTRING_INDEX(<span class="string">&#x27;ZGGXMTSH20230013&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">-- 返回整个字符串 ZGGXMTSH2023-0013</span></span><br><span class="line"><span class="keyword">select</span> SUBSTRING_INDEX(<span class="string">&#x27;ZGGXMTSH2023-0013&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h2 id="MySQL-字符串截取函数"><a class="header-anchor" href="#MySQL-字符串截取函数"></a>MySQL 字符串截取函数</h2>
<h3 id="left：-从字符串左边开始，截取几位"><a class="header-anchor" href="#left：-从字符串左边开始，截取几位"></a>left： 从字符串左边开始，截取几位</h3>
<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 返回  这是要</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">left</span>(<span class="string">&#x27;这是要截取的内容&#x27;</span>, <span class="number">3</span>); </span><br></pre></td></tr></table></figure>
<h3 id="right：从字符串右边开始，截取几位"><a class="header-anchor" href="#right：从字符串右边开始，截取几位"></a>right：从字符串右边开始，截取几位</h3>
<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 返回的内容</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">right</span>(<span class="string">&#x27;这是要截取的内容&#x27;</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h3 id="substring：从字符串某个位置开始截取"><a class="header-anchor" href="#substring：从字符串某个位置开始截取"></a>substring：从字符串某个位置开始截取</h3>
<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 从字符串的第 4 个字符位置开始取，只取 2 个字符。</span></span><br><span class="line"><span class="comment">-- 返回  截取</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;这是要截取的内容&#x27;</span>, <span class="number">4</span>, <span class="number">2</span>); </span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 从字符串的第 4个字符位置开始取，直到结束。</span></span><br><span class="line"><span class="comment">-- 返回  截取的内容</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;这是要截取的内容&#x27;</span>, <span class="number">4</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从字符串（倒数）的第 4个字符位置开始取，只取2个字符。</span></span><br><span class="line"><span class="comment">-- 返回  取的</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;这是要截取的内容&#x27;</span>, <span class="number">-4</span>, <span class="number">2</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从字符串（倒数）的第 4个字符位置开始取，直到结束。</span></span><br><span class="line"><span class="comment">-- 返回 取的内容</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;这是要截取的内容&#x27;</span>, <span class="number">-4</span>);  </span><br></pre></td></tr></table></figure>
<h2 id="SQLite3数据库相关操作"><a class="header-anchor" href="#SQLite3数据库相关操作"></a>SQLite3数据库相关操作</h2>
<p><a href="https://zhuanlan.zhihu.com/p/130981843">参考链接</a></p>
<h2 id="MySQL-查询结果为空-或者null-时，返回指定字符串"><a class="header-anchor" href="#MySQL-查询结果为空-或者null-时，返回指定字符串"></a>MySQL 查询结果为空(或者null)时，返回指定字符串</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- sql模板</span></span><br><span class="line"><span class="keyword">SELECT</span> IF(ifnull(字段名,<span class="string">&#x27;&#x27;</span>) <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;返回的字符串&#x27;</span>, 字段名(或者指定字符)) <span class="keyword">AS</span> 别名 </span><br><span class="line"><span class="keyword">FROM</span> tableName;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例sql</span></span><br><span class="line"><span class="keyword">SELECT</span> IF(ifnull(introduce,<span class="string">&#x27;&#x27;</span>) <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>) <span class="keyword">AS</span> introduceEmpty</span><br><span class="line"><span class="keyword">FROM</span> t_achievement_application;</span><br></pre></td></tr></table></figure>
<h2 id="不同种类个税缴纳比例-税率标准-计算公式"><a class="header-anchor" href="#不同种类个税缴纳比例-税率标准-计算公式"></a>不同种类个税缴纳比例(税率标准+计算公式)</h2>
<p><a href="http://www.dongrv.com/jizhangbaoshui/17770.html">参考链接</a><br>
公司上班适用于：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/3e58887edfd002f153a15ab43eb5a69b.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/d02274f3100ea81a12074c5005d01f0f.png" alt="在这里插入图片描述"><br>
所以会出现前几个月税率3%,后几个月税率10%、20%的情况</p>
<h2 id="Linux查看端口被哪个进程被占用的六个方法"><a class="header-anchor" href="#Linux查看端口被哪个进程被占用的六个方法"></a>Linux查看端口被哪个进程被占用的六个方法</h2>
<p><a href="https://blog.csdn.net/weixin_42023748/article/details/125886536">参考链接</a><br>
<a href="https://baijiahao.baidu.com/s?id=1760063714341774733&amp;wfr=spider&amp;for=pc">参考链接</a></p>
<h2 id="Spring定时任务总结"><a class="header-anchor" href="#Spring定时任务总结"></a>Spring定时任务总结</h2>
<ul>
<li>定时任务默认是单线程的。如果任务执行时间超过定时任务间隔时间，不管是同一个定时任务还是不同的定时任务，下一个任务都会被阻塞。<br>
待上一个执行完后，下一个定时任务不是立刻执行，而是需要等待(定时任务cron时间）才会执行。可以理解成是上一个任务执行完，才会开始计时</li>
<li>【推荐该方式】实现SchedulingConfigurer接口后，定时任务会变成多线程执行。不同的定时任务之间互不影响，同一个定时任务（方法）依然会有被阻塞的机制。<br>
配置类代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleConfig</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">        taskRegistrar.setScheduler(Executors.newScheduledThreadPool(<span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果定时任务交给线程池处理，则下一个任务也不会被阻塞。</li>
</ul>
<p><a href="https://blog.csdn.net/liwang2016384/article/details/131844569">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>IntelliJ IDEA</tag>
        <tag>Linux</tag>
        <tag>Springboot</tag>
        <tag>SQLite</tag>
        <tag>RunApi</tag>
        <tag>YAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(十四)</title>
    <url>/2023/06/11/coding_notes_fourteen/</url>
    <content><![CDATA[<h2 id="MySQL自定义排序"><a class="header-anchor" href="#MySQL自定义排序"></a>MySQL自定义排序</h2>
<h3 id="用locate本质是数字排序"><a class="header-anchor" href="#用locate本质是数字排序"></a>用locate本质是数字排序</h3>
<p>用locate本质是数字排序，可以先把数字打印出来</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, second_class, LOCATE(second_class, <span class="string">&#x27;【现场发布】世界互联网大会领先科技成果,世界互联网大会领先科技成果,国际电联WSIS奖-Winner（最高项目奖）,国际电联AI/ML in 5G大赛奖,国际电联WSIS奖-Winner（大奖）&#x27;</span>) <span class="keyword">AS</span> sort</span><br><span class="line"><span class="keyword">FROM</span> t_awards</span><br><span class="line"><span class="keyword">WHERE</span> award_type <span class="operator">=</span> <span class="string">&#x27;8&#x27;</span> <span class="keyword">AND</span> top_class <span class="operator">=</span> <span class="string">&#x27;国际奖项&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>不存在与LOCATE中的记录，结果集会放到最前面。<br>
建议用倒序排。</p>
<span id="more"></span>
<h3 id="case-when-then…语法排序"><a class="header-anchor" href="#case-when-then…语法排序"></a>case when then…语法排序</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, second_class,</span><br><span class="line">	   <span class="keyword">case</span></span><br><span class="line">		   <span class="keyword">when</span> second_class <span class="operator">=</span> <span class="string">&#x27;【现场发布】世界互联网大会领先科技成果&#x27;</span> <span class="keyword">then</span> <span class="number">20</span></span><br><span class="line">		   <span class="keyword">when</span> second_class <span class="operator">=</span> <span class="string">&#x27;世界互联网大会领先科技成果&#x27;</span> <span class="keyword">then</span> <span class="number">18</span></span><br><span class="line">		   <span class="keyword">when</span> second_class <span class="operator">=</span> <span class="string">&#x27;国际电联WSIS奖-Winner（最高项目奖）&#x27;</span> <span class="keyword">then</span> <span class="number">16</span></span><br><span class="line">		   <span class="keyword">ELSE</span> <span class="number">-1</span> <span class="keyword">END</span> <span class="keyword">as</span> sort</span><br><span class="line"><span class="keyword">FROM</span> t_awards</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sort <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>
<h3 id="field-函数排序"><a class="header-anchor" href="#field-函数排序"></a>field()函数排序</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> FIELD(second_class,<span class="string">&#x27;【现场发布】世界互联网大会领先科技成果&#x27;</span>,<span class="string">&#x27;世界互联网大会领先科技成果&#x27;</span>,<span class="string">&#x27;国际电联WSIS奖-Winner（最高项目奖）&#x27;</span>) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<p>不存在与field中的记录，结果集会放到最前面。<br>
建议用倒序排。</p>
<p><a href="https://blog.csdn.net/quader/article/details/122761023">参考链接</a></p>
<h2 id="阿里云Maven镜像仓库无法下载spring-cloud-dependencies依赖问题"><a class="header-anchor" href="#阿里云Maven镜像仓库无法下载spring-cloud-dependencies依赖问题"></a>阿里云Maven镜像仓库无法下载spring-cloud-dependencies依赖问题</h2>
<p><url>http://maven.aliyun.com/nexus/content/groups/public/</url><br>
上面这个url下载不了，更换url链接即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/xxly1994/article/details/107058474/">参考链接</a></p>
<h2 id="MySQL更新同一个表的同个字段"><a class="header-anchor" href="#MySQL更新同一个表的同个字段"></a>MySQL更新同一个表的同个字段</h2>
<p>MySQL在同一SQL语句中,如果不能先查询出表中的某些值，再update这个表。<br>
例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 这样做会报错：You can<span class="string">&#x27;t specify target table &#x27;</span><span class="keyword">table</span> name<span class="string">&#x27; for update in FROM clause。</span></span><br><span class="line"><span class="string">UPDATE 表A</span></span><br><span class="line"><span class="string">SET 字段A = (SELECT 字段B FROM 表A)</span></span><br></pre></td></tr></table></figure>
<h3 id="解决方法一-推荐"><a class="header-anchor" href="#解决方法一-推荐"></a>解决方法一(推荐)</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表<span class="number">1</span> a1 </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> 字段<span class="number">1</span>,字段<span class="number">2</span> <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">where</span> 条件) a2 <span class="keyword">on</span> 条件</span><br><span class="line"><span class="keyword">set</span> a1.字段<span class="number">1</span> <span class="operator">=</span> a2.字段<span class="number">2</span> </span><br></pre></td></tr></table></figure>
<h3 id="解决方法二"><a class="header-anchor" href="#解决方法二"></a>解决方法二</h3>
<p><strong>创建一张临时表</strong></p>
<p><a href="https://blog.csdn.net/wslzjr/article/details/106014855">参考链接</a></p>
<h2 id="SpringBoot返回的JSON中的null转换为空字符串"><a class="header-anchor" href="#SpringBoot返回的JSON中的null转换为空字符串"></a>SpringBoot返回的JSON中的null转换为空字符串</h2>
<p><a href="https://www.cnblogs.com/long88-club/p/11361174.html">Jackson自定义序列化null值处理(处理数组、list、array、set类型的null值)</a><br>
<a href="https://www.cnblogs.com/long88-club/p/11361174.html">springboot中返回值json中null转换空字符串</a></p>
<h2 id="Spring的相关注解"><a class="header-anchor" href="#Spring的相关注解"></a>Spring的相关注解</h2>
<p>@ConditionalOnMissingBean<br>
@ConditionalOnProperty<br>
@ConditionalOnBean<br>
@Primary<br>
<a href="https://blog.csdn.net/wtl1992/article/details/122210599">参考链接</a></p>
<h2 id="MySQL-JSON对象、数组查询"><a class="header-anchor" href="#MySQL-JSON对象、数组查询"></a>MySQL JSON对象、数组查询</h2>
<h3 id="JSON对象查询"><a class="header-anchor" href="#JSON对象查询"></a>JSON对象查询</h3>
<ul>
<li>使用对象操作的方法进行查询：字段-&gt;’$.json属性’</li>
<li>使用函数进行查询：json_extract(字段, ‘$.json属性’)</li>
<li>获取JSON数组/对象长度：JSON_LENGTH()</li>
</ul>
<h3 id="JSON数组查询"><a class="header-anchor" href="#JSON数组查询"></a>JSON数组查询</h3>
<ul>
<li>对象操作方式查询：字段-&gt;’$[0].属性’</li>
<li>使用函数查询：JSON_CONTAINS(字段,JSON_OBJECT(‘json属性’, ‘内容’))</li>
<li>获取JSON数组/对象长度：JSON_LENGTH()</li>
</ul>
<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> detail_list为JSON数组字段 flowKey、opened为数组中的对象属性</span><br><span class="line"><span class="keyword">select</span> json_contains(detail_list, <span class="built_in">json_object</span>(<span class="string">&#x27;opened&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)) <span class="keyword">as</span> opened </span><br><span class="line"><span class="keyword">from</span> t_flow_path </span><br><span class="line"><span class="keyword">where</span> json_contains(detail_list, <span class="built_in">json_object</span>(<span class="string">&#x27;flowKey&#x27;</span>, <span class="string">&#x27;threeLeaderAudit&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/pine007/p/16982429.html">参考链接</a></p>
<h2 id="Nacos的配置自动刷新"><a class="header-anchor" href="#Nacos的配置自动刷新"></a>Nacos的配置自动刷新</h2>
<h3 id="Value注解读取配置"><a class="header-anchor" href="#Value注解读取配置"></a>@Value注解读取配置</h3>
<p>在该类上添加@RefreshScope注解</p>
<h3 id="ConfigurationProperties-prefix-“user”-注解注入实体类-读取配置"><a class="header-anchor" href="#ConfigurationProperties-prefix-“user”-注解注入实体类-读取配置"></a>@ConfigurationProperties(prefix = “user”)注解注入实体类 读取配置</h3>
<p>默认支持自动刷新配置</p>
<h2 id="Nacos基于profile粒度的多环境配置"><a class="header-anchor" href="#Nacos基于profile粒度的多环境配置"></a>Nacos基于profile粒度的多环境配置</h2>
<p>读取(Data Id)文件格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;nacos.config.file-extension&#125;</span><br></pre></td></tr></table></figure>
<p>比如在Nacos上新增一个Data Id为：nacos-config-dev.yaml的基础配置<br>
需要在项目的配置文件中增加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring.profiles.active=dev</span> </span><br></pre></td></tr></table></figure>
<p>激活配置</p>
<h2 id="Nacos服务配置数据模型"><a class="header-anchor" href="#Nacos服务配置数据模型"></a>Nacos服务配置数据模型</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d81a0677ad23034543461dd03827a31d.png" alt="在这里插入图片描述"><br>
<strong>一共有三种配置方案：</strong><br>
1、<br>
默认命名空间(public) + 默认Group分组(DEFAULT_GROUP) + 自定义Data Id（没有默认值）<br>
2、<br>
默认命名空间 + 自定义Group分组 + 自定义的Data Id（没有默认值）<br>
3、<br>
自定义命名空间 + 自定义Group分组 + 自定义的Data Id（没有默认值）</p>
<p>详情可以参考20200804课件.docx</p>
<h2 id="Nacos数据持久化"><a class="header-anchor" href="#Nacos数据持久化"></a>Nacos数据持久化</h2>
<h3 id="解决Nacos-1-3-1连接MySQL-8数据库报错"><a class="header-anchor" href="#解决Nacos-1-3-1连接MySQL-8数据库报错"></a>解决Nacos 1.3.1连接MySQL 8数据库报错</h3>
<p>解决方法如下：<br>
<strong>第一步：在nacos安装目录下新建plugins/mysql文件夹，并放入mysql-connector-java-8.0.18.jar</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/1717650cfda39812a87ff777287fb20b.png" alt="在这里插入图片描述"></p>
<p>我的数据库是8.0.27，用这个包可以连接上。<br>
windows和linux都需要做这一步。</p>
<p><strong>第二步：修改conf/application.properties文件中的数据库信息。注意需要修改url链接。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#*************** Config Module Related Configurations ***************#</span><br><span class="line">### If use MySQL as datasource:</span><br><span class="line">spring.datasource.platform=mysql</span><br><span class="line"></span><br><span class="line">### Count of DB:</span><br><span class="line">db.num=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">### Connect URL of DB:</span><br><span class="line">db.url<span class="number">.0</span>=jdbc:mysql:<span class="comment">//10.1.128.188:3306/nacos_config?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2b8</span></span><br><span class="line">db.user=root</span><br><span class="line">db.password=</span><br></pre></td></tr></table></figure>
<p><strong>注意url ?号后的内容需要修改，nacos默认的连接Mysql 8会报错</strong></p>
<p><a href="http://www.taodudu.cc/news/show-1252851.html">解决Nacos无法连接Mysql8.0+的问题(坑爹的阿里官方文档，已无力吐槽)</a></p>
<h2 id="Spring事务机制"><a class="header-anchor" href="#Spring事务机制"></a>Spring事务机制</h2>
<ul>
<li>Spring事务底层是基于数据库事务和AOP的，Spring事务隔离级别对应的是数据库的隔离级别。</li>
<li>Spring事务的传播行为是自己实现的，也是Spring事务中最复杂的。</li>
<li>Sprino事务的传播机制是基于数据库连接来做的，一个数据库连接一个事务，如果传播机制配置为需要新开一个事务，那人实际上就是先建立一个<br>
数据库连接，在此新数据库连接上执行sql。</li>
</ul>
<h2 id="Spring事务嵌套和传播行为"><a class="header-anchor" href="#Spring事务嵌套和传播行为"></a>Spring事务嵌套和传播行为</h2>
<ul>
<li>在同一个类中事务嵌套，最终的结果应该是取决于最外层的方法事务的传播特性。</li>
<li>在不同的类的事务嵌套，外层的方法按照外层的事务传播属性执行，内层的传播属性按照内层的传播属性的特点去运行。注意：内层方法如果没有加事务注解会以外层方法事务为准，内层方法如果加了事务注解会以内层方法事务为准。<br>
<a href="https://mp.weixin.qq.com/s/EoH1gXhppEGaI5wY_b7iwA">事务嵌套和传播行为</a></li>
</ul>
<h2 id="Spring事务失效场景"><a class="header-anchor" href="#Spring事务失效场景"></a>Spring事务失效场景</h2>
<ul>
<li>事务方法访问修饰符不是public。</li>
<li>事务方法是static、final的。</li>
<li>事务方法中的异常被catch后，没有再次抛出新的异常。</li>
<li>操作的数据库表如果本身不支持事务。</li>
<li>多线程的调用导致事务失效。<br>
有两种解决方法：1、可以使用thread.setUncaughtExceptionHandler方法来处理线程内部的异常。 2、外层方法使用FutureTask，并且抛出ExecutionException, InterruptedException。</li>
</ul>
<p><a href="https://mp.weixin.qq.com/s/EoH1gXhppEGaI5wY_b7iwA">事务失效场景</a></p>
<h2 id="MySQL-8修改用户密码"><a class="header-anchor" href="#MySQL-8修改用户密码"></a>MySQL 8修改用户密码</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改密码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/jierxiaoyao/article/details/127750637">参考链接</a></p>
<h2 id="Validation支持同时加两个-Pattern注解"><a class="header-anchor" href="#Validation支持同时加两个-Pattern注解"></a>Validation支持同时加两个@Pattern注解</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pattern(regexp = &quot;111|3&quot;, message = &quot;奖项等级类型有误1&quot;)</span></span><br><span class="line"><span class="meta">@Pattern(regexp = &quot;111|4&quot;, message = &quot;奖项等级类型有误2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String topClass;</span><br></pre></td></tr></table></figure>
<h2 id="Validation自定义注解实现：不为空才进行正则表达式校验"><a class="header-anchor" href="#Validation自定义注解实现：不为空才进行正则表达式校验"></a>Validation自定义注解实现：不为空才进行正则表达式校验</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解整合 javax.validation：不为空才进行正则表达式校验</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liquanhong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2023/05/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = NotBlankThenPattern.NotBlankThenPatternValidation.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotBlankThenPattern &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">regexp</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;格式错误&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the groups the constraint belongs to</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the payload associated to the constraint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">NotBlankThenPatternValidation</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;NotBlankThenPattern, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Pattern pattern;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(NotBlankThenPattern constraintAnnotation)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.pattern = Pattern.compile(constraintAnnotation.regexp());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtil.isEmpty(value)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> pattern.matcher(value).matches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>其中StringUtil.isEmpty可以用其他框架的。</strong></p>
<h2 id="Linux防火墙给某个端口添加指定ip"><a class="header-anchor" href="#Linux防火墙给某个端口添加指定ip"></a>Linux防火墙给某个端口添加指定ip</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudoroot:&lt;42&amp;x24&lt;3T&#123;/&#125;5#6</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --list-all</span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --permanent --add-rich-rule=<span class="string">&quot;rule family=&quot;</span>ipv4<span class="string">&quot; source address=&quot;</span>10.1.121.76<span class="string">&quot; port protocol=&quot;</span>tcp<span class="string">&quot; port=&quot;</span>9002<span class="string">&quot; accept&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h2 id="Mysql-order-by中使用case-when"><a class="header-anchor" href="#Mysql-order-by中使用case-when"></a>Mysql order by中使用case when</h2>
<p><strong>需求：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/c57d8535942cf55d57346e6317989650.png" alt="在这里插入图片描述"></p>
<p>**实现逻辑：**只管未分配专家的数据，分配了专家的数据按后面的字段排序。<br>
<strong>代码如下：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> awardExpert.id <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">2</span> <span class="keyword">end</span>,</span><br><span class="line">apply.submit_time <span class="keyword">desc</span>,apply.id,expert.update_time <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h2 id="批量导入MySQL报错"><a class="header-anchor" href="#批量导入MySQL报错"></a>批量导入MySQL报错</h2>
<p><strong>Connection memory limit 50331648 bytes exceeded. Consumed 81426016 bytes.<br>
; uncategorized SQLException; SQL state [HY000]; error code [4082]; Connection closed. Connection memory limit 50331648 bytes exceeded. Consumed 81426016 bytes</strong></p>
<p><strong>问题原因：</strong><br>
MySQL 8用户连接内存限制，设置单个用户连接可以使用的最大内存量(默认16MB)。如果任何用户连接使用超过这个数量，任何来自该连接的新查询都会被ER_CONN_LIMIT拒绝。</p>
<ul>
<li>此限制不适用于系统用户或root帐户；</li>
<li>InnoDB缓冲池使用的内存也不包括在内。<br>
就是说限制<strong>临时内存，排序，链接等内存</strong>。</li>
</ul>
<p><strong>解决方法一：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询单个用户连接可以使用的最大内存量SQL语句</span></span><br><span class="line">MySQL<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@connection_memory_limit</span>;</span><br><span class="line">MySQL<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> connection_memory_limit<span class="operator">=</span>可以使用的最大内存(字节);</span><br></pre></td></tr></table></figure>
<p><strong>解决方法二：</strong></p>
<p><strong>主要取决于数据量，数据量少分批插入可以解决(可以通过调整分批数)。</strong><br>
<strong>示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;DeleteTaskDto&gt;&gt; insertList = ListUtil.splitTo(notRepetitiveList, <span class="number">300</span>);</span><br><span class="line"><span class="keyword">for</span> (List&lt;DeleteTaskDto&gt; list : insertList) &#123;</span><br><span class="line">	repetitionTaskMapper.batchDelete(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/dreamyuzhou/article/details/126262551">参考链接</a>、<a href="https://blog.csdn.net/ActionTech/article/details/123329126">参考链接</a></p>
<h2 id="鼠标右键没有360压缩菜单的解决"><a class="header-anchor" href="#鼠标右键没有360压缩菜单的解决"></a>鼠标右键没有360压缩菜单的解决</h2>
<p>确保电脑管家没有禁止自启动：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/7337c4aa4cd4b6a8bcc8f29ecc7496e0.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MySQL</tag>
        <tag>Nacos</tag>
        <tag>Linux</tag>
        <tag>Maven</tag>
        <tag>Springboot</tag>
        <tag>Validation</tag>
      </tags>
  </entry>
  <entry>
    <title>《为什么是中国》读书笔记</title>
    <url>/2022/03/05/why_china/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/aad7c3b3ce05c2ba85999438d4136c3f.jpeg" width="460px" align="center"></img></p>
<p>书名：为什么是中国<br>
作者：金一南<br>
读完时间：2022年2月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<h3 id="敢于宣战的朝廷无奈难以为继的帝国"><a class="header-anchor" href="#敢于宣战的朝廷无奈难以为继的帝国"></a>敢于宣战的朝廷无奈难以为继的帝国</h3>
<ul>
<li>历史不记过程，只记结果。穿带补丁裤子的道光皇帝勤俭节约、励精图治，但第一个丧权辱国的条约是他签的，中国近代史耻辱柱上的第一人就是他。</li>
</ul>
<h3 id="战争狂热之背后，苟且退让于当前"><a class="header-anchor" href="#战争狂热之背后，苟且退让于当前"></a>战争狂热之背后，苟且退让于当前</h3>
<ul>
<li>日本比中国早36年知道了马克思主义。“社会主义”“共产主义”“共产党”“唯物主义”“辩证法”等术语，甚至包括“劳工神圣”“团结就是力量”等，都是从日本传过来的。</li>
</ul>
<h3 id="受实力误导的魄力，被境界改变的世界"><a class="header-anchor" href="#受实力误导的魄力，被境界改变的世界"></a>受实力误导的魄力，被境界改变的世界</h3>
<ul>
<li>
<p>可为什么直到1941年12月9日，从1931年九一八事变算起，日本大规模入侵已经发生了10年零3个月；从1937年七七事变算起，中国全面抗战已经开展了4年零5个月，国民政府才迟迟正式对日宣战？无须讳言，最直接的原因是美国参战了：1941年12月7日，日军偷袭珍珠港。12月8日，美国对日本宣战。于是，才终于有了12月9日的国民政府对日正式宣战。正如今天很多国人没想过为什么卢沟桥是战争爆发地一样，很多国人也不知道迟至1941年12月9日中国才对日本正式宣战。</p>
</li>
<li>
<p>如果说卢沟桥作为战争爆发地是耻辱，那么美国人宣战了我们才敢正式宣战就不是耻辱了吗？美国被偷袭，第二天就宣战，最后一定要把偷袭者打到无条件投降方才罢手。我们早已不是被“偷袭”，而是侵略者早已明火执仗了，在南京屠城了，大半个中国被侵占了，蒋介石的国民政府竟然还没向对方“正式宣战”。</p>
</li>
<li>
<p>确实，到1937年全面侵华前，日本年产钢铁580万吨，中国只有4万吨；日本年产飞机600架，中国一架也产不了；日本年产坦克200辆，中国一辆也造不出来。1894年爆发甲午战争，北洋水师火炮口径和装甲厚度优于日本联合舰队，却在很短时间内全军覆灭。1937年中国与日本的国力差距比甲午战争时期更为巨大了。</p>
</li>
</ul>
<h3 id="聚势，才能获优"><a class="header-anchor" href="#聚势，才能获优"></a>聚势，才能获优</h3>
<ul>
<li>他只看到朝鲜背后的中国，没有看到中国背后的苏联。而美国的主要对手是苏联，不是中国。美国的战略重点在欧洲，而不在亚洲。</li>
</ul>
<h3 id="战将必须重战"><a class="header-anchor" href="#战将必须重战"></a>战将必须重战</h3>
<ul>
<li>5月1日，海南岛全境解放。6月25日，朝鲜战争爆发。6月27日，美国第七舰队隔断台湾海峡。这是多么危险的历史节点。如果到了6月25日海南岛还打不下来，第七舰队很可能还要隔断琼州海峡，中国的两个大岛都将被美军割断。</li>
</ul>
<h3 id="利益观，观利益"><a class="header-anchor" href="#利益观，观利益"></a>利益观，观利益</h3>
<ul>
<li>国家与国家之间的关系好坏永远是相对的，只有国家利益是永恒的。</li>
</ul>
<h3 id="冲突是考验，危机是机遇"><a class="header-anchor" href="#冲突是考验，危机是机遇"></a>冲突是考验，危机是机遇</h3>
<ul>
<li>
<p>我们经常用“中国是个发展中的社会主义大国”来概括国情，我觉得这句话是不完备的，我们应该注意，中国是个发展中的尚未统一的社会主义大国。一定不要忘记我国今天仍处在分裂的状态。</p>
</li>
<li>
<p>在南沙群岛中，属于中国控制的只有8个礁，其中中国大陆占7个，中国台湾占1个，而被越南、菲律宾、马来西亚、印度尼西亚和文莱所控制的却多达45个。</p>
</li>
<li>
<p>没有美国撑腰的菲律宾很难再有底气挑衅中国，所以菲律宾与其说与中国抗衡，不如说是想在美国那里讨些筹码。</p>
</li>
<li>
<p>日本以钓鱼岛这样一个3.91平方公里的岛屿为中心，马上就划出12海里领海，然后再划出200海里专属经济区，几乎把我国浙江的外海和台湾海峡全部包括进去了。一个岛屿能够获得的专属经济区将近40万平方公里，这是一个什么概念？台湾省的面积是3万多平方公里。这将近40万平方公里的海洋权益，就会对我国的专属经济区、对我国的海底资源产生非常大的侵蚀！</p>
</li>
</ul>
<h3 id="特朗普的“故事”"><a class="header-anchor" href="#特朗普的“故事”"></a>特朗普的“故事”</h3>
<ul>
<li>
<p>这是最让特朗普生气的问题，他说：“我们往中东的黑窟窿里扔了6万亿美元，足以建设两个美国。”</p>
</li>
<li>
<p>连年的战争开支，巨大的军费开支，已经使美国债台高筑。</p>
</li>
<li>
<p>冷战后期的星球大战计划消耗了苏联，也同样消耗了美国。1991年海湾战争、1999年科索沃战争、2001年阿富汗战争、2003年伊拉克战争，然后紧接着是利比亚战争、叙利亚战争，一直到2008年，美国债务达到10万亿美元。然后，从2008年小布什下台到2016年奥巴马下台，美国债务高达20万亿美元。</p>
</li>
<li>
<p>据统计，34%的美国人存款为0，35%的美国人存款在1,000美元以下，还有11%的美国人存款在5,000美元以下。这3个数字加起来——11%+35%+34%，就是说80%的美国人存款在5,000美元以下。5,000美元，不到35,000人民币，这是美国的现状。80%的美国人存款在30,000人民币以下，其中34%的美国人一分钱存款都没有。</p>
</li>
<li>
<p>与之相反，中国储蓄率高，老百姓都存钱。老百姓存钱，银行就有钱。银行有钱，政府就好搞贷款。所以说，中国政府的日子比美国政府好过多了。</p>
</li>
<li>
<p>所以我们讲，中美两国都有问题，这两个全世界最大的经济体都有不少问题。像中国，我们对投资的过度依赖、对对外贸易的过度依赖、房地产市场的过度膨胀、实体经济面临困境，这是我们的问题。</p>
</li>
<li>
<p>美国的问题就两个：债务和逆差。</p>
</li>
<li>
<p>我们的问题虽然看着很多，但有解决的办法。美国的问题就目前来看，却很难找到解决的办法。</p>
</li>
</ul>
<h3 id="美国为什么要打贸易战"><a class="header-anchor" href="#美国为什么要打贸易战"></a>美国为什么要打贸易战</h3>
<ul>
<li>
<p>美国人有着长期的统计：2007年美国是130个国家的最大贸易伙伴，中国是70个国家的最大贸易伙伴；2017年中国是135个国家的最大贸易伙伴，美国是70余个国家的最大贸易伙伴。</p>
</li>
<li>
<p>美国是根据统计数字来的，他们根据统计数字认为中国的发展不得了，中国人表面挺谦虚，实际上正在取代美国。</p>
</li>
</ul>
<h3 id="中国的优势所在"><a class="header-anchor" href="#中国的优势所在"></a>中国的优势所在</h3>
<ul>
<li>
<p>今天美国一批政治家、一批军人想跟中国打冷战，经济界、企业界不想，他们想在中国赚钱。中国是美企最大市场，最大市场就是最大的利益来源、最大的利润来源。</p>
</li>
<li>
<p>所以郎咸平有一段话讲得很对：“技术是美国最大优势，市场是中国最大优势。技术必须卖给市场才能获得高额利润、继续发展。失去市场，技术必定衰退。芯片技术是人类目前最高级、最复杂的技术，美国以此为傲。中国是全球最大的芯片市场，有了市场，没有技术也可以发展技术，但若失去市场，技术之花再艳丽也必然枯萎。”</p>
</li>
<li>
<p>郎咸平的结论是，技术压抑市场是暂时的胜利，而市场自创技术是最终的胜利。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java通过documents4j和LibreOffice把word转为pdf</title>
    <url>/2023/12/15/documents4j_libreoffice_convert_word_pdf/</url>
    <content><![CDATA[<h2 id="word转pdf的相关第三方jar说明"><a class="header-anchor" href="#word转pdf的相关第三方jar说明"></a>word转pdf的相关第三方jar说明</h2>
<ul>
<li>docx4j<br>
免费开源、稍微复杂点的word，样式完全乱了，且xalan升级为2.7.3后会报错。</li>
<li>poi<br>
免费开源、官方文档少、学习成本大、使用复杂、生成的样式也有问题。</li>
<li>aspire.doc<br>
样式保留很好、使用方便。<br>
未付费时，第一行会有红色水印且超过500个段落(大概25页)会被截取。<br>
网上没有破解版。</li>
<li>aspose.words<br>
样式保留很好、使用方便。<br>
网上有破解版。</li>
<li>documents4j<br>
样式保留很好、使用方便。<br>
底层直接调用微软的office所以，完美保留样式</li>
</ul>
<span id="more"></span>
<h2 id="Linux系统安装LibreOffice"><a class="header-anchor" href="#Linux系统安装LibreOffice"></a>Linux系统安装LibreOffice</h2>
<h3 id="在线安装"><a class="header-anchor" href="#在线安装"></a>在线安装</h3>
<p><strong>CentOS：使用以下命令安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install libreoffice</span><br></pre></td></tr></table></figure>
<p><strong>Ubuntu：使用以下命令安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install libreoffice</span><br></pre></td></tr></table></figure>
<p>执行命令需要root权限：sudo -i、su</p>
<h3 id="离线安装"><a class="header-anchor" href="#离线安装"></a>离线安装</h3>
<p><a href="https://blog.csdn.net/nothing_may/article/details/122175775">在linux下离线安装libreoffice</a></p>
<h3 id="word转pdf验证"><a class="header-anchor" href="#word转pdf验证"></a>word转pdf验证</h3>
<p><strong>查看版本：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">libreoffice --version</span><br></pre></td></tr></table></figure>
<p><strong>启动服务：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> libreoffice --headless --accept=<span class="string">&quot;socket,host=127.0.0.1,port=8100;urp;&quot;</span> --nofirststartwizard &amp;</span><br></pre></td></tr></table></figure>
<p><strong>word转pdf验证：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装完后进入/usr/bin 或者 usr/local/bin目录下执行。 outdir输出是一个文件夹</span><br><span class="line">libreoffice --headless --invisible --convert-to pdf /file/word/test.docx --outdir /file/word/test</span><br></pre></td></tr></table></figure>
<p><strong>也可以安装Apache OpenOffice，二者基本差不多，更推荐LibreOffice</strong><br>
<a href="https://blog.csdn.net/winkexin/article/details/131500031?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=LibreOffice%E5%92%8COpenOffice%E7%9A%84%E5%8C%BA%E5%88%AB&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~sobaiduweb~default-1-131500031.nonecase&amp;spm=1018.2226.3001.4450">LibreOffice vs OpenOffice：哪个免费办公套件更适合你？</a></p>
<h2 id="Java工具类代码"><a class="header-anchor" href="#Java工具类代码"></a>Java工具类代码</h2>
<p><strong>maven依赖：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--word转pdf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.documents4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>documents4j-local<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;documents4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.documents4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>documents4j-transformer-msoffice-word<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;documents4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>java代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chinamobile.cmss.services.main.util;</span><br><span class="line"><span class="keyword">import</span> com.documents4j.api.DocumentType;</span><br><span class="line"><span class="keyword">import</span> com.documents4j.api.IConverter;</span><br><span class="line"><span class="keyword">import</span> com.documents4j.job.LocalConverter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Documents4j工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liquanhong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2023/12/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Documents4jUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// windows 生成目录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">winDirUrl</span> <span class="operator">=</span> <span class="string">&quot;D:\\temp\\file\\pdf\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * word转pdf</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file word源文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">convertWordToPdf</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">os</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase();</span><br><span class="line">        log.info(<span class="string">&quot;convertWordToPdf 当前操作系统：&#123;&#125;&quot;</span>, os);</span><br><span class="line">        <span class="keyword">if</span> (os.contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// Windows操作系统</span></span><br><span class="line">            windowsWordToPdf(file);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (os.contains(<span class="string">&quot;nix&quot;</span>) || os.contains(<span class="string">&quot;nux&quot;</span>) || os.contains(<span class="string">&quot;mac&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// Unix/Linux/Mac操作系统</span></span><br><span class="line">            linuxWordToPdf(file);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未知操作系统</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不支持当前操作系统转换文档。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过documents4j 实现word转pdf -- Windows 环境 需要有 Microsoft Office 服务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 源文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">windowsWordToPdf</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">outputFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(winDirUrl + file.getName().replaceAll(<span class="string">&quot;\\.(docx?|\\w+)$&quot;</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot;.pdf&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">InputStream</span>  <span class="variable">docxInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(outputFile))&#123;</span><br><span class="line">            <span class="type">IConverter</span> <span class="variable">converter</span> <span class="operator">=</span> LocalConverter.builder().build();</span><br><span class="line">            converter.convert(docxInputStream)</span><br><span class="line">                    .as(DocumentType.DOCX)</span><br><span class="line">                    .to(outputStream)</span><br><span class="line">                    .as(DocumentType.PDF).execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;winWordToPdf windows环境word转换为pdf时出现异常：&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过libreoffice 实现word转pdf -- linux 环境 需要有 libreoffice 服务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 源文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">linuxWordToPdf</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取文件的绝对路径和目标路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">absolutePath</span> <span class="operator">=</span> file.getAbsolutePath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">parentPath</span> <span class="operator">=</span> file.getParent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建LibreOffice的命令行工具命令</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;libreoffice --headless --invisible --convert-to pdf &quot;</span> + absolutePath + <span class="string">&quot; --outdir &quot;</span> + parentPath;</span><br><span class="line">        <span class="comment">// 执行转换命令</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executeLinuxCmd(command);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;linuxWordToPdf linux环境word转换为pdf时出现异常：&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行命令行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cmd 命令行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">executeLinuxCmd</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;executeLinuxCmd 执行Linux命令异常：&quot;</span>, e);</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="LibreOffice不支持多线程文件转换"><a class="header-anchor" href="#LibreOffice不支持多线程文件转换"></a>LibreOffice不支持多线程文件转换</h2>
<p><strong>问题现象：</strong> 开两个窗口，执行相同的命令，命令行会卡住无反应。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/dfd561d7db896910392a0e59d2d3cd32.png" alt="在这里插入图片描述"><br>
Linux安装的版本是5.3.6.1，在windows中下载了最新版本7.6.4问题依然存在，说明和版本没关系。</p>
<p>参考了<a href="https://www.cnblogs.com/everfight/p/libreoffice_error_fix.html">博客</a>，并没有解决😭	。</p>
<p>后来翻到这篇博客：<br>
<a href="https://www.codercto.com/a/4634.html#:~:text=%E7%94%B1%E4%BA%8Elibreo,%E5%8F%91%E6%89%A7%E8%A1%8C%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E3%80%82">使用docker来实现LibreOffice并发转换docx文件为pdf</a><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/324dc1d121d2f26723a52562c3cfa3bf.png" alt="在这里插入图片描述"></p>
<p><strong>结论： LibreOffice不支持多线程文件转换</strong></p>
<h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2>
<p>若命令行不指定,输出目录，LibreOffice默认输出到当前目录。<br>
<strong>windows当前目录是，soffice.exe同级目录，如下所示：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/a86b691ba3f9c6b92db4a7006484a1af.png" alt="在这里插入图片描述"><br>
<strong>linux当前目录是，输入目录的同级目录</strong></p>
<p><a href="https://blog.csdn.net/F15217283411/article/details/133947490?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-3-133947490-blog-131420553.235%5Ev39%5Epc_relevant_3m_sort_dl_base2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-3-133947490-blog-131420553.235%5Ev39%5Epc_relevant_3m_sort_dl_base2&amp;utm_relevant_index=6">参考链接</a>、<a href="https://www.cnblogs.com/1399z3blog/p/17832438.html">参考链接</a>、<a href="https://blog.csdn.net/qq_35385687/article/details/131420553">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Linux</tag>
        <tag>LibreOffice</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8常见操作整理</title>
    <url>/2023/04/02/java8_common_operations/</url>
    <content><![CDATA[<h2 id="对象List处理"><a class="header-anchor" href="#对象List处理"></a>对象List处理</h2>
<h3 id="List转为HashMap"><a class="header-anchor" href="#List转为HashMap"></a>List转为HashMap</h3>
<p>利用Collectors.toMap方法实现，若重复Key则覆盖。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值为对象</span></span><br><span class="line">Map&lt;String, Account&gt; map = accountList.stream().collect(Collectors.toMap(Account::getUsername, Function.identity(), (key1, key2) -&gt; key2));</span><br><span class="line"><span class="comment">// 值为字段</span></span><br><span class="line">Map&lt;Long, String&gt; map = accountList.stream().collect(Collectors.toMap(Account::getId, Account::getUsername,(key1, key2) -&gt; key2));</span><br><span class="line"><span class="comment">// 自定义键值</span></span><br><span class="line">Map&lt;String, String&gt; dbCompanyFiledMap = dbCompanyFiledList.stream()</span><br><span class="line">		.collect(Collectors.toMap(</span><br><span class="line">				companyFiled -&gt; companyFiled.getCompanyId() + companyFiled.getCompanyFiled(),<span class="comment">//键</span></span><br><span class="line">				AchievementCompanyFiled::getReGroupFiled, <span class="comment">//值</span></span><br><span class="line">				(key1, key2) -&gt; key2));</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="List分组后得到HashMap"><a class="header-anchor" href="#List分组后得到HashMap"></a>List分组后得到HashMap</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据某个字段分组</span></span><br><span class="line">Map&lt;String,List&lt;AchievementVo&gt;&gt; tocheckMap = list.stream().collect(Collectors.groupingBy(AchievementVo::getCompanyId));</span><br><span class="line"><span class="comment">// 根据某个逻辑分组</span></span><br><span class="line">Map&lt;Integer,List&lt;DeptInfoVo&gt;&gt; deptInfoVoMap = deptInfoVoList.stream().collect(Collectors.groupingBy(deptInfoVo -&gt; deptInfoVo.getDeptCodeLevelList().size()));</span><br><span class="line"><span class="comment">// List分组并按照key排序</span></span><br><span class="line">Map&lt;String, List&lt;JxSelfAssessmentCompanyVo&gt;&gt; map = list.stream().collect(Collectors.groupingBy(JxSelfAssessmentCompanyVo::getOrgId, LinkedHashMap::<span class="keyword">new</span>, Collectors.toList()));</span><br><span class="line"><span class="comment">// 按评分项id分组、每一组元素按score升序排序</span></span><br><span class="line">Map&lt;String, List&lt;ExpertScoreItemVo&gt;&gt; dbScoreItemVoMap = dbScoreItemVoList.stream()</span><br><span class="line">            .collect(Collectors.groupingBy(</span><br><span class="line">                    ExpertScoreItemVo::getScoreItemId,</span><br><span class="line">                    Collectors.collectingAndThen(</span><br><span class="line">                            Collectors.toList(),</span><br><span class="line">                            list -&gt; &#123;                               list.sort(Comparator.comparing(ExpertScoreItemVo::getScore));</span><br><span class="line">                                <span class="keyword">return</span> list;</span><br><span class="line">                            &#125;</span><br><span class="line">                    )</span><br><span class="line">            ));</span><br></pre></td></tr></table></figure>
<h3 id="把某个字段拆成List"><a class="header-anchor" href="#把某个字段拆成List"></a>把某个字段拆成List</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; idList = deptInfoVoList.stream().map(DeptInfoVo::getId).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<h3 id="把某个字段拆成Set"><a class="header-anchor" href="#把某个字段拆成Set"></a>把某个字段拆成Set</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; unitIdSet = measureUserList.stream()</span><br><span class="line">		.map(MeasureUser::getUnitId) </span><br><span class="line">		.collect(Collectors.toCollection(LinkedHashSet::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>
<h3 id="根据某一个对象属性去重"><a class="header-anchor" href="#根据某一个对象属性去重"></a>根据某一个对象属性去重</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">insertWbUserList = insertWbUserList.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(</span><br><span class="line">() -&gt; <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(WbUser::getMobile))), ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>
<p><a href="https://www.jb51.net/article/207795.htm">参考链接</a></p>
<h3 id="根据多个对象属性去重"><a class="header-anchor" href="#根据多个对象属性去重"></a>根据多个对象属性去重</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据对象的多个属性去重</span></span><br><span class="line">List&lt;DeleteTaskDto&gt; notRepetitiveList =deleteTaskList.stream()</span><br><span class="line">		.collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt; <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(item -&gt; item.getAchievementId()+String.valueOf(item.getContrastId())))), ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>
<p><strong>注意：item -&gt; ‘不重复的字符串’。</strong></p>
<h3 id="根据某个字段分组、对另一个字段求和"><a class="header-anchor" href="#根据某个字段分组、对另一个字段求和"></a>根据某个字段分组、对另一个字段求和</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据id字段分组、求salary字段</span></span><br><span class="line">Map&lt;Integer, Double&gt; salaryMap = workerList.stream().collect(Collectors.toMap(Worker::getId, Worker::getSalary, Double::sum));</span><br></pre></td></tr></table></figure>
<h2 id="Map处理"><a class="header-anchor" href="#Map处理"></a>Map处理</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把Map转为List：按键升序排列</span></span><br><span class="line">List&lt;ImportErrorVo&gt; list = errorMap.entrySet().stream().sorted(Comparator.comparing(e -&gt; e.getKey()))</span><br><span class="line">		.map(e -&gt; <span class="keyword">new</span> <span class="title class_">ImportErrorVo</span>(e.getKey(), e.getValue())).collect(Collectors.toList());</span><br><span class="line"><span class="comment">// 按照键排序</span></span><br><span class="line">Map&lt;String, List&lt;JxSelfAssessmentCompanyVo&gt;&gt; sortedMap = unsortMap.entrySet().stream()</span><br><span class="line">		.sorted(Map.Entry.comparingByKey())</span><br><span class="line">		.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,</span><br><span class="line">				(oldValue, newValue) -&gt; oldValue, LinkedHashMap::<span class="keyword">new</span>));</span><br><span class="line"><span class="comment">// 按照值排序</span></span><br><span class="line">Map&lt;String, Integer&gt; sortedMap = unsortMap.entrySet().stream()</span><br><span class="line">                .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))</span><br><span class="line">                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,</span><br><span class="line">                        (oldValue, newValue) -&gt; oldValue, LinkedHashMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>
<p><a href="https://moonce.blog.csdn.net/article/details/111553400?spm=1001.2101.3001.6650.7&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7-111553400-blog-73435627.235%5Ev36%5Epc_relevant_anti_vip&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7-111553400-blog-73435627.235%5Ev36%5Epc_relevant_anti_vip&amp;utm_relevant_index=8">参考链接</a></p>
<h2 id="单字段List处理"><a class="header-anchor" href="#单字段List处理"></a>单字段List处理</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 过滤、去重</span></span><br><span class="line">List&lt;String&gt; specialSecondaryList = uniteNameList.stream().filter(item-&gt; item.contains(DeptInfoConstant.SEPARATOR)).distinct().collect(toList());</span><br></pre></td></tr></table></figure>
<h2 id="对对象的字符串类型的日期排序（推荐）"><a class="header-anchor" href="#对对象的字符串类型的日期排序（推荐）"></a>对对象的字符串类型的日期排序（推荐）</h2>
<h3 id="方法一"><a class="header-anchor" href="#方法一"></a>方法一</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(deptInfoVoList, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;DeptInfoVo&gt;()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(DeptInfoVo deptInfoVo1, DeptInfoVo deptInfoVo2)</span> &#123;</span><br><span class="line">		<span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> sdf.parse(deptInfoVo1.getDoneDate());</span><br><span class="line">			<span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> sdf.parse(deptInfoVo2.getDoneDate());</span><br><span class="line">			<span class="comment">// 降序：d2.compareTo(d1)</span></span><br><span class="line">			<span class="keyword">return</span> d1.compareTo(d2);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">			log.error(<span class="string">&quot;格式化时间失败,deptInfoVo1：&#123;&#125;,deptInfoVo2：&#123;&#125;&quot;</span>,deptInfoVo1,deptInfoVo2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="方法二"><a class="header-anchor" href="#方法二"></a>方法二</h3>
<p><strong>1、实体类实现Comparable接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptInfoVo</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;DeptInfoVo&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2、重写compareTo方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(DeptInfoVo deptInfoVo)</span> &#123;</span><br><span class="line">	<span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> sdf.parse(<span class="built_in">this</span>.getDoneDate());</span><br><span class="line">		<span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> sdf.parse(deptInfoVo.getDoneDate());</span><br><span class="line">		<span class="comment">// 降序：d2.compareTo(d1)</span></span><br><span class="line">		<span class="keyword">return</span> d1.compareTo(d2);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">		log.error(<span class="string">&quot;格式化时间失败：&#123;&#125;&quot;</span>,e);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3、业务代码中排序</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(deptInfoVoList);</span><br></pre></td></tr></table></figure>
<h3 id="方法三"><a class="header-anchor" href="#方法三"></a>方法三</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;DeptInfoVo&gt; newDeptInfoList = deptInfoVoList.stream().sorted(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;DeptInfoVo&gt;() &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(DeptInfoVo deptInfoVo1, DeptInfoVo deptInfoVo2)</span> &#123;</span><br><span class="line">		<span class="type">DateFormat</span> <span class="variable">dateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> dateFormat.parse(deptInfoVo1.getDoneDate());</span><br><span class="line">			<span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> dateFormat.parse(deptInfoVo2.getDoneDate());</span><br><span class="line">			<span class="comment">// 降序：d2.compareTo(d1)</span></span><br><span class="line">			<span class="keyword">return</span> d1.compareTo(d2);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">			log.error(<span class="string">&quot;格式化时间失败,deptInfoVo1：&#123;&#125;,deptInfoVo2：&#123;&#125;&quot;</span>,deptInfoVo1,deptInfoVo2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<p>注意：<strong>日期格式化中的年份yyyy不能写为大写</strong></p>
<p><a href="https://www.codenong.com/25606267/">参考链接</a></p>
<h2 id="对对象的普通字符串-或日期类型-排序"><a class="header-anchor" href="#对对象的普通字符串-或日期类型-排序"></a>对对象的普通字符串(或日期类型)排序</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 升序</span></span><br><span class="line">deptInfoVoList.sort(Comparator.comparing(DeptInfoVo::getDeptName));</span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line"><span class="comment">// Lambda表达式写法</span></span><br><span class="line">Collections.sort(deptInfoVoList, (deptInfoVo1,deptInfoVo2)-&gt;deptInfoVo2.getAge().compareTo(deptInfoVo1.getAge()));</span><br><span class="line"><span class="comment">// Comparator.comparing写法(底层也是Lambda)</span></span><br><span class="line">Collections.sort(deptInfoVoList, Comparator.comparing(DeptInfoVo::getAge).reversed());</span><br><span class="line"><span class="comment">// 匿名内部类写法</span></span><br><span class="line">Collections.sort(deptInfoVoList, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;DeptInfoVo&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(DeptInfoVo deptInfoVo1, DeptInfoVo deptInfoVo2)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> deptInfoVo2.getDeptName().compareTo(deptInfoVo1.getDeptName());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="求对象数字类型的最小值和最大值"><a class="header-anchor" href="#求对象数字类型的最小值和最大值"></a>求对象数字类型的最小值和最大值</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最小值</span></span><br><span class="line"><span class="type">OptionalInt</span> <span class="variable">optionalInt</span> <span class="operator">=</span> deptInfoVoList</span><br><span class="line">		.stream()</span><br><span class="line">		.mapToInt(DeptInfoVo::getAge).min();</span><br><span class="line">System.out.println(<span class="string">&quot;最小年龄：&quot;</span>+optionalInt.getAsInt());</span><br><span class="line"><span class="comment">// 最大值</span></span><br><span class="line"><span class="type">OptionalInt</span> <span class="variable">optionalInt</span> <span class="operator">=</span> deptInfoVoList</span><br><span class="line">		.stream()</span><br><span class="line">		.mapToInt(DeptInfoVo::getAge).max();</span><br><span class="line">System.out.println(<span class="string">&quot;最大年龄：&quot;</span>+optionalInt.getAsInt());</span><br><span class="line"></span><br><span class="line">Optional&lt;DeptInfoVo&gt; deptInfoVo = deptInfoVoList.stream().max(Comparator.comparing(DeptInfoVo::getAge));</span><br><span class="line">System.out.println(<span class="string">&quot;最大年龄：&quot;</span>+deptInfoVo.get());</span><br></pre></td></tr></table></figure>
<p>注意：<strong>若age字段存在为空，会报空指针异常</strong></p>
<h2 id="求对象数字类型的总和和平均值"><a class="header-anchor" href="#求对象数字类型的总和和平均值"></a>求对象数字类型的总和和平均值</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 总和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> deptInfoVoList</span><br><span class="line">		.stream()</span><br><span class="line">		.mapToInt(DeptInfoVo::getAge).sum();</span><br><span class="line">System.out.println(<span class="string">&quot;年龄总和：&quot;</span>+sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 平均值</span></span><br><span class="line"><span class="type">OptionalDouble</span> <span class="variable">optionalDouble</span> <span class="operator">=</span> deptInfoVoList</span><br><span class="line">		.stream()</span><br><span class="line">		.mapToInt(DeptInfoVo::getAge).average();</span><br><span class="line">System.out.println(<span class="string">&quot;年龄平均值：&quot;</span>+optionalDouble.getAsDouble());</span><br></pre></td></tr></table></figure>
<p>注意：<strong>若age字段存在为空，会报空指针异常</strong></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(十六)</title>
    <url>/2023/08/12/coding_notes_sixteen/</url>
    <content><![CDATA[<h2 id="狂神说-Elasticsearch-7-6入门学习笔记"><a class="header-anchor" href="#狂神说-Elasticsearch-7-6入门学习笔记"></a>狂神说-Elasticsearch 7.6入门学习笔记</h2>
<p><a href="https://www.kuangstudy.com/bbs/1354069127022583809">狂神说-Elasticsearch 7.6入门学习笔记</a></p>
<h2 id="Windows-Elasticsearch-IK分词器插件启动报错"><a class="header-anchor" href="#Windows-Elasticsearch-IK分词器插件启动报错"></a>Windows Elasticsearch IK分词器插件启动报错</h2>
<p><strong>错误如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.security.Acces ControlException: access <span class="title function_">denied</span> <span class="params">(\ik\config\IKAnalyzer.cfg.xml<span class="string">&quot; &quot;</span>read<span class="string">&quot;)</span></span></span><br></pre></td></tr></table></figure>
<p><strong>原因：</strong><br>
D:\Program Files文件夹下的所有文件默认都是只读权限。<br>
解决方法：<br>
Elasticsearch不要安装在 Program Files 、Program Files (x86) 这些目录下。</p>
<p><a href="https://blog.csdn.net/wo1901446409/article/details/100535551/">参考链接</a></p>
<span id="more"></span>
<h2 id="Elasticsearch的ik分词器自定义字典myDict-dic的编码格式需要为UTF-8-否则无效"><a class="header-anchor" href="#Elasticsearch的ik分词器自定义字典myDict-dic的编码格式需要为UTF-8-否则无效"></a>Elasticsearch的ik分词器自定义字典myDict.dic的编码格式需要为UTF-8,否则无效</h2>
<h2 id="Elasticsearch使用term查询无数据返回的原因"><a class="header-anchor" href="#Elasticsearch使用term查询无数据返回的原因"></a>Elasticsearch使用term查询无数据返回的原因</h2>
<ul>
<li>term查询适合查询number、date、keyword</li>
<li>term查询text字段，需要映射支持keyword<br>
<a href="https://blog.csdn.net/weixin_52842903/article/details/130255335">参考链接</a></li>
</ul>
<h2 id="Elasticsearch如果没给映射，字段默认使用standard映射"><a class="header-anchor" href="#Elasticsearch如果没给映射，字段默认使用standard映射"></a>Elasticsearch如果没给映射，字段默认使用standard映射</h2>
<p>建议中文使用ik_max_word映射</p>
<h2 id="Elasticsearch-SQL说明"><a class="header-anchor" href="#Elasticsearch-SQL说明"></a>Elasticsearch SQL说明</h2>
<p><a href="https://zhuanlan.zhihu.com/p/366785589">参考链接</a></p>
<h2 id="ElasticSearch-SQL转DSL"><a class="header-anchor" href="#ElasticSearch-SQL转DSL"></a>ElasticSearch SQL转DSL</h2>
<p><a href="https://blog.csdn.net/hudeyong926/article/details/120059127">官方链接</a>、<a href="https://blog.csdn.net/hudeyong926/article/details/120059127">参考链接</a></p>
<h2 id="ElasticSearch关联查询"><a class="header-anchor" href="#ElasticSearch关联查询"></a>ElasticSearch关联查询</h2>
<p><a href="https://baijiahao.baidu.com/s?id=1766924119377368988&amp;wfr=spider&amp;for=pc">百家号</a>、<a href="https://zhuanlan.zhihu.com/p/66653530">知乎</a></p>
<h2 id="ElasticSearch的msearch"><a class="header-anchor" href="#ElasticSearch的msearch"></a>ElasticSearch的msearch,</h2>
<p><strong>msearch支持多索引uion联合查询。</strong><br>
msearch的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /_msearch</span><br></pre></td></tr></table></figure>
<p>查询一条数据它需要两个对象，第一个设置index和type，第二个设置查询语句。查询语句和search相同。<br>
如果只是查询一个index，我们可以在url中带上index,语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /索引名/_msearch</span><br></pre></td></tr></table></figure>
<p>请求示例1：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">GET</span> /repetition-result/_msearch</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#123;<span class="string">&quot;query&quot;</span> : &#123;<span class="string">&quot;term&quot;</span> : &#123;<span class="string">&quot;achievementId&quot;</span> : <span class="string">&quot;1&quot;</span>&#125;&#125;, <span class="string">&quot;size&quot;</span> : 3&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#123;<span class="string">&quot;query&quot;</span> : &#123;<span class="string">&quot;term&quot;</span> : &#123;<span class="string">&quot;contrastId&quot;</span> : <span class="string">&quot;1&quot;</span>&#125;&#125;, <span class="string">&quot;size&quot;</span> : 3&#125;</span><br></pre></td></tr></table></figure>
<p>请求示例2：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">GET</span> /repetition-result/_msearch</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#123;<span class="string">&quot;query&quot;</span> : &#123;<span class="string">&quot;term&quot;</span> : &#123;<span class="string">&quot;achievementId&quot;</span> : <span class="string">&quot;1&quot;</span>&#125;&#125;, <span class="string">&quot;size&quot;</span> : 3&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>: <span class="string">&quot;repetition-result-test&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;query&quot;</span> : &#123;<span class="string">&quot;term&quot;</span> : &#123;<span class="string">&quot;contrastId&quot;</span> : <span class="string">&quot;3&quot;</span>&#125;&#125;, <span class="string">&quot;size&quot;</span> : 3&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ElasticSearch多个字段聚合统计"><a class="header-anchor" href="#ElasticSearch多个字段聚合统计"></a>ElasticSearch多个字段聚合统计</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;cardinality&quot;</span>: &#123;</span><br><span class="line">	<span class="string">&quot;script&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;lang&quot;</span>: <span class="string">&quot;painless&quot;</span>,</span><br><span class="line">		<span class="string">&quot;source&quot;</span>: <span class="string">&quot;doc[&#x27;achievementId&#x27;].value + doc[&#x27;contrastId&#x27;].value&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_44799217/article/details/128509930">参考链接</a></p>
<h2 id="Elasticsearch-Painless-Script入门教程"><a class="header-anchor" href="#Elasticsearch-Painless-Script入门教程"></a>Elasticsearch Painless Script入门教程</h2>
<p><a href="https://codeantenna.com/a/TmN1S11fDH">参考链接</a></p>
<h2 id="Elasticsearch-查询模板-Mustache模板引擎"><a class="header-anchor" href="#Elasticsearch-查询模板-Mustache模板引擎"></a>Elasticsearch 查询模板(Mustache模板引擎)</h2>
<p><a href="https://elasticstack.blog.csdn.net/article/details/100555460">参考链接</a><br>
<a href="https://blog.csdn.net/zhangshenghang/article/details/128704857">参考链接</a><br>
<a href="https://elasticstack.blog.csdn.net/article/details/100555460">参考链接</a></p>
<h2 id="Windows计算文件名的Md5值"><a class="header-anchor" href="#Windows计算文件名的Md5值"></a>Windows计算文件名的Md5值</h2>
<p><strong>certutil -hashfile 文件名 MD5</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\&gt;certutil -hashfile E:\Downloads\ZGGX-ZF-CMND-2023200015.xlsx  MD5</span><br></pre></td></tr></table></figure>
<h2 id="TortoiseSVN-远程仓库路径更换"><a class="header-anchor" href="#TortoiseSVN-远程仓库路径更换"></a>TortoiseSVN 远程仓库路径更换</h2>
<ul>
<li>右键项目文件夹 TortoiseSVN =&gt; Relocate</li>
<li>在 To URL 中输入新的仓库地址点击 OK</li>
<li>根据提示填入账户名密码即可</li>
</ul>
<h2 id="IDEA-远程仓库路径更换"><a class="header-anchor" href="#IDEA-远程仓库路径更换"></a>IDEA 远程仓库路径更换</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/1a14f5d63cc4b41fe5a9ddad6aecb903.png" alt="在这里插入图片描述"></p>
<h2 id="Git修改分支名"><a class="header-anchor" href="#Git修改分支名"></a>Git修改分支名</h2>
<p><strong>1、修改本地分支名称</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/104ca6831dcc2b79933eef858cac820f.png#pic_center" alt="在这里插入图片描述"><br>
<strong>2、在本地将远程分支删除</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/c11d1da957884f0ebdfd0391e68638db.png#pic_center" alt="在这里插入图片描述"><br>
<strong>3、将改名后的本地分支推送到远程仓库</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/13d000554cc0b762cd87d97416ba7af4.png#pic_center" alt="在这里插入图片描述"></p>
<p><a href="https://www.php.cn/faq/492998.html">参考链接</a></p>
<h2 id="Git回退到指定版本-两种方法验证通过"><a class="header-anchor" href="#Git回退到指定版本-两种方法验证通过"></a>Git回退到指定版本(两种方法验证通过)</h2>
<h3 id="方法一"><a class="header-anchor" href="#方法一"></a>方法一</h3>
<p><strong>1、查询commintId</strong><br>
<strong>IDEA界面、命令git log、远程仓库页面都可以</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/d8311c0155c0d0dc64c9b0ee123124fc.png#pic_center" alt="在这里插入图片描述"><br>
<strong>2、git reset --hard commintId</strong><br>
<strong>3、git push -f</strong></p>
<p><strong>必须用这个命令强推 或者 用图形界面强推。</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/cd0433486fbc442d6b8c65bb04b08a83.png" alt="在这里插入图片描述"><br>
<strong>否则会报下面的弹窗：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/b749fe4b7905256e0223716c2688439a.png" alt="在这里插入图片描述"></p>
<h3 id="方法二"><a class="header-anchor" href="#方法二"></a>方法二</h3>
<p><strong>1、找到Git对应日志 -&gt; 建立分支</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/0e957d58b14fb333060aaadf03186086.png" alt="在这里插入图片描述"><br>
<strong>2、push提交代码(支持修改代码后提交)<br>
3、修改分支名(参考：Git修改分支名)</strong></p>
<h2 id="EasyExcel官方必读文档-包括版本选择"><a class="header-anchor" href="#EasyExcel官方必读文档-包括版本选择"></a>EasyExcel官方必读文档(包括版本选择)</h2>
<p><a href="https://easyexcel.opensource.alibaba.com/qa/#%E6%9F%A5%E7%9C%8B%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC">EasyExcel官方必读文档(包括版本选择)</a></p>
<h2 id="EasyExcel部分字段为什么没法读取或者写入"><a class="header-anchor" href="#EasyExcel部分字段为什么没法读取或者写入"></a>EasyExcel部分字段为什么没法读取或者写入</h2>
<p>使用了lombok的@Accessors(chain = true) ，无法被Cglib读取<br>
建议使用@Builder来替换@Accessors(chain = true)</p>
<h2 id="EasyExcel读取动态列"><a class="header-anchor" href="#EasyExcel读取动态列"></a>EasyExcel读取动态列</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/660422148b0c1e81f39b154736d40b58.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/63937472f972cedfcc3402348dc2c860.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/95cfc053fa034aaf89588d90024463b1.png" alt="在这里插入图片描述"></p>
<p>上面的截图有两个错误：① 动态列需要加上@ExcelIgnore注解(或者实体类加@ExcelIgnoreUnannotated) ② context.readStringCell(i)方法不存在</p>
<p><strong>解决参考代码(验证通过)：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动态列处理</span></span><br><span class="line">List&lt;String&gt; dynamicDataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &lt; readRowHolder.getCellMap().size(); i++)&#123;</span><br><span class="line">	<span class="type">ReadCellData</span> <span class="variable">ReadCellData</span> <span class="operator">=</span> (ReadCellData)readRowHolder.getCellMap().get(i);</span><br><span class="line">	<span class="keyword">if</span>(StringUtils.isNotBlank(ReadCellData.getStringValue()))&#123;</span><br><span class="line">		dynamicDataList.add(ReadCellData.getStringValue());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MySQL中的unix-timestamp-时间字符-、from-unixtime-数字类型"><a class="header-anchor" href="#MySQL中的unix-timestamp-时间字符-、from-unixtime-数字类型"></a>MySQL中的unix_timestamp(时间字符)、from_unixtime(数字类型)</h2>
<p>from_unixtime()把long类型时间戳格式化<br>
<a href="https://www.cnblogs.com/sharpest/p/13706648.html">参考链接</a></p>
<h2 id="抽象类-或者接口-是无法被Spring实例化的，因此无法添加-Service-或-Componet-注解"><a class="header-anchor" href="#抽象类-或者接口-是无法被Spring实例化的，因此无法添加-Service-或-Componet-注解"></a>抽象类(或者接口)是无法被Spring实例化的，因此无法添加@Service 或 @Componet 注解</h2>
<h2 id="Spring-循环依赖解决方法"><a class="header-anchor" href="#Spring-循环依赖解决方法"></a>Spring 循环依赖解决方法</h2>
<p><strong>启动项目报下面的错：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">The dependencies of some of the beans in the application context form a cycle:</span><br><span class="line">  testController (field <span class="keyword">private</span> com.aspire.achievement.repetition.service.RepetitionAbilityService com.aspire.achievement.repetition.controller.TestController.repetitionAbilityService)</span><br><span class="line">┌─────┐</span><br><span class="line">|  repetitionAbilityServiceImpl (field <span class="keyword">private</span> com.aspire.achievement.repetition.service.RepetitionTaskService com.aspire.achievement.repetition.service.impl.RepetitionAbilityServiceImpl.repetitionTaskService)</span><br><span class="line">↑     ↓</span><br><span class="line">|  repetitionTaskServiceImpl (field <span class="keyword">private</span> com.aspire.achievement.repetition.factory.BlockQueueFactory com.aspire.achievement.repetition.service.impl.RepetitionTaskServiceImpl.blockQueueFactory)</span><br><span class="line">↑     ↓</span><br><span class="line">|  blockQueueFactory (field <span class="keyword">private</span> com.aspire.achievement.repetition.service.RepetitionAbilityService com.aspire.achievement.repetition.factory.BlockQueueFactory.repetitionAbilityService)</span><br><span class="line">└─────┘</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Relying upon circular references is discouraged and they are prohibited by <span class="keyword">default</span>. Update your application to remove the dependency cycle between beans. As a last resort, it may be possible to <span class="keyword">break</span> the cycle automatically by setting spring.main.allow-circular-references to <span class="literal">true</span>.</span><br></pre></td></tr></table></figure>
<p><strong>解决方法：</strong><br>
1、代码中主动取消循环依赖<br>
2、增加允许循环依赖的配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">main:</span></span><br><span class="line">        <span class="attr">allow-circular-references:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>3、添加延迟加载@Lazy注解 <strong>（未成功）</strong></p>
<p><a href="https://blog.csdn.net/m0_73813319/article/details/127265246">参考链接</a></p>
<h2 id="Java-jsch在Linux中获取sftp连接时失败"><a class="header-anchor" href="#Java-jsch在Linux中获取sftp连接时失败"></a>Java jsch在Linux中获取sftp连接时失败</h2>
<p>在本地Windows操作远程sftp服务器，完全没问题。但是部署到Linux服务器时，<strong>出现下面的错误：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Session.connect: java.security.InvalidAlgorithmParameterException: </span><br><span class="line">DH key size must be multiple of <span class="number">64</span>, and can only range from <span class="number">512</span> to <span class="number">2048</span> (inclusive). </span><br><span class="line">The specific key size <span class="number">3072</span> is not supported</span><br></pre></td></tr></table></figure>
<p>本地和linux都是jdk 1.8的环境。<br>
经排查，<strong>发现项目引入的jsch依赖如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.netbeans.external<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>com-jcraft-jsch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE180<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>解决方法：</strong><br>
1、使用jdk 1.8以上的环境<br>
2、更换jsch依赖(经测试0.1.54也可以)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jcraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.54<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注：如果0.1.52版本在windows环境中运行会报下面的错：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.jcraft.jsch.JSchException: Session.connect: java.io.IOException: End of IO Stream Read</span><br></pre></td></tr></table></figure>
<p><strong>解决方法：更换jsch依赖为0.1.54即可。</strong></p>
<p><a href="https://blog.csdn.net/tzydzj/article/details/106923201">参考链接</a><br>
<a href="https://blog.csdn.net/Tomgs/article/details/78428718">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>MySQL</tag>
        <tag>Elasticsearch</tag>
        <tag>EasyExcel</tag>
        <tag>Springboot</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis Generator源码修改</title>
    <url>/2023/06/11/mybatis_generator_source_update/</url>
    <content><![CDATA[<h2 id="报java-net-MalformedURLException错误解决"><a class="header-anchor" href="#报java-net-MalformedURLException错误解决"></a>报java.net.MalformedURLException错误解决</h2>
<h3 id="问题原因：编译的时候没有把下面的dtd文件打进去"><a class="header-anchor" href="#问题原因：编译的时候没有把下面的dtd文件打进去"></a>问题原因：编译的时候没有把下面的dtd文件打进去</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/f23fc5b07338070393f8e64d6ccda506.png" alt="在这里插入图片描述"></p>
<span id="more"></span>
<h3 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h3>
<p><strong>maven依赖增加下面的代码即可：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resources</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">resource</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">includes</span>&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.tld<span class="tag">&lt;/<span class="name">include</span>&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.dtd<span class="tag">&lt;/<span class="name">include</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;/<span class="name">includes</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;/<span class="name">resource</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">resources</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/u011781521/article/details/78164098">MyBatis Generator系列(三)-修改源码实现中文注释</a><br>
<a href="https://segmentfault.com/a/1190000016249739?sort=votes">大象修改源码</a></p>
<h2 id="XML文件判空优化-增加空字符串"><a class="header-anchor" href="#XML文件判空优化-增加空字符串"></a>XML文件判空优化-增加空字符串</h2>
<p>需要修改 <strong>\org\mybatis\generator\codegen\mybatis3\xmlmapper\elements</strong> 路径下面的<br>
<strong>InsertSelectiveElementGenerator</strong>和<strong>UpdateByPrimaryKeySelectiveElementGenerator</strong>文件。</p>
<h3 id="修改InsertSelectiveElementGenerator"><a class="header-anchor" href="#修改InsertSelectiveElementGenerator"></a>修改InsertSelectiveElementGenerator</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/adc5ea42aeaaecbabd62be7ea832613d.png" alt="在这里插入图片描述"><br>
<strong>一共有两处要修改的地方(大概119和130行)。</strong></p>
<h3 id="修改UpdateByPrimaryKeySelectiveElementGenerator"><a class="header-anchor" href="#修改UpdateByPrimaryKeySelectiveElementGenerator"></a>修改UpdateByPrimaryKeySelectiveElementGenerator</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/e3bcc96cf874af299e2ee2941109ffb3.png" alt="在这里插入图片描述"></p>
<p><strong>注意日期类型与空字符串比较会报错：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null and updateTime != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">	update_time = #&#123;updateTime,jdbcType=TIMESTAMP&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>Cause: java.lang.IllegalArgumentException: invalid comparison: java.util.Date and java.lang.String<br>
at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30) ~[mybatis-3.5.5.jar:3.5.5]<br>
at org.apache.ibatis.session.defaults.DefaultSqlSession.update</strong></p>
<p><strong>MySQL的日期类型和MyBatis的对应关系：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">MySQL日期类型</th>
<th style="text-align:center">MyBatis日期类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DATETIME</td>
<td style="text-align:center">TIMESTAMP</td>
</tr>
<tr>
<td style="text-align:center">TIMESTAMP</td>
<td style="text-align:center">TIMESTAMP</td>
</tr>
<tr>
<td style="text-align:center">DATE</td>
<td style="text-align:center">DATE</td>
</tr>
<tr>
<td style="text-align:center">YEAR</td>
<td style="text-align:center">DATE</td>
</tr>
<tr>
<td style="text-align:center">TIME</td>
<td style="text-align:center">TIME</td>
</tr>
</tbody>
</table>
<h2 id="XML文件判空优化-最佳解决方案"><a class="header-anchor" href="#XML文件判空优化-最佳解决方案"></a>XML文件判空优化-最佳解决方案</h2>
<p><strong>数据库表结构如下：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/2cbe07b1f017dd47747c56c3fd3e3e4e.png" alt="在这里插入图片描述"></p>
<p>在<strong>InsertSelectiveElementGenerator和UpdateByPrimaryKeySelectiveElementGenerator</strong>中增加下面的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判空优化：1、字符类型 != null and  != &#x27;&#x27; 2、非字符类型 != null</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: introspectedColumn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: sb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liquanhong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/6/9/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">appendNullJudgment</span><span class="params">(IntrospectedColumn introspectedColumn, StringBuilder sb)</span> &#123;</span><br><span class="line">	sb.setLength(<span class="number">0</span>);</span><br><span class="line">	<span class="type">String</span> <span class="variable">jdbcTypeName</span> <span class="operator">=</span> introspectedColumn.getJdbcTypeName();</span><br><span class="line">	<span class="comment">// 字符类型处理</span></span><br><span class="line">	<span class="keyword">if</span>(jdbcTypeName.equals(<span class="string">&quot;VARCHAR&quot;</span>) || jdbcTypeName.equals(<span class="string">&quot;CHAR&quot;</span>) || jdbcTypeName.equals(<span class="string">&quot;LONGVARCHAR&quot;</span>))&#123;</span><br><span class="line">		sb.append(introspectedColumn.getJavaProperty());</span><br><span class="line">		sb.append(<span class="string">&quot; != null and &quot;</span>);</span><br><span class="line">		sb.append(introspectedColumn.getJavaProperty());</span><br><span class="line">		sb.append(<span class="string">&quot; != &#x27;&#x27;&quot;</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">// 非字符类型处理</span></span><br><span class="line">		sb.append(introspectedColumn.getJavaProperty());</span><br><span class="line">		sb.append(<span class="string">&quot; != null&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>把InsertSelectiveElementGenerator、UpdateByPrimaryKeySelectiveElementGenerator中相关判空逻辑改为读取上面的判空方法即可</strong><br>
例如：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/ae378ff5ee7654f420185e433c8f5d51.png" alt="在这里插入图片描述"></p>
<p><strong>生成XML文件效果如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateByPrimaryKeySelective&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.aspirecn.external.reward.pojo.entity.TestWithBLOBs&quot;</span>&gt;</span></span><br><span class="line">    update t_test</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;testVarchar != null and testVarchar != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        test_varchar = #&#123;testVarchar,jdbcType=VARCHAR&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;testChar != null and testChar != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        test_char = #&#123;testChar,jdbcType=CHAR&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;testTinytext != null and testTinytext != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        test_tinytext = #&#123;testTinytext,jdbcType=VARCHAR&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;testJson != null and testJson != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        test_json = #&#123;testJson,jdbcType=CHAR&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;testText != null and testText != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        test_text = #&#123;testText,jdbcType=LONGVARCHAR&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;testMediumtext != null and testMediumtext != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        test_mediumtext = #&#123;testMediumtext,jdbcType=LONGVARCHAR&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;testLongtext != null and testLongtext != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        test_longtext = #&#123;testLongtext,jdbcType=LONGVARCHAR&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>MySQL的字符类型和MyBatis的对应关系：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">MySQL字符类型</th>
<th style="text-align:center">MyBatis字符类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">VARCHAR</td>
<td style="text-align:center">VARCHAR</td>
</tr>
<tr>
<td style="text-align:center">CHAR</td>
<td style="text-align:center">CHAR</td>
</tr>
<tr>
<td style="text-align:center">TINYTEXT</td>
<td style="text-align:center">VARCHAR</td>
</tr>
<tr>
<td style="text-align:center">JSON</td>
<td style="text-align:center">CHAR</td>
</tr>
<tr>
<td style="text-align:center">TEXT</td>
<td style="text-align:center">LONGVARCHAR</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMTEXT</td>
<td style="text-align:center">LONGVARCHAR</td>
</tr>
<tr>
<td style="text-align:center">LONGTEXT</td>
<td style="text-align:center">LONGVARCHAR</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MySQL</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>poi-tl自定义渲染策略学习</title>
    <url>/2023/04/02/poi-tl-study/</url>
    <content><![CDATA[<h2 id="实现逻辑"><a class="header-anchor" href="#实现逻辑"></a>实现逻辑</h2>
<p><strong>自定义渲染策略实现逻辑：</strong></p>
<ul>
<li>找到模板中的表格标签</li>
<li>render方法接收java中对应模板表格标签的所有list数据</li>
<li>执行自定义渲染逻辑</li>
</ul>
<h2 id="参考代码"><a class="header-anchor" href="#参考代码"></a>参考代码</h2>
<p><strong>word模板如下：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/d1d974f4621a4171676e1ee6562d7227.png" alt="在这里插入图片描述"></p>
<span id="more"></span>
<p><strong>实体类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GksxRowData</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * problemType 问题类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String problemTypeDesc;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * problemContent 问题描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String problemContent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * problemScore 扣除分值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal problemScore;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1集团巡视审计专项检查的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer typeOneSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2集团研发专项检查的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer typeTwoSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GksxTableData</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 待渲染的数据 (扣分详细+合计)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;GksxRowData&gt; gksxRowDataList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JxWordExport</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 管控事项table表格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> GksxTableData gksxTable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>自定义渲染策略类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateGksxTablePolicy</span> <span class="keyword">extends</span> <span class="title class_">DynamicTableRenderPolicy</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(XWPFTable table, Object data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="keyword">if</span>(data == <span class="literal">null</span>)&#123;</span><br><span class="line">			log.error(<span class="string">&quot;待渲染管控事项数据为空。&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">GksxTableData</span> <span class="variable">gksxTableData</span> <span class="operator">=</span>  (GksxTableData) data;</span><br><span class="line">		List&lt;GksxRowData&gt; problemList = gksxTableData.getGksxRowDataList();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置样式</span></span><br><span class="line">		<span class="type">Style</span> <span class="variable">style</span> <span class="operator">=</span> getStyle();</span><br><span class="line">		<span class="comment">// 循环插入行</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">startRow</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; problemList.size(); i++) &#123;</span><br><span class="line">			<span class="comment">// 先生成一行</span></span><br><span class="line">			<span class="type">XWPFTableRow</span> <span class="variable">insertNewTableRow</span> <span class="operator">=</span> table.insertNewTableRow(startRow+i);</span><br><span class="line">			<span class="comment">// 每一行有4列</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) insertNewTableRow.createCell();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 封装数据</span></span><br><span class="line">			<span class="type">GksxRowData</span> <span class="variable">gksxRowData</span> <span class="operator">=</span> problemList.get(i);</span><br><span class="line">			<span class="type">RowRenderData</span> <span class="variable">templateGksxRow</span> <span class="operator">=</span> Rows.of(</span><br><span class="line">					<span class="keyword">new</span> <span class="title class_">TextRenderData</span>(gksxRowData.getProblemTypeDesc(),style)</span><br><span class="line">					,<span class="keyword">new</span> <span class="title class_">TextRenderData</span>(gksxRowData.getNum(),style),</span><br><span class="line">					<span class="keyword">new</span> <span class="title class_">TextRenderData</span>(gksxRowData.getProblemContent(),style),</span><br><span class="line">					<span class="keyword">new</span> <span class="title class_">TextRenderData</span>(String.valueOf(gksxRowData.getProblemScore()),style))</span><br><span class="line">					.center()</span><br><span class="line">					.create();</span><br><span class="line">			<span class="comment">// 渲染数据</span></span><br><span class="line">			TableRenderPolicy.Helper.renderRow(table.getRow(startRow+i), templateGksxRow);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="type">GksxRowData</span> <span class="variable">firstRowData</span> <span class="operator">=</span> problemList.get(<span class="number">0</span>);</span><br><span class="line">		<span class="comment">// 合并单元格</span></span><br><span class="line">		<span class="keyword">if</span>(firstRowData.getTypeOneSize() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">			TableTools.mergeCellsVertically(table, <span class="number">0</span>, startRow, startRow+firstRowData.getTypeOneSize()-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(firstRowData.getTypeTwoSize() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">			TableTools.mergeCellsVertically(table, <span class="number">0</span>, startRow+firstRowData.getTypeOneSize(), startRow+firstRowData.getTypeOneSize()+firstRowData.getTypeTwoSize()-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		TableTools.mergeCellsHorizonal(table, startRow+firstRowData.getTypeOneSize()+firstRowData.getTypeTwoSize(), <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Style <span class="title function_">getStyle</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="type">Style</span> <span class="variable">style</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Style</span>();</span><br><span class="line">		style.setFontFamily(<span class="string">&quot;FangSong&quot;</span>);</span><br><span class="line">		style.setFontSize(<span class="number">12</span>);</span><br><span class="line">		style.setBold(<span class="literal">false</span>);</span><br><span class="line">		<span class="keyword">return</span> style;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;E:\\Documents\\CompanyProjects\\cxhl-services\\src\\test\\java\\word\\template\\gksx_problem.docx&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">targetPath</span> <span class="operator">=</span>  <span class="string">&quot;C:\\Users\\Desktop\\output_gksx_problem.docx&quot;</span>;</span><br><span class="line">    <span class="comment">// 初始化数据</span></span><br><span class="line">    <span class="type">GksxRowData</span> <span class="variable">problem1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GksxRowData</span>();</span><br><span class="line">    problem1.setProblemTypeDesc(<span class="string">&quot;集团巡视审计专项检查&quot;</span>);</span><br><span class="line">    problem1.setNum(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    problem1.setProblemContent(<span class="string">&quot;测试问题描述1&quot;</span>);</span><br><span class="line">    problem1.setProblemScore(BigDecimal.ONE);</span><br><span class="line">    problem1.setTypeOneSize(<span class="number">4</span>);</span><br><span class="line">    problem1.setTypeTwoSize(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">GksxRowData</span> <span class="variable">problem2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GksxRowData</span>();</span><br><span class="line">    problem2.setProblemTypeDesc(<span class="string">&quot;集团巡视审计专项检查&quot;</span>);</span><br><span class="line">    problem2.setNum(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    problem2.setProblemContent(<span class="string">&quot;测试问题描述2&quot;</span>);</span><br><span class="line">    problem2.setProblemScore(BigDecimal.ONE);</span><br><span class="line">    problem2.setTypeOneSize(<span class="number">1</span>);</span><br><span class="line">    problem2.setTypeTwoSize(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">GksxRowData</span> <span class="variable">problem3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GksxRowData</span>();</span><br><span class="line">    problem3.setProblemTypeDesc(<span class="string">&quot;集团巡视审计专项检查&quot;</span>);</span><br><span class="line">    problem3.setNum(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    problem3.setProblemContent(<span class="string">&quot;测试问题描述3&quot;</span>);</span><br><span class="line">    problem3.setProblemScore(BigDecimal.ONE);</span><br><span class="line"></span><br><span class="line">    <span class="type">GksxRowData</span> <span class="variable">problem4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GksxRowData</span>();</span><br><span class="line">    problem4.setProblemTypeDesc(<span class="string">&quot;集团巡视审计专项检查&quot;</span>);</span><br><span class="line">    problem4.setNum(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">    problem4.setProblemContent(<span class="string">&quot;测试问题描述4&quot;</span>);</span><br><span class="line">    problem4.setProblemScore(BigDecimal.ONE);</span><br><span class="line"></span><br><span class="line">    <span class="type">GksxRowData</span> <span class="variable">problem5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GksxRowData</span>();</span><br><span class="line">    problem5.setProblemTypeDesc(<span class="string">&quot;集团研发专项检查&quot;</span>);</span><br><span class="line">    problem5.setNum(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">    problem5.setProblemContent(<span class="string">&quot;测试问题描述5&quot;</span>);</span><br><span class="line">    problem5.setProblemScore(BigDecimal.ONE);</span><br><span class="line"></span><br><span class="line">    <span class="type">GksxRowData</span> <span class="variable">problem6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GksxRowData</span>();</span><br><span class="line">    problem6.setProblemTypeDesc(<span class="string">&quot;集团研发专项检查&quot;</span>);</span><br><span class="line">    problem6.setNum(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">    problem6.setProblemContent(<span class="string">&quot;测试问题描述6&quot;</span>);</span><br><span class="line">    problem6.setProblemScore(BigDecimal.ONE);</span><br><span class="line"></span><br><span class="line">    <span class="type">GksxRowData</span> <span class="variable">problem7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GksxRowData</span>();</span><br><span class="line">    problem7.setProblemTypeDesc(<span class="string">&quot;合计&quot;</span>);</span><br><span class="line">    <span class="comment">//problem7.setNum(&quot;合计&quot;);</span></span><br><span class="line">    problem7.setProblemContent(<span class="string">&quot;合计&quot;</span>);</span><br><span class="line">    problem7.setProblemScore(BigDecimal.valueOf(<span class="number">8.8</span>));</span><br><span class="line"></span><br><span class="line">    List&lt;GksxRowData&gt; problemList = Arrays.asList(problem1, problem2, problem3,problem4,</span><br><span class="line">            problem5, problem6, problem7);</span><br><span class="line"></span><br><span class="line">    <span class="type">GksxTableData</span> <span class="variable">gksxTableData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GksxTableData</span>();</span><br><span class="line">    gksxTableData.setGksxRowDataList(problemList);</span><br><span class="line"></span><br><span class="line">    <span class="type">JxWordExport</span> <span class="variable">jxWordExport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JxWordExport</span>();</span><br><span class="line">    jxWordExport.setGksxTable(gksxTableData);</span><br><span class="line">    <span class="comment">//HashMap&lt;String,Object&gt; hashMap = new HashMap&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//hashMap.put(&quot;gksxTable&quot;,gksxTableData);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开始渲染</span></span><br><span class="line">    <span class="type">Configure</span> <span class="variable">config</span> <span class="operator">=</span> Configure.builder().bind(<span class="string">&quot;gksxTable&quot;</span>, <span class="keyword">new</span> <span class="title class_">TemplateGksxTablePolicy</span>()).build();</span><br><span class="line">    <span class="type">XWPFTemplate</span> <span class="variable">template</span> <span class="operator">=</span> XWPFTemplate.compile(filePath, config).render(jxWordExport);</span><br><span class="line">    <span class="comment">//XWPFTemplate template = XWPFTemplate.compile(filePath, config).render(hashMap);</span></span><br><span class="line">    template.writeToFile(targetPath);</span><br></pre></td></tr></table></figure>
<p><strong>生成效果如下：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/2f41c46438d05ab7bb66234dc76a3bea.png" alt="在这里插入图片描述"></p>
<h2 id="注意点"><a class="header-anchor" href="#注意点"></a>注意点</h2>
<ul>
<li>1、上面例子中，实体类GksxTableData对应整个表格数据，里面也可以有多个list，且render方法只会处理里面的list属性。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GksxTableData</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 待渲染的数据 (扣分详细+合计)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;GksxRowData&gt; gksxRowDataList;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> List&lt;GksxRowData&gt; testList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/c3016c17a28c1136249e9d345cf431e0.png" alt="在这里插入图片描述"><br>
<strong>testList也可以接收到，官方文档中的收费单案例就是这样实现的。</strong></p>
<ul>
<li>
<p>2、JxWordExport(也可以不用实体类，使用HashMap替代)中的表格属性名必须和模板中的属性值相同。若行数据实体类属性添加@Name注解，则取注解的名字。</p>
</li>
<li>
<p>3、1.10.X版本中，RowRenderData获取不到文本数据了。<br>
可以参考上面的案例，根据实际数据生成RowRenderData，这样代码扩展性也更强。</p>
</li>
<li>
<p>4、表格行从head头开始算，头为0</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表格行从head头开始算，头为0</span></span><br><span class="line">table.insertNewTableRow(startRow);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://deepoove.com/poi-tl/1.10.x/#plugin-dynamic-table">官方文档</a>、<a href="https://blog.csdn.net/qq_21526409/article/details/131150664">poi-tl导出word复杂表格</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot映射URL访问本地文件</title>
    <url>/2023/04/02/springBoot_maps_urls/</url>
    <content><![CDATA[<h2 id="SpringBoot映射URL访问本地文件"><a class="header-anchor" href="#SpringBoot映射URL访问本地文件"></a>SpringBoot映射URL访问本地文件</h2>
<h3 id="基本实现"><a class="header-anchor" href="#基本实现"></a>基本实现</h3>
<p><strong>实现WebMvcConfigurer 接口，重写addResourceHandlers方法即可实现。</strong></p>
<span id="more"></span>
<p><strong>参考代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;accessFile.resourceHandler&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String resourceHandler; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;accessFile.accessFilePath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessFilePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置静态资源映射</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 匹配到resourceHandler,将URL映射至accessFilePath（即本地文件夹）</span></span><br><span class="line">        <span class="comment">// registry.addResourceHandler(&quot;/files/**&quot;).addResourceLocations(&quot;file:E:/files/&quot;);</span></span><br><span class="line">        registry.addResourceHandler(resourceHandler).addResourceLocations(<span class="string">&quot;file:///&quot;</span> + accessFilePath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p><strong>举例：</strong><br>
resourceHandler 配置为/files/**，accessFilePath配置为E:/files/。<br>
那么页面请求 <strong>ip:端口/context-path/files/需要访问的文件</strong>,即可访问到本地磁盘E:/files/下面的同名文件。<br>
<strong>特别注意：</strong></p>
<ul>
<li><strong>accessFilePath必须以&quot;/&quot;结尾，否则映射不到。</strong></li>
</ul>
<h3 id="中文资源名称无法访问，英文名正常"><a class="header-anchor" href="#中文资源名称无法访问，英文名正常"></a>中文资源名称无法访问，英文名正常</h3>
<p><strong>解决办法一：重写configurePathMatch方法，UrlPathHelper设置不decodeurl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class="line">    UrlPathHelper urlPathHelper=<span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>();</span><br><span class="line">    urlPathHelper.setUrlDecode(<span class="literal">false</span>);</span><br><span class="line">    urlPathHelper.setDefaultEncoding(StandardCharsets.UTF_8.name());</span><br><span class="line">    configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>解决办法二：增加配置文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">pathmatch:</span></span><br><span class="line">      <span class="attr">matching-strategy:</span> <span class="string">ant-path-matcher</span></span><br></pre></td></tr></table></figure>
<p><strong>这个方案适用于SpringBoot 2.6.+，而公司项目用的版本是2.7.+，使用上面的方法并没有生效。</strong></p>
<h3 id="文件预览-解决方案"><a class="header-anchor" href="#文件预览-解决方案"></a>文件预览-解决方案</h3>
<p>由于访问服务器文件的方式不安全，且现在中文文件访问报错解决不了，最终重新写了一个文件下载接口，前端根据返回的文件流进行预览展示。<br>
<strong>参考代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Operation(summary = &quot;在线预览pdf&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/onlinePreview&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onlinePreview</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@NotEmpty(message = &quot;id不能为空&quot;)</span> String id, HttpServletResponse response)</span> &#123;</span><br><span class="line">    jxOrgFileRecordService.onlinePreview(id,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onlinePreview</span><span class="params">(String id, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、查询数据是否存在</span></span><br><span class="line">    <span class="type">JxOrgFileRecordEntity</span> <span class="variable">dbFileRecordVo</span> <span class="operator">=</span> jxOrgFileRecordMapper.selectById(id);</span><br><span class="line">    <span class="keyword">if</span>(dbFileRecordVo == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;未查询到报告记录数据。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、拼接服务器文件全路径：wordPath+year+pdfName</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">pdfName</span> <span class="operator">=</span> dbFileRecordVo.getPdfPath().substring(dbFileRecordVo.getPdfPath().lastIndexOf(<span class="string">&quot;/&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">fullPath</span> <span class="operator">=</span> wordPath+File.separator+year+File.separator+pdfName;</span><br><span class="line">    <span class="comment">// 3、服务器文件是否存在</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fullPath);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;onlinePreview 文件全路径：&#123;&#125;&quot;</span>,fullPath);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;文件：&#123;&#125;不存在。&quot;</span>,pdfName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4、返回文件流</span></span><br><span class="line">    <span class="comment">// 直接在try()中创建流对象 会默认关闭</span></span><br><span class="line">    <span class="keyword">try</span>( <span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">        <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[input.available()];</span><br><span class="line">        <span class="keyword">while</span> (input.read(data) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        response.getOutputStream().write(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">       log.error(<span class="string">&quot;onlinePreview pdf文件处理异常：&quot;</span>,ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot校验List失效解决方法</title>
    <url>/2023/11/26/springBoot_valid_list/</url>
    <content><![CDATA[<h2 id="SpringBoot校验List失效解决方法"><a class="header-anchor" href="#SpringBoot校验List失效解决方法"></a>SpringBoot校验List失效解决方法</h2>
<p><strong>失效场景示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/v1/jx/flowSummary&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JxFlowSummaryController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;批量修改原始得分&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/updateScore&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseDto <span class="title function_">batchUpdateScore</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> List&lt;BatchUpdateScoreDto&gt; dtoList)</span> &#123;</span><br><span class="line">        <span class="comment">// jxFlowSummaryService.batchUpdateScore(dtoList);</span></span><br><span class="line">        <span class="keyword">return</span> ResponseUtil.wrapSuccess(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>解决方法一：在controller上加上@Validated注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/v1/jx/flowSummary&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JxFlowSummaryController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;批量修改原始得分&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/updateScore&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseDto <span class="title function_">batchUpdateScore</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> List&lt;BatchUpdateScoreDto&gt; dtoList)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseUtil.wrapSuccess(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>解决方法一：校验效果如下</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/4a74bbd1d7fc3180c3e809adf1eff294.png" alt="在这里插入图片描述"></p>
<p><strong>解决方法二：自定义实现一个ValidatedList，接口参数使用ValidatedList</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义校验list</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liquanhong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2023/11/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidatedList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.contains(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> list.toArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">return</span> list.toArray(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.add(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.containsAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.addAll(index, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.removeAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.retainAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        list.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.set(index, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        list.add(index, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.indexOf(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.lastIndexOf(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.listIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.listIterator(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;E&gt; <span class="title function_">subList</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.subList(fromIndex, toIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// List改为了 ValidatedList</span></span><br><span class="line"><span class="meta">@Operation(summary = &quot;批量修改原始得分&quot;)</span></span><br><span class="line"> <span class="meta">@PostMapping(&quot;/updateScore&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> ResponseDto <span class="title function_">batchUpdateScore</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> ValidatedList&lt;BatchUpdateScoreDto&gt; dtoList)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> ResponseUtil.wrapSuccess(<span class="literal">null</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><strong>解决方法二：校验效果如下</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/fc750e684b0379af2acacb6d6097502d.png" alt="在这里插入图片描述"></p>
<h2 id="附：校验基本数据类型和String类型的方法参数时也需要在类上加-Validated"><a class="header-anchor" href="#附：校验基本数据类型和String类型的方法参数时也需要在类上加-Validated"></a>附：校验基本数据类型和String类型的方法参数时也需要在类上加@Validated</h2>
<p><a href="https://blog.csdn.net/cherrish_1991/article/details/119342061">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring缓存、JetCache使用学习</title>
    <url>/2023/04/03/spring_cachable_jetCache/</url>
    <content><![CDATA[<h2 id="Spring缓存相关注解"><a class="header-anchor" href="#Spring缓存相关注解"></a>Spring缓存相关注解</h2>
<h3 id="Cacheable注解"><a class="header-anchor" href="#Cacheable注解"></a>@Cacheable注解</h3>
<p><strong>对于一个使用@Cacheable标注的方法，Spring会在其被调用后将其返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。</strong><br>
<strong>cacheNames和value这两个属性任意使用一个都可以，且必须指定，否则会报错。它们的作用可以理解为key的前缀。</strong></p>
<p><strong>1、key和value都指定</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(key = &quot;&#x27;testKey&#x27;&quot;, value = &quot;testValue&quot;)</span></span><br></pre></td></tr></table></figure>
<p>生成的Redis键格式为：<strong>testValue::testKey</strong></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/f2a552a52bea3bc07d8e865f951f446f.png" alt="在这里插入图片描述"></p>
<p><strong>2、key和cacheNames都指定</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = &#123;&quot;testNames&quot;,&quot;testNamesTwo&quot;&#125;, key = &quot;&#x27;testKey&#x27;&quot;)</span></span><br></pre></td></tr></table></figure>
<p>会生成多个Redis键，格式为：<strong>testNames::testKey</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/7a408825af53df8a59ed20e8166b2cf9.png" alt="在这里插入图片描述"></p>
<span id="more"></span>
<p><strong>3、只指定value</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = &quot;testValue&quot;)</span></span><br></pre></td></tr></table></figure>
<p>生成的Redis键格式为：<strong>testValue::SimpleKey []</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/b7eb41fcc0023c3f83f320bb0d0beffb.png" alt="在这里插入图片描述"></p>
<p><strong>4、可以取传过来的方法参数作为key</strong><br>
<strong>示例代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = &#123;&quot;user&quot;&#125;,key = &quot;#id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Member <span class="title function_">findById</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> memberMapper.selectByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：key需要在双引号里加单引号。value不需要加单引号。</strong></p>
<h3 id="CacheEvict注解"><a class="header-anchor" href="#CacheEvict注解"></a>@CacheEvict注解</h3>
<p><strong>1、清除指定key的缓存</strong><br>
一般来说，我们的更新操作只需要刷新缓存中某一个值，所以定义缓存的key值的方式就很重要，最好是能够唯一，因为这样可以准确的清除掉特定的缓存，而不会影响到其它缓存值。<br>
<strong>示例代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(key = &quot;&#x27;testKey&#x27;&quot;, value = &quot;testValue&quot;)</span></span><br></pre></td></tr></table></figure>
<p><strong>2、清除所有缓存</strong><br>
allEntries是boolean类型，表示是否需要清除缓存中的所有元素。默认为false，表示不需要。当指定了allEntries为true时，Spring Cache将忽略指定的key。<br>
<strong>示例代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(value = &quot;testValue&quot;,allEntries=true)</span></span><br></pre></td></tr></table></figure>
<h3 id="CacheConfig注解"><a class="header-anchor" href="#CacheConfig注解"></a>@CacheConfig注解</h3>
<p>作用在类上，相当于给该类下面所所有@Cacheable注解添加cacheNames属性。<br>
<strong>示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheConfig(cacheNames=&#123;&quot;vote-achievement&quot;&#125;)</span></span><br></pre></td></tr></table></figure>
<h3 id="CachePut-不适用"><a class="header-anchor" href="#CachePut-不适用"></a>@CachePut (不适用)</h3>
<p><strong>对于一个使用 @CachePut标注的方法，Spring在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。</strong><br>
@CachePut也可以标注在类上和方法上。使用@CachePut时我们可以指定的属性跟@Cacheable是一样的。</p>
<h2 id="自定义缓存过期时间"><a class="header-anchor" href="#自定义缓存过期时间"></a>自定义缓存过期时间</h2>
<p><strong>1、创建一个自定义的缓存管理器，继承自RedisCacheManager</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomRedisCacheManager</span> <span class="keyword">extends</span> <span class="title class_">RedisCacheManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomRedisCacheManager</span><span class="params">(RedisCacheWriter cacheWriter, RedisCacheConfiguration defaultCacheConfiguration)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cacheWriter, defaultCacheConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写createRedisCache方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 原来的name只是作为redis存储键名</span></span><br><span class="line"><span class="comment">     *             重写的name可通过&quot;#&quot;拼接过期时间：</span></span><br><span class="line"><span class="comment">     *             1. 如果没有&quot;#&quot;则默认不设置过期时间</span></span><br><span class="line"><span class="comment">     *             2. 拼接的第一个&quot;#&quot;后面为过期时间，第二个&quot;#&quot;后面为时间单位</span></span><br><span class="line"><span class="comment">     *             3. 时间单位的表示使用: d(天)、h(小时)、m(分钟)、s(秒), 默认为h(小时)</span></span><br><span class="line"><span class="comment">     *            示例： vote-time#30#s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cacheConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> RedisCache <span class="title function_">createRedisCache</span><span class="params">(String name, RedisCacheConfiguration cacheConfig)</span> &#123;</span><br><span class="line">        <span class="comment">// 解析name,设置过期时间</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotEmpty(name) &amp;&amp; name.contains(<span class="string">&quot;#&quot;</span>)) &#123;</span><br><span class="line">            String[] split = name.split(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">            <span class="comment">// 缓存键名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">cacheName</span> <span class="operator">=</span> split[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">// &quot;#&quot;后第一位是时间</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">expire</span> <span class="operator">=</span> Integer.parseInt(split[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 过期时间，默认为h(小时)</span></span><br><span class="line">            <span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.ofHours(expire);</span><br><span class="line">            <span class="comment">// 根据&quot;#&quot;后第二位字符判断过期时间的单位，设置相应的过期时间，默认时间单位是h(小时)</span></span><br><span class="line">            <span class="keyword">if</span> (split.length == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (split[<span class="number">2</span>])&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;d&quot;</span>:</span><br><span class="line">                        duration = Duration.ofDays(expire);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;m&quot;</span>:</span><br><span class="line">                        duration = Duration.ofMinutes(expire);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;s&quot;</span>:</span><br><span class="line">                        duration = Duration.ofSeconds(expire);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        duration = Duration.ofHours(expire);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.createRedisCache(cacheName, cacheConfig.entryTtl(duration));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.createRedisCache(name, cacheConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2、在redis配置类中，将上面自定义的缓存管理器注册为Bean</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实例化自定义的缓存管理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@SuppressWarnings(value = &#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> RedisCacheManager <span class="title function_">redisCacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> &#123;</span><br><span class="line">	<span class="type">RedisCacheWriter</span> <span class="variable">redisCacheWriter</span> <span class="operator">=</span> RedisCacheWriter.nonLockingRedisCacheWriter(Objects.requireNonNull(redisTemplate.getConnectionFactory()));</span><br><span class="line">	<span class="type">RedisCacheConfiguration</span> <span class="variable">redisCacheConfiguration</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">			.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(redisTemplate.getValueSerializer()));</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomRedisCacheManager</span>(redisCacheWriter, redisCacheConfiguration);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3、使用示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(key = &quot;&#x27;list&#x27;&quot;, value = &quot;vote-achievement#20#s&quot;)</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_45390035/article/details/126932285">参考链接</a>、<a href="https://zhuanlan.zhihu.com/p/560218399">参考链接</a></p>
<h2 id="碰到问题"><a class="header-anchor" href="#碰到问题"></a>碰到问题</h2>
<p>Redis反序列化时报错&quot;Could not read JSON: Cannot construct instance of  java.util.ArrayList$SubList&quot;<br>
解决：<br>
1、在对应的实体类中加无参构造方法(非必须)<br>
2、ArrayList.subList方法返回的对象是一个sublist类型的视图，这个sublist类型的是ArrayList的一个内部类，不支持序列化。解决方法也是挺简单的，重新创建一个实现序列化的List,将截取后的list存入，从而实现可序列化。<br>
示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原错误代码</span></span><br><span class="line">bannerList = bannerList.subList(<span class="number">0</span>, SLIDING_SIZE);</span><br><span class="line"><span class="comment">// 修改后的正确代码</span></span><br><span class="line">bannerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(bannerList.subList(<span class="number">0</span>, SLIDING_SIZE));</span><br></pre></td></tr></table></figure>
<h2 id="JetCache使用学习"><a class="header-anchor" href="#JetCache使用学习"></a>JetCache使用学习</h2>
<p>JetCache中Redis的键值规则为：<strong>area+name+key</strong>。area和key可以不指定。</p>
<p><strong>若不指定key,默认用所有方法参数值作为Key</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实际Redis的Key：home-page::patent-list[&quot;2019&quot;]。其中[]为数组，拼接所有参数值</span></span><br><span class="line"><span class="meta">@Cached(name = &quot;home-page::patent-list&quot;,expire =1, timeUnit = TimeUnit.HOURS)</span></span><br></pre></td></tr></table></figure>
<p><strong>指定key(支持Spring Spel表达式)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实际Redis的Key：home-page::patent-list2019，其中awardYear为方法的参数</span></span><br><span class="line"><span class="meta">@Cached(name = &quot;home-page::patent-list&quot;,key = &quot;#awardYear&quot;,expire =1, timeUnit = TimeUnit.HOURS)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际Redis的Key：home-page::patent-list-20192022，其中awardYear、outYear为方法的参数</span></span><br><span class="line"><span class="meta">@Cached(name = &quot;home-page::patent-list&quot;,key = &quot;(&#x27;-&#x27;).concat(#awardYear).concat(#outYear)&quot;,expire =1, timeUnit = TimeUnit.HOURS)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际Redis的Key：home-page::patent-list2019，其中args[0]为方法的第一个参数</span></span><br><span class="line"><span class="meta">@Cached(name = &quot;home-page::patent-list&quot;,key = &quot;args[0]&quot;,expire =1, timeUnit = TimeUnit.HOURS)</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_46228112/article/details/124763709">Spring Spel表达式学习链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>JetCache</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马程序员索引学习笔记</title>
    <url>/2023/11/26/study_it_heimei_mysql_index/</url>
    <content><![CDATA[<h2 id="索引的分类"><a class="header-anchor" href="#索引的分类"></a>索引的分类</h2>
<h3 id="从索引字段特性"><a class="header-anchor" href="#从索引字段特性"></a>从索引字段特性</h3>
<p><strong>主键索引、唯一索引、常规索引、全文索引</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/721cd7e68833cfdd28044ce4797dc668.jpeg#pic_center" alt="在这里插入图片描述"></p>
<span id="more"></span>
<h3 id="从物理存储"><a class="header-anchor" href="#从物理存储"></a>从物理存储</h3>
<p><strong>聚簇(集)索引、二级索引</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/74a7bc9b2254fecde9dbb9e3b5bc69ff.jpeg#pic_center" alt="在这里插入图片描述"></p>
<h3 id="从数据结构"><a class="header-anchor" href="#从数据结构"></a>从数据结构</h3>
<p><strong>B+树索引、Hash索引、全文索引</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>InnoDB</th>
<th>MyISAM</th>
<th>Memory</th>
</tr>
</thead>
<tbody>
<tr>
<td>B+ tree索引</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Hash索引</td>
<td>No</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>Full-text索引</td>
<td>Yes</td>
<td>Yes</td>
<td>No</td>
</tr>
</tbody>
</table>
<h3 id="组成索引的字段个数"><a class="header-anchor" href="#组成索引的字段个数"></a>组成索引的字段个数</h3>
<p><strong>单列索引、联合索引</strong></p>
<h2 id="InnoDB主键索的B-tree高度为多高呢"><a class="header-anchor" href="#InnoDB主键索的B-tree高度为多高呢"></a>InnoDB主键索的B+tree高度为多高呢?</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/f0967cfba6e4e9701df40575abe8c83d.jpeg" alt="在这里插入图片描述"><br>
<strong>图片中n表示主键个数，n+1表示指针数量。</strong></p>
<h2 id="explain执行计划"><a class="header-anchor" href="#explain执行计划"></a>explain执行计划</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/0940cfd0c8fa149c7f09df33a0b363b7.jpeg" alt="在这里插入图片描述"></p>
<h2 id="最左匹配原则"><a class="header-anchor" href="#最左匹配原则"></a>最左匹配原则</h2>
<ul>
<li>如果索引了多列(联合索引)，要遵守最左前缀法则。</li>
<li>最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。</li>
<li>如果跳跃某一列，索引将部分失效(后面的字段索引失效)。</li>
<li>范围查询(不含等于)后面的字段不走索引。</li>
</ul>
<p><strong>注：查询字段存在即可和sql顺序无关</strong></p>
<h2 id="索引失效情况"><a class="header-anchor" href="#索引失效情况"></a>索引失效情况</h2>
<ul>
<li>在索引字段上进行运算</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> <span class="built_in">substring</span>(phone, <span class="number">10</span>, <span class="number">2</span>) <span class="operator">=</span> <span class="string">&#x27;15&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串类型字段使用时，不加引号</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 此处phone的值没有加引号</span></span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="number">17799990015</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>头部模糊查询(即%在前面)匹配</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 此处%在前面</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="keyword">like</span> <span class="string">&#x27;%工程&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>用or分割开的条件，其中某一列没有索引，那么涉及的索引都不会被用到。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 必须id和name都有索引，才可以用到索引</span></span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_achievement_application <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">66</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果MySQL评估使用索引比全表更慢，则不使用索引。(参考范围查询、is null、is not null)<br>
is null、is not null是否走索引取决于表中的数据分布。</li>
</ul>
<h2 id="SQL提示"><a class="header-anchor" href="#SQL提示"></a>SQL提示</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/6f1ce448b9fee79835ef4d3208897168.png" alt="在这里插入图片描述"><br>
其中 use是建议MySQL用这个索引</p>
<h2 id="覆盖索引、回表查询"><a class="header-anchor" href="#覆盖索引、回表查询"></a>覆盖索引、回表查询</h2>
<p>尽量使用覆盖索引(查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到)，减少select *。</p>
<p><strong>Extra列描述</strong><br>
NULL： 需要回表查询<br>
using index condition :    查找使用了索引，但是需要回表查询数据<br>
using where; using index : 查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/4df08226240fc62d22150cabd1a72e8d.png" alt="在这里插入图片描述"><br>
username、password建立联合索引，避免回表查询。</p>
<h2 id="前缀索引"><a class="header-anchor" href="#前缀索引"></a>前缀索引</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/87af9ce4fd0c4f337b860b8f52e7e1cd.png" alt="在这里插入图片描述"></p>
<h2 id="索引设计原则"><a class="header-anchor" href="#索引设计原则"></a>索引设计原则</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d95ca97c8e1faa2d83fd306d1a7a71ec.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java BigDecimal学习</title>
    <url>/2023/04/08/java_bigdecimal_study/</url>
    <content><![CDATA[<h2 id="Java-BigDecimal不损失精度的方法"><a class="header-anchor" href="#Java-BigDecimal不损失精度的方法"></a>Java BigDecimal不损失精度的方法</h2>
<p><strong>1、调用valueOf()方法(推荐)<br>
2、调用构造方法BigDecimal(String)</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/2d378ac83e3fb5e2f8a8854e7996dbe7.png" alt="在这里插入图片描述"></p>
<span id="more"></span>
<h2 id="Java-BigDecimal的几种舍入模式"><a class="header-anchor" href="#Java-BigDecimal的几种舍入模式"></a>Java BigDecimal的几种舍入模式</h2>
<h3 id="1、UP-BigDecimal-ROUND-UP"><a class="header-anchor" href="#1、UP-BigDecimal-ROUND-UP"></a>1、UP(BigDecimal.ROUND_UP)</h3>
<ul>
<li>向绝对值最大的方向舍入</li>
<li>只要舍弃位非0即进位</li>
</ul>
<h3 id="2、DOWN-BigDecimal-ROUND-DOWN"><a class="header-anchor" href="#2、DOWN-BigDecimal-ROUND-DOWN"></a>2、DOWN(BigDecimal.ROUND_DOWN)</h3>
<ul>
<li>向绝对值最小的方向输入</li>
<li>所有的位都舍弃，不存在进位情况。</li>
</ul>
<h3 id="3、CEILING-BigDecimal-ROUND-CEILING"><a class="header-anchor" href="#3、CEILING-BigDecimal-ROUND-CEILING"></a>3、CEILING(BigDecimal.ROUND_CEILING)</h3>
<ul>
<li>天花板数：正数变大，负数也是变大。即正得越多，负得越少。</li>
<li>正数，只要舍弃位非0即进位，同UP。负数，所有的位都舍弃，不存在进位情况，同DOWN。</li>
<li>Math.round方法使用的即为此模式。</li>
</ul>
<h3 id="4、FLOOR-BigDecimal-ROUND-FLOOR"><a class="header-anchor" href="#4、FLOOR-BigDecimal-ROUND-FLOOR"></a>4、FLOOR(BigDecimal.ROUND_FLOOR)</h3>
<ul>
<li>地板数：正数变小，负数也是变小。即正得越少，负得越多。</li>
<li>正数，所有的位都舍弃，不存在进位情况，同DOWN。负数，只要舍弃位非0即进位，同UP。</li>
</ul>
<h3 id="5、HALF-UP-BigDecimal-ROUND-HALF-UP"><a class="header-anchor" href="#5、HALF-UP-BigDecimal-ROUND-HALF-UP"></a>5、HALF_UP(BigDecimal.ROUND_HALF_UP)</h3>
<p>最近数字舍入(5舍)。经典的四舍五入，5是进位。</p>
<h3 id="6、HALF-DOWN-BigDecimal-ROUND-HALF-DOWN"><a class="header-anchor" href="#6、HALF-DOWN-BigDecimal-ROUND-HALF-DOWN"></a>6、HALF_DOWN(BigDecimal.ROUND_HALF_DOWN)</h3>
<p>最近数字舍入(5舍)。HALF_DOWN中5是舍弃不进位。</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.5 </span></span><br><span class="line"><span class="comment">// 舍弃位为5，舍弃位后的数字为0</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">sum</span> <span class="operator">=</span> BigDecimal.valueOf(<span class="number">5.550</span>).setScale(<span class="number">1</span>,BigDecimal.ROUND_HALF_DOWN);</span><br><span class="line"><span class="comment">// 5.6 </span></span><br><span class="line"><span class="comment">// 舍弃位为5，舍弃位后的数字非0</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">sum</span> <span class="operator">=</span> BigDecimal.valueOf(<span class="number">5.551</span>).setScale(<span class="number">1</span>,BigDecimal.ROUND_HALF_DOWN);</span><br><span class="line"><span class="comment">// 5.6</span></span><br><span class="line"><span class="comment">// 舍弃位为5，舍弃位后的数字非0</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">sum</span> <span class="operator">=</span> BigDecimal.valueOf(<span class="number">5.55001</span>).setScale(<span class="number">1</span>,BigDecimal.ROUND_HALF_DOWN);</span><br><span class="line"><span class="comment">// -5.6</span></span><br><span class="line"><span class="comment">// 舍弃位为5，舍弃位后的数字非0</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">sum</span> <span class="operator">=</span> BigDecimal.valueOf(-<span class="number">5.55001</span>).setScale(<span class="number">1</span>,BigDecimal.ROUND_HALF_DOWN);</span><br></pre></td></tr></table></figure>
<h3 id="7、HALF-EVEN-BigDecimal-ROUND-HALF-EVEN"><a class="header-anchor" href="#7、HALF-EVEN-BigDecimal-ROUND-HALF-EVEN"></a>7、HALF_EVEN(BigDecimal.ROUND_HALF_EVEN)</h3>
<p>银行家算法。<br>
四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一。</p>
<h3 id="8、UNNECESSARY-BigDecimal-ROUND-UNNECESSARY"><a class="header-anchor" href="#8、UNNECESSARY-BigDecimal-ROUND-UNNECESSARY"></a>8、UNNECESSARY(BigDecimal.ROUND_UNNECESSARY)</h3>
<p>断言请求的操作具有精确的结果，因此不需要舍入。<br>
如果对获得精确结果的操作指定此舍入模式，则抛出ArithmeticException。</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抛出ArithmeticException 只有1位小数时不会报错</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">sum</span> <span class="operator">=</span> BigDecimal.valueOf(-<span class="number">5.81</span>).setScale(<span class="number">1</span>,BigDecimal.ROUND_UNNECESSARY);</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/xnkjdx105/article/details/124213231">参考链接</a></p>
<h2 id="Java-BigDecimal不同模式下的舍入操作举例汇总"><a class="header-anchor" href="#Java-BigDecimal不同模式下的舍入操作举例汇总"></a>Java BigDecimal不同模式下的舍入操作举例汇总</h2>
<p><strong>输入给定数字，保留1位数的结果如下：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">输入数字</th>
<th style="text-align:center">UP</th>
<th style="text-align:center">DOWN</th>
<th style="text-align:center">CEILING</th>
<th style="text-align:center">FLOOR</th>
<th style="text-align:center">HALF_UP</th>
<th style="text-align:center">HALF_DOWN</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1.34</td>
<td style="text-align:center">1.4</td>
<td style="text-align:center">1.3</td>
<td style="text-align:center">1.4</td>
<td style="text-align:center">1.3</td>
<td style="text-align:center">1.3</td>
<td style="text-align:center">1.3</td>
</tr>
<tr>
<td style="text-align:center">1.35</td>
<td style="text-align:center">1.4</td>
<td style="text-align:center">1.3</td>
<td style="text-align:center">1.4</td>
<td style="text-align:center">1.3</td>
<td style="text-align:center">1.4</td>
<td style="text-align:center">1.3</td>
</tr>
<tr>
<td style="text-align:center">1.36</td>
<td style="text-align:center">1.4</td>
<td style="text-align:center">1.3</td>
<td style="text-align:center">1.4</td>
<td style="text-align:center">1.3</td>
<td style="text-align:center">1.4</td>
<td style="text-align:center">1.4</td>
</tr>
<tr>
<td style="text-align:center">-1.34</td>
<td style="text-align:center">-1.4</td>
<td style="text-align:center">-1.3</td>
<td style="text-align:center">-1.3</td>
<td style="text-align:center">-1.4</td>
<td style="text-align:center">-1.3</td>
<td style="text-align:center">-1.3</td>
</tr>
<tr>
<td style="text-align:center">-1.35</td>
<td style="text-align:center">-1.4</td>
<td style="text-align:center">-1.3</td>
<td style="text-align:center">-1.3</td>
<td style="text-align:center">-1.4</td>
<td style="text-align:center">-1.4</td>
<td style="text-align:center">-1.3</td>
</tr>
<tr>
<td style="text-align:center">-1.351</td>
<td style="text-align:center">-1.4</td>
<td style="text-align:center">-1.3</td>
<td style="text-align:center">-1.3</td>
<td style="text-align:center">-1.4</td>
<td style="text-align:center">-1.4</td>
<td style="text-align:center">-1.4</td>
</tr>
<tr>
<td style="text-align:center">-1.36</td>
<td style="text-align:center">-1.4</td>
<td style="text-align:center">-1.3</td>
<td style="text-align:center">-1.3</td>
<td style="text-align:center">-1.4</td>
<td style="text-align:center">-1.4</td>
<td style="text-align:center">-1.4</td>
</tr>
</tbody>
</table>
<h2 id="Java-BigDecimal进行除法运算报异常"><a class="header-anchor" href="#Java-BigDecimal进行除法运算报异常"></a>Java BigDecimal进行除法运算报异常</h2>
<h3 id="问题现象"><a class="header-anchor" href="#问题现象"></a>问题现象</h3>
<p><strong>执行下面的代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;777.77&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">avg</span> <span class="operator">=</span> sum.divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;15&quot;</span>));</span><br><span class="line">System.out.println(avg);</span><br></pre></td></tr></table></figure>
<p><strong>报错：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</span><br><span class="line">	at java.math.BigDecimal.divide(BigDecimal.java:1693)</span><br><span class="line">	at com.chuenhung.Test.main(Test.java:9)</span><br></pre></td></tr></table></figure>
<h3 id="原因分析"><a class="header-anchor" href="#原因分析"></a>原因分析</h3>
<p><strong>BigDecimal进行除法运算时，准确的商可能是一个无限长的小数，如果此时没有指定舍入模式，就会报ArithmeticException。</strong><br>
上面的777.77除以15的结果是个无限循环小数，而没有指定舍入模式，所以报错。</p>
<h3 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h3>
<p>调divide(divisor, scale, roundingMode);方法，其中scale为保留位数，roundingMode为舍入模式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">avg</span> <span class="operator">=</span> sum.divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;15&quot;</span>),<span class="number">3</span>,BigDecimal.ROUND_DOWN);</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_45692705/article/details/124091531">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(十二)</title>
    <url>/2023/05/02/coding_notes_twelve/</url>
    <content><![CDATA[<h2 id="PostConstruct注解"><a class="header-anchor" href="#PostConstruct注解"></a>@PostConstruct注解</h2>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.aspirecn.external.reward&quot;&#125;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.aspirecn.external.reward.mapper&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExternalRewardConfiguration</span> &#123;</span><br><span class="line">   <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;自动装配ExternalRewardConfiguration&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/sunayn/article/details/92840439">参考链接</a></p>
<span id="more"></span>
<h2 id="Mybatis的mapper-locations配置"><a class="header-anchor" href="#Mybatis的mapper-locations配置"></a>Mybatis的mapper-locations配置</h2>
<ul>
<li>当mapper接口和mapper接口对应的配置文件在命名上相同、所在的路径相同时，则mapper-locations可以不用配置，配置也不会生效。</li>
<li>当mapper接口和mapper接口对应的配置文件在命名上不相同、或者所在的路径不相同时，需要配置mapper-locations才能实现接口的绑定</li>
</ul>
<p><strong>YML文件配置参考：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper<span class="comment">/*Mapper.xml,classpath*:com/reward/promotion/mapper/*.xml</span></span><br></pre></td></tr></table></figure>
<p><strong>mapper和xml对应不上会报错：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Invalid bound <span class="title function_">statement</span> <span class="params">(not found)</span>: com.reward.promotion.mapper.CompanyRecordMapper.queryRecordList</span><br></pre></td></tr></table></figure>
<h2 id="JsonFormat实现原理"><a class="header-anchor" href="#JsonFormat实现原理"></a>@JsonFormat实现原理</h2>
<p><a href="https://www.jianshu.com/p/1031c09da1db">参考链接</a></p>
<h2 id="IDEA-String-Manipulation插件使用及设置快捷键"><a class="header-anchor" href="#IDEA-String-Manipulation插件使用及设置快捷键"></a>IDEA String Manipulation插件使用及设置快捷键</h2>
<p><strong>设置步骤演示：</strong><br>
1、快捷键&quot;ALT+M&quot; -&gt; Switch Case -&gt; Open Settings -&gt; 增加&quot;小写下划线转驼峰&quot;操作<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/b1adc9f8ce958ac529e7eb7946850c8d.png#pic_center" alt="在这里插入图片描述"><br>
2、打开IDEA设置 -&gt; 点击Keymap -&gt; 搜索&quot;小写下划线转驼峰&quot; -&gt; 将快捷键设置为&quot;ALT+SHIFT+U&quot;<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/e70ad064b58471032cc19b390e3be034.png#pic_center" alt="在这里插入图片描述"><br>
<strong>注意：版本9以后才实现了&quot;小写下划线snake_case&quot;功能</strong><br>
<a href="http://www.360doc.com/content/22/0620/23/10087950_1036801812.shtml">参考链接</a></p>
<h2 id="在Windows中测试服务器端口是否开放"><a class="header-anchor" href="#在Windows中测试服务器端口是否开放"></a>在Windows中测试服务器端口是否开放</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">命令语法：telnet 服务器id 服务器端口</span><br><span class="line">示例命令：telnet <span class="number">10.12</span><span class="number">.7</span><span class="number">.181</span> <span class="number">9098</span></span><br></pre></td></tr></table></figure>
<h2 id="Centos开放端口"><a class="header-anchor" href="#Centos开放端口"></a>Centos开放端口</h2>
<p>1、开启防火墙<br>
systemctl start firewalld<br>
2、开放某个端口<br>
firewall-cmd --zone=public --add-port=6379/tcp --permanent<br>
其中zone表示作用域，参数permanent表示永久生效<br>
3、重启防火墙<br>
firewall-cmd --reload</p>
<h2 id="Nginx常用配置详解"><a class="header-anchor" href="#Nginx常用配置详解"></a>Nginx常用配置详解</h2>
<p><a href="https://blog.csdn.net/qq_50909707/article/details/123817709">参考链接</a></p>
<h2 id="Nginx里面的路径定位关键词root、alias"><a class="header-anchor" href="#Nginx里面的路径定位关键词root、alias"></a>Nginx里面的路径定位关键词root、alias</h2>
<p>1、root：设置请求的根目录。是最上层目录的意思。<br>
处理结果为：<strong>root路径+location路径</strong>。<br>
2、alias：用来更改location的路径。是目录别名的意思。<br>
处理结果为：<strong>使用alias路径替换location路径</strong>。<br>
3、如果location路径是以/结尾,则alias也必须是以/结尾，root没有要求。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/64b64d4bad538fc0922210f55c548fd8.png#pic_center" alt="参考图片"><br>
<a href="https://www.cnblogs.com/xiongzaiqiren/p/16969984.html">参考链接</a></p>
<h2 id="zuul里面的prefix-和-strip-prefix学习"><a class="header-anchor" href="#zuul里面的prefix-和-strip-prefix学习"></a>zuul里面的prefix 和 strip-prefix学习</h2>
<p>1、strip-prefix<br>
true 移除前缀 false 不移除(增加)前缀<br>
2、strip-prefix可用于全局配置和zuul.prefix结合使用<br>
strip-prefix可用于路由配置和zuul.routes.routeName.path结合使用</p>
<p>从2.8路由前缀开始看就好，前面的例子举得不太好。<br>
<a href="https://blog.csdn.net/u010953880/article/details/102977884">参考链接</a></p>
<h2 id="解决Mybatis嵌套的结果集不能被安全地转为自定义ResultHandler"><a class="header-anchor" href="#解决Mybatis嵌套的结果集不能被安全地转为自定义ResultHandler"></a>解决Mybatis嵌套的结果集不能被安全地转为自定义ResultHandler</h2>
<p><strong>报错信息：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.ExecutorException: Mapped Statements with nested result mappings cannot be safely used with a custom ResultHandler. Use safeResultHandlerEnabled=<span class="literal">false</span> setting to bypass <span class="built_in">this</span> check.</span><br></pre></td></tr></table></figure>
<p><strong>意思：不允许自定义ResultHand处理器</strong></p>
<p><strong>解决方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 增加配置：safe-result-handler-enabled: <span class="literal">false</span></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper<span class="comment">/*Mapper.xml</span></span><br><span class="line"><span class="comment">  configuration:</span></span><br><span class="line"><span class="comment">    call-setters-on-nulls: true</span></span><br><span class="line"><span class="comment">    safe-result-handler-enabled: false</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.10k.cn/article/9025.html">参考链接</a></p>
<h2 id="Mybatis中文文档"><a class="header-anchor" href="#Mybatis中文文档"></a>Mybatis中文文档</h2>
<p><a href="https://mybatis.org/mybatis-3/zh/index.html">参考链接</a></p>
<h2 id="TortoiseGit-TortoiseGit中文语言包详细安装使用教程-windows版"><a class="header-anchor" href="#TortoiseGit-TortoiseGit中文语言包详细安装使用教程-windows版"></a>TortoiseGit+TortoiseGit中文语言包详细安装使用教程(windows版)</h2>
<p><a href="https://tortoisegit.org/download/">官方下载链接</a>、<a href="https://blog.csdn.net/m0_37467586/article/details/105075965?spm=1001.2101.3001.6650.7&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7-105075965-blog-123401492.pc_relevant_recovery_v2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7-105075965-blog-123401492.pc_relevant_recovery_v2&amp;utm_relevant_index=10">详细安装使用教程</a></p>
<h2 id="Java文件类型校验之Apache-Tika"><a class="header-anchor" href="#Java文件类型校验之Apache-Tika"></a>Java文件类型校验之Apache Tika</h2>
<p><a href="https://blog.csdn.net/qq_43602576/article/details/128645634?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-3-128645634-blog-124193512.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-3-128645634-blog-124193512.pc_relevant_default&amp;utm_relevant_index=4">Java文件类型校验之Apache Tika</a>、<a href="https://blog.csdn.net/WindNolose/article/details/124625049">Java实现流和文件的转换 将InoutStream转为File输出到磁盘</a></p>
<h2 id="Jackson解析器接收JSON实体-需要这个实体有无参构造方法，否则会报错"><a class="header-anchor" href="#Jackson解析器接收JSON实体-需要这个实体有无参构造方法，否则会报错"></a>Jackson解析器接收JSON实体,需要这个实体有无参构造方法，否则会报错</h2>
<p>奖励平台动态登录时，LoginParam没有无参构造方法(@NoArgsConstructor)会报<strong>org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class com…entity</strong>错误</p>
<h2 id="Excel中数字变成E-的原因分析及两种解决方法"><a class="header-anchor" href="#Excel中数字变成E-的原因分析及两种解决方法"></a>Excel中数字变成E+的原因分析及两种解决方法</h2>
<p><strong>原因：</strong><br>
<strong>Excel中默认数字在超过11位后，就用科学计数法的显示方式。</strong></p>
<p><strong>解决方法：</strong><br>
<strong>方法一：单元格格式设置为数值，小数位数改为0</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/25032c88250cbfc07c361dc345bfafd2.gif#pic_center" alt="单元格格式设置为数值"><br>
<strong>这种方式适用于数据库导出Excel后，某些字段自动转为了科学计数法的情况。</strong><br>
<strong>保存时会提示格式不兼容，本质是文件的实际是TXT格式，需要另存为xlsx，设置的格式才有效果</strong></p>
<p><strong>方法二： 自定义单元格格式，类型设置为0</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/0bc9d088922d729649ebc6723d58bc37.gif#pic_center" alt="自定义单元格格式"><br>
这种方法适用输入的数字长度超过11位但是不超过15位，超过15位后的数字会自动变为0。</p>
<p><strong>方法三：单元格格式设置为文本</strong><br>
这种方式数字超过15位也可以正常显示，但是做数值运算会有问题。</p>
<p><a href="https://baijiahao.baidu.com/s?id=1736780614540849122&amp;wfr=spider&amp;for=pc">参考链接</a></p>
<h2 id="Excel快速对当前列下面的空单元格填充"><a class="header-anchor" href="#Excel快速对当前列下面的空单元格填充"></a>Excel快速对当前列下面的空单元格填充</h2>
<p><strong>方法一：双击单元格右下角也可以实现快速填充，填充的范围为遇到非空值。</strong><br>
效果如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/33aff8c8ef97f9987bc63ed187b7d24d.gif#pic_center" alt="在这里插入图片描述"></p>
<p>该方式适合整列都为空的情况。</p>
<p><strong>方法二：ctrl+g快捷键实现快速填充</strong><br>
步骤：选中当前列 -&gt; ctrl+g快捷键,定位 -&gt; 点击空值 -&gt; 输入要填充的值 -&gt; ctrl+回车<br>
效果如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/9d82ccf8114574308ef8452d6d919794.gif#pic_center" alt="在这里插入图片描述"></p>
<p>该方式功能更强大，支持筛选后的部分空值填充。<br>
<a href="https://zhidao.baidu.com/question/570207391877637844.html">参考链接</a></p>
<p><strong>方法三：复制单个单元格，然后拖动进度条到最后填充</strong><br>
<strong>步骤：</strong><br>
筛选出空白单元格 -&gt; 输入要填充的值 -&gt; ctrl+c,复制 -&gt; 拖动进度条到最后 -&gt; ctrl+v粘贴<br>
<strong>效果如下：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/ed3d4acd81fd96c0b684bc1f31a87417.gif#pic_center" alt="在这里插入图片描述"></p>
<h2 id="MySQL统计每分钟的记录数"><a class="header-anchor" href="#MySQL统计每分钟的记录数"></a>MySQL统计每分钟的记录数</h2>
<p><strong>原理：</strong><br>
利用unix_timestamp和floor函数，把秒转换成整数(取整)，然后对这个整数进行分组取数量。<br>
<strong>核心代码:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">floor</span>(unix_timestamp(record.create_time) <span class="operator">/</span> <span class="number">60</span>)</span><br></pre></td></tr></table></figure>
<p><strong>参考代码：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 按分钟统计投票次数</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t.create_time <span class="string">&#x27;投票时间&#x27;</span>,<span class="built_in">count</span>(t.id) <span class="string">&#x27;投票次数&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            record.id,</span><br><span class="line">            record.create_time,</span><br><span class="line">            <span class="built_in">floor</span>(</span><br><span class="line">                        UNIX_TIMESTAMP(record.create_time) <span class="operator">/</span> <span class="number">60</span></span><br><span class="line">                ) create_timestamp</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            `t_vote_user` record</span><br><span class="line">    ) <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">BY</span> t.create_timestamp</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> t.create_time;</span><br></pre></td></tr></table></figure>
<h2 id="SpringBoot项目中某些Maven依赖可以不加版本号的原因"><a class="header-anchor" href="#SpringBoot项目中某些Maven依赖可以不加版本号的原因"></a>SpringBoot项目中某些Maven依赖可以不加版本号的原因</h2>
<p>因为spring-boot-dependencies是spring-boot-starter-parent的父依赖，spring-boot-dependencies-XXX.pom中的dependencyManagement有常用依赖包的默认版本号，有助于统一版本号。<br>
所以当在Springboot项目中引入了spring-boot-starter-parent或spring-boot-dependencies，则可以不用引入依赖包版本号。<br>
如果非要想自己填写版本号也是可以的，这样会覆盖官方版本号（不建议随便修改依赖包版本号，免得版本号不兼容）。<br>
<a href="https://www.likecs.com/show-113068.html">参考链接</a></p>
<h2 id="在线SQL转Java实体工具"><a class="header-anchor" href="#在线SQL转Java实体工具"></a>在线SQL转Java实体工具</h2>
<p><a href="http://java.json.cn/generator/">参考链接</a></p>
<h2 id="EasyExcel模板填充"><a class="header-anchor" href="#EasyExcel模板填充"></a>EasyExcel模板填充</h2>
<p><strong>通用导出方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportExcelUtil</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给模板填充数据导出浏览器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> liquanhong</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2023/3/9/</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportWithTemplate</span><span class="params">(List&lt;T&gt; list, String path, String fileName, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 1、加载导入模板</span></span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(path);</span><br><span class="line">        <span class="comment">// 2、设置浏览器响应信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        dealResponse(response,newFileName);</span><br><span class="line">        <span class="comment">// 3、开始导出</span></span><br><span class="line">        <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> EasyExcel</span><br><span class="line">                .write(response.getOutputStream())</span><br><span class="line">                .withTemplate(resource.getInputStream())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="number">0</span>).build();</span><br><span class="line">        excelWriter.write(list, writeSheet);</span><br><span class="line">        excelWriter.finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/u011447403/article/details/127999451">参考链接</a>、<a href="https://maimai.cn/article/detail?fid=1744595924&amp;efid=DUhwqBhXkOoPsFN6WsUH1A">参考链接</a>、<a href="https://easyexcel.opensource.alibaba.com/docs/current/">官方文档</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Nginx</tag>
        <tag>Centos</tag>
        <tag>Zuul</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN版本回退</title>
    <url>/2023/12/09/svn_recall/</url>
    <content><![CDATA[<h2 id="SVN版本回退"><a class="header-anchor" href="#SVN版本回退"></a>SVN版本回退</h2>
<p><strong>一、revert to this version和revert changes from this version的区别：</strong><br>
<img src="https://img-blog.csdnimg.cn/direct/d1013cffbee54fcd945d92773b3307fd.png" alt="在这里插入图片描述"></p>
<span id="more"></span>
<p><strong>基于4674版本执行&quot;revert to this version&quot;操作效果：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/de82a625b2550a462b156663ac32bea3.png" alt="在这里插入图片描述"></p>
<p><strong>基于4674版本执行&quot;revert changes from this version&quot;操作效果：</strong></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d41bb5e793bf75d03f18af937423e7f3.png" alt="在这里插入图片描述"></p>
<p><strong>二、update to revision和revert to revision的区别(来源于网络未验证)：</strong></p>
<ul>
<li>revert to revision会把这个rev作为最新版本，而update to revision不会。</li>
<li>revert to revision 永久恢复到以前的某个版本（含当前版本）。</li>
<li>update to revision 临时恢复到以前的某个版本。</li>
</ul>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA中Mybatis的xml文件报错解决</title>
    <url>/2025/07/19/mybatis_error_resolution/</url>
    <content><![CDATA[<h2 id="问题现象"><a class="header-anchor" href="#问题现象"></a>问题现象</h2>
<p>IntelliJ IDEA中mybatis的xml文件报’statement expected, got ‘id’'错误，如下图所示：<br>
<img src="https://i-blog.csdnimg.cn/direct/56429258f06a4cc48580f6d2c75ae67e.png" alt="在这里插入图片描述"></p>
<h2 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h2>
<h3 id="找到Language-Injections的Mybatis相关配置"><a class="header-anchor" href="#找到Language-Injections的Mybatis相关配置"></a>找到Language Injections的Mybatis相关配置</h3>
<p><img src="https://i-blog.csdnimg.cn/direct/710913c1ce714e33a02ba86027fc355e.png" alt="在这里插入图片描述"></p>
<span id="more"></span>
<h3 id="复制这两个配置文件"><a class="header-anchor" href="#复制这两个配置文件"></a>复制这两个配置文件</h3>
<p><img src="https://i-blog.csdnimg.cn/direct/bed19300f72a4d489175bda7903fa17f.png" alt="在这里插入图片描述"></p>
<h3 id="修改新复制的配置文件"><a class="header-anchor" href="#修改新复制的配置文件"></a>修改新复制的配置文件</h3>
<p><strong>去掉最前面的sql：</strong><br>
<img src="https://i-blog.csdnimg.cn/direct/ab37756897c84685ae7788a6bb546f67.png" alt="在这里插入图片描述"></p>
<h3 id="禁用默认配置文件"><a class="header-anchor" href="#禁用默认配置文件"></a>禁用默认配置文件</h3>
<p><strong>最终效果如下：</strong><br>
<img src="https://i-blog.csdnimg.cn/direct/9aa2fe4947194a64823711e87ee147a5.png" alt="在这里插入图片描述"><br>
<strong>这样所有项目每次重启也会生效。</strong></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IntelliJ IDEA</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot AOP切面实现对自定义注解的属性动态修改</title>
    <url>/2023/12/09/springboot_aop_update_custom_annotation/</url>
    <content><![CDATA[<h2 id="需求"><a class="header-anchor" href="#需求"></a>需求</h2>
<p>项目中共用了一个Redis，而项目中部分代码使用了JetCache的@Cached注解。所以需要给@Cached动态配置area属性值，用来区分dev和test环境。</p>
<h2 id="问题"><a class="header-anchor" href="#问题"></a>问题</h2>
<p><strong>自定义注解的属性值需要常量值，即static final修饰，直接通过配置文件不可行。</strong></p>
<h2 id="解决方案"><a class="header-anchor" href="#解决方案"></a>解决方案</h2>
<p>1、使用AOP切面拦截使用注解的方法，动态修改注解的属性值。切面1。<br>
2、注解的底层一般也有一个AOP切面。切面2。<br>
<strong>需要确保切面1在切面2之前执行 (使用@order(int)注解，值越小越先执行)。</strong></p>
<span id="more"></span>
<h2 id="示例代码"><a class="header-anchor" href="#示例代码"></a>示例代码</h2>
<p><strong>yml配置文件：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">testAop:</span></span><br><span class="line">    <span class="attr">actionValue:</span> <span class="string">测试-10101908-action</span></span><br></pre></td></tr></table></figure>
<p><strong>切面1：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;testAop.actionValue&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String actionValue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;@annotation(webLogAnnotation)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aopTest</span><span class="params">(WebLogAnnotation webLogAnnotation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> Proxy.getInvocationHandler(webLogAnnotation);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">value</span> <span class="operator">=</span> invocationHandler.getClass().getDeclaredField( <span class="string">&quot;memberValues&quot;</span>);</span><br><span class="line">        value.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Map&lt;String,Object&gt; memberValues  = (Map&lt;String,Object&gt;) value.get(invocationHandler);</span><br><span class="line">        memberValues.put(<span class="string">&quot;action&quot;</span>, actionValue);</span><br><span class="line">        log.info(<span class="string">&quot;MyAspect.aopTest memberValues：&#123;&#125;&quot;</span>,memberValues);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>切面2：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebLogAspect</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(webLogAnnotation)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logAround</span><span class="params">(ProceedingJoinPoint joinPoint, WebLogAnnotation webLogAnnotation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// do something......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>controller：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/getList&quot;)</span></span><br><span class="line"><span class="meta">@WebLogAnnotation(logType = &quot;30010051&quot;,action = &quot;通讯录-分页查询列表action&quot;,description = &quot;&#x27;通讯录-分页查询列表desc&#x27;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PageResponseMsg&lt;AddressBookVo&gt;  <span class="title function_">getList</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> PageRequest&lt;QueryAddressBookListReq&gt; pageDto)</span>&#123;</span><br><span class="line">   <span class="comment">// do something......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经测试，WebLogAspect中成功获取到MyAspect 中修改的注解参数值。如下所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/78df579409b1416049e357728327491d.png" alt="在这里插入图片描述"><br>
<strong>遗留问题：</strong></p>
<ul>
<li>必须传入该参数才可以获取到修改后的值</li>
<li>通过反射方法method.getAnnotation(WebLogAnnotation.class)获取到的是原始值。若@Cached底层也是通过反射实现，则修改不了。</li>
</ul>
<p><a href="https://blog.csdn.net/sgl520lxl/article/details/111326155">通过反射动态修改自定义注解属性值</a>、<a href="https://juejin.cn/post/7049253464349605924">SpringBoot实现对自定义注解的切面</a>、<a href="https://blog.csdn.net/l1006841574/article/details/103722949?spm=1001.2101.3001.6650.6&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-6-103722949-blog-119613680.235%5Ev38%5Epc_relevant_anti_t3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-6-103722949-blog-119613680.235%5Ev38%5Epc_relevant_anti_t3&amp;utm_relevant_index=13">自定义注解属性动态赋值</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(十九)</title>
    <url>/2025/07/19/coding_notes_ninteen/</url>
    <content><![CDATA[<h2 id="Mysql给查询记录增加序列号"><a class="header-anchor" href="#Mysql给查询记录增加序列号"></a>Mysql给查询记录增加序列号</h2>
<h3 id="使用变量"><a class="header-anchor" href="#使用变量"></a>使用变量</h3>
<p><strong>示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@row_number</span> :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> (<span class="variable">@row_number</span>:<span class="operator">=</span><span class="variable">@row_number</span> <span class="operator">+</span> <span class="number">1</span>) <span class="keyword">AS</span> serial_number, t.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table) <span class="keyword">AS</span> t;</span><br></pre></td></tr></table></figure>
<h3 id="使用使用ROW-NUMBER-OVER-窗口函数"><a class="header-anchor" href="#使用使用ROW-NUMBER-OVER-窗口函数"></a>使用使用ROW_NUMBER() OVER()窗口函数</h3>
<p>需要MySQL版本8.0以上<br>
<strong>示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> some_column) <span class="keyword">AS</span> serial_number, <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> your_table;</span><br></pre></td></tr></table></figure>
<p>在这个查询中，<code>ROW_NUMBER()</code>函数根据<code>some_column</code>列的排序来为每行生成一个序列号。</p>
<span id="more"></span>
<h2 id="SpringBoot加载配置类的流程"><a class="header-anchor" href="#SpringBoot加载配置类的流程"></a>SpringBoot加载配置类的流程</h2>
<p>包含：<br>
1、SpringBoot加载配置的流程（简化）<br>
2、@ComponScan和@Import注解的作用<br>
3、@SpringBootApplication注解原理<br>
4、SpringFactories机制</p>
<p><a href="https://blog.csdn.net/yzx3105/article/details/127080639">参考链接</a></p>
<h2 id="maven-compiler-plugin"><a class="header-anchor" href="#maven-compiler-plugin"></a>maven-compiler-plugin</h2>
<p>Maven打包并不一定必须要显式引入maven-compiler-plugin依赖，因为Maven的超级POM（Super POM）已经默认包含了这个插件的基本配置。当您执行Maven构建时，即使在项目的pom.xml中没有明确声明maven-compiler-plugin，Maven仍然会在构建生命周期的compile阶段尝试编译源代码。</p>
<p>不过，虽然不是“必须”手动引入，但在许多实际场景下，我们往往会针对特定的Java编译版本、源代码和目标字节码版本、或者额外的编译器参数进行自定义配置。在这种情况下，就需要在项目的pom.xml文件中显式地声明并配置maven-compiler-plugin，以确保项目按照期望的方式和环境进行编译。</p>
<p>例如，如果您正在使用非默认的Java版本，或者想要启用特定的编译器特性，就必须在pom.xml中配置maven-compiler-plugin以适应这些需求。以下是配置示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	   <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven.compiler.plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">compilerArgument</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">compilerArgument</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/8cd012b114ca8161f5ab20a8346b01b9.png" alt="在这里插入图片描述"></p>
<h2 id="maven默认打包方式"><a class="header-anchor" href="#maven默认打包方式"></a>maven默认打包方式</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/5edfb67a4562c4decc3cebf6f345c381.png" alt="在这里插入图片描述"></p>
<h2 id="Git根据标签创建新的分支"><a class="header-anchor" href="#Git根据标签创建新的分支"></a>Git根据标签创建新的分支</h2>
<p><strong>语法如下：</strong><br>
git checkout -b 新的分支名 标签名</p>
<h2 id="springCloud-Gateway-StripPrefix和PrefixPath过滤器的区别"><a class="header-anchor" href="#springCloud-Gateway-StripPrefix和PrefixPath过滤器的区别"></a>springCloud Gateway StripPrefix和PrefixPath过滤器的区别</h2>
<p><a href="https://blog.csdn.net/u010101193/article/details/115725600?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Spring%20Cloud%20GateWay%20%E8%B7%AF%E7%94%B1%E7%9A%84StripP&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~sobaiduweb~default-0-115725600.nonecase&amp;spm=1018.2226.3001.4450">参考链接</a></p>
<h2 id="Git-cherry-pick命令"><a class="header-anchor" href="#Git-cherry-pick命令"></a>Git cherry-pick命令</h2>
<p>命令作用：从分支A挑选一个或多个特定的commit，并将这些提交应用到分支B上。可以快速修复某些问题，而不需要合并整个分支代码。</p>
<h2 id="MySQL-正则表达式匹配"><a class="header-anchor" href="#MySQL-正则表达式匹配"></a>MySQL 正则表达式匹配</h2>
<p>MySQL中的REGEXP操作符，允许使用正则表达式来匹配字符串数据。</p>
<p>示例：<br>
– 匹配包含&quot;4&quot;的数据<br>
SELECT *<br>
FROM t_external_award_apply<br>
WHERE strategy_domain REGEXP ‘“4”’;<br>
正则表达式匹配效果：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/4ba762e02c1c079346a96d760fcb6bfa.png" alt="在这里插入图片描述"></p>
<h2 id="Mybatis查询数据为null时，返回情况总结"><a class="header-anchor" href="#Mybatis查询数据为null时，返回情况总结"></a>Mybatis查询数据为null时，返回情况总结</h2>
<ul>
<li>返回类型为<strong>集合类型</strong>，返回一个空集合(大小为0，非null)，[不会]抛空指针异常</li>
<li>返回类型为<strong>基本类型(int、long)</strong>，[会]抛空指针异常。</li>
<li>返回类型为<strong>基本类型的包装类型(Integer、Long)</strong>，返回null</li>
</ul>
<h2 id="使用Jackson把JSON字符串转为List"><a class="header-anchor" href="#使用Jackson把JSON字符串转为List"></a>使用Jackson把JSON字符串转为List</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 转为JSON字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(list);<span class="comment">// list为java对象</span></span><br><span class="line">    List&lt;RepetitionRateVo&gt; list = objectMapper.readValue(jsonString, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;&gt;()&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListResult</span>&lt;&gt;(list);</span><br><span class="line">&#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用Fastjson把JSON字符串转为List"><a class="header-anchor" href="#使用Fastjson把JSON字符串转为List"></a>使用Fastjson把JSON字符串转为List</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转为JSON字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(list); <span class="comment">// list为java对象</span></span><br><span class="line">List&lt;RepetitionRateVo&gt; list =  JSONObject.parseArray(jsonString ,RepetitionRateVo.class);</span><br></pre></td></tr></table></figure>
<h2 id="Transactional注解失效的场景"><a class="header-anchor" href="#Transactional注解失效的场景"></a>@Transactional注解失效的场景</h2>
<ul>
<li>非public修饰的方法；</li>
<li>注解的timeout设置过小；</li>
<li>代码中使用 try/catch处理异常,并且没有抛出新异常</li>
<li>方法没有加@Transactional，调用类内部的@Transactional方法</li>
<li>bean没有被Spring管理(即类没有加@service、@component注解)</li>
<li>数据库不支持事务</li>
</ul>
<h2 id="解决Git删除本地文件无法重新从远程拉取该文件的问题"><a class="header-anchor" href="#解决Git删除本地文件无法重新从远程拉取该文件的问题"></a>解决Git删除本地文件无法重新从远程拉取该文件的问题</h2>
<p>执行下面的命令，然后重新拉取即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_43265355/article/details/136645091">参考链接</a></p>
<h2 id="Windows10操作用户的一些命令"><a class="header-anchor" href="#Windows10操作用户的一些命令"></a>Windows10操作用户的一些命令</h2>
<p><strong>WIN+R运行:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 启用/关闭管理员账户</span><br><span class="line">net user administrator /active:<span class="built_in">yes</span></span><br><span class="line">net user administrator /active:no</span><br><span class="line">// 可以新增、修改、删除用户</span><br><span class="line">netplwiz</span><br></pre></td></tr></table></figure>
<h2 id="绿豆沙护眼色"><a class="header-anchor" href="#绿豆沙护眼色"></a>绿豆沙护眼色</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RGB <span class="number">204</span> <span class="number">232</span> <span class="number">207</span></span><br></pre></td></tr></table></figure>
<h2 id="SpringBoot-ConfigurationProperties注解注入的属性为null"><a class="header-anchor" href="#SpringBoot-ConfigurationProperties注解注入的属性为null"></a>SpringBoot @ConfigurationProperties注解注入的属性为null</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;activity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String reviewObjectStartTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String reviewObjectEndTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String expertReviewStartTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String expertReviewEndTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer reviewObjectLimit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原因：类中没有set方法。<br>
解决方法：类中加入@Data注解</p>
<p>和这个依赖没有关系(不加也可以注入成功)：</p>
<!--和这个依赖没有关系(不加也可以注入成功)-->
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="中文顿号分割字符串正则表达式"><a class="header-anchor" href="#中文顿号分割字符串正则表达式"></a>中文顿号分割字符串正则表达式</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">^(?!、)([^、]+、)*[^、]+(?!、)$</span><br></pre></td></tr></table></figure>
<p>正确的示例：网络、无线、IT、业务<br>
错误的示例：网络、无线、IT、业务、<br>
错误的示例：、网络、无线、IT、业务<br>
错误的示例：网络、、无线、IT、业务</p>
<h2 id="Maven命令"><a class="header-anchor" href="#Maven命令"></a>Maven命令</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Maven查看所有定义的配置文件</span><br><span class="line">mvn <span class="built_in">help</span>:all-profiles</span><br><span class="line">// 显示当前构建中激活的所有配置文件 (idea勾选了也没有打印出来，需要启动/打包的时候才生效？)</span><br><span class="line">mvn <span class="built_in">help</span>:active-profiles</span><br></pre></td></tr></table></figure>
<h2 id="RedissonClient加锁、释放锁示例代码"><a class="header-anchor" href="#RedissonClient加锁、释放锁示例代码"></a>RedissonClient加锁、释放锁示例代码</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;FormalAudit-&quot;</span>+dbAchievementApplication.getCode());</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="comment">// 尝试加锁</span></span><br><span class="line">	<span class="keyword">if</span> (lock.tryLock(<span class="number">300</span>, <span class="number">20000</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">			</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		log.info(<span class="string">&quot;线程:&#123;&#125;未获取到锁&quot;</span>,Thread.currentThread().getName());</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">	log.error(<span class="string">&quot;执行异常:&#123;&#125;&quot;</span>, e.getMessage(),e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	<span class="comment">//释放锁</span></span><br><span class="line">	<span class="keyword">if</span> (lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">		log.info(<span class="string">&quot;线程:&#123;&#125;准备释放锁,执行业务逻辑消耗时间&#123;&#125;&quot;</span>,Thread.currentThread().getName(),System.currentTimeMillis()- start);</span><br><span class="line">		lock.unlock();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Git设置代理命令"><a class="header-anchor" href="#Git设置代理命令"></a>Git设置代理命令</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看代理</span><br><span class="line">git config --global http.proxy</span><br><span class="line"></span><br><span class="line">// 设置代理</span><br><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global https.proxy https://127.0.0.1:7890</span><br><span class="line"></span><br><span class="line">// 取消代理</span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>
<h2 id="查询MySQL数据库的默认字符集和排序规则"><a class="header-anchor" href="#查询MySQL数据库的默认字符集和排序规则"></a>查询MySQL数据库的默认字符集和排序规则</h2>
<p><strong>奖励现网查询出的和工具显示的不一致，工具是对的</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME </span><br><span class="line"><span class="keyword">FROM</span> information_schema.SCHEMATA </span><br><span class="line"><span class="keyword">WHERE</span> SCHEMA_NAME <span class="operator">=</span> <span class="string">&#x27;数据库名&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="查询MySQL数据库所有表字段的字符集和排序规则"><a class="header-anchor" href="#查询MySQL数据库所有表字段的字符集和排序规则"></a>查询MySQL数据库所有表字段的字符集和排序规则</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, CHARACTER_SET_NAME, COLLATION_NAME</span><br><span class="line"><span class="keyword">FROM</span> information_schema.COLUMNS</span><br><span class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;your_database_name&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;your_table_name&#x27;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>MySQL</tag>
        <tag>IntelliJ IDEA</tag>
        <tag>Maven</tag>
        <tag>Springboot</tag>
        <tag>Windows</tag>
        <tag>Mybatis</tag>
        <tag>SpringCloud</tag>
        <tag>Redission</tag>
      </tags>
  </entry>
  <entry>
    <title>WPS表格导入CSV文件(适合处理数据库导出数据)</title>
    <url>/2025/03/18/wps_import_csv/</url>
    <content><![CDATA[<h2 id="问题现象"><a class="header-anchor" href="#问题现象"></a>问题现象</h2>
<p>使用DBeaver等数据库管理工具导出CSV文件，使用WPS表格打开后默认显示科学计数法，手动改为文本格式也会使数据错误。问题如下所示：<br>
<strong>原始数据：</strong><br>
<img src="https://i-blog.csdnimg.cn/direct/027fd688d50a45c4a3cd2ba7f004e618.png" alt="在这里插入图片描述"></p>
<span id="more"></span>
<p><strong>默认打开显示效果：</strong><br>
<img src="https://i-blog.csdnimg.cn/direct/4141c8cb563c410b8ba999f5d87a7734.png" alt="在这里插入图片描述"></p>
<p><strong>修改为文本后显示效果：</strong><br>
<img src="https://i-blog.csdnimg.cn/direct/9c1645affa004dd2a85c5e7982031885.png" alt="在这里插入图片描述"><br>
由此可知，数据显示错误。</p>
<h2 id="解决方法：使用WPS表格导入CSV文件"><a class="header-anchor" href="#解决方法：使用WPS表格导入CSV文件"></a>解决方法：使用WPS表格导入CSV文件</h2>
<h3 id="第一步：建一个空的Excel文件"><a class="header-anchor" href="#第一步：建一个空的Excel文件"></a>第一步：建一个空的Excel文件</h3>
<h3 id="第二步：导入CSV文件"><a class="header-anchor" href="#第二步：导入CSV文件"></a>第二步：导入CSV文件</h3>
<p><img src="https://i-blog.csdnimg.cn/direct/54abf7b50efc41e38a70be4fd4355da6.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/direct/d6ae5a37f64b4b31acc67542fd3358d6.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/direct/4fa3b93e93ed4948b484604299cfd2f0.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/direct/302e9c2e66c84cad9c55e4e6e32125aa.png" alt="在这里插入图片描述"><br>
注意数据预览这儿也需要选为<strong>文本</strong>。<br>
<img src="https://i-blog.csdnimg.cn/direct/6155d547c2824c83bda56411a9829b1e.png" alt="在这里插入图片描述"></p>
<h3 id="显示效果"><a class="header-anchor" href="#显示效果"></a>显示效果</h3>
<p><img src="https://i-blog.csdnimg.cn/direct/0572b989637845c09c9fae7c156a4101.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>WPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Alibaba Nacos 2023.X 配置问题</title>
    <url>/2025/03/18/spring_cloud_alibaba_nacos_2023.X_config/</url>
    <content><![CDATA[<h2 id="问题现象（一）"><a class="header-anchor" href="#问题现象（一）"></a>问题现象（一）</h2>
<p>Spring Cloud Alibaba  Nacos 2022.X 可以使用extension-configs属性读取多个nacos配置文件，配置示例文件如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">groupinnovation</span></span><br><span class="line">	</span><br><span class="line"><span class="attr">spring.cloud.nacos:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxx</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">$&#123;nacos.namespace:dev&#125;</span> <span class="comment"># 可以读取环境变量配置</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 默认为true，可以不配</span></span><br><span class="line">    <span class="attr">refresh-enabled:</span> <span class="literal">true</span> <span class="comment"># 默认为true，可以不配</span></span><br><span class="line">    <span class="attr">fileExtension:</span> <span class="string">yml</span></span><br><span class="line">    <span class="attr">extension-configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">groupinnovation-database.yml</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">$&#123;spring.cloud.nacos.config.group&#125;</span></span><br><span class="line">        <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">groupinnovation.yml</span> <span class="comment"># 默认会读取(应用名一致的配置文件)，手动配置方便维护</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">$&#123;spring.cloud.nacos.config.group&#125;</span></span><br><span class="line">        <span class="attr">refresh:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>但是在2023.X版本中配置extension-configs属性会报错(启动项目也读取不到配置文件)，如下图所示：</strong></p>
<span id="more"></span>
<p><img src="https://i-blog.csdnimg.cn/direct/1db9748fbc0e4f9cb685b46fda6989f9.png" alt="在这里插入图片描述"></p>
<h2 id="解决方法（一）"><a class="header-anchor" href="#解决方法（一）"></a>解决方法（一）</h2>
<p><strong>1、使用spring.config.import属性导入配置</strong><br>
<strong>2、username、password、server-addr需要改为和config同级，即用户名密码注册中心、配置中心公用。</strong><br>
参考spring-configuration-metadata.json，其他属性(namespace、group、refresh-enabled等)没有公用配置。</p>
<p>配置示例如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">groupinnovation</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.nacos:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">$&#123;nacos.namespace:groupinnovation-dev&#125;</span> <span class="comment"># 可以读取环境变量配置</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">$&#123;nacos.namespace:groupinnovation-dev&#125;</span> <span class="comment"># 可以读取环境变量配置</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">    <span class="attr">refresh-enabled:</span> <span class="literal">true</span> <span class="comment"># 默认为true，可以不配</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.config:</span></span><br><span class="line">  <span class="attr">import:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nacos:groupinnovation.yml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nacos:groupinnovation-database.yml</span></span><br></pre></td></tr></table></figure>
<h2 id="问题现象（二）"><a class="header-anchor" href="#问题现象（二）"></a>问题现象（二）</h2>
<p><strong>引入spring-cloud-starter-bootstrap依赖，并且未在bootstrap.yml中配置</strong>，启动项目报logback相关错误：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: Logback configuration error detected: </span><br><span class="line">ERROR in ch.qos.logback.core.rolling.RollingFileAppender[CONFIG_LOG_FILE] - <span class="string">&#x27;File&#x27;</span> option has the same value <span class="string">&quot;C:\Users\xxx/logs/nacos/config.log&quot;</span> as that given <span class="keyword">for</span> appender [CONFIG_LOG_FILE] defined earlier.</span><br><span class="line">ERROR in ch.qos.logback.core.rolling.RollingFileAppender[CONFIG_LOG_FILE] - Collisions detected with FileAppender/RollingAppender instances defined earlier. Aborting.</span><br><span class="line">ERROR in ch.qos.logback.core.rolling.RollingFileAppender[CONFIG_LOG_FILE] - For more information, please visit http:<span class="comment">//logback.qos.ch/codes.html#earlier_fa_collision</span></span><br><span class="line">ERROR in ch.qos.logback.core.rolling.RollingFileAppender[NAMING_LOG_FILE] - <span class="string">&#x27;File&#x27;</span> option has the same value <span class="string">&quot;C:\Users\xxx/logs/nacos/naming.log&quot;</span> as that given <span class="keyword">for</span> appender [NAMING_LOG_FILE] defined earlier.</span><br><span class="line">ERROR in ch.qos.logback.core.rolling.RollingFileAppender[NAMING_LOG_FILE] - Collisions detected with FileAppender/RollingAppender instances defined earlier. Aborting.</span><br><span class="line">ERROR in ch.qos.logback.core.rolling.RollingFileAppender[NAMING_LOG_FILE] - For more information, please visit http:<span class="comment">//logback.qos.ch/codes.html#earlier_fa_collision</span></span><br><span class="line">ERROR in ch.qos.logback.core.rolling.RollingFileAppender[REMOTE_LOG_FILE] - <span class="string">&#x27;File&#x27;</span> option has the same value <span class="string">&quot;C:\Users\xxx/logs/nacos/remote.log&quot;</span> as that given <span class="keyword">for</span> appender [REMOTE_LOG_FILE] defined earlier.</span><br><span class="line">ERROR in ch.qos.logback.core.rolling.RollingFileAppender[REMOTE_LOG_FILE] - Collisions detected with FileAppender/RollingAppender instances defined earlier. Aborting.</span><br><span class="line">ERROR in ch.qos.logback.core.rolling.RollingFileAppender[REMOTE_LOG_FILE] - For more information, please visit http:<span class="comment">//logback.qos.ch/codes.html#earlier_fa_collision</span></span><br><span class="line">	at org.springframework.boot.logging.logback.LogbackLoggingSystem.reportConfigurationErrorsIfNecessary(LogbackLoggingSystem.java:<span class="number">277</span>)</span><br></pre></td></tr></table></figure>
<h2 id="解决方法（二）"><a class="header-anchor" href="#解决方法（二）"></a>解决方法（二）</h2>
<p><strong>实际和LogBack配置没有任何关系，nacos相关的配置文件写在bootstrap.yml就可以了</strong>。<br>
<strong>在Spring Cloud Alibaba Nacos 2022.X没有这个问题，即写在application.yml也可以正常启动。</strong></p>
<h2 id="问题现象（三）"><a class="header-anchor" href="#问题现象（三）"></a>问题现象（三）</h2>
<p>Spring Cloud Alibaba Nacos 2023.X，SpringBoot 3.2.X 项目引入jasypt-spring-boot-starter 2.1.1后，nacos的账号、密码信息没法解密，spring.config.import中的配置导入失败。<br>
<strong>问题原因：连接nacos前，jasypt没有完成解密</strong></p>
<h2 id="解决方法（三）"><a class="header-anchor" href="#解决方法（三）"></a>解决方法（三）</h2>
<p>未找到jasypt相关解决方法，从环境变量中配置nacos的密码解决。<br>
<img src="https://i-blog.csdnimg.cn/direct/e9b60d2ab2d34db3aa0d19d9dbbf9a9d.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Nacos</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(十八)</title>
    <url>/2025/01/03/coding_notes_eighteen/</url>
    <content><![CDATA[<h2 id="MySQL索引命名规范、索引使用规范"><a class="header-anchor" href="#MySQL索引命名规范、索引使用规范"></a>MySQL索引命名规范、索引使用规范</h2>
<p><strong>索引命名规范：</strong></p>
<ul>
<li>索引名必须全部使用小写。</li>
<li>非唯一索引按照“idx_字段名称[_字段名称]”进用行命名。例如idx_age_name。</li>
<li>唯一索引按照“uniq_字段名称[_字段名称]”进用行命名。例如uniq_age_name。</li>
<li>组合索引建议包含所有字段名,过长的字段名可以采用缩写形式。例如idx_age_name_add。</li>
</ul>
<p><strong>索引使用规范：</strong></p>
<ul>
<li>单张表中索引数量不超过5个。</li>
<li>单个索引中的字段数不超过5个。</li>
<li>表必须有主键,推荐使用UNSIGNED自增列作为主键。</li>
<li>唯一键由3个以下字段组成,并且字段都是(整)(形)(时),可使用唯一键作为主键。其他情况下,建议使用自增列或发号器作主键。</li>
<li>联表查询时,JOIN列的数据类型必须相同,关联字段要建立索引。</li>
<li>不在低基数列上建立索引,例如“性别”。</li>
<li>选择区分度大的列建立索引。组合索引中,区分度大的字段放在最前。</li>
<li>对字符串使用前缀索引,前缀索引长度不超过8个字符。</li>
<li>不对过长的VARCHAR字段建立索引。建议优先考虑前缀索引,或添加CRC32或MD5伪列并建立索引。</li>
<li>合理创建联合索引,(a,b,c) 相当于 (a) 、(a,b) 、(a,b,c)。</li>
<li>合理使用覆盖索引减少磁盘IO,避免文件系统排序。</li>
<li>禁止冗余索引。</li>
<li>禁止重复索引。</li>
<li>禁止使用外键。</li>
</ul>
<span id="more"></span>
<p><a href="https://huaweicloud.csdn.net/63355e83d3efff3090b5463a.html?spm=1001.2101.3001.6650.7&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-7-113207864-blog-109110252.235%5Ev38%5Epc_relevant_anti_t3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-7-113207864-blog-109110252.235%5Ev38%5Epc_relevant_anti_t3&amp;utm_relevant_index=13">参考链接</a></p>
<h2 id="SpringBoot使用-Lazy解决循环依赖问题"><a class="header-anchor" href="#SpringBoot使用-Lazy解决循环依赖问题"></a>SpringBoot使用@Lazy解决循环依赖问题</h2>
<p>@Lazy注解可以用于延迟初始化Bean，从而避免循环依赖。当一个Bean被标记为@Lazy时，它将在第一次使用时才被初始化。</p>
<p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringBoot循环依赖的6种解决方案"><a class="header-anchor" href="#SpringBoot循环依赖的6种解决方案"></a>SpringBoot循环依赖的6种解决方案</h2>
<p><a href="https://blog.csdn.net/lisheng19870305/article/details/134001752?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=SpringBoot%20allowCircularRefere&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~sobaiduweb~default-0-134001752.142%5Ev96%5Epc_search_result_base6&amp;spm=1018.2226.3001.4450">参考链接</a></p>
<h2 id="Nginx超时时间设置"><a class="header-anchor" href="#Nginx超时时间设置"></a>Nginx超时时间设置</h2>
<p>1、send_timeout?<br>
发送数据至客户端超时, 默认60s, 如果连续的60s内客户端没有收到1个字节, 连接关闭<br>
2、proxy_connect_timeout<br>
Nginx与upstream server的连接超时时间<br>
3、proxy_read_timeout<br>
Nginx接收upstream server数据超时, 默认60s, 如果连续的60s内没有收到1个字节, 连接关闭<br>
4、proxy_send_timeout<br>
Nginx发送数据至upstream server超时, 默认60s, 如果连续的60s内没有发送1个字节, 连接关闭</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d117c7098a3e92f36f66f9125250c7a8.png" alt="在这里插入图片描述"></p>
<p><strong>这几个配置放在location、server、http都可以，Nginx会取最小值。</strong><br>
<strong>windows环境超时时间配置无效，原因未知</strong></p>
<p><a href="https://www.cnblogs.com/lemon-flm/p/8352194.html">参考链接</a>、<a href="https://blog.csdn.net/weixin_44188105/article/details/129612184?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-129612184-blog-82863698.235%5Ev38%5Epc_relevant_anti_t3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">参考链接</a></p>
<h2 id="Linux统计当前文件夹下的文件个数、目录个数"><a class="header-anchor" href="#Linux统计当前文件夹下的文件个数、目录个数"></a>Linux统计当前文件夹下的文件个数、目录个数</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 统计当前文件夹下文件的个数，不包括子文件夹里的</span><br><span class="line"><span class="built_in">ls</span> -l |grep <span class="string">&quot;^-&quot;</span>|<span class="built_in">wc</span> -l</span><br><span class="line">// 统计当前文件夹下文件的个数，包括子文件夹里的</span><br><span class="line"><span class="built_in">ls</span> -lR|grep <span class="string">&quot;^-&quot;</span>|<span class="built_in">wc</span> -l</span><br><span class="line">// 统计当前文件夹下目录(子文件夹)的个数，不包括子文件夹里的</span><br><span class="line"><span class="built_in">ls</span> -l |grep <span class="string">&quot;^d&quot;</span>|<span class="built_in">wc</span> -l</span><br><span class="line">// 统计文件夹下目录(子文件夹)的个数，包括子文件夹里的</span><br><span class="line"><span class="built_in">ls</span> -lR|grep <span class="string">&quot;^d&quot;</span>|<span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong><br>
<strong>ls -l :</strong><br>
长列表输出当前文件夹下文件信息(注意这里的文件，不同于一般的文件，可能是目录、链接、设备文件等);<br>
<strong>grep “^-”  :</strong><br>
这里将长列表输出信息过滤一部分，只保留一般文件，如果只保留目录就是 ^d<br>
<strong>wc -l  :</strong><br>
统计输出信息的行数，因为已经过滤得只剩一般文件了，所以统计结果就是一般文件信息的行数，又由于一行信息对应一个文件，所以也就是文件的个数。</p>
<h2 id="Linux查看内存使用情况命令"><a class="header-anchor" href="#Linux查看内存使用情况命令"></a>Linux查看内存使用情况命令</h2>
<p>1、free -h<br>
2、cat /proc/meminfo<br>
3、top</p>
<p><a href="https://blog.csdn.net/renfufei/article/details/105851728">参考链接</a></p>
<h2 id="Git更换远程仓库地址"><a class="header-anchor" href="#Git更换远程仓库地址"></a>Git更换远程仓库地址</h2>
<p><a href="https://www.jianshu.com/p/d79f59da6ec6">参考链接</a></p>
<h2 id="TPS、QPS、RT、吞吐量、最佳线程数量的理解"><a class="header-anchor" href="#TPS、QPS、RT、吞吐量、最佳线程数量的理解"></a>TPS、QPS、RT、吞吐量、最佳线程数量的理解</h2>
<p><a href="https://blog.csdn.net/shipfei_csdn/article/details/103225517?spm=1001.2101.3001.6650.5&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-5-103225517-blog-117917333.235%5Ev39%5Epc_relevant_3m_sort_dl_base2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-5-103225517-blog-117917333.235%5Ev39%5Epc_relevant_3m_sort_dl_base2&amp;utm_relevant_index=10">性能指标：QPS、TPS、系统吞吐量理解</a>、<a href="https://blog.csdn.net/a745233700/article/details/117917333">两分钟读懂什么是TPS和QPS</a></p>
<h2 id="MySQL多表联合更新"><a class="header-anchor" href="#MySQL多表联合更新"></a>MySQL多表联合更新</h2>
<p><strong>示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> jx_org_sequence_grade g, sys_org_tbl o</span><br><span class="line"><span class="keyword">set</span>  g.org_id <span class="operator">=</span> o.id </span><br><span class="line"><span class="keyword">where</span> g.org_name <span class="operator">=</span> o.name;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/u012604745/article/details/80642015?spm=1001.2014.3001.5506">参考链接</a></p>
<h2 id="Spring和mybatis中-Param注解的区别"><a class="header-anchor" href="#Spring和mybatis中-Param注解的区别"></a>Spring和mybatis中@Param注解的区别</h2>
<p><a href="https://blog.csdn.net/wangooo/article/details/109878948">参考链接</a></p>
<h2 id="Spring-jedis集群配置"><a class="header-anchor" href="#Spring-jedis集群配置"></a>Spring jedis集群配置</h2>
<p><strong>配置文件：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># reids配置</span></span><br><span class="line"><span class="attr">spring.redis:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">cxhl-dev</span></span><br><span class="line">  <span class="attr">cluster:</span></span><br><span class="line">    <span class="attr">nodes:</span> <span class="number">10.12</span><span class="number">.12</span><span class="number">.222</span><span class="string">:6379,10.12.12.222:6380,10.12.12.222:6381</span> <span class="comment">#集群节点</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">ENC(BTYyu7j+9vA+v+0lEL388NGzQvU1J8I/)</span>     <span class="comment">#密码</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">jedis:</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">10</span>  <span class="comment">#连接池最大连接数</span></span><br><span class="line">      <span class="attr">max-idle:</span> <span class="number">8</span>     <span class="comment">#连接池中最大空闲连接数</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">0</span>    <span class="comment">#连接池中最小空闲数</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">5000</span>      <span class="comment">#访问超时时间</span></span><br></pre></td></tr></table></figure>
<p><strong>配置类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis缓存配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.cluster.nodes&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; nodeSet;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.timeout&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.jedis.pool.max-active&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxActive;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.jedis.pool.max-idle&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxIdle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.jedis.pool.min-idle&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> minIdle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JedisCluster <span class="title function_">redisCluster</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置redis集群的节点信息</span></span><br><span class="line">        Set&lt;HostAndPort&gt; nodes =nodeSet.stream().map(node -&gt; &#123;</span><br><span class="line">            String[] nodeInfo = node.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (nodeInfo.length == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HostAndPort</span>(nodeInfo[<span class="number">0</span>], Integer.parseInt(nodeInfo[<span class="number">1</span>]));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HostAndPort</span>(nodeInfo[<span class="number">0</span>], <span class="number">6379</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置连接池</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        jedisPoolConfig.setMaxTotal(maxActive);</span><br><span class="line">        jedisPoolConfig.setMaxIdle(maxIdle);</span><br><span class="line">        jedisPoolConfig.setMinIdle(minIdle);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建jediscluster，传入节点列表和连接池配置</span></span><br><span class="line">        <span class="type">JedisCluster</span> <span class="variable">cluster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisCluster</span>(nodes,timeout,timeout,<span class="number">3</span>, password,jedisPoolConfig);</span><br><span class="line">        log.info(<span class="string">&quot;RedisConfig 集群信息：&#123;&#125;&quot;</span>,cluster);</span><br><span class="line">        <span class="keyword">return</span> cluster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MySQL存储过程学习"><a class="header-anchor" href="#MySQL存储过程学习"></a>MySQL存储过程学习</h2>
<h3 id="游标"><a class="header-anchor" href="#游标"></a>游标</h3>
<ul>
<li><strong>局部变量定义要在游标之前</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> uname <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">declare</span> upro <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">declare</span> u_cursor <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> name,profession <span class="keyword">from</span> tb_user <span class="keyword">where</span> age <span class="operator">&lt;=</span> uage;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>把游标中获取到的值赋值给变量</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fetch</span> u_cursor <span class="keyword">into</span> uname,upro;</span><br></pre></td></tr></table></figure>
<h3 id="条件处理程序"><a class="header-anchor" href="#条件处理程序"></a>条件处理程序</h3>
<p><strong>语法：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/4655914826aa72ba6ac744994329d66f.png" alt="在这里插入图片描述"></p>
<p><strong>示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 声明条件处理程序 ： 当SQL语句执行抛出的状态码为02000时，将关闭游标u_cursor，并退出</span></span><br><span class="line"><span class="keyword">declare</span> exit handler <span class="keyword">for</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">close</span> u_cursor;</span><br></pre></td></tr></table></figure>
<h2 id="MySQL存储函数和存储过程的区别"><a class="header-anchor" href="#MySQL存储函数和存储过程的区别"></a>MySQL存储函数和存储过程的区别</h2>
<ul>
<li>存储函数的输入参数只能是in</li>
<li>存储函数必须有返回值，所以使用很少</li>
<li>存储函数能做的，存储过程都可以做</li>
</ul>
<p><font color="blue">参考：黑马程序的MySQL-进阶篇.pdf</font></p>
<h2 id="MySQL查询数据库表的所有字段并用逗号分隔"><a class="header-anchor" href="#MySQL查询数据库表的所有字段并用逗号分隔"></a>MySQL查询数据库表的所有字段并用逗号分隔</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 按ordinal_position 字段排序</span></span><br><span class="line"><span class="keyword">select</span> group_concat(column_name <span class="keyword">order</span> <span class="keyword">by</span> ordinal_position <span class="keyword">asc</span>)</span><br><span class="line"><span class="keyword">from</span> information_schema.columns</span><br><span class="line"><span class="keyword">where</span> table_schema <span class="operator">=</span><span class="string">&#x27;数据库&#x27;</span> <span class="keyword">and</span>  table_name <span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><strong>group_concat函数语法：</strong><br>
group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc ] [separator ‘分隔符’] )<br>
默认就是’,'号分割。</p>
<h2 id="Mybatis查询数据为null时，返回情况总结"><a class="header-anchor" href="#Mybatis查询数据为null时，返回情况总结"></a>Mybatis查询数据为null时，返回情况总结</h2>
<ul>
<li>返回类型为<strong>集合类型</strong>，返回一个空集合(大小为0，非null)，避免空指针异常</li>
<li>返回类型为<strong>基本类型(int、long)</strong>，会抛空指针异常。</li>
<li>-返回类型为<strong>基本类型的包装类型(Integer、Long)</strong>，返回null</li>
</ul>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SpringBoot</tag>
        <tag>Linux</tag>
        <tag>Nginx</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(一)</title>
    <url>/2019/11/03/coding_notes_one/</url>
    <content><![CDATA[<h2 id="Tomcat设置jvm"><a class="header-anchor" href="#Tomcat设置jvm"></a>Tomcat设置jvm</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-Xms128m -Xmx1024m -XX:MaxPermSize=512m</span><br></pre></td></tr></table></figure>
<h2 id="el表达式判断字符串是否为空"><a class="header-anchor" href="#el表达式判断字符串是否为空"></a>el表达式判断字符串是否为空</h2>
<p>${值 eq  null  or 值 eq ’ '} 返回true 的话，表示为空。例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">test=<span class="string">&quot;$&#123;company.custName eq  null or company.custName eq &#x27; &#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p>${empty 值}  返回true ,表示为空字符串。例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">test=<span class="string">&quot;$&#123;empty  company.custNam&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p>用empty方法更好,el表达式封装了</p>
<span id="more"></span>
<h2 id="el表达式判断"><a class="header-anchor" href="#el表达式判断"></a>el表达式判断</h2>
<pre><code>==、eq、//相等
!=、ne、// 不相等(inequality)
&lt;、lt、//小于(less than)
&gt;、gt、//大于(greter than)
&lt;=、le、//小于等于(less equal)
&gt;=、ge。//大于等于(greter equal)
例子：判断传过来的值是否大等于2
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">test=<span class="string">&quot;$&#123;product.validity ge 2&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="MyBatis遍历集合"><a class="header-anchor" href="#MyBatis遍历集合"></a>MyBatis遍历集合</h2>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span> =<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;classIds&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">	#&#123;classIds&#125;</span><br><span class="line">&lt;/foreach &gt;</span><br></pre></td></tr></table></figure>
<p>MyBatis foreach的collection参数可以是java的Array或者List</p>
<h2 id="jQuery的data-方法，相比attr-更安全"><a class="header-anchor" href="#jQuery的data-方法，相比attr-更安全"></a>jQuery的data()方法，相比attr()更安全</h2>
<p>访问id为test的元素 的data-name属性例子：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test&#x27;</span>).<span class="title function_">data</span>(<span class="string">&quot;name&quot;</span>); </span><br></pre></td></tr></table></figure>
<h2 id="数据库权限问题"><a class="header-anchor" href="#数据库权限问题"></a>数据库权限问题</h2>
<ul>
<li>cmd进入mysql/bin目录下后,mysql -u root -p并输入密码登陆</li>
<li>grant all privileges on <em>.</em> to root@&quot;%&quot; identified by “.”; 注意root替换为报的错</li>
<li>flush privileges;</li>
</ul>
<h2 id="MySQL的date-format函数用法"><a class="header-anchor" href="#MySQL的date-format函数用法"></a>MySQL的date_format函数用法</h2>
<p>语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">date_format(now(),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>)<span class="operator">&lt;</span>结束时间</span><br></pre></td></tr></table></figure>
<p>  <a href="http://www.w3school.com.cn/sql/func_date_format.asp">参考链接</a></p>
<h2 id="MyBatis中小于号都要写成-lt-大于号可以不用转"><a class="header-anchor" href="#MyBatis中小于号都要写成-lt-大于号可以不用转"></a>MyBatis中小于号都要写成&amp;lt;大于号可以不用转</h2>
<h2 id="MyBatis传入参数为0被误认为是空字符串-解决方法是去掉等于0的判断"><a class="header-anchor" href="#MyBatis传入参数为0被误认为是空字符串-解决方法是去掉等于0的判断"></a>MyBatis传入参数为0被误认为是空字符串,解决方法是去掉等于0的判断</h2>
<h2 id="JavaScript保留两位小数方法"><a class="header-anchor" href="#JavaScript保留两位小数方法"></a>JavaScript保留两位小数方法</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toDecimal</span>(<span class="params">x</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> f = <span class="built_in">parseFloat</span>(x);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">isNaN</span>(f)) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	f = <span class="title class_">Math</span>.<span class="title function_">round</span>(x*<span class="number">100</span>)/<span class="number">100</span>;</span><br><span class="line">	<span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="jQuery判断checkbox是否选中的一些方法"><a class="header-anchor" href="#jQuery判断checkbox是否选中的一些方法"></a>jQuery判断checkbox是否选中的一些方法</h2>
<p>方法一：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($(<span class="string">&quot;#checkbox-id&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="property">checked</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($(<span class="string">&quot;#checkbox-id&quot;</span>)[<span class="number">0</span>].<span class="property">checked</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法三（建议）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($(<span class="string">&#x27;#checkbox-id&#x27;</span>).<span class="title function_">is</span>(<span class="string">&#x27;:checked&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="checkbox赋值方法"><a class="header-anchor" href="#checkbox赋值方法"></a>checkbox赋值方法</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#checkbox-id&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<h2 id="JavaScript页面加载前调用的一些方法"><a class="header-anchor" href="#JavaScript页面加载前调用的一些方法"></a>JavaScript页面加载前调用的一些方法</h2>
<p><strong>方法一：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>方法二：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="comment">//do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>方法三：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">readyState</span>==<span class="string">&quot;complete&quot;</span>)&#123;</span><br><span class="line"> <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="判断页面元素是否显示"><a class="header-anchor" href="#判断页面元素是否显示"></a>判断页面元素是否显示</h2>
<p>  <a href="https://www.jb51.net/article/49760.htm">参考链接</a></p>
<h2 id="加红色样式"><a class="header-anchor" href="#加红色样式"></a>加红色样式</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="连续数字或字母换行"><a class="header-anchor" href="#连续数字或字母换行"></a>连续数字或字母换行</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">style=<span class="string">&quot;word-break:break-all; width:200px; overflow:auto;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="表格内容过长时截取显示"><a class="header-anchor" href="#表格内容过长时截取显示"></a>表格内容过长时截取显示</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">&quot;鼠标放上去显示的内容&quot;</span>&gt;</span>实际显示的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="科学计数法格式化"><a class="header-anchor" href="#科学计数法格式化"></a>科学计数法格式化</h2>
<p>Java 返回字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>();</span><br><span class="line">df.setMaximumFractionDigits(<span class="number">2</span>);</span><br><span class="line">df.setMinimumFractionDigits(<span class="number">2</span>);<span class="comment">//强制保留两位小数</span></span><br><span class="line">String productPrice= df.format(productViewVo.getProductPrice());</span><br></pre></td></tr></table></figure>
<p>注意这种方法还需要替换&quot;,&quot;</p>
<p>JavaScript简单粗暴的方法 返回字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> formatScientificNumber = <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">		<span class="keyword">let</span> result = <span class="title class_">String</span>(value);<span class="comment">//可以用0.0000001测试</span></span><br><span class="line">		<span class="keyword">if</span> (result.<span class="title function_">indexOf</span>(<span class="string">&#x27;-&#x27;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">			result = <span class="string">&#x27;0&#x27;</span> + <span class="title class_">String</span>(<span class="title class_">Number</span>(result) + <span class="number">1</span>).<span class="title function_">substr</span>(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>
<h2 id="输入框限制只能输入数字"><a class="header-anchor" href="#输入框限制只能输入数字"></a>输入框限制只能输入数字</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onkeyup=<span class="string">&quot;this.value=this.value.replace(/[^\d]/g,&#x27;&#x27;)&quot;</span> </span><br></pre></td></tr></table></figure>
<h2 id="jQuery需要用text-取span的值"><a class="header-anchor" href="#jQuery需要用text-取span的值"></a>jQuery需要用text()取span的值</h2>
<h2 id="jQuery获取table的所有tr以及td"><a class="header-anchor" href="#jQuery获取table的所有tr以及td"></a>jQuery获取table的所有tr以及td</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#tabbleId tr&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">i</span>)&#123;          <span class="comment">// 遍历 tr</span></span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&#x27;td&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">j</span>)&#123;  <span class="comment">// 遍历tr的各个td</span></span><br><span class="line">	 <span class="title function_">alert</span>(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;行，第&quot;</span>+(j+<span class="number">1</span>)+<span class="string">&quot;个td的值：&quot;</span>+$(<span class="variable language_">this</span>).<span class="title function_">text</span>()+<span class="string">&quot;。&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="MySQLl的concat-ws-sperator-str1-str2-str…-、concat-、repeat-方法"><a class="header-anchor" href="#MySQLl的concat-ws-sperator-str1-str2-str…-、concat-、repeat-方法"></a>MySQLl的concat_ws(sperator,str1,str2,str…)、concat()、repeat()方法</h2>
<ul>
<li>concat_ws()方法可以将两个字段的值拼接起来，它的本意是有分隔符的字符串连接。但要注意为null的情况(不然整个都会为null)<br>
例子：   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">concat_ws(c.city_code,<span class="string">&#x27;&#x27;</span>,ifnull(c.company_address,<span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure>
</li>
<li>concat()函数可以连接一个或者多个字符串,只要一个为null就会返回Null</li>
<li>repeat()函数用来复制字符串,比如select repeat(‘ab’,2);//abab</li>
</ul>
<h2 id="MySQL删除所有表数据-不是删除数据库"><a class="header-anchor" href="#MySQL删除所有表数据-不是删除数据库"></a>MySQL删除所有表数据(不是删除数据库)</h2>
<p>返回所有drop table语句语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> concat(<span class="string">&#x27;DROP TABLE IF EXISTS &#x27;</span>, table_name, <span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> information_schema.tables</span><br><span class="line"><span class="keyword">WHERE</span> table_schema <span class="operator">=</span> <span class="string">&#x27;saas_mcjd&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="将Double类型的数据保留2位小数"><a class="header-anchor" href="#将Double类型的数据保留2位小数"></a>将Double类型的数据保留2位小数</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2.34566</span>; </span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(a); </span><br><span class="line"><span class="type">Double</span> <span class="variable">d</span> <span class="operator">=</span> bd.setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP).doubleValue(); </span><br></pre></td></tr></table></figure>
<p>d输出就是2.35,  注意会四舍五入</p>
<h2 id="将String转Double-并保留2位小数"><a class="header-anchor" href="#将String转Double-并保留2位小数"></a>将String转Double,并保留2位小数</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> “<span class="number">6.145</span>”; </span><br><span class="line">Double d= Double.parseDouble(a); </span><br><span class="line"><span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(“<span class="number">0.00</span>”); </span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> df.format(d); </span><br></pre></td></tr></table></figure>
<p>s输出就是6.15,注意会四舍五入</p>
<h2 id="JavaScript修改网页标题"><a class="header-anchor" href="#JavaScript修改网页标题"></a>JavaScript修改网页标题</h2>
<p>可以在页面加载完时执行下面的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> =<span class="string">&quot;产品详情&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="JavaScript比较时间大小"><a class="header-anchor" href="#JavaScript比较时间大小"></a>JavaScript比较时间大小</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CompareDate</span>(<span class="params">d1,d2</span>)</span><br><span class="line">&#123;	</span><br><span class="line">	<span class="keyword">return</span> ((<span class="keyword">new</span> <span class="title class_">Date</span>(d1.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/-/g</span>,<span class="string">&quot;\/&quot;</span>))) &lt; (<span class="keyword">new</span> <span class="title class_">Date</span>(d2.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/-/g</span>,<span class="string">&quot;\/&quot;</span>))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="页面定期刷新"><a class="header-anchor" href="#页面定期刷新"></a>页面定期刷新</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(func,time);</span><br></pre></td></tr></table></figure>
<h2 id="JSP根据参数默认选中radio"><a class="header-anchor" href="#JSP根据参数默认选中radio"></a>JSP根据参数默认选中radio</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;va-m text-right text-dark6&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20%&quot;</span>&gt;</span>是否集团审批：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox checkbox-circle mn&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;isApproval&quot;</span> <span class="attr">id</span>=<span class="string">&quot;isApproval&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> &lt;<span class="attr">c:if</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;businessModeViewVo.isApproval eq 1&#125;&quot;</span>&gt;</span>checked<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span>/&gt;</span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;font-bolder&quot;</span> <span class="attr">for</span>=<span class="string">&quot;isApproval&quot;</span>&gt;</span>需要<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox checkbox-circle mn ml10&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;isApproval&quot;</span> <span class="attr">id</span>=<span class="string">&quot;noIsApproval&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> &lt;<span class="attr">c:if</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;businessModeViewVo.isApproval eq 2&#125;&quot;</span>&gt;</span>checked<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span>/&gt;</span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;font-bolder&quot;</span> <span class="attr">for</span>=<span class="string">&quot;noIsApproval&quot;</span> &gt;</span>不需要<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>关键代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;businessModeViewVo.isApproval eq 2&#125;&quot;</span>&gt;</span>checked<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="页面元素的禁用与启用"><a class="header-anchor" href="#页面元素的禁用与启用"></a>页面元素的禁用与启用</h2>
<p>禁用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#id&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;disabled&quot;</span>,<span class="string">&quot;true&quot;</span>);  </span><br><span class="line">$(<span class="string">&quot;#id&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;disabled&quot;</span>,<span class="literal">true</span>);  </span><br><span class="line">$(<span class="string">&quot;#id&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;disabled&quot;</span>,<span class="string">&quot;disabled&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>启用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#id&quot;</span>).<span class="title function_">removeAttr</span>(<span class="string">&quot;disabled&quot;</span>);  </span><br><span class="line">$(<span class="string">&quot;#id&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;disabled&quot;</span>,<span class="literal">false</span>);  </span><br></pre></td></tr></table></figure>
<p>注意：$(&quot;#id&quot;).attr(“disabled”,“false”);不起作用,disabled只能禁用button，对超链接不起作用</p>
<h2 id="handlebars-时间格式化"><a class="header-anchor" href="#handlebars-时间格式化"></a>handlebars 时间格式化</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;dateFormat addTime &#x27;YYYY-MM-DD HH:mm:ss&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="handlerbars判空-if-和unless"><a class="header-anchor" href="#handlerbars判空-if-和unless"></a>handlerbars判空,if 和unless</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;#if logisticsId&#125;&#125;</span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-button text-blue3 pr10&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tooltip&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;left&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;seeDetail(&#x27;&#123;&#123;logisticsId&#125;&#125;&#x27;)&quot;</span> &gt;</span>查看<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;&#123;/if&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>它是尝试去读取logisticsId属性，如果返回的为undefined、null、&quot;&quot;、[]、false任意一个，都会导致最终结果为假。unless和if正好相反,当返回false的时候执行。</p>
<h2 id="正则校验所有输入框"><a class="header-anchor" href="#正则校验所有输入框"></a>正则校验所有输入框</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> $(<span class="string">&quot;input[name=&#x27;unitPrice&#x27;]&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> unitPrice = $(<span class="variable language_">this</span>).<span class="title function_">val</span>();</span><br><span class="line">	<span class="keyword">var</span> reg = <span class="regexp">/^([1-9][\d]&#123;0,7&#125;|0)(\.[\d]&#123;1,2&#125;)?$/</span>;</span><br><span class="line">	<span class="keyword">var</span> reslut = unitPrice.<span class="title function_">match</span>(reg);</span><br><span class="line">	<span class="keyword">if</span>(reslut==<span class="literal">null</span>)&#123;</span><br><span class="line">		<span class="title function_">toastrWarning</span>(<span class="string">&#x27;无效金额，整数8位，小数2位，示例：247.23&#x27;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="禁止textarea拉伸"><a class="header-anchor" href="#禁止textarea拉伸"></a>禁止textarea拉伸</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">style=<span class="string">&quot;resize:none&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="做申请开票的时候-订单列表从表格中删除了-但下次点申请开票时还在。使用空串替换某一个订单号，则是可以实现去除指定字符串功能。"><a class="header-anchor" href="#做申请开票的时候-订单列表从表格中删除了-但下次点申请开票时还在。使用空串替换某一个订单号，则是可以实现去除指定字符串功能。"></a>做申请开票的时候,订单列表从表格中删除了,但下次点申请开票时还在。使用空串替换某一个订单号，则是可以实现去除指定字符串功能。</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">orderIds = orderIds.<span class="title function_">replace</span>(orderId+<span class="string">&quot;,&quot;</span>,<span class="string">&quot; &quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="登陆后跳回原来的页面的问题"><a class="header-anchor" href="#登陆后跳回原来的页面的问题"></a>登陆后跳回原来的页面的问题</h2>
<p>思路：点击登录的时候用一个SpringMVC获取到当前url，并把其放到session中，登陆后从session中取出url 清空后跳转</p>
<h2 id="jQueryy在不知道数组元素下标的时删除数组元素"><a class="header-anchor" href="#jQueryy在不知道数组元素下标的时删除数组元素"></a>jQueryy在不知道数组元素下标的时删除数组元素</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($.<span class="title function_">inArray</span>(templateId.<span class="title function_">toString</span>(),templateIdSelected)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">	templateIdSelected.<span class="title function_">splice</span>($.<span class="title function_">inArray</span>(templateId.<span class="title function_">toString</span>(), templateIdSelected), <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>$.inArray(),函数用于在数组中查找指定值，并返回它的索引值（如果没有找到，则返回-1），源数组不受影响</li>
<li>arrayObject.splice(index,howmany,item1,…,itemX)<br>
index:		必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。<br>
howmany：   必需。要删除的项目数量。如果设置为 0，则不会删除项目。<br>
item1, …, itemX: 可选。向数组添加的新项目。<br>
splice() 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。</li>
</ul>
<h2 id="JSP千分位"><a class="header-anchor" href="#JSP千分位"></a>JSP千分位</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;fmt:formatNumber value=<span class="string">&quot;$&#123;subscriptionMoney &#125;&quot;</span> pattern=<span class="string">&quot;#,###.####&quot;</span>/&gt;	</span><br><span class="line">subscriptionMoney.replace(/(?&lt;=\d)(?&lt; !.\d*)(?=(\d&#123;<span class="number">3</span>&#125;)+(.|$))/g,<span class="string">&#x27;,&#x27;</span>);	</span><br><span class="line">paymentFee.toFixed(<span class="number">2</span>).replace(/(\d)(?=(\d&#123;<span class="number">3</span>&#125;)+\.)/g, <span class="string">&#x27;$1,&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="数组需要JSON格式化传到后台，不能直接用隐藏域"><a class="header-anchor" href="#数组需要JSON格式化传到后台，不能直接用隐藏域"></a>数组需要JSON格式化传到后台，不能直接用隐藏域</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = $(<span class="string">&#x27;#settlementForm&#x27;</span>).<span class="title function_">serializeJson</span>();<span class="comment">//不是serialize();</span></span><br><span class="line">data.<span class="property">fileAttachIds</span> = $(<span class="string">&quot;#uploader2&quot;</span>).<span class="title function_">catUpload</span>(<span class="string">&quot;getUniqueId&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">url : <span class="string">&#x27;/member/purchaseentrustmgr/ajaxpaybond&#x27;</span>,</span><br><span class="line"><span class="attr">contentType</span>:<span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">data :  <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data),</span><br></pre></td></tr></table></figure>
<h2 id="Java千分位"><a class="header-anchor" href="#Java千分位"></a>Java千分位</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#,###.00&quot;</span>);	<span class="comment">//0用于小数部分,不足补0.</span></span><br><span class="line">System.out.println(df.format(vo.getStockPrice()));</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_42884584/article/details/83538523">参考链接</a></p>
<h2 id="在使用removeAttr-移除了radio的checked属性后，使用attr-重新增加不起作用"><a class="header-anchor" href="#在使用removeAttr-移除了radio的checked属性后，使用attr-重新增加不起作用"></a>在使用removeAttr()移除了radio的checked属性后，使用attr()重新增加不起作用</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#invoiceStatus2&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>,<span class="string">&quot;checked&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;#invoiceStatus1&quot;</span>).<span class="title function_">removeAttr</span>(<span class="string">&quot;checked&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>即使用prop()可重新配置上该属性, 具有 true 和 false 两个属性的属性，如 checked, selected 或者 disabled 使用prop()，其他的使用 attr()</p>
<h2 id="MySQL查询一张表的详细信息-注释"><a class="header-anchor" href="#MySQL查询一张表的详细信息-注释"></a>MySQL查询一张表的详细信息(注释)</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> columns <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line">use information_schema;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema <span class="operator">=</span><span class="string">&#x27;数据库名&#x27;</span> <span class="keyword">and</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span>  (<span class="keyword">and</span> column_name<span class="operator">=</span><span class="string">&#x27;CONTRACT_status&#x27;</span> limit <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="查询MySQL创建表的sql"><a class="header-anchor" href="#查询MySQL创建表的sql"></a>查询MySQL创建表的sql</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure>
<h2 id="textarea开始标签和结束标签中间不要有“回车”。-否则内容不是从头开始的"><a class="header-anchor" href="#textarea开始标签和结束标签中间不要有“回车”。-否则内容不是从头开始的"></a>textarea开始标签和结束标签中间不要有“回车”。 否则内容不是从头开始的</h2>
<h2 id="JavaScript科学计数法还原"><a class="header-anchor" href="#JavaScript科学计数法还原"></a>JavaScript科学计数法还原</h2>
<p><strong>方法一：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">0.00000001</span>;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title class_">String</span>(a);</span><br><span class="line"><span class="keyword">if</span> (result.<span class="title function_">indexOf</span>(<span class="string">&#x27;-&#x27;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">   result = <span class="string">&#x27;0&#x27;</span> + <span class="title class_">String</span>(<span class="title class_">Number</span>(result) + <span class="number">1</span>).<span class="title function_">substr</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>
<p><strong>方法二：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toNonExponential</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> m = num.<span class="title function_">toExponential</span>().<span class="title function_">match</span>(<span class="regexp">/\d(?:\.(\d*))?e([+-]\d+)/</span>);</span><br><span class="line">    <span class="keyword">return</span> num.<span class="title function_">toFixed</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, (m[<span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>).<span class="property">length</span> - m[<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="textarea没有value属性"><a class="header-anchor" href="#textarea没有value属性"></a>textarea没有value属性</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;summary&quot;</span> <span class="attr">name</span>=<span class="string">&quot;summary&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;8&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> &quot;&gt;</span>&lt;%= summary %&gt;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="MySQL不等于null语法is-not-null，MySQL等于null语法is-null"><a class="header-anchor" href="#MySQL不等于null语法is-not-null，MySQL等于null语法is-null"></a>MySQL不等于null语法is not null，MySQL等于null语法is null</h2>
<h2 id="JavaScript正则匹配"><a class="header-anchor" href="#JavaScript正则匹配"></a>JavaScript正则匹配</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="title class_">RegExp</span>(<span class="regexp">/^[0-9a-zA-Z_]+$/</span>);</span><br><span class="line"><span class="keyword">if</span>(!material.<span class="title function_">match</span>(reg))&#123;</span><br><span class="line">   <span class="title function_">alert</span>(<span class="string">&quot;内部料号为数字、字母、下划线或三者组合&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="jQuery获取选中值"><a class="header-anchor" href="#jQuery获取选中值"></a>jQuery获取选中值</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取radio checkbox选中值</span></span><br><span class="line"><span class="keyword">var</span> item = $(<span class="string">&#x27;input[name=items][checked]&#x27;</span>).<span class="title function_">val</span>(); </span><br><span class="line"><span class="comment">//获取option选中值</span></span><br><span class="line"><span class="keyword">var</span> item = $(<span class="string">&quot;select[name=items] option[selected]&quot;</span>).<span class="title function_">text</span>(); </span><br></pre></td></tr></table></figure>
<h2 id="MyBatis-的-trim-标签"><a class="header-anchor" href="#MyBatis-的-trim-标签"></a>MyBatis 的&lt;trim/&gt;标签</h2>
<p>prefix 给sql语句拼接的前缀  suffix 给sql语句拼接的后缀<br>
prefixOverrides 去除sql语句前面的关键字或者字符，该关键字或者字符由prefixOverrides属性指定，假设该属性指定为&quot;AND&quot;，当sql语句的开头为&quot;AND&quot;，trim标签将会去除该&quot;AND&quot;<br>
suffixOverrides	去除sql语句后面的关键字或者字符，该关键字或者字符由suffixOverrides属性指定</p>
<h2 id="MySQL的group-concat-函数默认拼接字符串长度是1024-可以手动设置。-做双贸项目分组查了分类下的所有扩展属性-后面分类多了肯定出问题😂"><a class="header-anchor" href="#MySQL的group-concat-函数默认拼接字符串长度是1024-可以手动设置。-做双贸项目分组查了分类下的所有扩展属性-后面分类多了肯定出问题😂"></a>MySQL的group_concat()函数默认拼接字符串长度是1024,可以手动设置。 做双贸项目分组查了分类下的所有扩展属性,后面分类多了肯定出问题😂</h2>
<h2 id="jQuery的on-方法不起作用的解决方法。双贸前台商品列表扩展属性监听用到"><a class="header-anchor" href="#jQuery的on-方法不起作用的解决方法。双贸前台商品列表扩展属性监听用到"></a>jQuery的on()方法不起作用的解决方法。双贸前台商品列表扩展属性监听用到</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>,<span class="string">&#x27;.attrList li&#x27;</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方法每次执行点击事件 的时候，它会先找到document对象，然后去检测有没有子对象，如果有的话，他就将事件给到子对象，子对象得到该事件之后就开始触发事件后面的方法</p>
<h2 id="MyBatis返回List-String-只需要resultType-java-lang-String-就可以了"><a class="header-anchor" href="#MyBatis返回List-String-只需要resultType-java-lang-String-就可以了"></a>MyBatis返回List<String>只需要resultType=&quot;java.lang.String&quot;就可以了</h2>
<h2 id="jQuery下拉框默认选中"><a class="header-anchor" href="#jQuery下拉框默认选中"></a>jQuery下拉框默认选中</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#businessModeAll option[businessId=&#x27;104&#x27;]&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;selected&quot;</span>,<span class="literal">true</span>); </span><br></pre></td></tr></table></figure>
<p>其中businessId是自定义属性,正常用value就可以了。attr方法正常取属性值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#businessModeAll option:selected&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;businessId&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis</tag>
        <tag>jQuery</tag>
        <tag>Tomcat</tag>
        <tag>JSP</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(二)</title>
    <url>/2019/11/03/coding_notes_two/</url>
    <content><![CDATA[<h2 id="jQuery常用的选择器整理"><a class="header-anchor" href="#jQuery常用的选择器整理"></a>jQuery常用的选择器整理</h2>
<p>$(&quot;:first&quot;);//匹配第一个元素<br>
$(&quot;:last&quot;);//匹配最后一个元素<br>
$(&quot;:eq(index)&quot;);//在匹配的集合中选择索引值为index的元素<br>
$(&quot;:gt(index)&quot;);//在匹配的集合中选择索引值大于index的元素<br>
$(&quot;:even&quot;);//选择索引值为偶数的元素，从0开始计数<br>
$(&quot;:odd&quot;);//选择索引值为奇数的元素，从0开始计数<br>
$(“parent&gt;child”);//<strong>子选择器</strong>：选择所有指定&quot;parent&quot;元素中指定的&quot;child&quot;的直接子元素<br>
$(“ancestor decendant”);//<strong>后代选择器</strong>：选择给定的祖先元素的所有后代元素,一个元素的后代可能是该元素的一个孩子，孙子，曾孙等<br>
$(“prev +next”);//<strong>相邻兄弟选择器</strong>：选择所有紧接在&quot;prev&quot;元素后的&quot;next&quot;元素<br>
$(“prev ~sibings”);//<strong>一般兄弟选择器</strong>：匹配&quot;prev&quot;元素之后的所有兄弟元素</p>
<span id="more"></span>
<h2 id="MyBatis批量更新"><a class="header-anchor" href="#MyBatis批量更新"></a>MyBatis批量更新</h2>
<p>sql列子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> course</span><br><span class="line">    <span class="keyword">SET</span> name <span class="operator">=</span> <span class="keyword">CASE</span> id </span><br><span class="line">        <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">&#x27;name1&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">&#x27;name2&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="string">&#x27;name3&#x27;</span></span><br><span class="line">    <span class="keyword">END</span>, </span><br><span class="line">    title <span class="operator">=</span> <span class="keyword">CASE</span> id </span><br><span class="line">        <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">&#x27;New Title 1&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">&#x27;New Title 2&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="string">&#x27;New Title 3&#x27;</span></span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>在做编辑订单功能(现在想想都是一场噩梦)时，折腾了这个操作，java代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateBatch</span><span class="params">(<span class="meta">@Param(&quot;detailList&quot;)</span>List&lt;ThOrderDetail&gt; detailList)</span>;</span><br></pre></td></tr></table></figure>
<p>注：MyBatis默认会把所有集合封装为&quot;list&quot;，如果要自定义参数名需要用@Param注解</p>
<p>MyBatis代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    update th_order_detail</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;unit_price =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;detailList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.unitPrice !=null&quot;</span>&gt;</span></span><br><span class="line">            when ord_detail_id=#&#123;item.ordDetailId&#125; then #&#123;item.unitPrice&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--原数据--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.unitPrice == null&quot;</span>&gt;</span></span><br><span class="line">            when ord_detail_id=#&#123;item.ordDetailId&#125; then th_order_detail.unit_price</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;negative_interval_percentage =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;detailList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.negativeIntervalPercentage !=null&quot;</span>&gt;</span></span><br><span class="line">            when ord_detail_id=#&#123;item.ordDetailId&#125; then #&#123;item.negativeIntervalPercentage&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--原数据--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.negativeIntervalPercentage == null&quot;</span>&gt;</span></span><br><span class="line">            when ord_detail_id=#&#123;item.ordDetailId&#125; then th_order_detail.negative_interval_percentage</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;positive_interval_percentage =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;detailList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.positiveIntervalPercentage !=null&quot;</span>&gt;</span></span><br><span class="line">            when ord_detail_id=#&#123;item.ordDetailId&#125; then #&#123;item.positiveIntervalPercentage&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.positiveIntervalPercentage == null&quot;</span>&gt;</span></span><br><span class="line">            when ord_detail_id=#&#123;item.ordDetailId&#125; then th_order_detail.positive_interval_percentage</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;negative_interval_quantity =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;detailList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.negativeIntervalQuantity !=null&quot;</span>&gt;</span></span><br><span class="line">            when ord_detail_id=#&#123;item.ordDetailId&#125; then #&#123;item.negativeIntervalQuantity&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.negativeIntervalQuantity == null&quot;</span>&gt;</span></span><br><span class="line">            when ord_detail_id=#&#123;item.ordDetailId&#125; then th_order_detail.negative_interval_quantity</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;positive_interval_quantity =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;detailList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.positiveIntervalQuantity !=null&quot;</span>&gt;</span></span><br><span class="line">            when ord_detail_id=#&#123;item.ordDetailId&#125; then #&#123;item.positiveIntervalQuantity&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.positiveIntervalQuantity == null&quot;</span>&gt;</span></span><br><span class="line">            when ord_detail_id=#&#123;item.ordDetailId&#125; then th_order_detail.positive_interval_quantity</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    where ord_detail_id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;detailList&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">      #&#123;item.ordDetailId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>执行代码后，打印出的sql如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> </span><br><span class="line">  th_order_detail </span><br><span class="line"><span class="keyword">set</span></span><br><span class="line">  unit_price <span class="operator">=</span> </span><br><span class="line">  <span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> ord_detail_id <span class="operator">=</span> <span class="number">252</span> </span><br><span class="line">    <span class="keyword">then</span> <span class="number">25.55</span> </span><br><span class="line">    <span class="keyword">when</span> ord_detail_id <span class="operator">=</span> <span class="number">253</span> </span><br><span class="line">    <span class="keyword">then</span> <span class="number">35.55</span> </span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line">  order_price <span class="operator">=</span> </span><br><span class="line">  <span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> ord_detail_id <span class="operator">=</span> <span class="number">252</span> </span><br><span class="line">    <span class="keyword">then</span> <span class="number">383.25</span> </span><br><span class="line">    <span class="keyword">when</span> ord_detail_id <span class="operator">=</span> <span class="number">253</span> </span><br><span class="line">    <span class="keyword">then</span> <span class="number">639.9</span> </span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line">  negative_interval_percentage <span class="operator">=</span> </span><br><span class="line">  <span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> ord_detail_id <span class="operator">=</span> <span class="number">252</span> </span><br><span class="line">    <span class="keyword">then</span> <span class="number">11.11</span> </span><br><span class="line">    <span class="keyword">when</span> ord_detail_id <span class="operator">=</span> <span class="number">253</span> </span><br><span class="line">    <span class="keyword">then</span> <span class="number">13.33</span> </span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line">  positive_interval_percentage <span class="operator">=</span> </span><br><span class="line">  <span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> ord_detail_id <span class="operator">=</span> <span class="number">252</span> </span><br><span class="line">    <span class="keyword">then</span> <span class="number">12.2</span> </span><br><span class="line">    <span class="keyword">when</span> ord_detail_id <span class="operator">=</span> <span class="number">253</span> </span><br><span class="line">    <span class="keyword">then</span> <span class="number">14.44</span> </span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line">  negative_interval_quantity <span class="operator">=</span> </span><br><span class="line">  <span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> ord_detail_id <span class="operator">=</span> <span class="number">252</span> </span><br><span class="line">    <span class="keyword">then</span> <span class="number">13.3335</span> </span><br><span class="line">    <span class="keyword">when</span> ord_detail_id <span class="operator">=</span> <span class="number">253</span> </span><br><span class="line">    <span class="keyword">then</span> <span class="number">15.6006</span> </span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line">  positive_interval_quantity <span class="operator">=</span> </span><br><span class="line">  <span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> ord_detail_id <span class="operator">=</span> <span class="number">252</span> </span><br><span class="line">    <span class="keyword">then</span> <span class="number">16.83</span> </span><br><span class="line">    <span class="keyword">when</span> ord_detail_id <span class="operator">=</span> <span class="number">253</span> </span><br><span class="line">    <span class="keyword">then</span> <span class="number">20.5992</span> </span><br><span class="line">  <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">where</span> ord_detail_id <span class="keyword">in</span> (<span class="number">252</span>, <span class="number">253</span>) ; </span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/yjaspire/article/details/81316885">参考链接</a></p>
<h2 id="POI导出Excel"><a class="header-anchor" href="#POI导出Excel"></a>POI导出Excel</h2>
<ul>
<li>测试方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">HSSFWorkbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>();</span><br><span class="line"></span><br><span class="line">		<span class="type">HSSFCellStyle</span> <span class="variable">style</span> <span class="operator">=</span> workbook.createCellStyle();</span><br><span class="line">		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);</span><br><span class="line">		style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);</span><br><span class="line"></span><br><span class="line">		<span class="type">HSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;sheet&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="type">HSSFRow</span> <span class="variable">row0</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">		<span class="type">HSSFCell</span> <span class="variable">cell_00</span> <span class="operator">=</span> row0.createCell(<span class="number">0</span>);</span><br><span class="line">		cell_00.setCellStyle(style);</span><br><span class="line">		cell_00.setCellValue(<span class="string">&quot;日期&quot;</span>);</span><br><span class="line">		<span class="type">HSSFCell</span> <span class="variable">cell_01</span> <span class="operator">=</span> row0.createCell(<span class="number">1</span>);</span><br><span class="line">		cell_01.setCellStyle(style);</span><br><span class="line">		cell_01.setCellValue(<span class="string">&quot;午别&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="type">HSSFRow</span> <span class="variable">row1</span> <span class="operator">=</span> sheet.createRow(<span class="number">1</span>);</span><br><span class="line">		<span class="type">HSSFCell</span> <span class="variable">cell_10</span> <span class="operator">=</span> row1.createCell(<span class="number">0</span>);</span><br><span class="line">		cell_10.setCellStyle(style);</span><br><span class="line">		cell_10.setCellValue(<span class="string">&quot;20191103&quot;</span>);</span><br><span class="line">		<span class="type">HSSFCell</span> <span class="variable">cell_11</span> <span class="operator">=</span> row1.createCell(<span class="number">1</span>);</span><br><span class="line">		cell_11.setCellStyle(style);</span><br><span class="line">		cell_11.setCellValue(<span class="string">&quot;上午&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="type">HSSFRow</span> <span class="variable">row2</span> <span class="operator">=</span> sheet.createRow(<span class="number">2</span>);</span><br><span class="line">		<span class="type">HSSFCell</span> <span class="variable">cell_21</span> <span class="operator">=</span> row2.createCell(<span class="number">1</span>);</span><br><span class="line">		cell_21.setCellStyle(style);</span><br><span class="line">		cell_21.setCellValue(<span class="string">&quot;下午&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 合并日期占两行(4个参数，分别为起始行，结束行，起始列，结束列)</span></span><br><span class="line">		<span class="comment">// 行和列都是从0开始计数，且起始结束都会合并</span></span><br><span class="line">		<span class="comment">// 这里是合并excel中日期的两行为一行</span></span><br><span class="line">		<span class="type">CellRangeAddress</span> <span class="variable">region</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		sheet.addMergedRegion(region);</span><br><span class="line"></span><br><span class="line">		<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\demo.xls&quot;</span>);</span><br><span class="line">		<span class="type">FileOutputStream</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">		workbook.write(fout);</span><br><span class="line">		fout.close();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>实现效果如下：</p>
<table>
	<tr>
	    <th>日期</th>
	    <th>午别</th>
	</tr >
	<tr >
	    <td rowspan="2">20191103</td>
	    <td>上午</td>
	</tr>
   <tr >
	    <td>下午</td>
	</tr>
</table>
<p><a href="https://blog.csdn.net/yx0628/article/details/79914886">参考链接</a></p>
<ul>
<li>项目中导出xcel例子：<br>
客户给出的表格需要统计对上游付款总金额和对下游付款总金额(大于的为占用金额),然后根据这个占用金额去计算利息<br>
有两个要求：1、第一行需要显示用款和付款 2、后面如果日期相同也要显示到同一行<br>
这个用sql查询出来后还需要Java代码处理，总之这是今年做的最坑的需求之一(搞死开发者却不一定实用)。<br>
后台打印出的sql如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#分组前<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="operator">*</span> </span><br><span class="line">  <span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">      (<span class="keyword">select</span> </span><br><span class="line">        p.amount <span class="keyword">as</span> amount,</span><br><span class="line">        ifnull(p.payment_date, p.add_time) <span class="keyword">as</span> payment_date,</span><br><span class="line">        p.contract_id <span class="keyword">as</span> contract_id,</span><br><span class="line">        c.type <span class="keyword">as</span> type </span><br><span class="line">      <span class="keyword">from</span></span><br><span class="line">        payment_bond p </span><br><span class="line">        <span class="keyword">inner</span> <span class="keyword">join</span> contract c </span><br><span class="line">          <span class="keyword">on</span> p.contract_id <span class="operator">=</span> c.contract_id </span><br><span class="line">          <span class="keyword">and</span> p.state <span class="operator">!=</span> <span class="number">2</span> </span><br><span class="line">          <span class="keyword">and</span> c.type <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>) </span><br><span class="line">          <span class="keyword">and</span> p.entrust_id <span class="operator">=</span> <span class="number">116</span>) </span><br><span class="line">      <span class="keyword">union</span></span><br><span class="line">      <span class="keyword">all</span> </span><br><span class="line">      (<span class="keyword">select</span> </span><br><span class="line">        s.amount <span class="keyword">as</span> amount,</span><br><span class="line">        ifnull(s.payment_date, s.add_time) <span class="keyword">as</span> payment_date,</span><br><span class="line">        s.contract_id <span class="keyword">as</span> contract_id,</span><br><span class="line">        c.type <span class="keyword">as</span> type </span><br><span class="line">      <span class="keyword">from</span></span><br><span class="line">        settlement_apply s </span><br><span class="line">        <span class="keyword">inner</span> <span class="keyword">join</span> contract c </span><br><span class="line">          <span class="keyword">on</span> s.contract_id <span class="operator">=</span> c.contract_id </span><br><span class="line">          <span class="keyword">and</span> s.status <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>) </span><br><span class="line">          <span class="keyword">and</span> c.type <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>) </span><br><span class="line">          <span class="keyword">and</span> s.entrust_id <span class="operator">=</span> <span class="number">116</span>)</span><br><span class="line">    ) b </span><br><span class="line">  <span class="keyword">order</span> <span class="keyword">by</span> b.payment_date <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>
<p>分组前数据库返回结果:<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/926be0af9191e4e10fb48a8684ed59f9.png" alt="在这里插入图片描述"><br>
类型为1是采购合同，也就是对上游付款的信息，类型为2的是销售合同，也就是对下游收款的数据。可以看出同一类型同一天的数据还没有合并起来。所以还需要对这个查询结果再分组求和，sql如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#分组后<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">  <span class="built_in">sum</span>(amount) <span class="keyword">as</span> amount,</span><br><span class="line">  payment_date,</span><br><span class="line">  type </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (上面的<span class="keyword">sql</span>) bb </span><br><span class="line">  <span class="keyword">group</span> <span class="keyword">by</span> bb.payment_date,bb.type ;</span><br></pre></td></tr></table></figure>
<p>分组后数据库返回结果:<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/5cfc7b72ab074255931459f56df17d06.png" alt="在这里插入图片描述"><br>
费了九牛二虎之力然而仅仅是开始，在java代码中还需要实现[1、第一行需要显示用款和付款 2、后面如果日期相同也要显示到同一行]这两个要求。大致思路是先定义一些全局的变量来记录上一条数据和第一条数据，找到第一条后再去看后面是不是有时间相同的，controller的核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!ObjectUtils.isNullObj(paymentBondViewVos))&#123;</span><br><span class="line">	<span class="comment">//百分比</span></span><br><span class="line">	<span class="type">NumberFormat</span> <span class="variable">numFormat</span> <span class="operator">=</span> java.text.NumberFormat.getPercentInstance();</span><br><span class="line">	numFormat.setMaximumIntegerDigits(<span class="number">3</span>);</span><br><span class="line">	numFormat.setMaximumFractionDigits(<span class="number">2</span>);</span><br><span class="line">	<span class="type">double</span> <span class="variable">payAmount</span> <span class="operator">=</span> <span class="number">0d</span>;<span class="comment">//支出金额</span></span><br><span class="line">	<span class="type">double</span> <span class="variable">receiptAmout</span> <span class="operator">=</span> <span class="number">0d</span>;<span class="comment">//收入金额</span></span><br><span class="line">	<span class="type">int</span> type=<span class="number">0</span>;<span class="comment">//上一次合同类型(是否第一次)</span></span><br><span class="line">	<span class="type">boolean</span> alreadySet=<span class="literal">false</span>;<span class="comment">//已找到第一条</span></span><br><span class="line">	<span class="type">int</span> lastType=<span class="number">0</span>;<span class="comment">//上一次合同类型(循环后)</span></span><br><span class="line">	Date lastDate=<span class="literal">null</span>;<span class="comment">//上一次日期</span></span><br><span class="line">	<span class="type">double</span> lastAmout=<span class="number">0.0</span>;<span class="comment">//上一次金额</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> paymentBondViewVos.size();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">		<span class="type">PaymentBondViewVo</span> <span class="variable">paymentBondViewVo</span> <span class="operator">=</span> paymentBondViewVos.get(i);</span><br><span class="line">		<span class="type">int</span> <span class="variable">typeTmp</span> <span class="operator">=</span> paymentBondViewVo.getType();<span class="comment">//当前合同类型</span></span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">			type = typeTmp;</span><br><span class="line">			row = sheet.createRow(<span class="number">4</span>);</span><br><span class="line">			<span class="keyword">if</span>(typeTmp==<span class="number">1</span>)&#123;</span><br><span class="line">				row.createCell(<span class="number">0</span>).setCellValue(sdf.format(paymentBondViewVo.getPaymentDate()));</span><br><span class="line">				row.createCell(<span class="number">1</span>).setCellValue(paymentBondViewVo.getAmount());</span><br><span class="line">				payAmount = DoubleUtil.preciseAdd(payAmount, paymentBondViewVo.getAmount(), <span class="number">2</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(typeTmp==<span class="number">2</span>)&#123;</span><br><span class="line">				row.createCell(<span class="number">2</span>).setCellValue(sdf.format(paymentBondViewVo.getPaymentDate()));</span><br><span class="line">				row.createCell(<span class="number">3</span>).setCellValue(paymentBondViewVo.getAmount());</span><br><span class="line">				receiptAmout = DoubleUtil.preciseAdd(receiptAmout, paymentBondViewVo.getAmount(), <span class="number">2</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			   <span class="type">Date</span> <span class="variable">paymentDate</span> <span class="operator">=</span> paymentBondViewVo.getPaymentDate();</span><br><span class="line">			   <span class="comment">//占用天数</span></span><br><span class="line">			   <span class="type">int</span> <span class="variable">daysOfUse</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">if</span>(type!=typeTmp&amp;&amp;alreadySet==<span class="literal">false</span>)&#123;<span class="comment">//第一条数据展示</span></span><br><span class="line">					alreadySet=<span class="literal">true</span>;</span><br><span class="line">					row = sheet.getRow(<span class="number">4</span>);</span><br><span class="line">					<span class="keyword">if</span>(typeTmp==<span class="number">2</span>)&#123;<span class="comment">//采购商后付款</span></span><br><span class="line">						daysOfUse = daysBetween(lastDate,paymentDate);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ObjectUtils.equals(sdf.format(lastDate),sdf.format(paymentDate)))&#123;<span class="comment">//时间相同的合并到一列</span></span><br><span class="line">					<span class="type">int</span> <span class="variable">lastRowNum</span> <span class="operator">=</span> sheet.getLastRowNum();</span><br><span class="line">					row = sheet.getRow(lastRowNum);</span><br><span class="line">					<span class="comment">//获取excel上一行的时间并计算占用天数</span></span><br><span class="line">					daysOfUse = calculateDaysOfUse(sheet,lastRowNum-<span class="number">1</span>,sdf,paymentDate);</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;<span class="comment">//正常处理</span></span><br><span class="line">					<span class="type">int</span> <span class="variable">lastRowNum</span> <span class="operator">=</span> sheet.getLastRowNum();</span><br><span class="line">					row = sheet.createRow(lastRowNum+<span class="number">1</span>);</span><br><span class="line">					<span class="comment">//获取excel上一行的时间并计算占用天数</span></span><br><span class="line">					daysOfUse = calculateDaysOfUse(sheet,lastRowNum,sdf,paymentDate);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(typeTmp==<span class="number">1</span>)&#123;</span><br><span class="line">					row.createCell(<span class="number">0</span>).setCellValue(sdf.format(paymentDate));</span><br><span class="line">					row.createCell(<span class="number">1</span>).setCellValue(paymentBondViewVo.getAmount());</span><br><span class="line">					payAmount = DoubleUtil.preciseAdd(payAmount, paymentBondViewVo.getAmount(), <span class="number">2</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(typeTmp==<span class="number">2</span>)&#123;</span><br><span class="line">					row.createCell(<span class="number">2</span>).setCellValue(sdf.format(paymentDate));</span><br><span class="line">					row.createCell(<span class="number">3</span>).setCellValue(paymentBondViewVo.getAmount());</span><br><span class="line">					receiptAmout = DoubleUtil.preciseAdd(receiptAmout, paymentBondViewVo.getAmount(), <span class="number">2</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//支出金额大于收入金额</span></span><br><span class="line">				<span class="keyword">if</span>(Double.compare(payAmount, receiptAmout)==<span class="number">1</span>)&#123;</span><br><span class="line">					<span class="type">double</span> <span class="variable">advancePayment</span> <span class="operator">=</span> DoubleUtil.preciseSub(payAmount,receiptAmout, <span class="number">2</span>);</span><br><span class="line">					<span class="comment">//利息=占用金额*占用天数*年化/应付利息天数</span></span><br><span class="line">					<span class="type">double</span> <span class="variable">tmp</span> <span class="operator">=</span> DoubleUtil.preciseMul(DoubleUtil.preciseMul(advancePayment,Constant.ANNUALIZED),Double.valueOf(daysOfUse));</span><br><span class="line">					<span class="type">double</span> <span class="variable">interestAmount</span> <span class="operator">=</span> DoubleUtil.preciseDev(tmp,Double.valueOf(Constant.INTERESTDAYS));</span><br><span class="line"></span><br><span class="line">					row.createCell(<span class="number">4</span>).setCellValue(advancePayment);</span><br><span class="line">					row.createCell(<span class="number">5</span>).setCellValue(daysOfUse);</span><br><span class="line">					row.createCell(<span class="number">7</span>).setCellValue(interestAmount);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		row.createCell(<span class="number">6</span>).setCellValue(numFormat.format(Constant.ANNUALIZED));<span class="comment">//年化</span></span><br><span class="line">		lastType=paymentBondViewVo.getType();<span class="comment">//上一次合同类型(循环后)</span></span><br><span class="line">		lastDate=paymentBondViewVo.getPaymentDate();<span class="comment">//上一次日期</span></span><br><span class="line">		lastAmout=paymentBondViewVo.getAmount();<span class="comment">//上一次金额</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只贴出了封装数据代码 (省略查询委托 合同 设置表头 合并单元格以及循环设置单元格样式等代码)。这样以后就导出需要的表格了，效果图如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/12c82d1bd2c7277537407ec2ca683f87.png" alt="在这里插入图片描述"><br>
然而作死把浏览器设置为英文后出现文件名乱码了，如下所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/79bee4340da605aba5729627e38178ca.png" alt="在这里插入图片描述"><br>
需要在浏览器的header中对中文重新进行编码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">codedFileName</span> <span class="operator">=</span> java.net.URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>这样一来,总算搞定了。。。</p>
<h2 id="登录时返回之前的链接"><a class="header-anchor" href="#登录时返回之前的链接"></a>登录时返回之前的链接</h2>
<p>在Spring中做如下配置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 记录登录返回路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/mcmall/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/foodmall/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itonghui.filter.RecordLoginInterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Java代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecordLoginInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(RecordLoginInterceptor.class);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 如果返回true 执行下一个拦截器,直到所有的拦截器都执行完毕 再执行被拦截的Controller 然后进入拦截器链</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span>&#123;</span><br><span class="line">		<span class="type">SysUser</span> <span class="variable">user</span> <span class="operator">=</span> (SysUser) SecurityUtils.getSubject().getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ((request.getMethod().equalsIgnoreCase(WebContentGenerator.METHOD_POST) || ServerInfo.isAjaxs(request))) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            url = request.getRequestURI();</span><br><span class="line">           <span class="type">String</span> <span class="variable">queryString</span> <span class="operator">=</span>request.getQueryString();</span><br><span class="line">           <span class="keyword">if</span>(StringUtils.isNotBlank(queryString))&#123;</span><br><span class="line">               url =url+<span class="string">&quot;?&quot;</span>+queryString;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!ObjectUtils.isNullObj(user))&#123;<span class="comment">//已登录</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        session.setAttribute(Constant.HISTORY_URL,url);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>MyBatis</tag>
        <tag>jQuery</tag>
        <tag>POI</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现经典坦克大战源代码下载</title>
    <url>/2019/12/08/tankwar/</url>
    <content><![CDATA[<p>之前我在csdn写了一篇<a href="https://blog.csdn.net/a1275302036/article/details/54232751">博客</a>，里面的源码我<strong>一直没有设置下载积分</strong>，CSDN改版后会随着下载次数增多，积分也增多，即使没有设置积分，刚刚看了需要50分。<span id="more"></span></p>
<p>我看到文章下面很多用户留言，大部分的我都通过邮箱发送了，帮助了很多人。</p>
<p>由于很多原因现在改为自愿付费获取。</p>
<p>在我个人博客打赏成功后发送到邮箱1271826574@qq.com，邮件标题为需要一份Java坦克大战源码，邮件内容附上支付截图，我看到后会第一时间回复，谢谢合作。</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>泰国六日游</title>
    <url>/2019/11/09/six_day_tour_to_Thailand/</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2>
<blockquote>
<p>如果说走就走,会不会颠覆了这时光,天南地北,一场美梦</p>
</blockquote>
<p>作为地道码农，看着这么美的文字，很多时候是一种奢望。不过前两个月就有计划着来一场说走就走的旅行，考虑到国庆国内游客太爆，所以选择去东南亚<span id="more"></span>，最开始是打算去马拉西亚的，因为有个朋友在那边工作，想去蹭蹭饭，哈哈，后来听说大马旅游资源一般就换成泰国了。于是厚着脸皮向领导申请了三天调休，开始了为期六晚五天的泰国旅行。</p>
<h2 id="前期准备"><a class="header-anchor" href="#前期准备"></a>前期准备</h2>
<p>说实话大学期间去过了一些地方，我发现旅行最重要的是并不是带什么装备带什么工具，而是用心地去感受去融入，想象自己就是生活在这里的人，这样才能发现那个地方很多细微和有趣的地方，而不是走马观花。所以我现在都很少去做那些详细的旅行攻略了，更喜欢住下来后再慢慢计划，但是我会有个大致的行程安排，这样既不会到了当地不知道去哪而显得太乱也不会因为前期过多的做攻略而浪费了许多宝贵的时间。当然像机票、行程单、打车APP、电话卡这些基本的准备不能少。</p>
<h2 id="具体行程"><a class="header-anchor" href="#具体行程"></a>具体行程</h2>
<p>下面简单的记录下这几天的行程，会大量放旅行照片，都是原图，<strong>所以人像请以真人为准</strong>。</p>
<h3 id="Day1-10-4-深圳"><a class="header-anchor" href="#Day1-10-4-深圳"></a>Day1 10.4 深圳</h3>
<p><strong>实际行程：晚上从深圳出发</strong></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/9f88eb94edc2da61e5236d1e5a715c36.jpeg" alt="在这里插入图片描述"></p>
<center>提前三小时到机场的，我换好泰铢后发登机牌的小姐姐都还没来</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d7716ceba92fa391a083c918589c3662.jpeg" alt="宝安国际机场"></p>
<center>我们也学着旁边的小姐姐来了一张</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/8200803fdae1006cb679edb53870af86.jpeg" alt="让我炫一下富"></p>
<center>泰国的纸币,面额从10块到1000</center></br>
<h3 id="DAY2-10-5-曼谷"><a class="header-anchor" href="#DAY2-10-5-曼谷"></a>DAY2 10.5 曼谷</h3>
<p><strong>实际行程：白天去了大皇宫和郑王庙，晚上去了空中酒吧</strong></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/15a2a4182b089fb91d3412406094f58f.jpeg" alt="在这里插入图片描述">	<br>
三小时后生平第一次出境了，我匆匆的跑到最前面赶到落地签窗口，然而已是人山人海，这至少得排一小时，当时已是当地时间1点多了。后面听说隔壁窗口交฿200就可以免排队了，于是和四个同一航班的中国人一起走了捷径。不过他们几个都没换泰铢(也是厉害)，五个人刚好给签证官员฿1000，也算出国做了一件善事，哈哈。全部弄完后，打车到酒店已是凌晨3点多。</br></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/eaa04010d871acbb88f57eadeaa42830.jpeg" alt="在这里插入图片描述"></p>
<center>酒店的全自动马桶</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/51fbc60b9e9e8f7899c72f7adbe4f1ec.jpeg" alt="在这里插入图片描述"></p>
<center>酒店提供冰箱、微波炉</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/8aed03d92779293b44e01ee3d13905b5.jpeg" alt="在这里插入图片描述"></p>
<center>酒店的泳池，可惜没带泳裤。去商品看了，他们给我的都是沙滩裤，没有找到泳裤</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/cbb3fcfe8e31d6e7b9d82a999d95fb5a.jpeg" alt="在这里插入图片描述"></p>
<center>起床了 让我看看谁这么好看</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/2fe9e9314a47baf31371909175e4921b.jpeg" alt="在这里插入图片描述"></p>
<center>泰国第一餐-咖喱蟹，味道还不错，就是量少了点</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d33c7c96e1c4179185e9ad98943f7494.jpeg" alt="在这里插入图片描述"><br>
吃完饭后准备打车去大皇宫，刚好中午，而且下雨了，等了差不多半小时。当时看天气预报说这几天都有雨，吓的出冷汗，实际上后几天都是晴天。不过Grab打车确实很靠谱，司机不能改动金额，里面可以发图片和视频给司机，一般不是很偏的地方司机都能找到的</br></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d4a64db21767eaa1af973019fedb81cf.jpeg" alt="在这里插入图片描述"></p>
<center>大皇宫外</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/97e983dcfc4848a3bb74ad451ff45fde.jpeg" alt="在这里插入图片描述"></p>
<center>大皇宫外</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/074691e362e201d10a96d9a61a9118f0.jpeg" alt="在这里插入图片描述">	<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/607934dcfe420522f079c4b59ec88258.jpeg" alt="在这里插入图片描述"><br>
这就是大皇宫了，以前泰国国王住的地方，曼谷必游景点之一，这次旅行前对泰国的历史文化了解甚少应该自我检讨一下</br></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/6431210b4cb45cd52568733f9e1c79fa.jpeg" alt="在这里插入图片描述"></p>
<center>大皇宫一角</center></br>
<p>两个小时不到我们就逛完了大皇宫，泰国佛教文化初体验，准备赶完下一目的地—郑王庙再次体验佛教文化</br></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/7f6d57da851ca4aad951b8416d2eda59.jpeg" alt="在这里插入图片描述"></p>
<center>泰国的公交车</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/1eed5bd6c9dd0514170f897cc7b1faa0.jpeg" alt="在这里插入图片描述"></p>
<center>坐船去郑王庙</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/64b5301b90e1d764196237c1ee2e75e6.jpeg" alt="在这里插入图片描述"></p>
<center>郑王庙又叫黎明寺,标志性的五座佛塔。在船上没拍，所以借用一张网络图片</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/f147da66d3ad7a08e356f9ecd512aefc.jpeg" alt="在这里插入图片描述"></p>
<center>郑王庙全景[图片来源于网络]	</center></br>	
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/940b59783fad40169bc0db289653533d.jpeg" alt="在这里插入图片描述"></p>
<center>猜猜这是啥？猜不到是地铁站吧</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d18faf70f41c3ded191c56c05f1d77b6.jpeg" alt="在这里插入图片描述"></p>
<center>SamYan，是一块商区，我就住在旁边</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/743db32bbd037c803ba2b4420516933d.jpeg" alt="在这里插入图片描述">		<br>
晚上吃饭的时候遇到一个企业家，会中文、英文、日文，我是用Broken English和他交流的，聊了差不多一个小时，他说了很多他的故事，比如他的父亲在中国困难的时候逃到泰国、他的妻子是个日本混血人、他在中国有家公司、他在加拿大留学的日子准备来上海复旦大学…总之，从交谈中学到很多</br></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/e421f834a05eaed5093ceed5048204dd.jpeg" alt="在这里插入图片描述"></p>
<center>Seven-Eleven-Eleven(711)一角</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/e0a6747e91e47d0e2b05b79573b360f6.jpeg" alt="在这里插入图片描述">	<br>
60层楼的空中酒吧，去的时候座位满了，在旁边拍了两张图片就回去了。没带相机，这么美的夜景被我毁了😹</br></p>
<h3 id="DAY3-10-6-曼谷"><a class="header-anchor" href="#DAY3-10-6-曼谷"></a>DAY3 10.6 曼谷</h3>
<p><strong>实际行程：白天去了下药店还有免税店，晚上去了火车夜市以及考山路</strong></p>
<p>可能是昨晚在酒吧喝了点饮料，回去直接拉肚子，拉了好几次，第二天去看医生说食物中毒，我的天，第一次碰到这情况，旅行中最难受的也莫过于此了吧<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/85bdb768fb99e5336c31d1f961d1dd13.jpeg" alt="在这里插入图片描述"></p>
<center>泰国的药</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/70bb6351af97e82817b917f18c2531ae.jpeg" alt="在这里插入图片描述"></p>
<center>拍完照才发现大学在对面</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/c8016576c50591857d5de5b8e05d288c.jpeg" alt="在这里插入图片描述"></p>
<center>火车夜市,章鱼蛋,才฿60	</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/7199abd4fcd0d974e829584c8f450ed4.jpeg" alt="在这里插入图片描述"></p>
<center>火车夜市,百香果沙冰</center><br></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/5af54afc38fecbfe764c7431294619c5.jpeg" alt="在这里插入图片描述">	<br>
考山路，这里很多背包客，走几步就可以看到外国人(当然我也是)，很多酒吧。在这边做了半小时按摩，很舒服，价格实惠</br><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/444e097bc5b841f050c1ebf60ac4e6f9.jpeg" alt="在这里插入图片描述"></p>
<center>考山路,烤鳄鱼。有点奢侈哈</center></br>
<h3 id="DAY4-10-7-曼谷"><a class="header-anchor" href="#DAY4-10-7-曼谷"></a>DAY4 10.7 曼谷</h3>
<p><strong>实际行程：上午做马杀鸡(massage)然后去车站，下午给朋友寄明细片，傍晚做车去清迈</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/141b8fd6c10ff8adca121b0894624366.jpeg" alt="在这里插入图片描述"></p>
<center>酒店的马杀鸡</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d3d92c03c3e821439071d80d9185302d.jpeg" alt="在这里插入图片描述"></p>
<center>酒店的马杀鸡，做完后还有东西吃,真好</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/b7e0b5afcc1b326933fa8411cdde0262.jpeg" alt="在这里插入图片描述">	<br>
在车站一个小哥用流利的英文给我推荐了一个很好的地方—JJMall，这儿不仅人民币汇率很低(感觉)而且有很多小礼品购买</br><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/2fe9062dd64ffdf2b1be741041358cab.jpeg" alt="在这里插入图片描述"></p>
<center>JJMall里面的汇率特别nice</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/bffc8c21e962af793b5d6ff5aa5df578.jpeg" alt="在这里插入图片描述">	<br>
在车站等大巴的时候，手机快没电了，看到旁边有个自助充电的地方(投硬币)，但我不知道充半小时需要投多少币，于是问了下旁边的哥们，可惜他不懂英文，给我比划了半天我也没搞明白。于是这个女生主动过来和我讲解，挺热心的女孩纸。然后充电过程中聊了一会，她也是去清迈还同一趟车,What a coincidence !说学了三年中文(我听的有点迷迷糊糊😹)。后面她把相机拿出来说“我们可以合影吗？” 我说“我正有此意”，真有意思</br><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/910e99f922f7a25642255d8deee6dcf9.jpeg" alt="在这里插入图片描述">	<br>
泰国的大巴，服务很nice(行李不用自己提 有显示器可以听歌看视频 车上有卫生间 有晚餐 早上有豆奶 那个空调温度开的很低有未拆封的被褥)</br></p>
<h3 id="DAY5-10-8-清迈"><a class="header-anchor" href="#DAY5-10-8-清迈"></a>DAY5 10.8 清迈</h3>
<p><strong>实际行程：上午补了一觉，下午去了古城，晚上看人妖秀</strong><br>
大巴六点就到清迈了，清迈是个小城，我们到酒店的时候也才六点半，然而遗憾的是没有空房了，需要等到下午两点才能入住，但是提供的水果和饮料都可以吃<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/76c4fa1f5c10c4cf06e866b2fce6915e.jpeg" alt="在这里插入图片描述"></p>
<center>酒店的水果</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/bc10113f23832d363cb1f40ffff25162.jpeg" alt="在这里插入图片描述"></p>
<center>酒店的食物</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/bac89edfda4982a719fef159b464d030.jpeg" alt="在这里插入图片描述"></p>
<center>酒店的水果和饮料</center></br>
<p>昨晚在大巴上没睡好，于去找了个青旅补了一觉，12点后再回到酒店</br></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/a997b99084840fb6cc3c3a94c942a03e.jpeg" alt="在这里插入图片描述"></p>
<center>拍个背影</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/45647a3639b69c450efdab4178919d8b.jpeg" alt="在这里插入图片描述"></p>
<center>这个车叫双条车，是清迈那边的主要交通工具，3km内差不多฿50泰铢，很实惠</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/76696b11aff01e5529ea22ed0cc35640.jpeg" alt="在这里插入图片描述">	<br>
上午把充电器忘在了青旅，下午去找老板的时候，刚开口就给我拿出来了，真好<br>
然后绕着古城走了一大半圈，就叫了个摩的回酒店了，傍晚穿着朋友泰国买的大裤衩游了半小时泳</br><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/ad9397c54b4d4d1d5605ad67444851f0.jpeg" alt="在这里插入图片描述"></p>
<center> 塔佩门，1296年建成，是古城唯一留下来的遗迹，小红书的网红打卡点</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/af2b64f7de3a2e8492dcfed7dfbe8d91.jpeg" alt="在这里插入图片描述"></p>
<center>塔佩门，广场上很多鸽子</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/feecd497a24dba254d8fdf211b093e3e.jpeg" alt="在这里插入图片描述"></p>
<center>清迈人妖秀地点，外面的五星红旗独当一面，可见中国的在东南亚很有威望</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/cc40ee95295095fe413719a4742594fc.jpeg" alt="在这里插入图片描述"></p>
<center>好精致的男孩子</center></br>
<h3 id="DAY6-10-9-清迈"><a class="header-anchor" href="#DAY6-10-9-清迈"></a>DAY6 10.9 清迈</h3>
<p><strong>实际行程：上午体验了一把滑翔机，下午去了清迈大学，然后在宁曼路附近逛了逛，晚上回深圳</strong></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d2c1657726118364159221a5a0cb7757.jpeg" alt="在这里插入图片描述"></p>
<center>滑翔机基地可爱的猫</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/76d70095f39b6d50c23a3721d5e030a2.jpeg" alt="在这里插入图片描述"></p>
<center>偷拍了一个性感小姐姐</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/7158f1efe0a8e8fa00bfac1e602e1206.jpeg" alt="在这里插入图片描述">	<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/779ae696f035a74b65255c5d06476134.jpeg" alt="在这里插入图片描述">	<br>
一次愉快刺激难忘的飞行体验  <a href="http://www.liquanhong.com/2019/12/08/glider_ChiangMai/">视频地址</a><br>
</br><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/4176d1897d7b1d2db463edab54017537.jpeg" alt="在这里插入图片描述"></p>
<center>清迈大学</center></br>	
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/34f2248a409ec255f1a9a9d4eda78e1d.jpeg" alt="在这里插入图片描述"></p>
<center>清迈大学，校门</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/e23de402b31cd6e44174243a284b6800.jpeg" alt="在这里插入图片描述"></p>
<center>清迈大学，很漂亮的湖，好多鸟叫声</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/7f7f607622c377836c37db8d0b938a28.jpeg" alt="在这里插入图片描述"></p>
<center>鸡排饭，很合口味，而且价格实惠，才฿60</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/3285cff2e8b87e10c1144ce1c22a7b3e.jpeg" alt="在这里插入图片描述"></p>
<center>帮一个朋友买东西，找了很久，终于在这找到了</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/88521faa67c229a07c95ad9c4d925383.jpeg" alt="在这里插入图片描述">	<br>
清迈的很多店客人都不多，但是店还开着，而且很多店的装饰都非常有情调，人一进去就放松下来。下午在这边点了一杯沙冰，坐了一个小时，撸了撸狗。店家说这边有DJ，让我们嗨，确实累了嗨不起来</br></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/fd8a4a59c2d91643d4201b5d9be2e458.jpeg" alt="在这里插入图片描述"></p>
<center>清迈的一家店，装饰很有情调</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/3d56d5e7ab184f11f4aa83b9963cf554.jpeg" alt="在这里插入图片描述">	<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/f266401ef94c5f04501dacc5cc8b7a62.jpeg" alt="在这里插入图片描述">	<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/eface764a37037c0b6c41ac32f7a8f8f.jpeg" alt="在这里插入图片描述"></p>
<center>以上三张图，留下了泰国最后的晚餐回忆</center></br>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/d99cc5f15383004f19e7d5487bc489b5.jpeg" alt="在这里插入图片描述"></p>
<center>10号凌晨3点左右，我们又回深圳了</center></br>
<h2 id="结语"><a class="header-anchor" href="#结语"></a>结语</h2>
<p>为期六天的旅行一晃而过，总的来说这次旅行非常开心。作为一个码农，逻辑一定要清楚，总结一下几点：</p>
<ul>
<li>泰国人很热情很有礼貌，尤其是对中国人，最开始对中国开放落地签的，很多地方都有中文提示</li>
<li>泰国的女生五官貌似都很端正，皮肤再白一点真的很有气质</li>
<li>泰国的服务比天朝做的好很多，很简单的例子，在天朝坐车从来没享受过提行李的服务</li>
<li>泰语相当温柔，听着语音播报感觉心都要萌化了。学了一句泰语,kuō kūn mà，谢谢你的意思</li>
<li>访问美国的网站会比国内快很多，貌似天朝TED都限速了</li>
<li>泰国的食物偏甜，在曼谷的几天都没吃好饭</li>
<li>泰国的冬荫功等汤都会放很多奇怪的香料，最多的是那个柠檬叶吧，反正我是吃不惯</li>
<li>泰国好像地基原因，楼房不让建高，60多层就很高了。曼谷还好，清迈基本是3-4层楼的房子</li>
<li>曼谷和全世界其他大城市并没有什么区别，纸醉金迷、灯红酒绿，我只有在夜晚的灯光渲染下，才能看到这座城市的美感，剩下的全是虚荣</li>
<li>清迈是一座很有情调的小城市，喜欢老板的生活方式</li>
</ul>
<p>本文完<br>
期待下次旅行~</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>泰国</tag>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>本地与windows server连接(搭建Git远程私库)</title>
    <url>/2019/12/15/windows_remote_private_library/</url>
    <content><![CDATA[<h2 id="一、概述"><a class="header-anchor" href="#一、概述"></a>一、概述</h2>
<p>本地代码写好部署到远程服务器需要通过SSH建立通信，Git支持SSH连接，连接成功后可以对Git仓库进行克隆、提交代码等操作，蛋是环境需要自己配置。windows是没有open ssh这个东西的，需要自己装软件来实现这个功能，目前有两种选择：<strong>Copssh</strong>和<strong>Gitblit</strong><span id="more"></span></p>
<h2 id="二、Copssh"><a class="header-anchor" href="#二、Copssh"></a>二、Copssh</h2>
<p>什么是Copssh?</p>
<blockquote>
<p>Copssh is an OpenSSH server and client implementation for Windows systems. It is a yet another packaging of portable OpenSSH, Cygwin,some popular utilites, plus implementation of some best practices regarding security.</p>
</blockquote>
<p>网上能找到的都是Copssh4.1.0，这个版本很低(官网最新版已经7.1了)，在windows 2012成功安装后，COPSSH Control Panel打不开，后来把服务器操作系统换到windows 2008也是同样的问题😳。原来免费版的只支持32位操作系统，但是云服务器不能装32位系统，最新版的Copssh需要去官网付费下载😹。总之，折腾了好久最终选择放弃。</p>
<h2 id="三、Gitblit安装与配置"><a class="header-anchor" href="#三、Gitblit安装与配置"></a>三、Gitblit安装与配置</h2>
<p>什么是Gitblit?</p>
<blockquote>
<p>Gitblit is an open-source, pure Java stack for managing, viewing, and serving Git repositories. It’s designed primarily as a tool for small workgroups who want to host centralized repositories</p>
</blockquote>
<p>Gitblit需要运行在JDK环境上，所以需要先下载安装JDK并配置环境变量。下载安装就不写了。</p>
<!--more-->
<h3 id="3-1、配置JDK环境变量"><a class="header-anchor" href="#3-1、配置JDK环境变量"></a>3.1、配置JDK环境变量</h3>
<p>新建系统变量JAVA_HOME，变量值为JDK所在目录<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/6a0960a3e7e0b9ddbf3a30b7e259df4d.png" alt="在这里插入图片描述">	<br>
新建系统变量CLASSPATH，变量值为.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar <strong>（注意前面有个.）</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/b89280b487e404d288468a868a046529.png" alt="在这里插入图片描述">	<br>
编辑系统变量Path,加入%JAVA_HOME%\bin ;%JAVA_HOME%\jre\bin变量<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/23ab6b7679ca57652f6047e694e37ba4.png" alt="在这里插入图片描述">	<br>
配置完后，在cmd输入javac输出类似下图这样的信息就说明jdk环境变量配置成功了<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/c6bda74f40c3beaab2174927d780eff6.png" alt="在这里插入图片描述"></p>
<h3 id="3-2、Gitblit安装与配置"><a class="header-anchor" href="#3-2、Gitblit安装与配置"></a>3.2、Gitblit安装与配置</h3>
<ul>
<li><strong>3.2.1、下载成功Gitblit后直接解压到指定目录就行了，然后修改/data/defaults.properties文件：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#Git仓库的文件路径</span><br><span class="line">git.repositoriesFolder = C:/myBlog</span><br><span class="line">#HTTP协议使用的端口号</span><br><span class="line">server.httpPort = <span class="number">1111</span></span><br><span class="line">#HTTPS协议使用的端口号, Tomcat的HTTPS默认使用的是<span class="number">8443</span>端口</span><br><span class="line">server.httpsPort = <span class="number">8443</span></span><br><span class="line">#HTTP协议传输数据的接口,外网要访问赋值为空</span><br><span class="line">server.httpBindInterface = </span><br><span class="line">#HTTPS协议传输数据的接口,外网要访问赋值为空</span><br><span class="line">server.httpsBindInterface = </span><br></pre></td></tr></table></figure>
<p>注意：我用的版本是1.8.0之前的版本是修改gitblit.properties文件</p>
<ul>
<li><strong>3.2.2、双击gitblit.cmd文件就可以启动了，启动效果如下：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/8d0f7e58d6f02d1e223b91fafb042c43.png" alt="在这里插入图片描述"></li>
<li><strong>3.2.3、现在是英文的，如果要改为中文，可以登录后(默认账号密码都是admin)点击my profile-preferences修改。如下所示:</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/d67a03522f735ba95bfe60e227ef5012.png" alt="在这里插入图片描述"></li>
<li><strong>3.2.4、把gitblit设置为windows服务</strong><br>
在Gitblit文件夹中编辑installService.cmd文件<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/43c6de73e0d7691ae74d29897f110d21.png" alt="在这里插入图片描述"><br>
修改保存后，以管理员方式运行后，windows服务会生成一个Gitblit服务<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/a44927338a954990b714300db9aecd61.png" alt="在这里插入图片描述"></li>
<li><strong>3.2.5、外网访问gitblit</strong><br>
需要在云服务器控制台中放通1111、29418端口。1111是上面设置的http协议端口,29418是Git提交代码需要访问的端口<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/415367da66c56014b4b1d47f3da36b33.png" alt="在这里插入图片描述">	<br>
这样配置后，外网就可以输入<strong>服务ip:1111</strong>访问到Gitblit主页、克隆仓库到本地了</li>
<li><strong>3.2.6、克隆服务器仓库到本地</strong><br>
先在服务端创建一个仓库<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/dee7d4180fcd56f6d6466a13e1d16806.png" alt="在这里插入图片描述">	<br>
复制刚刚版本库的地址(localhost需要改为公网ip)，通过Git克隆到本地<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/78125aa37c4a1148d7c2d2261e09234c.png" alt="在这里插入图片描述"><br>
仓库的初始化文件拉到本地就成功了<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/831b9c77341cadc011c9f7f63e14202c.png" alt="在这里插入图片描述">	<br>
能从远程服务器拉代码到本地，说明SSH通信连接已经建立，自然就能提交代码上去，提交代码步骤就不写了。</li>
<li><strong>3.2.7、自动化部署</strong><br>
修改C:\gitblit-1.8.0\data\groovy\localclone.groovy文件的rootFolder为你想部署的文件夹<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/7ea23c5b5ee41fc9ca953439c84c3db6.png" alt="在这里插入图片描述">	<br>
然后编辑仓库-receive-post-receive脚本-在select中选择刚刚编辑的文件<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/2483349556a2c6b1f36936622fd914f1.png" alt="在这里插入图片描述">	<br>
设置完记得保存。这样本地每次提交代码到服务器,Gitblit都会自动把本地的所有最新代码放到c:/blog文件夹下，实现自动化部署。</li>
</ul>
<h2 id="四、填坑记录"><a class="header-anchor" href="#四、填坑记录"></a>四、填坑记录</h2>
<ul>
<li><strong>4.1、从本地复制JDK到云服务器时多次操作均报类似下面这种错误</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/03a12a910b8293107b5047f8f0be34b0.png" alt="在这里插入图片描述">	<br>
最终解决是放弃本地文件传输😹，在服务器端直接通过网络下载</li>
<li><strong>4.2、把Gitblit设置成windows服务后,服务启动不了</strong><br>
查看C:\gitblit-1.8.0\logs输出的日志</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">2019</span>-<span class="number">12</span>-<span class="number">15</span> <span class="number">13</span>:<span class="number">21</span>:<span class="number">12</span>] [info]  Run service finished.</span><br><span class="line">[<span class="number">2019</span>-<span class="number">12</span>-<span class="number">15</span> <span class="number">13</span>:<span class="number">21</span>:<span class="number">12</span>] [info]  Commons Daemon procrun finished</span><br><span class="line">[<span class="number">2019</span>-<span class="number">12</span>-<span class="number">15</span> <span class="number">13</span>:<span class="number">21</span>:<span class="number">34</span>] [info]  Commons Daemon <span class="title function_">procrun</span> <span class="params">(<span class="number">1.0</span><span class="number">.10</span><span class="number">.0</span> <span class="number">64</span>-bit)</span> started</span><br><span class="line">[<span class="number">2019</span>-<span class="number">12</span>-<span class="number">15</span> <span class="number">13</span>:<span class="number">21</span>:<span class="number">34</span>] [info]  Running <span class="string">&#x27;gitblit&#x27;</span> Service...</span><br><span class="line">[<span class="number">2019</span>-<span class="number">12</span>-<span class="number">15</span> <span class="number">13</span>:<span class="number">21</span>:<span class="number">34</span>] [info]  Starting service...</span><br><span class="line">[<span class="number">2019</span>-<span class="number">12</span>-<span class="number">15</span> <span class="number">13</span>:<span class="number">21</span>:<span class="number">34</span>] [error] Failed creating java </span><br><span class="line">[<span class="number">2019</span>-<span class="number">12</span>-<span class="number">15</span> <span class="number">13</span>:<span class="number">21</span>:<span class="number">34</span>] [error] ServiceStart returned <span class="number">1</span></span><br><span class="line">[<span class="number">2019</span>-<span class="number">12</span>-<span class="number">15</span> <span class="number">13</span>:<span class="number">21</span>:<span class="number">34</span>] [info]  Run service finished.</span><br><span class="line">[<span class="number">2019</span>-<span class="number">12</span>-<span class="number">15</span> <span class="number">13</span>:<span class="number">21</span>:<span class="number">34</span>] [info]  Commons Daemon procrun finished</span><br></pre></td></tr></table></figure>
<p>关键错误[Failed creating java]，原来我的JDK安装的是32位的，所以设置服务的时候改成SET ARCH=x86，然后用sc delete gitblit删除服务，再重新运行installService.cmd文件就可以了</br><br>
如果服务还启动不了，可以以管理员运行gitblitw.exe文件，再修改JVM。如下图所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/a5ba6f61955753e06b6de3fe6e27cd51.png" alt="在这里插入图片描述"><br>
这样就可以重启服务了。还有问题自行百度吧😹</p>
<ul>
<li><strong>4.3、删除服务时如果出现&quot;指定的服务已经标记为删除&quot;错误提示了</strong><br>
需要把相关进程关闭并关闭服务管理窗口，然后重新执行删除命令即可</li>
</ul>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Git</tag>
        <tag>Gitblit</tag>
        <tag>Copssh</tag>
      </tags>
  </entry>
  <entry>
    <title>本科四年</title>
    <url>/2019/11/02/undergraduate/</url>
    <content><![CDATA[<p>写到这个还得从高三谈起，当时老师都对我期望很高，时常找我谈话，可是我并没对自己有那么高期望，再加上考前几周都心态很崩，结果顺利高分落榜。我的分数很难选择湖南的同等院校，后来参考老哥的意见,填了北民大,于是我的大学就这样跟我发生了关系😊。当然后来事实证明我的选择和运气都还不错,毕竟很难在大西北再找到第二所这样可以免费洗澡、免费上网、 免费游泳 甚至过节免费发钱的学校了😄。本科四年不仅仅收获了满满的知识，也留下了很多回忆。大学生活是人生中很重要的一部分，这可能是我这辈子最高的学历了,再不扯淡一把就没机会了。</p>
<span id="more"></span>
<h3 id="关于银川"><a class="header-anchor" href="#关于银川"></a>关于银川</h3>
<p>什么？你没听过这个城市？好吧，我去上学前也没听过，哈哈。不知道自己百度去。下面总结一下个人对银川的印象：</p>
<ul>
<li>空气很干燥。天生水润的我😛也开始忍不住大自然的肆虐，脸上掉皮,嘴唇干裂，不能像女生一样各种补水，大多时候靠喝水来曲线救国。</li>
<li>有很多穆斯林。自己也去过两次清真寺感受中国的伊斯兰文化。穆斯林与很多少数民族一样，给人一种很友好的感觉。还差点和一个穆斯林姑娘发生一段情缘，幸好悬崖勒马。现在大多数穆斯林已被汉化(比如开始抽烟喝酒),但坚守住不吃猪肉的底线。</li>
<li>道路很宽阔。贺兰山路、北京路还有一条忘了,这三条八车大道自西向东贯穿整个银川，可能是马路周围高楼较少相对于其他南方其他城市显得空旷许多(去泰国也会有这种感受)。</li>
<li>面食真是多。河南烩面、刀削面、臊子面、炸酱面、各种拌面、油泼面…面类三千，吾独钟牛肉拌面。</li>
<li>很多餐厅一般只有前台桌上有纸巾；几乎没有餐厅有水喝 他们一般都是喝茶(毕竟有名的是八宝茶)或者喝面汤。</li>
<li>银川很美。素有塞上江南之称，有沙湖、西北影城(大话西游在这拍的)、贺兰山岩画、水洞沟等都是很值得一看的景点。</li>
<li>生活很舒适。生活节奏没有一二线城市那么快，而且夏天不会很热,反正我没见过有看空调的地方，冬天有暖气,在室内穿一件衣服都可以，很适合养老的城市。</li>
<li>店主相对于南方城市少些热情。</li>
</ul>
<h3 id="本科四年做了些什么"><a class="header-anchor" href="#本科四年做了些什么"></a>本科四年做了些什么</h3>
<p>其实我最开始被网络工程专业录取的,由于宿舍其他人都是软件工程的(不知道怎么分的)，后来就申请转到软工了，这样就可以避免他们去上课把熟睡的我锁在宿舍了。这也是当时很重要的选择，有些人羡慕，有些人可惜，不管怎么说我觉得我是正确的，直到今日都暗暗窃喜。大一是带著中学时光的青涩感来体验大学生活的，夹杂着很多迷茫又对很多事物充满期待，体验了很多比赛参加了很多社团，其中对我影响叫深的是E米团队。记得11月份时学院刚刚组建院田径队，当时银川天气温度很低，而且昼夜温差很大，当时晚上还和队友去跑五公里，确实不容易。除了比赛社团，大一其他时间几乎都花在了看演讲视频，超级演说家都看完了，现在想想确实是时间多；然后还玩些诸如QQ飞车之类的休闲游戏，完了两个月就彻底卸载了。大一好像学校是管的最严的一年，然而也没有学到什么东西，倒是玩的挺开心的。看着身边有大一都挂科的朋友，那我就更开心了😄 。大一在专业知识上花的时间太少了(特别是数据结构和算法)，不过在大四时重新手敲了一遍数据结构，总算感受到了算法之美，最有意思的东西最后学也未尝不可。</br><br>
到大二时，我开始把大部分的经历都放在了专业知识的学习上，并一直坚持到大四。大二整整一年都在实验楼618的E米团队度过，时长8点到晚11点来这里和学长还有志同道合的同学一起学习。当时Java基础(包括泛型、反射、gui、网络编程都有学到)学了一个月，手敲代码上万行，对面向对象有了基本理解，刚入大二的我还是挺自豪的，因为现在很多基础薄弱的应届生都没听过这些概念。虽然有些学长建议Java只需学一周，直到现在我还是很赞同自己当时的做法，因为我觉得一知半解纯属浪费时间。然后我花了大半年时间学习Android应用程序开发，由于有了Java编程语言基础，学Android很快就上手了。后来申请到了学校的国家级创新训练项目，这个项目主要是要实现一个吹一口气翻一页的阅读功能，从界面到网络接口都是一个人在弄，大二结束的时候基本功能都已经实现了，核心功能大三上学期也完成,清楚地记得核心功能实现的那个晚上我高兴得跳了起来。说实话，这个项目运气成分挺大的,当时我们学院最后只有我一个人通过了。除此之外，大二开始认真阅读书籍，平均每年20多本，我觉得对于理工科的学生来说，已经很好了。大二暑假，我曾独自骑行640Km到西安，历时5天，翻高原、搭帐篷、过隧道、和陌生人同宿等经历都对我日后的学习起着激励作用，也使我更珍惜生命。暑假快结束时，我去了一趟三亚，夏日的骄阳，清透的晴空，浑然天成的色调，偶尔微风，喃喃细语，抚慰心弦，北纬18度的行程，美幻的让我留恋，真的太美了。遗憾的是，那几天天气,终止了潜水计划。这次旅行让我从一年中的编码生活中释放出来，我也发现，旅行是生活的解药，却不是生活的全部，我开始更珍惜当下的生活。</br><br>
大三课都很少，用一句话来描述就是：大三不考研，赛过活神仙！即使这样的生活很美好，但总有人不甘平庸。大三我开始向网站建设方面学习，上学期学Html、css、jquery等前端知识(后来发现这儿完全不用浪费这么多时间)；下学期学了Spring、hibernate、struts2、mybatis、springmvc，我一直对java基础比较自信，所以学习起这些技术并没什么困难，毕竟框架只是一个工具。大三我是和几个小伙伴住在校外的(此故事纯属虚构,老师我没有在校外租房)，银川的房价真是nice，一年还没得深圳两个月多😹，在此期间看了一些国外的书籍，可能脑子抽风了，决定要把英语学好，并决定要把六级考过(当时四级没过 而且一年多没考了)。四六级其实并不难，直到今天我还是坚持认为这并不能作为衡量英语水平的指标，仅仅是一个参考。我先从语法开始，然后句子，长难句,再后来准备写作,阅读,听力这种题型以应付考试；因为我高中英语有点基础，那时候用百词斩测试有4000左右词汇量，到一年后，已经1万多一点点了,这个词汇量使我看六级阅读的时候很顺畅,阅读分很高，于是顺利连续通过四六级。大三下学期在学校的801创业园跟着学长一起做些小项目，直到大三暑假找到工作后才慢慢离开。大三期间去过一次北京，从天安门到清华园再到鸟巢，都体现了这个大都市的别样魅力。</br><br>
在大四前一个月就在银川本地找了一家软件公司实习以便在这边考英语六级，大概工作了三个月，在公司独立开发了两个项目，学到很多编程相关知识，也学到很多业务知识。但是后面公司的大概意思是要我一个人把那个电商平台搞定，于是我吃不消，就和老板商榷了很多次才勉强溜走，当然老板很看重我(一来银川很缺人，二来我确实不错😆)，一年多又好几次联系我回去工作。大四我去了两次重庆，感觉非常不错，尤其是那廉价的机票。重庆是个有特色的城市，地铁一般要坐个三到四个电梯才到，即便主城区道路也是“七上八下”，道路两边的房子看起来都是斜着建起来的，名副其实的山城；还有一点是我夜晚路过江边发现，大多数灯光都是黄色的，我猜是和“陪都”文化有关。大四的元旦到三月这段时间一直在学数据结构和算法，除图以外的所有数据结构以及常见排序算法我都重新用Java实现了一遍，有种豁然开朗的感觉，现在竞争特别激烈，这还远远达不到大公司的要求，但在这个过程我竟发现了编程之美、编程的乐趣。三月后，先是参加了很多互联网公司的校招，比如网易、携程、去哪儿网，竞争真的很大，比如携程即使三道算法题解出了两道依然没有后续通知，然后做了几个练手的项目，还帮几个同学完成了毕业设计(此故事纯属虚构,老师没这回事)。</p>
<h3 id="本科四年学到了些什么"><a class="header-anchor" href="#本科四年学到了些什么"></a>本科四年学到了些什么</h3>
<p>在这所普普通通的学校,学习氛围、师资力量和名校没得比，事实上课堂上的东西确实也不多，所谓纸上得来终觉浅。现在公司用的技术，大部分都是我大学自学的，我很幸运。有意识地培养了很多小习惯。时隔一年半大部分的习惯都习惯了，收益最明显的要数阅读和运动了，当然个别习惯由于工作性质很难继续保持下去。我想这些习惯比学到的理论知识更为重要，会潜移默化地影响我一生吧。大学之于我最大的意义，不只是那些学到的知识，因为我不确定这些知识在5年后、10年后是否还有用，更重要的是那种学习能力，即便这个东西淘汰了，我花不久时间又可以把另一个东西学会，我觉得这更重要。还有让我慢慢地了解了自己知道自己是一个怎样的人自己到底需要什么，慢慢地发现自己身上有这么多的flaw，改变自己从从发现自己的缺点开始，从承认自己没有一个有趣的灵魂开始，如果有机会再重新选一次，我想我还会这么选择。</p>
<h3 id="写在最后"><a class="header-anchor" href="#写在最后"></a>写在最后</h3>
<p>写了那么多其实我也只是在扯淡，仅为抛砖引玉，但活了二十多年，我至少确信下面几点是对的：</p>
<ul>
<li>任何一个人说的话，经历过的事，提出的回答，都未必会适用于第二个人。人生的不确定因素太多了，我在知乎看过很多道理，听过很多解释。但我自己去处理时却发现别人的意见不管是善意还是无心，都不能替你做决定。请相信自己的判断。</li>
<li>没有对与错的选择，只有后不后悔的选择。在大学里有庞大的选择，就好像一个RPG游戏有各种天赋和技能树，有的时候做出了选择，在日后回忆起来会觉得不值得，就觉得自己的选择错了。其实人生这种事，没有对与错，只有值不值得。</li>
<li>每个人都是不同的。由于家庭背景、受教育，阅历等各方面原因造就了我们的不同，我们的独特。有些朋友有时候会给我一些建议，说到点的我就采纳了，和我风马牛不相及的我便委婉回应。<br>
四年生活短短几千字很难表达清楚，要回忆的太多太多，要感恩的也很多很多。一路走来跌跌撞撞，感谢那些曾经给我帮助、给我鼓励的人，是你们让我更自信；感谢那些曾经排挤、嘲笑我的人，是你们让我更坚强；当然，我更想感谢那个从未放弃的自己。<br/><br>
2019年11月02日于深圳</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>大学</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>大学</tag>
        <tag>骑行</tag>
        <tag>三亚</tag>
        <tag>重庆</tag>
        <tag>北京</tag>
      </tags>
  </entry>
  <entry>
    <title>清迈滑翔机视频</title>
    <url>/2019/12/08/glider_ChiangMai/</url>
    <content><![CDATA[<p>上次去泰国清迈的时候玩了滑翔机，但是视频文件有点大，平时也有点小忙，视频一直没剪辑，今天下午总算搞完了，视频如下：<span id="more"></span></p>
<!--爱奇艺-->
<!-- <iframe src="https://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=524e898c4e6472b794538c2b54e75b82&tvId=10173314400&accessToken=2.f22860a2479ad60d8da7697274de9346&appKey=3955c3425820435e86d0f4cdfe56f5e7&appId=1368&height=100%&width=100%" frameborder="0" allowfullscreen="true" width="100%" height="500px;"></iframe> -->
<!--腾讯(样式太丑了)-->
<iframe class="video_iframe" style="z-index:1;" src="https://v.qq.com/iframe/player.html?vid=t3114s1pu1b" frameborder="0" allowfullscreen="true" width="100%" height="500px"></iframe>]]></content>
      <categories>
        <category>生活随笔</category>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>泰国</tag>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>《动物庄园》读书笔记</title>
    <url>/2021/02/23/animal_farm/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/aa7785ec7e93490ed9e8272370c0d933.png" alt="在这里插入图片描述"></p>
<p>书名：动物庄园<br>
英文名: <em>Animal Farm</em><br>
作者：[英]乔治.奥威尔<br>
译者：姜希颖<br>
读完时间：2020年10月</br></p>
<span id="more"></span>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p>动物庄园&quot;七诫&quot;反复修改，我印象最深的是把&quot;所有动物都一律平等&quot;改为了&quot;所有动物都一律平等，但是有些动物比其他动物更加平等&quot;。反观人类社会也不可能有绝对平等，阶级差异永远存在，共产主义是几乎不可能实现的。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>BeanUtils和BeanCopier拷贝对象对比</title>
    <url>/2021/12/01/beanutils_compare_beancopier/</url>
    <content><![CDATA[<h2 id="需求描述"><a class="header-anchor" href="#需求描述"></a>需求描述</h2>
<p>在Java后端开发的时候，我们有时为了隔离变化，经常需要把数据库查询出来的实体转为返回前端的对象，我们不希望写很长的set方法去完成，于是可以考虑使用BeanUtils或BeanCopier工具类。下面通过Awards和AwardsResp类的转换简单说明下用法。</p>
<span id="more"></span>
<p>Awards类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Awards</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String topClass;</span><br><span class="line">    <span class="keyword">private</span> List&lt;AwardsDetail&gt; detailList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AwardsResp类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AwardsResp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String topClass;</span><br><span class="line">    <span class="keyword">private</span> List&lt;AwardsDetailResp&gt; detailList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BeanUtils"><a class="header-anchor" href="#BeanUtils"></a>BeanUtils</h2>
<p>BeanUtils 是org.springframework.beans下面的一个类。<br>
简单用法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AwardsResp</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AwardsResp</span>();</span><br><span class="line">BeanUtils.copyProperties(awards,resp);</span><br></pre></td></tr></table></figure>
<p>copyProperties方法相关说明：</p>
<ul>
<li>不能复制属性名相同但是类型不同的属性(比如Long和Integer)</li>
<li>不能复制list属性</li>
<li>可以把map中的属性设置到对象中<br>
<strong>需要用org.apache.commons.beanutils包下面的类</strong></li>
</ul>
<h2 id="BeanCopier"><a class="header-anchor" href="#BeanCopier"></a>BeanCopier</h2>
<p>BeanCopier是org.springframework.cglib.beans包下面的一个类。<br>
简单用法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AwardsResp</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AwardsResp</span>();</span><br><span class="line"><span class="comment">// 获取对象</span></span><br><span class="line"><span class="comment">// 第三个参数userConverter,是否开启Convert,默认BeanCopier只会做同名。对于属性名相同类型不同的需要自己写转换器</span></span><br><span class="line"><span class="type">BeanCopier</span> <span class="variable">copier</span> <span class="operator">=</span> BeanCopier.create(awards.getClass(), resp.getClass(), <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 开始复制</span></span><br><span class="line"><span class="comment">// 第三个参数也是转换器</span></span><br><span class="line">copier.copy(awards, resp, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p>copy方法相关说明：</p>
<ul>
<li>默认不能复制属性名相同但是类型不同的属性(比如Long和Integer)。当然可以自己写转换器实现。</li>
<li>可以&quot;复制&quot;list属性(<strong>只是把对象的引用指向改变了</strong>)<br>
比如复制后AwardsResp的detailList指向的是Awards的detailList对象地址，Awards的detailList是什么样最终返回的就是什么样，不受List<AwardsDetailResp>中的类型影响。</li>
</ul>
<h2 id="Gson或者Fastjson实现对象拷贝"><a class="header-anchor" href="#Gson或者Fastjson实现对象拷贝"></a>Gson或者Fastjson实现对象拷贝</h2>
<p>BeanUtils和BeanCopier都不真正支持复制list属性，用Gson或者Fastjson就可以实现。<br>
Gson代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"><span class="type">AwardsResp</span> <span class="variable">resq</span> <span class="operator">=</span> gson.fromJson(gson.toJson(awards),AwardsResp.class);</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/a1275302036/article/details/119544832">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis保存对象的两种方式</title>
    <url>/2019/11/09/redis_two_ways_to_save_objects/</url>
    <content><![CDATA[<h2 id="Redis保存对象的两种方式"><a class="header-anchor" href="#Redis保存对象的两种方式"></a>Redis保存对象的两种方式</h2>
<p>一、序列化(实体需要实现Serializable接口)</p>
<ul>
<li>序列化就是将一个对象转换为二进制的数据流。这样就可以进行传输，或者保存到文件中。如果一个类的对象要想实现序列化，就<strong>必须实现serializable接口</strong>。<span id="more"></span>在此接口中没有任何的方法，此接口只是作为一个标识，表示本类的对象具备了序列化的能力而已。</li>
<li>反序列化:将二进制数据流转换成相应的对象</li>
</ul>
<p>主要代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存对象(list一样)</span></span><br><span class="line"><span class="type">Company</span> <span class="variable">company1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Company</span>();</span><br><span class="line">company1.setCustId(<span class="number">102034L</span>);</span><br><span class="line">company1.setCustName(getSessionUser().getCustName());</span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> jedisClient.set(<span class="string">&quot;test123&quot;</span>.getBytes(),SerializationUtil.serialize((company1));</span><br><span class="line"><span class="comment">//获取对象</span></span><br><span class="line"><span class="type">byte</span>[] bs = jedisClient.get(<span class="string">&quot;test123&quot;</span>.getBytes());</span><br><span class="line"><span class="type">Company</span> <span class="variable">company</span> <span class="operator">=</span>(Company)SerializationUtil.deserialize(bs);</span><br></pre></td></tr></table></figure>
<p>序列化工具类(两个)代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object object) &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(object);</span><br><span class="line">            <span class="type">byte</span>[] bytes = baos.toByteArray();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bais = <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            <span class="keyword">return</span> ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个也是可以的 捕获了一些异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectTranscoder</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object value) &#123;    </span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;Can&#x27;t serialize null&quot;</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="type">byte</span>[] rv=<span class="literal">null</span>;    </span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;    </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;    </span><br><span class="line">        <span class="keyword">try</span> &#123;    </span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();    </span><br><span class="line">            os = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);    </span><br><span class="line">            os.writeObject(value);    </span><br><span class="line">            os.close();    </span><br><span class="line">            bos.close();    </span><br><span class="line">            rv = bos.toByteArray();    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Non-serializable object&quot;</span>, e);    </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;    </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                 <span class="keyword">if</span>(os!=<span class="literal">null</span>)os.close();  </span><br><span class="line">                 <span class="keyword">if</span>(bos!=<span class="literal">null</span>)bos.close();  </span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e2) &#123;  </span><br><span class="line">             e2.printStackTrace();  </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> rv;    </span><br><span class="line">    &#125;    </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] in)</span> &#123;    </span><br><span class="line">        Object rv=<span class="literal">null</span>;    </span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;    </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;    </span><br><span class="line">        <span class="keyword">try</span> &#123;    </span><br><span class="line">            <span class="keyword">if</span>(in != <span class="literal">null</span>) &#123;    </span><br><span class="line">                bis=<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(in);    </span><br><span class="line">                is=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);    </span><br><span class="line">                rv=is.readObject();    </span><br><span class="line">                is.close();    </span><br><span class="line">                bis.close();    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;    </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">         &#125;<span class="keyword">finally</span> &#123;    </span><br><span class="line">             <span class="keyword">try</span> &#123;  </span><br><span class="line">                 <span class="keyword">if</span>(is!=<span class="literal">null</span>)is.close();  </span><br><span class="line">                 <span class="keyword">if</span>(bis!=<span class="literal">null</span>)bis.close();  </span><br><span class="line">             &#125; <span class="keyword">catch</span> (Exception e2) &#123;  </span><br><span class="line">                 e2.printStackTrace();  </span><br><span class="line">             &#125;  </span><br><span class="line">         &#125;  </span><br><span class="line">        <span class="keyword">return</span> rv;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二、json字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存对象(list一样)</span></span><br><span class="line"><span class="type">Company</span> <span class="variable">company1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Company</span>();</span><br><span class="line">company1.setCustId(<span class="number">102034L</span>);</span><br><span class="line">company1.setCustName(getSessionUser().getCustName());</span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> jedisClient.set(<span class="string">&quot;test123&quot;</span>, com.alibaba.fastjson.JSON.toJSONString(company1));</span><br><span class="line"><span class="comment">//获取对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">returnValue</span> <span class="operator">=</span> jedisClient.get(<span class="string">&quot;test123&quot;</span>);</span><br><span class="line"><span class="type">Company</span> <span class="variable">company</span> <span class="operator">=</span> com.alibaba.fastjson.JSON.parseObject(returnValue,Company.class);</span><br><span class="line">System.out.println(company.getCustName());</span><br></pre></td></tr></table></figure>
<p>用redis的字符串存储java对象的话，后面查询的数据是没法进行分页的，如果要分页可以考虑用redis的list存储</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(五)</title>
    <url>/2021/07/24/coding_notes_five/</url>
    <content><![CDATA[<h1>Java程序猿搬砖笔记(五)</h1>
<p>作为码农平时搜集一些小知识点个人认为是个不错的习惯，书上说</p>
<blockquote>
<p>好记性不如烂笔头</p>
</blockquote>
<p>我想即使是以前忽略或者新get的很简单的东西，自己动手记下来不管如何印象也会更深刻。</p>
<span id="more"></span>
<h2 id="Excel的COUNTIFS函数"><a class="header-anchor" href="#Excel的COUNTIFS函数"></a>Excel的COUNTIFS函数</h2>
<p>基本结构是：<br>
=COUNTIFS(条件匹配查询区域1，条件1，条件匹配查询区域2，条件2，以此类推…）</p>
<h2 id="Windows批量改文件名方法"><a class="header-anchor" href="#Windows批量改文件名方法"></a>Windows批量改文件名方法</h2>
<p>新建txt文件，文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">REM</span><br><span class="line">REM rename</span><br><span class="line">REM</span><br><span class="line">ren 原文件名 新文件名</span><br><span class="line">ren 原文件名 新文件名</span><br><span class="line">ren 原文件名 新文件名</span><br></pre></td></tr></table></figure>
<h2 id="PostgreSQL查询某张表的所有字段"><a class="header-anchor" href="#PostgreSQL查询某张表的所有字段"></a>PostgreSQL查询某张表的所有字段</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> information_schema. columns </span><br><span class="line"><span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;schema名&#x27;</span> <span class="keyword">and</span> table_name <span class="operator">=</span><span class="string">&#x27;表名&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="PostgreSQL查询某张表的所有字段名并用逗号拼接"><a class="header-anchor" href="#PostgreSQL查询某张表的所有字段名并用逗号拼接"></a>PostgreSQL查询某张表的所有字段名并用逗号拼接</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> string_agg(column_name,<span class="string">&#x27;,&#x27;</span>) <span class="keyword">from</span> information_schema. columns </span><br><span class="line"><span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;schema名&#x27;</span> <span class="keyword">and</span> table_name <span class="operator">=</span><span class="string">&#x27;表名&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="MyBatis的-是占位符-不能做运算，-可以做运算但是会有sql注入风险"><a class="header-anchor" href="#MyBatis的-是占位符-不能做运算，-可以做运算但是会有sql注入风险"></a>MyBatis的#是占位符 不能做运算，$可以做运算但是会有sql注入风险</h2>
<p>在动态排序或者分页的时候需要用到$</p>
<h2 id="Java8根据某一字段属性去重"><a class="header-anchor" href="#Java8根据某一字段属性去重"></a>Java8根据某一字段属性去重</h2>
<h3 id="通过TreeSet"><a class="header-anchor" href="#通过TreeSet"></a>通过TreeSet</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; studentDistinctList = studentList.stream()</span><br><span class="line">.collect(Collectors.collectingAndThen</span><br><span class="line">(Collectors.toCollection(() -&gt;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(t -&gt; t.getName()))),</span><br><span class="line">ArrayList::<span class="keyword">new</span></span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="通过district"><a class="header-anchor" href="#通过district"></a>通过district</h3>
<p>能是简单数据类型比如List<String>。</p>
<h2 id="Java8筛选集合数据"><a class="header-anchor" href="#Java8筛选集合数据"></a>Java8筛选集合数据</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list <span class="title function_">stream</span><span class="params">()</span>. filter(item-&gt;item.getId&gt;<span class="number">0</span>)</span><br><span class="line">.filter(item-&gt;!StringUtils.isEmpty(item.getName()))</span><br><span class="line">.collect(Collection. toList())</span><br></pre></td></tr></table></figure>
<p>可以链式筛选，非常方便高效</p>
<h2 id="Git解决完冲突还说没解决完，IDEA也没显示冲突文件"><a class="header-anchor" href="#Git解决完冲突还说没解决完，IDEA也没显示冲突文件"></a>Git解决完冲突还说没解决完，IDEA也没显示冲突文件</h2>
<p>先用git status查看，unmerge path下面的都是有冲突的文件</p>
<h2 id="前端传-，后端会作为大小为1集合接收，用CollectionUtil判不了空，如果sql用like的话就会查所有数据。"><a class="header-anchor" href="#前端传-，后端会作为大小为1集合接收，用CollectionUtil判不了空，如果sql用like的话就会查所有数据。"></a>前端传[&quot;&quot;]，后端会作为大小为1集合接收，用CollectionUtil判不了空，如果sql用like的话就会查所有数据。</h2>
<h2 id="PostgreSQL插入更新语句"><a class="header-anchor" href="#PostgreSQL插入更新语句"></a>PostgreSQL插入更新语句</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">inset <span class="keyword">into</span> 表名(列字段<span class="number">1</span>,列字段<span class="number">2</span>,列字段<span class="number">3</span>)<span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>) </span><br><span class="line"><span class="keyword">on</span> conflict(唯一索引) do <span class="keyword">update</span> <span class="keyword">set</span> 列<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,列<span class="number">2</span><span class="operator">=</span>值</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Git</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(六)</title>
    <url>/2021/11/09/coding_notes_six/</url>
    <content><![CDATA[<h2 id="RequestBody注解支持空参数"><a class="header-anchor" href="#RequestBody注解支持空参数"></a>@RequestBody注解支持空参数</h2>
<p>@RequestBody(required=false)，get/post且实体不加无参构造方法都行</p>
<h2 id="windows查看占用端口并杀死对应进程"><a class="header-anchor" href="#windows查看占用端口并杀死对应进程"></a>windows查看占用端口并杀死对应进程</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\Documents\MyIdeaProjects\act\target&gt;netstat -ano |findstr <span class="string">&quot;8888&quot;</span></span><br><span class="line">  TCP    0.0.0.0:8888           0.0.0.0:0              LISTENING       14176</span><br><span class="line">  TCP    [::]:8888              [::]:0                 LISTENING       14176</span><br><span class="line"></span><br><span class="line">E:\Documents\MyIdeaProjects\act\target&gt;tasklist |findstr <span class="string">&quot;14176&quot;</span></span><br><span class="line">javaw.exe                    14176 Console                    2    254,736 K</span><br><span class="line"></span><br><span class="line">E:\Documents\MyIdeaProjects\act\target&gt;taskkill /f /t /im <span class="string">&quot;javaw.exe&quot;</span></span><br><span class="line">成功: 已终止 PID 14176 (属于 PID 13304 子进程)的进程。</span><br><span class="line"></span><br><span class="line">E:\Documents\MyIdeaProjects\act\target&gt;netstat -ano |findstr <span class="string">&quot;8888&quot;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="MySQL和MyBatis对JSON类型字段的处理"><a class="header-anchor" href="#MySQL和MyBatis对JSON类型字段的处理"></a>MySQL和MyBatis对JSON类型字段的处理</h2>
<ul>
<li>
<p>MySQL有JSON字段，MyBatis不支持JSON类型字段的处理，需要自己写Handler</p>
</li>
<li>
<p>MySQL存有转义字符的JSON会报错，比如&quot;apiParam&quot;:&quot;{orderId:&quot;$orderId$&quot;}&quot;</p>
<p><a href="https://blog.csdn.net/dongbeiou/article/details/106303247">参考链接</a><br>
<a href="https://blog.csdn.net/LiXiuu/article/details/88970255">参考链接</a></p>
</li>
</ul>
<h2 id="Java连接8-0版本的MySQL"><a class="header-anchor" href="#Java连接8-0版本的MySQL"></a>Java连接8.0版本的MySQL</h2>
<p>Java连接的8.0版MySQL时需要把mysql-connector-java包换成8.X版本的，把链接换成com.mysql.cj.jdbc.Driver。com.mysql.cj.jdbc.Driver是6.x版本的新功能，需要指定时区serverTimezone和useSSL报com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server错误同样是因为数据库版本太高了而对应的驱动器太低了。相关代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- dbcp链接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///activiti_demo?serverTimezone=UTC<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/liaojie970/p/8916568.html">参考链接</a></p>
<h2 id="Spring整合Activiti测试时报错"><a class="header-anchor" href="#Spring整合Activiti测试时报错"></a>Spring整合Activiti测试时报错</h2>
<p>错误如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">&#x27;processEngine&#x27;</span>: FactoryBean threw exception on object creation; nested exception is org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="line">Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table <span class="string">&#x27;activiti_spring.act_ge_property&#x27;</span> doesn<span class="string">&#x27;t exist</span></span><br></pre></td></tr></table></figure>
<p>原因：因为mysql使用schema标识库名而不是catalog，因此mysql会扫描所有的库来找表，如果其他库中有相同名称的表，activiti就以为找到了，本质上这个表在当前数据库中并不存在。设置nullCatalogMeansCurrent=true，表示mysql默认当前数据库操作，在mysql-connector-java 5.xxx该参数默认为true，在6.xxx以上默认为false，因此需要设置nullCatalogMeansCurrent=true。<br>
解决方法：配置mysql连接时加上：nullCatalogMeansCurrent=true。<br>
代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql://localhost:3306/activiti_spring?nullCatalogMeansCurrent=true&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_43770545/article/details/101197861">参考链接</a></p>
<h2 id="Apache-CXF客服端调用失败"><a class="header-anchor" href="#Apache-CXF客服端调用失败"></a>Apache CXF客服端调用失败</h2>
<p>错误信息如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Caused by: org.apache.cxf.binding.soap.SoapFault: Unexpected wrapper element</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<ul>
<li>客户端接口头部的@WebService加上服务端的命名空间(可以通过wsdl文档查看)<br>
比如@WebService(targetNamespace=“http://service.ws.myapp.com/”)</li>
<li>客户端和服务端包名改成一致的(不推荐)</li>
</ul>
<h2 id="IDEA几个常用快捷键"><a class="header-anchor" href="#IDEA几个常用快捷键"></a>IDEA几个常用快捷键</h2>
<p>ctrl+home 		跳到文件头<br>
ctrl+end  		跳到文件尾<br>
ctrl+f1+1         定位到文件位置<br>
ctrl+shift+u     大小写转换</p>
<h2 id="jps-l命令"><a class="header-anchor" href="#jps-l命令"></a>jps -l命令</h2>
<p>jps -l命令可以查看本地启动的java进程，这是Jdk提供的命令</p>
<h2 id="IDEA配置svn"><a class="header-anchor" href="#IDEA配置svn"></a>IDEA配置svn</h2>
<ul>
<li>需要按照SVN的时候选择命令行，否则在svn客户端安装路径bin目录下找不到svn.exe。</li>
<li>重新安装SVN后，右键-&gt;settings(设置)-&gt;icon overlays(图标覆盖)-&gt;选择shell(windows外壳)，如果无效需要修改注册表后重启。<br>
<a href="https://jingyan.baidu.com/article/425e69e616b570be15fc16ae.html">参考链接</a><br>
<a href="https://www.jianshu.com/p/82fddcacbcf0">参考链接</a></li>
</ul>
<h2 id="IDEA更新svn项目提示authentication-required解决方法"><a class="header-anchor" href="#IDEA更新svn项目提示authentication-required解决方法"></a>IDEA更新svn项目提示authentication required解决方法</h2>
<ul>
<li>File-&gt;Settings-&gt;Version Control-&gt;Subversion-&gt;Clear Auth Cache 这个时候IDEA拉取代码会报No appropriate protocol (protocol is disabled or cipher suites are inappropriate)错，需要进行第二步</li>
<li>本地拉取代码，提示框选择永久接受证书；再回到IDEA 成功拉取代码。</li>
</ul>
<h2 id="引入Swagger后前端访问路径默认加了-v2-api-docs"><a class="header-anchor" href="#引入Swagger后前端访问路径默认加了-v2-api-docs"></a>引入Swagger后前端访问路径默认加了/v2/api-docs</h2>
<p><strong>方法一</strong>、把属性文件的server.servlet.context-path=/portal去掉可以正常访问</p>
<p><strong>方法二</strong>、</p>
<ul>
<li>在资源目录新建一个属性文件，内容如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pringfox.documentation.swagger.v2.path=/</span><br></pre></td></tr></table></figure>
<ul>
<li>在SwaggerConfig配置类添加注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:swagger.properties&quot;)</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.it1352.com/985596.html">参考链接</a></p>
<h2 id="Java实体转Map"><a class="header-anchor" href="#Java实体转Map"></a>Java实体转Map</h2>
<ul>
<li>Web项目推荐使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BeanMap</span> <span class="variable">map</span> <span class="operator">=</span> BeanMap.create(noticePageReq);</span><br></pre></td></tr></table></figure>
<ul>
<li>Java项目推荐使用反射</li>
</ul>
<p><a href="https://blog.csdn.net/hgg923/article/details/85263663">参考链接</a></p>
<h2 id="mybatis做动态排序的时候，字段打印出字符串解决方法"><a class="header-anchor" href="#mybatis做动态排序的时候，字段打印出字符串解决方法"></a>mybatis做动态排序的时候，字段打印出字符串解决方法</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryNoticePageList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Map&quot;</span> &gt;</span></span><br><span class="line">  select</span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span></span><br><span class="line">  from t_notice</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;prop != null&quot;</span> &gt;</span></span><br><span class="line">    order by #&#123;prop&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;order != null&quot;</span> &gt;</span></span><br><span class="line">      #&#123;order&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>order by中打印出了字符串，在sql中会语法错误 :</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, notice_type_id, title, source, description, status, create_time, update_time, create_user, last_update_user, is_show, release_time</span><br><span class="line"> <span class="keyword">FROM</span> t_notice <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">&#x27;title&#x27;</span> <span class="string">&#x27;asc&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">把上面的#&#123;prop&#125;改为$&#123;prop&#125;,#&#123;order&#125;改为$&#123;order&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringBoot接收对象属性的属性时为空"><a class="header-anchor" href="#SpringBoot接收对象属性的属性时为空"></a>SpringBoot接收对象属性的属性时为空</h2>
<p>Java实体对象如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageRequest</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer page; <span class="comment">//当前页</span></span><br><span class="line">    <span class="keyword">private</span> Integer rows; <span class="comment">//每页显示数</span></span><br><span class="line">    <span class="keyword">private</span> String prop; <span class="comment">//排序字段名</span></span><br><span class="line">    <span class="keyword">private</span> String order; <span class="comment">//排序方式：asc或desc</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoticePageReq</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;公告标题&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求接口后：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/e65bbb9a0a29debaea3a68f97ca6252f.png" alt="在这里插入图片描述"></p>
<p><strong>解决方法1</strong>：在类NoticePageReq上添加@Data注解，这个注解会给属性加Set和get方法，需要添加lombok依赖。<br>
<strong>解决方法2</strong>：在属性title添加@JsonProperty注解。这个注解的主要作用是把传过来的JSON值转换名称，比如下划线转驼峰，然后注入值。</p>
<h2 id="Spring中的-Transactional-rollbackFor-Exception-class-属性详解"><a class="header-anchor" href="#Spring中的-Transactional-rollbackFor-Exception-class-属性详解"></a>Spring中的@Transactional(rollbackFor = Exception.class)属性详解</h2>
<p><a href="https://www.cnblogs.com/clwydjgs/p/9317849.html">参考链接1</a>、<a href="https://www.cnblogs.com/yl97/p/13459871.html">参考链接2</a>、<a href="https://blog.csdn.net/zhenglichenboy/article/details/77676011">参考链接3</a></p>
<h2 id="用了lombok的-Data注解就不要继承关系"><a class="header-anchor" href="#用了lombok的-Data注解就不要继承关系"></a>用了lombok的@Data注解就不要继承关系</h2>
<h2 id="如何理解-public-static-T-T"><a class="header-anchor" href="#如何理解-public-static-T-T"></a>如何理解 public static <T> T</h2>
<p>这是泛型方法。在方法中出现了泛型的结构，泛型参数与类的泛型参数无关。泛型方法所属的类是不是泛型类都可以。泛型方法可以声明为static。参考代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidatorUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 获取validator对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Validator</span> <span class="variable">validator</span> <span class="operator">=</span> Validation.byProvider(HibernateValidator.class).configure()</span><br><span class="line">                                                   .failFast(<span class="literal">false</span>).buildValidatorFactory().getValidator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;  Set&lt;ConstraintViolation&lt;T&gt;&gt;  <span class="title function_">validateBean</span><span class="params">(T bean)</span>&#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;T&gt;&gt; validateResult =  validator.validate(bean);</span><br><span class="line">        <span class="keyword">return</span> validateResult;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/q610376681/article/details/88542620">参考链接</a></p>
<h2 id="Java-BigDecimal累加"><a class="header-anchor" href="#Java-BigDecimal累加"></a>Java BigDecimal累加</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">awardMoney</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(ImportDoubleAwardsField field: entrySet.getValue())&#123;</span><br><span class="line">      awardMoney = awardMoney.add(field.getMoney());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>注意BigDecimal的add()方法返回的是相加后的数据</p>
<h2 id="利用BeanMap进行对象与Map的相互转换"><a class="header-anchor" href="#利用BeanMap进行对象与Map的相互转换"></a>利用BeanMap进行对象与Map的相互转换</h2>
<p>不过项目中使用BeanMap.create()方法个别地方会报异常，可能是用了热部署工具dev-tools，但是我去掉这个也报错，索性改为了反射方法<br>
<a href="https://www.cnblogs.com/Profound/p/9374347.html">参考链接</a></p>
<h2 id="使用reflect反射对象与Map的相互转换"><a class="header-anchor" href="#使用reflect反射对象与Map的相互转换"></a>使用reflect反射对象与Map的相互转换</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.hrbeu.platform.modeling.common.util;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用reflect进行转换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapTransformUtils1</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">mapToObject</span><span class="params">(Map&lt;String, Object&gt; map, Class&lt;T&gt; beanClass)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="type">T</span> <span class="variable">obj</span> <span class="operator">=</span> beanClass.newInstance();</span><br><span class="line"> </span><br><span class="line">        Field[] fields = obj.getClass().getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> field.getModifiers();</span><br><span class="line">            <span class="keyword">if</span> (Modifier.isStatic(mod) || Modifier.isFinal(mod)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj, map.get(field.getName()));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">objectToMap</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line"> </span><br><span class="line">        Field[] declaredFields = obj.getClass().getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            map.put(field.getName(), field.get(obj));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/tiantangdizhibuxiang/article/details/80575412">参考链接</a></p>
<h2 id="Linux-脚本-sh-和-的区别"><a class="header-anchor" href="#Linux-脚本-sh-和-的区别"></a>Linux 脚本 sh 和 ./ 的区别</h2>
<p><a href="https://zhidao.baidu.com/question/125956070.html">参考链接</a></p>
<h2 id="git分支相关操作命令"><a class="header-anchor" href="#git分支相关操作命令"></a>git分支相关操作命令</h2>
<p>查看当前分支</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
<p>查看所有分支(本地和远程)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<p>查看所有分支(远程)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>
<p>切换分支</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure>
<p>创建分支</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure>
<p>删除分支</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">删除前需要先切换到其他分支，然后执行下面的命令</span><br><span class="line">git branch -D 分支名 </span><br></pre></td></tr></table></figure>
<p>合并master分支代码到dev</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">先切换到dev分支然后执行git merge master</span><br></pre></td></tr></table></figure>
<h2 id="SpringBoot-定义全局日期响应格式"><a class="header-anchor" href="#SpringBoot-定义全局日期响应格式"></a>SpringBoot 定义全局日期响应格式</h2>
<p><strong>方法一(消息转换器)</strong>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置全局响应日期格式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liquanhong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2021/09/07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Json2MessageConventerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MappingJackson2HttpMessageConverter <span class="title function_">mappingJackson2HttpMessageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        objectMapper.setDateFormat(sdf);</span><br><span class="line">        converter.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方法如果前端传递接口未定义的参数会报JSON参数转换错误：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JSON parse error: Unrecognized field \<span class="string">&quot;a\&quot; (class com.aspirecn.rewardportal.common.entity.PageRequest), not marked as ignorable; nested exception is com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \&quot;a\&quot; (class com.aspirecn.rewardportal.common.entity.PageRequest), not marked as ignorable (5 known properties: \&quot;rows\&quot;, \&quot;data\&quot;, \&quot;prop\&quot;, \&quot;order\&quot;, \&quot;page\&quot;])\n at [Source: (PushbackInputStream); line: 4, column: 9] (through reference chain: com.aspirecn.rewardportal.common.entity.PageRequest[\&quot;a\&quot;])</span></span><br></pre></td></tr></table></figure>
<p><strong>方法二(配置文件 推荐)：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在application.properties文件中配置</span></span><br><span class="line"><span class="string">spring.jackson.date-format=yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="string">spring.jackson.time-zone=GMT+8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在application.yml文件中配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br></pre></td></tr></table></figure>
<p><strong>方法三(在指定的Bean属性中添加注解)：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(timezone = &quot;GMT+8&quot;, pattern = &quot;yyyyMMddHHmmss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime; </span><br><span class="line"></span><br><span class="line">需要有下面的依赖</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.9</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>注意如果有用到Fastjson ,注解可能会失效可以用@JSONField注解解决。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JSONField(format = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date updatedDate;</span><br></pre></td></tr></table></figure>
<p><strong>方法四(用于解决配置文件不生效的问题)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebMvc配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liquanhong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2021/10/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用此方法, 以下 spring-boot: jackson时间格式化 配置 将会失效</span></span><br><span class="line"><span class="comment">     * spring.jackson.time-zone=GMT+8</span></span><br><span class="line"><span class="comment">     * spring.jackson.date-format=yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     * 原因: 会覆盖 <span class="doctag">@EnableAutoConfiguration</span> 关于 WebMvcAutoConfiguration 的配置</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List converters)</span> &#123;</span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> converter.getObjectMapper();</span><br><span class="line">        <span class="comment">// 生成JSON时,将所有Long转换成String</span></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>();</span><br><span class="line">        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">        objectMapper.registerModule(simpleModule);</span><br><span class="line">        <span class="comment">// 时间格式化</span></span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置格式化内容</span></span><br><span class="line">        converter.setObjectMapper(objectMapper);</span><br><span class="line">        converters.add(<span class="number">0</span>, converter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringBoot对多模块包扫描问题"><a class="header-anchor" href="#SpringBoot对多模块包扫描问题"></a>SpringBoot对多模块包扫描问题</h2>
<p><strong>方法一：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.xx.xx.xx.A&quot;, &quot;com.xx.xx.B&quot;&#125;)</span></span><br></pre></td></tr></table></figure>
<p><strong>方法二：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//blog.csdn.net/lintiyan/article/details/94362640</span></span><br></pre></td></tr></table></figure>
<p><strong>方法三(SpringBoot默认会扫描本模块下面的包)：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.xx.xx.B&quot;)</span></span><br></pre></td></tr></table></figure>
<p><strong>SpringBoot包扫描排除指定类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(basePackages=&#123;&quot;com.aspirecn.core.common&quot;,&quot;com.aspirecn.kjcgkyg&quot;&#125;,</span></span><br><span class="line"><span class="meta">		       excludeFilters = @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE,classes = DruidConfig.class))</span>	     </span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/java_doctor/article/details/104602066/">参考链接</a></p>
<h2 id="Spring的-RequestBody注解接收参数时如果实体类属性以if和k开头，那么传参会接收不到"><a class="header-anchor" href="#Spring的-RequestBody注解接收参数时如果实体类属性以if和k开头，那么传参会接收不到"></a>Spring的@RequestBody注解接收参数时如果实体类属性以if和k开头，那么传参会接收不到</h2>
<p>前端入参：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;kBB&quot;</span>: <span class="string">&quot;kBB123&quot;</span>,</span><br><span class="line">  <span class="string">&quot;isBB&quot;</span>: <span class="string">&quot;isBB123&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ifBB&quot;</span>: <span class="string">&quot;ifBB123&quot;</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>后端接收不到，如下图所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/44e894cfff49c461694cbd95f2eb14d8.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>isBB可以接收到。 接收ifBB、kBB需要在实体类的属性中加上注解。</strong>，如下面的代码所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonProperty(value = &quot;kBB&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String kBB;</span><br><span class="line"><span class="meta">@JsonProperty(value = &quot;ifBB&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String ifBB;</span><br></pre></td></tr></table></figure>
<h2 id="mysql-bigint类型和datetime类型的转换"><a class="header-anchor" href="#mysql-bigint类型和datetime类型的转换"></a>mysql bigint类型和datetime类型的转换</h2>
<p>1、bigint类型转换为datetime类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> from_unixtime(<span class="number">1164691264437</span><span class="operator">/</span><span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>2、datetime类型转换为bigint类型</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> UNIX_TIMESTAMP(<span class="string">&#x27;2021-09-13 11:24:59&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="使用EasyExcel导入问题"><a class="header-anchor" href="#使用EasyExcel导入问题"></a>使用EasyExcel导入问题</h2>
<ul>
<li>如果在注解中添加index属性，value的名称可以和Excel的列名不一样；</li>
<li>如果没有添加index属性，value的名称必须和Excel的列名一样</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExcelProperty(value = &quot;研发能力类型名称&quot;,index = 6)</span></span><br><span class="line"><span class="keyword">private</span> String capabilityTypeName;</span><br></pre></td></tr></table></figure>
<h2 id="校验导入的Excel数据是否重复"><a class="header-anchor" href="#校验导入的Excel数据是否重复"></a>校验导入的Excel数据是否重复</h2>
<p>比如要求同一类型成果同一年份同一成果名称不能相同，如下图所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/24c9268a8ee816bfff87f46579243a58.png#pic_center" alt="在这里插入图片描述"></p>
<p>1、先去数据库查询类型、年份和成果名拼接字符串列表得到List<String> recordList</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> concat(type,<span class="string">&#x27;@&#x27;</span>,which_year,<span class="string">&#x27;@&#x27;</span>,name)</span><br><span class="line">        <span class="keyword">FROM</span> t_achievement</span><br><span class="line">        <span class="keyword">WHERE</span> type <span class="keyword">not</span> <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>2、循环读到的Excel行，每读一条拼取一个key去recordList中匹配，然后把该条数据也放到recordList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">productKey</span> <span class="operator">=</span> achievementDto.getType()+AchievementConstant.SEPARATOR_A+achievementDto.getWhichYear()+AchievementConstant.SEPARATOR_A+achievementDto.getName();</span><br><span class="line"><span class="keyword">if</span>(recordList.contains(productKey))&#123;</span><br><span class="line">                    errorBuilder.append(AchievementConstant.PRODUCT_NAME_REPEAT);</span><br><span class="line">                &#125;</span><br><span class="line">recordList.add(productKey);</span><br></pre></td></tr></table></figure>
<p><strong>这样把填写和数据库查询的数据都放到了一起,好处是不用再去单独校验用户填写的数据相互之间是否有问题。</strong></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>MySQL</tag>
        <tag>SpringBoot</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA中External Libraries删除多余的jar</title>
    <url>/2021/12/05/delete_external_jar_in_idea/</url>
    <content><![CDATA[<p>有时候把pom.xml依赖去除了，但是IntelliJ IDEA中External Libraries还显示之前的依赖。解决方法如下：</p>
<ul>
<li>
<p>第一步：清缓存重启IDEA<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/ba282c9c77ba0080f6d4675c1ea3501d.png" alt="在这里插入图片描述"></p>
</li>
<li>
<p>第二步：Maven update<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/45aefe049e75f92fbb7e54f97a55ee4e.png" alt="在这里插入图片描述"></p>
</li>
</ul>
<p><a href="https://www.jianshu.com/p/954e547265f7">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存的设计以及相关问题</title>
    <url>/2021/04/19/design_of_cache/</url>
    <content><![CDATA[<h3 id="受益与成本"><a class="header-anchor" href="#受益与成本"></a>受益与成本</h3>
<h4 id="受益"><a class="header-anchor" href="#受益"></a>受益</h4>
<ul>
<li>加速读写</li>
<li>降低后端负载</li>
</ul>
<h4 id="成本"><a class="header-anchor" href="#成本"></a>成本</h4>
<ul>
<li>数据不一致：缓存层和数据层在时间窗口不一致</li>
<li>代码维护成本</li>
<li>运维成本：例如Redis cluster</li>
</ul>
<h3 id="缓存更新策略"><a class="header-anchor" href="#缓存更新策略"></a>缓存更新策略</h3>
<h4 id="各种更新策略对比"><a class="header-anchor" href="#各种更新策略对比"></a>各种更新策略对比</h4>
<table>
<thead>
<tr>
<th style="text-align:center">策略</th>
<th style="text-align:center">一致性</th>
<th style="text-align:center">维护成本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">内存淘汰 (LRU/LFU/FIFO算法)</td>
<td style="text-align:center">最差</td>
<td style="text-align:center">低</td>
</tr>
<tr>
<td style="text-align:center">超时剔除(expire)</td>
<td style="text-align:center">较差</td>
<td style="text-align:center">低</td>
</tr>
<tr>
<td style="text-align:center">主动更新(开发控制缓存和数据一致性的业务)</td>
<td style="text-align:center">高</td>
<td style="text-align:center">高</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<p>LRU和LFU的区别如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">算法缩写</th>
<th style="text-align:center">算法名称</th>
<th style="text-align:center">算法目的</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">LRU</td>
<td style="text-align:center">最近最少使用算法(Least Recently Used)</td>
<td style="text-align:center">淘汰最近最长时间未被使用的数据</td>
</tr>
<tr>
<td style="text-align:center">LFU</td>
<td style="text-align:center">最近最不常用算法(Least Frequently Used)</td>
<td style="text-align:center">淘汰一定时期内被访问次数最少的数据</td>
</tr>
</tbody>
</table>
<h4 id="建议"><a class="header-anchor" href="#建议"></a>建议</h4>
<ul>
<li>低一致性：最大内存和淘汰策略</li>
<li>高一致性: 超时剔除和主动更新结合,最大内存和淘汰策略兜底。</li>
</ul>
<h3 id="缓存穿透问题"><a class="header-anchor" href="#缓存穿透问题"></a>缓存穿透问题</h3>
<h4 id="定义"><a class="header-anchor" href="#定义"></a>定义</h4>
<p>缓存穿透是指查询时，这条数据在数据库和缓存都没有，但是还会一直查询数据库，对数据库的访问压力就会增加。</p>
<h4 id="解决方案"><a class="header-anchor" href="#解决方案"></a>解决方案</h4>
<p>缓存穿透的解决方案有以下两种：</p>
<ul>
<li><strong>缓存空对象</strong>：缓存空对象的实现代码很简单，但是缓存空对象会带来比较大的问题，就是缓存中会存在很多空对象，占用内存的空间(即使设置了过期时间)，浪费资源。</li>
<li><strong>布隆过滤器</strong>：布隆过滤器是一种基于概率的数据结构，主要用来判断某个元素是否在集合内，它具有运行速度快（时间效率），占用内存小的优点（空间效率），但是有一定的误识别率以及不支持删除的问题。它只能告诉你某个元素一定不在集合内或可能在集合内。</li>
</ul>
<p><img src="https://i-blog.csdnimg.cn/direct/051507ba8e2247c79f16415479a5762e.png" alt="在这里插入图片描述"></p>
<h3 id="缓存击穿问题-热点key重建问题"><a class="header-anchor" href="#缓存击穿问题-热点key重建问题"></a>缓存击穿问题(热点key重建问题)</h3>
<h4 id="定义-v2"><a class="header-anchor" href="#定义-v2"></a>定义</h4>
<p>缓存击穿是指一个key非常热点，在不停的扛着大并发，多个线程集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存直接请求数据库，瞬间对数据库的访问压力增加，甚至让应用崩溃。</p>
<h4 id="原因"><a class="header-anchor" href="#原因"></a>原因</h4>
<p>缓存击穿这里强调的是并发，造成缓存击穿的原因有以下两个：</p>
<ul>
<li>该数据很少有人查询 ，突然大并发的访问（冷门数据）。</li>
<li>添加到了缓存且有设置数据失效的时间 ，在这条数据缓存刚好失效时大并发访问（热点数据）。</li>
</ul>
<h4 id="目标"><a class="header-anchor" href="#目标"></a>目标</h4>
<ul>
<li>减少重建缓存的次数 数据尽可能一致 较少的潜在危险</li>
</ul>
<h4 id="解决方案-v2"><a class="header-anchor" href="#解决方案-v2"></a>解决方案</h4>
<p>目前有下面两种解决方案：</p>
<ul>
<li><strong>互斥锁</strong>：此方法只允许一个线程重建缓存，其他线程等待重建缓存的线程执行完，重新从缓存获取数据即可。</li>
<li><strong>逻辑过期</strong>：包含两层意思：从缓存层面来看，确实没有设置过期时间(没有用expire)。从功能层面来看，为每个value设置一个逻辑过期时间，当发现超过逻辑过期时间后，会使用单独的线程去构建缓存。</li>
</ul>
<p>两种方案优缺点如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">方案</th>
<th style="text-align:center">优点</th>
<th style="text-align:center">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">互斥锁</td>
<td style="text-align:center">思路简单、保证一致性</td>
<td style="text-align:center">代码复杂度增加、存在死锁的风险</td>
</tr>
<tr>
<td style="text-align:center">逻辑过期</td>
<td style="text-align:center">基本杜绝缓存击穿问题</td>
<td style="text-align:center">不保证一致性、逻辑过期时间增加维护成本和内存成本</td>
</tr>
</tbody>
</table>
<p><img src="https://i-blog.csdnimg.cn/direct/80547c6939e14563afec990338b3a15f.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/direct/f916a92f6be6425bab0ce9cdfea5b340.png" alt="在这里插入图片描述"></p>
<h3 id="缓存雪崩问题"><a class="header-anchor" href="#缓存雪崩问题"></a>缓存雪崩问题</h3>
<h4 id="定义-v3"><a class="header-anchor" href="#定义-v3"></a>定义</h4>
<p>缓存雪崩是指在某一个时间段内缓存集中过期失效，此刻无数的请求绕开缓存直接请求数据库，对数据库的访问压力增加，甚至压垮数据库。</p>
<h4 id="原因-v2"><a class="header-anchor" href="#原因-v2"></a>原因</h4>
<p>造成缓存雪崩的原因，有以下两种：</p>
<ul>
<li>reids宕机</li>
<li>大部分数据失效</li>
</ul>
<h4 id="解决方案-v3"><a class="header-anchor" href="#解决方案-v3"></a>解决方案</h4>
<p>对于缓存雪崩的解决方案有以下两种：</p>
<ul>
<li>设置不同的过期时间，防止同一时间内大量的key失效。</li>
<li>搭建高可用的集群，防止单机的Redis宕机。</li>
<li>给缓存业务添加降级限流策略、给业务添加多级缓存<br>
<img src="https://i-blog.csdnimg.cn/direct/fdef8b899d7c4f568ec66bc20fdaff72.png" alt="在这里插入图片描述"></li>
</ul>
<h3 id="无底洞问题"><a class="header-anchor" href="#无底洞问题"></a>无底洞问题</h3>
<h4 id="问题描述"><a class="header-anchor" href="#问题描述"></a>问题描述</h4>
<p>Facebook的工作人员反应2010年已达到3000个memcached节点，储存数千G的缓存。他们发现一个问题–memcached的连接效率下降了，于是添加memcached节点，添加完之后，并没有好转。称为“无底洞”现象。</p>
<h4 id="问题原因"><a class="header-anchor" href="#问题原因"></a>问题原因</h4>
<p>键值数据库或者缓存系统，由于通常采用hash函数将key映射到对应的实例，造成key的分布与业务无关，但是由于数据量、访问量的需求，需要使用分布式后（无论是客户端一致性哈性、redis-cluster、codis），批量操作比如批量获取多个key(例如Redis的mget操作)，通常需要从不同实例获取key值，相比于单机批量操作只涉及到一次网络操作，分布式批量操作会涉及到多次网络io。</p>
<h4 id="问题关键点"><a class="header-anchor" href="#问题关键点"></a>问题关键点</h4>
<ul>
<li>更多的机器!=更高的性能</li>
<li>批量接口需求(mget,mset等)</li>
<li>数据增长与水平扩展需求</li>
</ul>
<h4 id="IO的优化思路"><a class="header-anchor" href="#IO的优化思路"></a>IO的优化思路</h4>
<ul>
<li>命令本身的效率：例如sql优化，命令优化</li>
<li>网络次数：减少通信次数</li>
<li>降低接入成本:长连/连接池,NIO等</li>
<li>IO访问合并:O(n)到O(1)过程:批量接口(mget)</li>
</ul>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>堆的原理和实现</title>
    <url>/2021/03/02/binary_heap/</url>
    <content><![CDATA[<h2 id="什么是堆"><a class="header-anchor" href="#什么是堆"></a>什么是堆</h2>
<p>堆满足下面两点：</p>
<ul>
<li>是一颗<a href="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin">完全二叉树</a></li>
<li>大顶堆任意孩子节点小于或等于父节点(小顶堆任意孩子节点大于或等于父节点)</li>
</ul>
<span id="more"></span>
<p>先来看几张图。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/60ad35b3e3994c67584afc2582031184.png" alt="在这里插入图片描述"></p>
<center>图1</center>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/010ae6f649e4f0c1d99929685ee8ffaf.png" alt="在这里插入图片描述"></p>
<center>图2</center>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/e9cba4985f505ece3ac2111b3662e628.png" alt="在这里插入图片描述"></p>
<center>图3</center>
<p>上面几张图中，图1不满足完全二叉树的性质，图2是合格的最大堆，图3不满足孩子节点小于或等于父节点的性质。</p>
<h2 id="堆的用途"><a class="header-anchor" href="#堆的用途"></a>堆的用途</h2>
<p>优先队列指的是元素入队和出队的顺序与时间无关，既不是先进先出，也不是先进后出，而是根据元素的重要性来决定的。<br>
例如，操作系统的任务执行是优先队列。一些情况下，会有新的任务进入，并且之前任务的重要性也会改变或者之前的任务被完成出队。而这个出队、入队的过程利用堆结构，时间复杂度是O($\log_2 n$)。<br>
注意：堆有很多种实现左式堆、斜堆、斐波那锲堆、二叉堆、三叉堆、N叉堆等。<strong>由于二叉堆使用很广泛，本文讨论的都是二叉堆。</strong></p>
<h2 id="堆的存储结构"><a class="header-anchor" href="#堆的存储结构"></a>堆的存储结构</h2>
<p>由于数组占用的是连续的内存空间，相对来说对于散列存储的结构来说，数组可以节省连续的内存空间，不会将内存打乱，所以一般用数组存储堆的节点。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/799881c38716df08716db4ee3ef6ae64.png" alt="从数组下标0开始存储堆"></p>
<center>图4 从数组下标0开始存储堆</center>
图4是从数组下标0开始表示堆，可以看出对于堆中的父子节点关系：leftChild=2 * parent(i)+1、rightChild=2 * parent(i)+2、parent=(child(i)-1)/2。
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/b20dd06afd71569cd9a8e59cdd5f82fe.png" alt="从数组下标1开始存储堆"></p>
<center>图5 从数组下标1开始存储堆</center>
图5是从数组下标1开始表示堆，可以看出对于堆中的父子节点关系：leftChild=2 * parent(i)、rightChild=2 * parent(i)+1、parent=child(i)/2。
<p>一般情况下不选用下标为0的位置来存储数据，下标为0的位置通常使用一个很大的数字或者很小的数字作为哨兵变量,从下标1开始也能更方便地表示父子节点关系。本文后续的代码实现也是从1开始存储。</p>
<h2 id="堆的基本操作-Java实现"><a class="header-anchor" href="#堆的基本操作-Java实现"></a>堆的基本操作(Java实现)</h2>
<h3 id="建堆"><a class="header-anchor" href="#建堆"></a>建堆</h3>
<p>思路是将待建堆的数组当成一颗完全二叉树，然后从最后一个非叶子节点开始，和其孩子节点比较，依次向前循环非叶子节点保证堆序性，这个过程叫做下滤(percolate down)。从其存储结构知道parent=child(i)/2,那么<strong>最后一个非叶子节点=堆的大小/2</strong>。我们定义一个建堆数组和堆的大小，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[]  arr = &#123;-<span class="number">1</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">1</span>&#125;;  <span class="comment">//-1为哨兵变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">currentSize</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;<span class="comment">//记录堆的大小，注意扩容操作</span></span><br></pre></td></tr></table></figure>
<p>初始的完全二叉树如图6所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/62499be750fc90e7c6eee40a9d7e206f.png" alt="在这里插入图片描述"></p>
<center>图6</center>
<p>进行percolateDown(5)后如图7所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/13ad408a657428f96ac30b9212fd9009.png" alt="在这里插入图片描述"></p>
<center>图7</center>
<p>进行percolateDown(4)后如图8所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/6a72baefc358142754ac6c6cde20f0c7.png" alt="在这里插入图片描述"></p>
<center>图8</center>
<p>进行percolateDown(3)后如图9所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/dff9e277765f6d13053f80309f83021a.png" alt="在这里插入图片描述"></p>
<center>图9</center>
<p>进行percolateDown(2)后如图10所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/d85422fb22435011290c28e49dd8dbcb.png" alt="在这里插入图片描述"></p>
<center>图10</center>
<p>进行percolateDown(1)后如图11所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/723af19f056b3b306fc971dc2c759c7c.png" alt="在这里插入图片描述"></p>
<center>图11</center>
<p>这样一个二叉大顶堆就建好了。下滤操作的代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 下滤操作</span></span><br><span class="line"><span class="comment">  * 保证每个非叶子节点都比其左右孩子大</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> i 待调整的节点(非叶子节点)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> currentSize 堆的大小</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">percolateDown</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> currentSize)</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">leftChild</span> <span class="operator">=</span> i*<span class="number">2</span>;</span><br><span class="line">     <span class="type">int</span> <span class="variable">rightChild</span> <span class="operator">=</span> leftChild+<span class="number">1</span>;</span><br><span class="line">     <span class="comment">// 如果没有左孩子（越界），直接返回</span></span><br><span class="line">     <span class="keyword">if</span> (leftChild &gt; currentSize) <span class="keyword">return</span>;</span><br><span class="line">     <span class="comment">// 在左孩子与要调整的节点中找到最大的下标</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> arr[i] &gt; arr[leftChild] ? i : leftChild;</span><br><span class="line">     <span class="comment">// 如果存在右孩子，在刚刚找到的最大的下标和右孩子中找最大的下标</span></span><br><span class="line">     <span class="keyword">if</span> (rightChild &lt;= currentSize) maxIndex = arr[maxIndex] &gt; arr[rightChild] ? maxIndex : rightChild;</span><br><span class="line">     <span class="comment">// 如果要调整的节点已经是最大的了，说明顺序正确，直接返回</span></span><br><span class="line">     <span class="keyword">if</span> (maxIndex == i) <span class="keyword">return</span>;</span><br><span class="line">     <span class="comment">// 执行交换</span></span><br><span class="line">     swapReferences(i, maxIndex);</span><br><span class="line">     <span class="comment">// 递归调整</span></span><br><span class="line">     percolateDown(maxIndex, currentSize);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>建堆操作的代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> currentSize / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    percolateDown(i, currentSize);</span><br></pre></td></tr></table></figure>
<h3 id="删除堆顶元素"><a class="header-anchor" href="#删除堆顶元素"></a>删除堆顶元素</h3>
<p>删除堆顶元素思路是用最后一个元素替换掉堆顶元素，堆的大小减1，再执行下滤(percolate down)操作调整。上面建好的堆删掉堆顶元素流程如下所示：<br>
第一步，用最后一个元素替换堆，堆的大小减1。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/caea795526badcb5c357b78fbee309fd.png" alt="在这里插入图片描述"></p>
<center>图12</center>
<p>第二步执行下滤操作，如图13-图14所示。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/7d8fae2524d97929c22baad2e78d2141.png" alt="在这里插入图片描述"></p>
<center>图13</center>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/3ee94dcf07896e5123dd3683448a0caa.png" alt="在这里插入图片描述"></p>
<center>图14</center>
这样顶部元素45就删除完成了。相关代码如下所示：
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用最后一个元素覆盖掉顶部的元素-&gt;堆元素个数减去1-&gt;执行下滤操作</span></span><br><span class="line">arr[<span class="number">1</span>] = arr[currentSize--];</span><br><span class="line">percolateDown(<span class="number">1</span>,currentSize);</span><br></pre></td></tr></table></figure>
<h3 id="插入"><a class="header-anchor" href="#插入"></a>插入</h3>
<p>往堆中插入元素的思路是先把元素放到堆尾，然后循环和父节点比较大小，直到父节点比其大，这个过程叫做上滤(percolate up)。例如在上面的堆中插入50的过程如下所示：<br>
第一步，把50放入堆尾，如图15所示。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/a31e84cb9509bb135198d926108b3f8c.png" alt="在这里插入图片描述"></p>
<center>图15</center>
<p>第二步，执行上滤操作，如图16-18所示。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/d449bdc78dc37afe62df8290d333fa14.png" alt="在这里插入图片描述"></p>
<center>图16 执行上滤操作</center>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/8b6c3f14a1d3adf8c9513794880d893b.png" alt="在这里插入图片描述"></p>
<center>图17 执行上滤操作</center>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/797be5ce6686bb329c4a19e1f72e488f.png" alt="在这里插入图片描述"></p>
<center>图18 执行上滤操作</center>
上滤操作代码如下：
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上滤操作</span></span><br><span class="line"><span class="comment"> * 把每个叶子节点与其父节点进行比较，直到越界或者其父节点更大</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">percolateUp</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> i/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(parent &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; arr[parent])&#123;</span><br><span class="line">        swapReferences(i,parent);</span><br><span class="line">        percolateUp(parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>插入操作代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆操作：插入</span></span><br><span class="line"><span class="comment"> * 把元素插入到最后，然后递归执行上滤操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="comment">// 扩容</span></span><br><span class="line">    <span class="keyword">if</span>( currentSize == arr.length - <span class="number">1</span> )</span><br><span class="line">        enlargeArray(currentSize*<span class="number">2</span>);</span><br><span class="line">    arr[++currentSize]=x;</span><br><span class="line">    percolateUp(currentSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完整源码"><a class="header-anchor" href="#完整源码"></a>完整源码</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="type">int</span>[]  arr = &#123;-<span class="number">1</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">1</span>&#125;;  <span class="comment">//-1为哨兵变量</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">currentSize</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;<span class="comment">//记录堆的大小，注意扩容操作</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">Heap</span> <span class="variable">heap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Heap</span>();</span><br><span class="line">     heap.bulidHeap();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 堆操作：建立一个大顶堆</span></span><br><span class="line"><span class="comment">  * 从最后一个非叶子节点开始向前循环执行下滤操作</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">bulidHeap</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> currentSize / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">         percolateDown(i, currentSize);</span><br><span class="line">     System.out.println(<span class="string">&quot;建堆后结果：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">     System.out.println(<span class="string">&quot;当前堆大小：&quot;</span>+currentSize);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 下滤操作</span></span><br><span class="line"><span class="comment">  * 保证每个非叶子节点都比其左右孩子大</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> i 待调整的节点(非叶子节点)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> currentSize 堆的大小</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">percolateDown</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> currentSize)</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">leftChild</span> <span class="operator">=</span> i*<span class="number">2</span>;</span><br><span class="line">     <span class="type">int</span> <span class="variable">rightChild</span> <span class="operator">=</span> leftChild+<span class="number">1</span>;</span><br><span class="line">     <span class="comment">// 如果没有左孩子（越界），直接返回</span></span><br><span class="line">     <span class="keyword">if</span> (leftChild &gt; currentSize) <span class="keyword">return</span>;</span><br><span class="line">     <span class="comment">// 在左孩子与要调整的节点中找到最大的下标</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> arr[i] &gt; arr[leftChild] ? i : leftChild;</span><br><span class="line">     <span class="comment">// 如果存在右孩子，在刚刚找到的最大的下标和右孩子中找最大的下标</span></span><br><span class="line">     <span class="keyword">if</span> (rightChild &lt;= currentSize) maxIndex = arr[maxIndex] &gt; arr[rightChild] ? maxIndex : rightChild;</span><br><span class="line">     <span class="comment">// 如果要调整的节点已经是最大的了，说明顺序正确，直接返回</span></span><br><span class="line">     <span class="keyword">if</span> (maxIndex == i) <span class="keyword">return</span>;</span><br><span class="line">     <span class="comment">// 执行交换</span></span><br><span class="line">     swapReferences(i, maxIndex);</span><br><span class="line">     <span class="comment">// 递归调整</span></span><br><span class="line">     percolateDown(maxIndex, currentSize);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 交换数组元素</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> j 数组下标</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> i 数组下标</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swapReferences</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">     arr[j] = arr[i];</span><br><span class="line">     arr[i] = tmp;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  堆操作：删除堆顶元素</span></span><br><span class="line"><span class="comment">  * 用最后一个元素覆盖掉顶部的元素-&gt;堆元素个数减去1-&gt;执行下滤操作</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">deleteMax</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;当前堆已为空，不能删除！&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">1</span>];</span><br><span class="line">     <span class="comment">// 用最后一个元素覆盖掉顶部的元素-&gt;堆元素个数减去1-&gt;执行下滤操作</span></span><br><span class="line">     arr[<span class="number">1</span>] = arr[currentSize--];</span><br><span class="line">     percolateDown(<span class="number">1</span>,currentSize);</span><br><span class="line"></span><br><span class="line">     arr = Arrays.copyOf(arr, currentSize+<span class="number">1</span>);</span><br><span class="line">     System.out.println(<span class="string">&quot;删除堆顶后结果：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">     System.out.println(<span class="string">&quot;当前堆大小：&quot;</span>+currentSize);</span><br><span class="line">     <span class="keyword">return</span> max;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 判空</span></span><br><span class="line"><span class="comment">  * 如果堆大小为0返回真</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">( )</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">return</span> currentSize == <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 堆操作：插入</span></span><br><span class="line"><span class="comment">  * 把元素插入到最后，然后递归执行上滤操作</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">     <span class="comment">// 扩容</span></span><br><span class="line">     <span class="keyword">if</span>( currentSize == arr.length - <span class="number">1</span> )</span><br><span class="line">         enlargeArray(currentSize*<span class="number">2</span>);</span><br><span class="line">     arr[++currentSize]=x;</span><br><span class="line">     percolateUp(currentSize);</span><br><span class="line">     System.out.println(<span class="string">&quot;插入&quot;</span>+x+<span class="string">&quot;后结果：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">     System.out.println(<span class="string">&quot;当前堆大小：&quot;</span>+currentSize);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 扩容</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> newSize 新大小</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">enlargeArray</span><span class="params">(<span class="type">int</span> newSize)</span> &#123;</span><br><span class="line">     <span class="type">int</span> [] old = arr;</span><br><span class="line">     arr = <span class="keyword">new</span> <span class="title class_">int</span>[newSize];</span><br><span class="line">     <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;old.length; i++ )</span><br><span class="line">         arr[i] = old[i];</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 上滤操作</span></span><br><span class="line"><span class="comment">  * 把每个叶子节点与其父节点进行比较，直到越界或者其父节点更大</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">percolateUp</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> i/<span class="number">2</span>;</span><br><span class="line">     <span class="keyword">if</span>(parent &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">     <span class="keyword">if</span>(arr[i] &gt; arr[parent])&#123;</span><br><span class="line">         swapReferences(i,parent);</span><br><span class="line">         percolateUp(parent);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下所示：</p>
<p>建堆后结果：[-1, 45, 20, 32, 15, 19, 6, 8, 9, 5, 1]<br>
当前堆大小：10<br>
删除堆顶后结果：[-1, 32, 20, 8, 15, 19, 6, 1, 9, 5]<br>
当前堆大小：9<br>
插入50后结果：[-1, 50, 32, 8, 15, 20, 6, 1, 9, 5, 19, 0, 0, 0, 0, 0, 0, 0]<br>
当前堆大小：10</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA配置类注释模板和方法注释模板</title>
    <url>/2021/08/15/idea_annotation_template/</url>
    <content><![CDATA[<h2 id="IntelliJ-IDEA配置类注释模板和方法注释模板"><a class="header-anchor" href="#IntelliJ-IDEA配置类注释模板和方法注释模板"></a>IntelliJ IDEA配置类注释模板和方法注释模板</h2>
<h3 id="类注释模板"><a class="header-anchor" href="#类注释模板"></a>类注释模板</h3>
<p>在<strong>File-&gt;Settings-&gt;Editor-&gt;File and Code Templates-&gt;Includes</strong>目录下添加如下代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Description TODO</span><br><span class="line"> * @author liquanhong</span><br><span class="line"> * @createTime $&#123;YEAR&#125;/$&#123;MONTH&#125;/$&#123;DAY&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="方法注释模板"><a class="header-anchor" href="#方法注释模板"></a>方法注释模板</h3>
<p>在<strong>File-&gt;Settings-&gt;Editor-&gt;Live Templates</strong>。<br>
编辑变量的时候<strong>Reformat according to style和Shorten FQ names两个复选框打钩</strong></p>
<h4 id="参数分开显示"><a class="header-anchor" href="#参数分开显示"></a>参数分开显示</h4>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/ede60551409d20848ef06a93b9c53d9b.png" alt="在这里插入图片描述"><br>
Template text的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line"> * TODO</span><br><span class="line"> * $params$</span><br><span class="line"> * <span class="meta">@return</span> $<span class="keyword">return</span>$</span><br><span class="line"> * <span class="meta">@author</span> liquanhong</span><br><span class="line"> * <span class="meta">@date</span> $date$</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p>params变量代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">groovyScript(<span class="string">&quot;def result=&#x27;&#x27;; def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;,&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;if(params[i] == &#x27;&#x27;) return result;if(i==0) result += &#x27;\\n&#x27;; result+=&#x27; * @param &#x27; + params[i] + ((i &lt; params.size() - 1) ? &#x27;\\n&#x27; : &#x27;&#x27;)&#125;; return result&quot;</span>, methodParameters())</span><br></pre></td></tr></table></figure>
<p>return变量代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">methodReturnType()</span><br></pre></td></tr></table></figure>
<p>date变量代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">date()</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TODO</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: c</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liquanhong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/19/019</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h4 id="参数以数组方式显示"><a class="header-anchor" href="#参数以数组方式显示"></a>参数以数组方式显示</h4>
<p>Template text代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line"> * TODO</span><br><span class="line"> * <span class="meta">@params</span> $params$</span><br><span class="line"> * <span class="meta">@return</span> $<span class="keyword">return</span>$</span><br><span class="line"> * <span class="meta">@author</span> liquanhong</span><br><span class="line"> * <span class="meta">@date</span> $date$</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p>params变量代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">methodParameters()</span><br></pre></td></tr></table></figure>
<p>return变量代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">methodReturnType()</span><br></pre></td></tr></table></figure>
<p>date变量代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">date()</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span> [a, b, c]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liquanhong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/19/019</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="问题解决"><a class="header-anchor" href="#问题解决"></a>问题解决</h2>
<p>可以看出上面的注释日期格式（2021/7/19/019）有问题，解决方法是把date变量代码改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">groovyScript</span>(<span class="string">&quot;def result =\&quot;$&#123;_1&#125;\&quot;.substring(0,9); return result&quot;</span>,<span class="title function_">date</span>())</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/yanh0606/p/11990863.html">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>IntelliJ IDEA</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>记录ImageIO读取文件为null的问题及Java获取图片的宽高</title>
    <url>/2021/11/21/imageio_read_file_is_null/</url>
    <content><![CDATA[<h2 id="背景"><a class="header-anchor" href="#背景"></a>背景</h2>
<p>公司项目需要做一个图片预览的功能，并且要展示图片的分辨率(即宽和高)，目前的框架没有这个功能，所以得自己写一个方法去读取上传的附件。百度了一下，发现用Java包中的ImageIO就可以得到图片的宽和高。但是，有部分图片会读出null，然后空指针异常。主要代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line"><span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> ImageIO.read(file);</span><br><span class="line">result.put(<span class="string">&quot;width&quot;</span>,image.getWidth());</span><br><span class="line">result.put(<span class="string">&quot;height&quot;</span>,image.getHeight());</span><br></pre></td></tr></table></figure>
<h2 id="解决过程"><a class="header-anchor" href="#解决过程"></a>解决过程</h2>
<p>造成这个问题的原因是图片的后缀可能是jpg、png，但是图片实际上是另一种格式(比如webp、tif)。先打印一下ImageIO支持的文件格式，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JDK8输出：JPG jpg bmp BMP gif GIF WBMP png PNG wbmp jpeg JPEG</span></span><br><span class="line"><span class="comment">// JDK11输出：JPG jpg tiff bmp BMP gif GIF WBMP png PNG JPEG tif TIF TIFF wbmp jpeg</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ImageIO.getReaderFormatNames().length; i++) &#123;</span><br><span class="line">          System.out.print(ImageIO.getReaderFormatNames()[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>可以看出<strong>ImageIO不支持读取webp格式，JDK8之前不支持读取tif格式图片。</strong><br>
如果图片源格式是tif，那么在项目中加入下面的依赖就行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.twelvemonkeys.imageio&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;imageio-tiff&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>ImageIO 会自动搜索类路径下继承的接口和子类不用改代码。</p>
<span id="more"></span>
<h2 id="最终解决"><a class="header-anchor" href="#最终解决"></a>最终解决</h2>
<p>我的图片源格式是webp的，网上找了下资料，大部分都是用的第一种方法。</p>
<h3 id="方法一"><a class="header-anchor" href="#方法一"></a>方法一</h3>
<ul>
<li>
<p><a href="https://github.com/nintha/webp-imageio-core/releases">点击下载webp-imageio-core-0.1.1.jar包</a></p>
</li>
<li>
<p>在项目中添加依赖</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.nintha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webp-imageio-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources/libs/webp-imageio-core-0.1.1.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_34414196/article/details/88753497">参考链接</a></p>
</li>
</ul>
<p>我做了两步后一直报下面的错误：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.UnsatisfiedLinkError: com.luciad.imageio.webp.WebPDecoderOptions.createDecoderOptions()J</span><br><span class="line">	at com.luciad.imageio.webp.WebPDecoderOptions.createDecoderOptions(Native Method) ~[webp-imageio-core-<span class="number">0.1</span><span class="number">.1</span>.jar:?]</span><br><span class="line">	at com.luciad.imageio.webp.WebPDecoderOptions.&lt;init&gt;(WebPDecoderOptions.java:<span class="number">26</span>) ~[webp-imageio-core-<span class="number">0.1</span><span class="number">.1</span>.jar:?]</span><br><span class="line">	at com.luciad.imageio.webp.WebPReadParam.&lt;init&gt;(WebPReadParam.java:<span class="number">24</span>) ~[webp-imageio-core-<span class="number">0.1</span><span class="number">.1</span>.jar:?]</span><br><span class="line">	at com.aspirecn.kjcgkyg.controller.RecommendResultController.queryImageInfo(RecommendResultController.java:<span class="number">271</span>) ~[classes/:?]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:<span class="number">197</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.4</span>.jar:<span class="number">5.3</span><span class="number">.4</span>]</span><br><span class="line">	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:<span class="number">141</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.4</span>.jar:<span class="number">5.3</span><span class="number">.4</span>]</span><br><span class="line">	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="number">106</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.4</span>.jar:<span class="number">5.3</span><span class="number">.4</span>]</span><br><span class="line">	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="number">894</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.4</span>.jar:<span class="number">5.3</span><span class="number">.4</span>]</span><br><span class="line">	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:<span class="number">808</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.4</span>.jar:<span class="number">5.3</span><span class="number">.4</span>]</span><br><span class="line">	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="number">87</span>) ~[spring-webmvc-<span class="number">5.3</span><span class="number">.4</span>.jar:<span class="number">5.3</span><span class="number">.4</span>]</span><br><span class="line">	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">1060</span>) [spring-webmvc-<span class="number">5.3</span><span class="number">.4</span>.jar:<span class="number">5.3</span><span class="number">.4</span>]</span><br><span class="line">	... <span class="number">55</span> more</span><br></pre></td></tr></table></figure>
<p>试了把webp-imageio-core-0.1.1.jar包中的dll文件放到jdk/jre/lib目录也没解决，于是放弃这种方法。</p>
<h3 id="方法二-最终解决"><a class="header-anchor" href="#方法二-最终解决"></a>方法二(最终解决)</h3>
<ul>
<li>写个工具类获取文件的mimeType，代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImgeMimeTypeUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件的mimeType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMimeType</span><span class="params">(String filename)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> readType(filename);</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;image/%s&quot;</span>, mimeType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取文件类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readType</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">            <span class="keyword">if</span> (!f.exists() || f.isDirectory() || f.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;the file [&quot;</span> + f.getAbsolutePath()</span><br><span class="line">                        + <span class="string">&quot;] is not image !&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            <span class="type">byte</span>[] bufHeaders = readInputStreamAt(fis, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span> (isJPEGHeader(bufHeaders)) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">skiplength</span> <span class="operator">=</span> f.length() - <span class="number">2</span> - <span class="number">8</span>; <span class="comment">//第一次读取时已经读了8个byte,因此需要减掉</span></span><br><span class="line">                <span class="type">byte</span>[] bufFooters = readInputStreamAt(fis, skiplength, <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">if</span> (isJPEGFooter(bufFooters)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;jpeg&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isPNG(bufHeaders)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;png&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isGIF(bufHeaders)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;gif&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isWEBP(bufHeaders)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;webp&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isBMP(bufHeaders)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;bmp&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isICON(bufHeaders)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;ico&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;the image&#x27;s format is unkown!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="literal">null</span>)</span><br><span class="line">                    fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标示一致性比较</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buf 待检测标示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> markBuf 标识符字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回false标示标示不匹配</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">byte</span>[] buf, <span class="type">byte</span>[] markBuf)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; markBuf.length; i++) &#123;</span><br><span class="line">            <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> markBuf[i];</span><br><span class="line">            <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> buf[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fis 输入流对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> skiplength 跳过位置长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 要读取的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] readInputStreamAt(FileInputStream fis,</span><br><span class="line">                                            <span class="type">long</span> skiplength, <span class="type">int</span> length) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[length];</span><br><span class="line">        fis.skip(skiplength); <span class="comment">//</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> fis.read(buf, <span class="number">0</span>, length);</span><br><span class="line">        <span class="keyword">return</span> buf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isBMP</span><span class="params">(<span class="type">byte</span>[] buf)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] markBuf = <span class="string">&quot;BM&quot;</span>.getBytes(); <span class="comment">//BMP图片文件的前两个字节</span></span><br><span class="line">        <span class="keyword">return</span> compare(buf, markBuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isICON</span><span class="params">(<span class="type">byte</span>[] buf)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] markBuf = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">32</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> compare(buf, markBuf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isWEBP</span><span class="params">(<span class="type">byte</span>[] buf)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] markBuf = <span class="string">&quot;RIFF&quot;</span>.getBytes(); <span class="comment">//WebP图片识别符</span></span><br><span class="line">        <span class="keyword">return</span> compare(buf, markBuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isGIF</span><span class="params">(<span class="type">byte</span>[] buf)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] markBuf = <span class="string">&quot;GIF89a&quot;</span>.getBytes(); <span class="comment">//GIF识别符</span></span><br><span class="line">        <span class="keyword">if</span>(compare(buf, markBuf))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        markBuf = <span class="string">&quot;GIF87a&quot;</span>.getBytes(); <span class="comment">//GIF识别符</span></span><br><span class="line">        <span class="keyword">if</span>(compare(buf, markBuf))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPNG</span><span class="params">(<span class="type">byte</span>[] buf)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] markBuf = &#123;(<span class="type">byte</span>) <span class="number">0x89</span>,<span class="number">0x50</span>,<span class="number">0x4E</span>,<span class="number">0x47</span>,<span class="number">0x0D</span>,<span class="number">0x0A</span>,<span class="number">0x1A</span>,<span class="number">0x0A</span>&#125;; <span class="comment">//PNG识别符</span></span><br><span class="line">        <span class="comment">// new String(buf).indexOf(&quot;PNG&quot;)&gt;0 //也可以使用这种方式</span></span><br><span class="line">        <span class="keyword">return</span> compare(buf, markBuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isJPEGHeader</span><span class="params">(<span class="type">byte</span>[] buf)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] markBuf = &#123;(<span class="type">byte</span>) <span class="number">0xff</span>, (<span class="type">byte</span>) <span class="number">0xd8</span>&#125;; <span class="comment">//JPEG开始符</span></span><br><span class="line">        <span class="keyword">return</span> compare(buf, markBuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isJPEGFooter</span><span class="params">(<span class="type">byte</span>[] buf)</span><span class="comment">//JPEG结束符</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">byte</span>[] markBuf = &#123;(<span class="type">byte</span>) <span class="number">0xff</span>, (<span class="type">byte</span>) <span class="number">0xd9</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> compare(buf, markBuf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在业务代码中对webp格式单独处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">fileType</span> <span class="operator">=</span> ImgeMimeTypeUtil.getMimeType(filePath);</span><br><span class="line"><span class="keyword">if</span> (fileType != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;image/webp&quot;</span>.equals(fileType)) &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">64</span>];</span><br><span class="line">    file.read(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">    <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> ((<span class="type">int</span>) bytes[<span class="number">27</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span> | ((<span class="type">int</span>) bytes[<span class="number">26</span>] &amp; <span class="number">0xff</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> ((<span class="type">int</span>) bytes[<span class="number">29</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span> | ((<span class="type">int</span>) bytes[<span class="number">28</span>] &amp; <span class="number">0xff</span>);</span><br><span class="line">    result.put(<span class="string">&quot;width&quot;</span>,width);</span><br><span class="line">    result.put(<span class="string">&quot;height&quot;</span>,height);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">    <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> ImageIO.read(file);</span><br><span class="line">    result.put(<span class="string">&quot;width&quot;</span>,image.getWidth());</span><br><span class="line">    result.put(<span class="string">&quot;height&quot;</span>,image.getHeight());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，终于解决，完美！</p>
<h2 id="附-快速查看webp格式"><a class="header-anchor" href="#附-快速查看webp格式"></a>附(快速查看webp格式)</h2>
<p>直接把图片用记事本打开，如果第一行有显示&quot;WEBPVP8&quot;之类的文字就是webp格式的图片。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/c108df05bebaf13f7188961e4024e25e.png" alt="在这里插入图片描述"><br>
如图所示，文件名虽然是jpg后缀但是内容却是webp。</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>ImageIO</tag>
      </tags>
  </entry>
  <entry>
    <title>堆排序</title>
    <url>/2021/03/07/heapsort/</url>
    <content><![CDATA[<h2 id="堆排序"><a class="header-anchor" href="#堆排序"></a>堆排序</h2>
<p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。首先以线性时间建立一个大顶堆，然后通过执行N-1次删除堆顶元素(deleteMax)操作来实现元素排序。</p>
<span id="more"></span>
<h3 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h3>
<h4 id="Java"><a class="header-anchor" href="#Java"></a>Java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">()</span> &#123;</span><br><span class="line">     bulidHeap(); <span class="comment">//建立一个大顶堆</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> currentSize; i &gt; <span class="number">1</span>; i--)&#123;</span><br><span class="line">         swapReferences(i, <span class="number">1</span>);<span class="comment">//把堆顶元素放到最后,相当于deleteMax    </span></span><br><span class="line">         percolateDown(<span class="number">1</span>, i-<span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(<span class="string">&quot;排序结果：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>建堆和下滤操作参考上一篇<a href="https://www.liquanhong.com/2021/03/02/binary_heap">堆的原理和实现</a>。</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA匹配Eclipse快捷键后，Ctrl+F10快捷键热部署更新无效的解决方法</title>
    <url>/2021/07/24/idea_ctrl_f10_invalid/</url>
    <content><![CDATA[<h2 id="问题描述"><a class="header-anchor" href="#问题描述"></a>问题描述</h2>
<p>IntelliJ IDEA匹配Eclipse快捷键后，按Ctrl+F10快捷键热部署无效而是弹出下图这样的窗口：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/04949a5885574bd11ff7bc33965d6c2a.png" alt="在这里插入图片描述"></p>
<h2 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/cb73571e2ccc9a72e5868d377a62e5e8.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>IntelliJ IDEA</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyExcel导入存在合并单元格的Excel</title>
    <url>/2021/10/01/import_excel_with_merged_cells/</url>
    <content><![CDATA[<h2 id="Excel表格"><a class="header-anchor" href="#Excel表格"></a>Excel表格</h2>
<p>下面是Excel表格，成果简介前可以作为主表数据存储(存在合并)，成果简介后的数据作为从表数据存储。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/1390b1dcd3b46b5ef207c397de149595.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="实现思路"><a class="header-anchor" href="#实现思路"></a>实现思路</h2>
<ul>
<li>
<p>通过EasyExcel读取Excel数据，用List&lt;AwardsDetailField&gt; list接收<br>
因为POI/EasyExcel对合并单元格的数据只读取一次，需要把为空的单元格也赋值，这是<strong>核心技术难点</strong>。</p>
</li>
<li>
<p>循环使用hibernate-validator对数据进行校验<br>
存在校验不通过的数据返回给前端,所有数据校验通过才写入数据库</p>
</li>
<li>
<p>封装然后写入数据库</p>
<ul>
<li>用Java8 对List&lt; DetailFeiled&gt; list根据多字段进行分组，得到Map&lt;String,List<Detail>&gt; map</li>
<li>循环map，封装主表和详细表插入list</li>
<li>批量插入</li>
</ul>
</li>
<li>
<p>导入时要求同一年数据可以分多次导入，但同一年内，成果名称不允许重复<br>
这个可以在数据库中根据<strong>获奖类型+获奖年份+成果名称</strong>建立联合约束</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_awards <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> award_type_year_product <span class="keyword">UNIQUE</span> (award_type,award_year,award_product);</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/cage666/p/7352211.html">参考链接</a></p>
</li>
</ul>
<span id="more"></span>
<h2 id="相关代码"><a class="header-anchor" href="#相关代码"></a>相关代码</h2>
<p><strong>下面贴出的是通过EasyExcel读取Excel数据的测试代码</strong></p>
<p><strong>pom依赖：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--junit测试--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--slf4j简单实现--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--用于给泛型对象的属性设置值--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>Excel行号类:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RowIndex</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Integer lineNo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>AwardsDetailField类(需继承RowIndex)：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.importexcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Excel对应的Java实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AwardsDetailField</span> <span class="keyword">extends</span> <span class="title class_">RowIndex</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value=&quot;奖项等级（一级分类）&quot;,index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> String topClass;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value=&quot;奖项等级（二级分类）&quot;,index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String secondClass;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value=&quot;获奖年份&quot;,index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String awardYear;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value=&quot;获奖产品/成果名称&quot;,index = 3)</span></span><br><span class="line">    <span class="keyword">private</span> String awardProduct;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value=&quot;成果简介&quot;,index = 4)</span></span><br><span class="line">    <span class="keyword">private</span> String briefIntroduction;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value=&quot;获奖单位&quot;,index = 5)</span></span><br><span class="line">    <span class="keyword">private</span> String company;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value=&quot;获奖个人姓名&quot;,index = 6)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value=&quot;员工编号&quot;,index = 7)</span></span><br><span class="line">    <span class="keyword">private</span> String employeeNo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value=&quot;获奖金额（元）&quot;,index = 8)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal money;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>ImportExcelHelper类(导入Excel入口、对合并单元格处理)：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.importexcel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.enums.CellExtraTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.metadata.CellExtra;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.util.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportExcelHelper</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(ImportExcelHelper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回解析后的List</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: fileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: clazz Excel对应属性名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: sheetNo 要解析的sheet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: headRowNumber 正文起始行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.List&lt;T&gt; 解析后的List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getList</span><span class="params">(String fileName, Class&lt;T&gt; clazz, Integer sheetNo, Integer headRowNumber)</span> &#123;</span><br><span class="line">        ImportExcelListener&lt;T&gt; listener = <span class="keyword">new</span> <span class="title class_">ImportExcelListener</span>&lt;&gt;(headRowNumber);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            EasyExcel.read(fileName, clazz, listener).extraRead(CellExtraTypeEnum.MERGE).sheet(sheetNo).headRowNumber(headRowNumber).doRead();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;CellExtra&gt; extraMergeInfoList = listener.getExtraMergeInfoList();</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(extraMergeInfoList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> listener.getData();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;T&gt; data = explainMergeData(listener.getData(), extraMergeInfoList, headRowNumber);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理合并单元格</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data               解析数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> extraMergeInfoList 合并单元格信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNumber      起始行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 填充好的解析数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; <span class="title function_">explainMergeData</span><span class="params">(List&lt;T&gt; data, List&lt;CellExtra&gt; extraMergeInfoList, Integer headRowNumber)</span> &#123;</span><br><span class="line">        <span class="comment">//循环所有合并单元格信息</span></span><br><span class="line">        extraMergeInfoList.forEach(cellExtra -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">firstRowIndex</span> <span class="operator">=</span> cellExtra.getFirstRowIndex() - headRowNumber;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lastRowIndex</span> <span class="operator">=</span> cellExtra.getLastRowIndex() - headRowNumber;</span><br><span class="line">            <span class="type">int</span> <span class="variable">firstColumnIndex</span> <span class="operator">=</span> cellExtra.getFirstColumnIndex();</span><br><span class="line">            <span class="type">int</span> <span class="variable">lastColumnIndex</span> <span class="operator">=</span> cellExtra.getLastColumnIndex();</span><br><span class="line">            <span class="comment">//获取初始值</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">initValue</span> <span class="operator">=</span> getInitValueFromList(firstRowIndex, firstColumnIndex, data);</span><br><span class="line">            <span class="comment">//设置值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> firstRowIndex; i &lt;= lastRowIndex; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> firstColumnIndex; j &lt;= lastColumnIndex; j++) &#123;</span><br><span class="line">                    setInitValueToList(initValue, i, j, data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置合并单元格的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filedValue  值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowIndex    行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnIndex 列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data        解析数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInitValueToList</span><span class="params">(Object filedValue, Integer rowIndex, Integer columnIndex, List&lt;T&gt; data)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">object</span> <span class="operator">=</span> data.get(rowIndex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Field field : object.getClass().getDeclaredFields()) &#123;</span><br><span class="line">            <span class="comment">//提升反射性能，关闭安全检查</span></span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ExcelProperty</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(ExcelProperty.class);</span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (annotation.index() == columnIndex) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        field.set(object, filedValue);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                        LOGGER.error(<span class="string">&quot;设置合并单元格的值异常：&quot;</span>+e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取合并单元格的初始值</span></span><br><span class="line"><span class="comment">     * rowIndex对应list的索引</span></span><br><span class="line"><span class="comment">     * columnIndex对应实体内的字段</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstRowIndex    起始行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstColumnIndex 起始列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data             列数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 初始值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">getInitValueFromList</span><span class="params">(Integer firstRowIndex, Integer firstColumnIndex, List&lt;T&gt; data)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">filedValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">T</span> <span class="variable">object</span> <span class="operator">=</span> data.get(firstRowIndex);</span><br><span class="line">        <span class="keyword">for</span> (Field field : object.getClass().getDeclaredFields()) &#123;</span><br><span class="line">            <span class="comment">//提升反射性能，关闭安全检查</span></span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ExcelProperty</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(ExcelProperty.class);</span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (annotation.index() == firstColumnIndex) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        filedValue = field.get(object);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                        LOGGER.error(<span class="string">&quot;设置合并单元格的初始值异常：&quot;</span>+e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filedValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Excel模板的读取监听类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.importexcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.context.AnalysisContext;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.event.AnalysisEventListener;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.metadata.CellExtra;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Excel模板的读取监听类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangwei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportExcelListener</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(ImportExcelListener.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正文起始行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer headRowNumber;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并单元格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;CellExtra&gt; extraMergeInfoList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImportExcelListener</span><span class="params">(Integer headRowNumber)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.headRowNumber = headRowNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个每一条数据解析都会来调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data    one row value. Is is same as &#123;<span class="doctag">@link</span> AnalysisContext#readRowHolder()&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(T data, AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果一行Excel数据均为空值，则不装载该行数据</span></span><br><span class="line">        <span class="keyword">if</span>(isLineNullValue(data))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;解析到一条数据: &#123;&#125;&quot;</span>, gson.toJson(data));</span><br><span class="line">	    <span class="comment">// 获取Excle行号(从0开始)</span></span><br><span class="line">	    <span class="type">ReadRowHolder</span> <span class="variable">readRowHolder</span> <span class="operator">=</span> context.readRowHolder();</span><br><span class="line">	    <span class="type">Integer</span> <span class="variable">rowIndex</span> <span class="operator">=</span> readRowHolder.getRowIndex();</span><br><span class="line">	    <span class="keyword">try</span> &#123;</span><br><span class="line">	        BeanUtils.setProperty(data, <span class="string">&quot;lineNo&quot;</span>, rowIndex+<span class="number">1</span>);</span><br><span class="line">	    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">	        LOGGER.error(<span class="string">&quot;ImportExcelListener.invoke 设置行号异常: &quot;</span>, e);</span><br><span class="line">	    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">	        LOGGER.error(<span class="string">&quot;ImportExcelListener.invoke 设置行号异常: &quot;</span>, e);</span><br><span class="line">	    &#125;</span><br><span class="line">	    list.add(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有数据解析完成了 都会来调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> &#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;所有数据解析完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回解析出来的List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取额外信息：合并单元格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extra</span><span class="params">(CellExtra extra, AnalysisContext context)</span> &#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;读取到了一条额外信息:&#123;&#125;&quot;</span>, JSON.toJSONString(extra));</span><br><span class="line">        <span class="keyword">switch</span> (extra.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MERGE: &#123;</span><br><span class="line">                LOGGER.info(</span><br><span class="line">                        <span class="string">&quot;额外信息是合并单元格,而且覆盖了一个区间,在firstRowIndex:&#123;&#125;,firstColumnIndex;&#123;&#125;,lastRowIndex:&#123;&#125;,lastColumnIndex:&#123;&#125;&quot;</span>,</span><br><span class="line">                        extra.getFirstRowIndex(), extra.getFirstColumnIndex(), extra.getLastRowIndex(),</span><br><span class="line">                        extra.getLastColumnIndex());</span><br><span class="line">                <span class="keyword">if</span> (extra.getRowIndex() &gt;= headRowNumber) &#123;</span><br><span class="line">                    extraMergeInfoList.add(extra);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回解析出来的合并单元格List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CellExtra&gt; <span class="title function_">getExtraMergeInfoList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> extraMergeInfoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 判断整行单元格数据是否均为空 true是 false否</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isLineNullValue</span><span class="params">(T data)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (data <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">			<span class="keyword">return</span> Objects.isNull(data);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			List&lt;Field&gt; fields = Arrays.stream(data.getClass().getDeclaredFields())</span><br><span class="line">					.filter(f -&gt; f.isAnnotationPresent(ExcelProperty.class))</span><br><span class="line">					.collect(Collectors.toList());</span><br><span class="line">			List&lt;Boolean&gt; lineNullList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(fields.size());</span><br><span class="line">			<span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">				field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">				<span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(data);</span><br><span class="line">				<span class="keyword">if</span> (Objects.isNull(value)) &#123;</span><br><span class="line">					lineNullList.add(Boolean.TRUE);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					lineNullList.add(Boolean.FALSE);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> lineNullList.stream().allMatch(Boolean.TRUE::equals);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			LOGGER.error(<span class="string">&quot;读取数据行[&#123;&#125;]解析失败: &#123;&#125;&quot;</span>, data, e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.importexcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2021/08/06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">PATH</span> <span class="operator">=</span> <span class="string">&quot;E:\\Downloads\\&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> PATH + <span class="string">&quot;各奖励网站导入模版.xlsx&quot;</span>;</span><br><span class="line">        ImportExcelHelper&lt;AwardsDetailField&gt; helper = <span class="keyword">new</span> <span class="title class_">ImportExcelHelper</span>&lt;&gt;();</span><br><span class="line">        List&lt;AwardsDetailField&gt; list = helper.getList(fileName,AwardsDetailField.class,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(list));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行后打印的JSON字符串,用JSON工具解析发现完全是想要的效果，成功搞定！<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/a237f0729737a57e262928e55445bf68.png" alt="在这里插入图片描述"><br>
<a href="https://blog.csdn.net/weixin_42195311/article/details/110441885">参考链接</a>、<a href="https://www.jb51.net/article/258822.htm">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>EasyExcel</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>解决IntelliJ IDEA多模块项目依赖错误问题</title>
    <url>/2021/10/02/intelliJ_idea_dependency_erro/</url>
    <content><![CDATA[<h2 id="问题描述"><a class="header-anchor" href="#问题描述"></a>问题描述</h2>
<p>reward项目下面有reward_management和reward_portal两个模块，项目结构如下：<br>
├─reward<br>
│  ├─reward_management<br>
│  ├─reward_portal<br>
在reward_portal中的pom.xml加入依赖，在reward_management中的代码也能引用到相关包，导致项目启动报错、Maven打包报错。</p>
<h2 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h2>
<p>手动去除有问题的依赖即可，如下图所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/d297adc634dcf83d92907ddb1d4b9377.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>用Java代码生成100万条数据并导入MySQL</title>
    <url>/2021/06/12/java_create_mysql_date/</url>
    <content><![CDATA[<h2 id="生成数据"><a class="header-anchor" href="#生成数据"></a>生成数据</h2>
<p>用for循环不断的往字符流中写数据，然后输出到文件系统。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过IO流造100万条文本数据并输出到磁盘</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateData</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">writeName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\log.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//如果没有则新建一个文件，有同名的则覆盖</span></span><br><span class="line">            writeName.createNewFile();</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(writeName);</span><br><span class="line">                 <span class="type">BufferedWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(writer)</span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i= <span class="number">1</span>;i&lt;<span class="number">1000001</span>;i++)&#123;</span><br><span class="line">                    out.write(i+<span class="string">&quot;\t&quot;</span>+  <span class="comment">//自增主键</span></span><br><span class="line">                            <span class="string">&quot;192.168.43.151&quot;</span>+<span class="string">&quot;\t&quot;</span>+</span><br><span class="line">                            <span class="string">&quot;user_&quot;</span>+i+<span class="string">&quot;\t&quot;</span>+</span><br><span class="line">                            <span class="string">&quot;我是测试日志内容\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                out.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>导出后log.txt部分数据如下：<br>
1	192.168.43.151	user_1	我是测试日志内容<br>
2	192.168.43.151	user_2	我是测试日志内容<br>
3	192.168.43.151	user_3	我是测试日志内容<br>
4	192.168.43.151	user_4	我是测试日志内容<br>
5	192.168.43.151	user_5	我是测试日志内容<br>
6	192.168.43.151	user_6	我是测试日志内容<br>
7	192.168.43.151	user_7	我是测试日志内容<br>
8	192.168.43.151	user_8	我是测试日志内容<br>
9	192.168.43.151	user_9	我是测试日志内容<br>
10	192.168.43.151	user_10	我是测试日志内容<br>
11	192.168.43.151	user_11	我是测试日志内容<br>
12	192.168.43.151	user_12	我是测试日志内容</p>
<h2 id="导入数据过程"><a class="header-anchor" href="#导入数据过程"></a>导入数据过程</h2>
<h3 id="建表"><a class="header-anchor" href="#建表"></a>建表</h3>
<p>先建立一个表用来匹配测试数据，建表语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_log` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `login_ip` <span class="type">varchar</span>(<span class="number">15</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `login_name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_content` <span class="type">varchar</span>(<span class="number">200</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1020304</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin</span><br></pre></td></tr></table></figure>
<h3 id="SQLyog导入报错"><a class="header-anchor" href="#SQLyog导入报错"></a>SQLyog导入报错</h3>
<p>使用SQLyog的导入本地CSV功能：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/302be1cf9b35a2e22177d7804cd34bc4.png" alt="在这里插入图片描述"></p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/94aca70436088d0d303812e4a0bcec5b.png" alt="在这里插入图片描述"><br>
然而，报错了😂<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/0d883f7ce4b4ba085661e1302b3cac7b.png" alt="在这里插入图片描述"></p>
<h3 id="成功导入"><a class="header-anchor" href="#成功导入"></a>成功导入</h3>
<p>解决上面的错误，需要三步。<br>
<strong>第一步 用cmd进入MySQL的bin目录，登录的时候带上参数–local-infile=1。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server <span class="number">8.0</span>\bin&gt;mysql --local-infile=<span class="number">1</span> -u root -p</span><br><span class="line">Enter password: ****</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is <span class="number">11</span></span><br><span class="line">Server version: <span class="number">8.0</span><span class="number">.19</span> MySQL Community Server - GPL</span><br></pre></td></tr></table></figure>
<p><strong>第二步 设置客户端加载功能，在cmd输入set global local_infile = 1命令</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mysql&gt; set <span class="type">global</span> <span class="variable">local_infile</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">0</span> rows <span class="title function_">affected</span> <span class="params">(<span class="number">0.00</span> sec)</span></span><br></pre></td></tr></table></figure>
<p><strong>第三步 通过命令或者SQLyog导入文件</strong><br>
命令语法：load data local infile ‘文件路径’ into table 数据库表，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">load data local infile <span class="string">&#x27;C:\\Users\\12718\\Desktop\\log.txt&#x27;</span> into table user_log</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java虚拟机(JVM)、垃圾回收学习</title>
    <url>/2021/05/15/jvm_gc/</url>
    <content><![CDATA[<h2 id="JVM体系结构概述"><a class="header-anchor" href="#JVM体系结构概述"></a>JVM体系结构概述</h2>
<h3 id="JVM位置"><a class="header-anchor" href="#JVM位置"></a>JVM位置</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/671a91a7c775d5198aa690e781a0aa7c.png" alt="在这里插入图片描述"><br>
JVM是运行在操作系统之上的，它与硬件没有直接的交互。</p>
<h3 id="JVM体系结构"><a class="header-anchor" href="#JVM体系结构"></a>JVM体系结构</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/598113927dcb4b9f6723bf7fb4f808c6.png" alt="在这里插入图片描述"></p>
<ul>
<li>白色的模块说明线程私有，几乎不存在垃圾回收。方法区和堆存在垃圾回收。</li>
<li>栈管运行，堆管存储。栈是线程私有，不存在垃圾回收。栈保存基本类型变量+对象的引用+实例方法。java方法 = 栈帧。</li>
<li>栈记录了方法之间调用和执行情况，类似于排班表。用来存储指向下一条指令的地址。它是当前线程所执行的字节码的行号执行器。</li>
<li>Native方法不归JAVA管，所以计数器是空的 。</li>
<li>方法区是存放类结构信息的地方，是一种规范。</li>
</ul>
<span id="more"></span>
<p>JVM执行流程如下：<br>
首先<strong>类加载器</strong>会把 Java代码转换成字节码，<strong>运行时数据区</strong>再把字节码加载到内存中。而字节码文件只是 JVM 的一套指令集规范，并不能直接交个底层操作系统去执行，因此需要特定的命令解析器<strong>执行引擎</strong>，将字节码翻译成底层系统指令再交由 CPU 去执行，而这个过程中需要调用其他语言的<strong>本地库接口</strong>来实现整个程序的功能。</p>
<h3 id="类装载器"><a class="header-anchor" href="#类装载器"></a>类装载器</h3>
<p>负责加载class文件，class文件在<strong>文件开头有特定的文件标示</strong>，将class文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。类加载器结构如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/c8dc4f4e3e1c7ee3382bc34864af9aff.png" alt="在这里插入图片描述"><br>
1、系统自带加载器：</p>
<ul>
<li>启动类加载器<br>
加载lib下路径下的类</li>
<li>扩展类加载器<br>
加载lib/ext路径下的类</li>
<li>应用程序类加载器<br>
ClassLoader负责，加载用户路径上所指定的类库。</li>
</ul>
<p>2、用户自定义加载器</p>
<p>除顶层启动类加载器之外，其他都有自己的父类加载器。</p>
<p>工作过程：如果一个类加载器收到一个类加载的请求，它首先不会自己加载，而是把这个请求委派给父类加载器，只有父类无法完成时子类才会尝试加载，这种机制叫<strong>双亲委派</strong>。<br>
示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：<br>
Error: Main method not found in class java.lang.String, please define the main method as:<br>
public static void main(String[] args)<br>
or a JavaFX application class must extend javafx.application.Application</p>
<p>原因是在执行这个方法程序时JVM首先加载的是Bootstrap加载器，由于JVM中有java.lang.String这个类，所以会首先加载这个类，而在这个类中没有main方法，所以报错。</p>
<h3 id="本地库接口"><a class="header-anchor" href="#本地库接口"></a>本地库接口</h3>
<p>本地接口的作用是融合不同的编程语言为 Java 所用，它的初衷是融合 C/C<ins>程序，Java 诞生的时候是 C/C</ins>横行的时候，要想立足，必须有调用 C/C++程序，于是就在内存中专门开辟了一块区域处理标记为native的代码，它的具体做法是 Native Method Stack中登记 native方法，在Execution Engine 执行时加载native libraies。正常开发中这辈子估计用不到了。</p>
<h3 id="本地方法栈"><a class="header-anchor" href="#本地方法栈"></a>本地方法栈</h3>
<p>它的具体做法是Native Method Stack中登记native方法，在Execution Engine 执行时加载本地方法库。</p>
<h3 id="虚拟机栈"><a class="header-anchor" href="#虚拟机栈"></a>虚拟机栈</h3>
<p>栈也叫栈内存，主管Java程序的运行，是在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放，对于栈来说<strong>不存在垃圾回收问题</strong>，只要线程一结束该栈就Over，生命周期和线程一致，是线程私有的。<strong>8种基本类型的变量+对象的引用变量+实例方法都是在函数的栈内存中分配</strong>。栈主要保存下面三类数据：</p>
<ul>
<li>本地变量<br>
输入参数和输出参数以及方法内的变量</li>
<li>栈操作<br>
记录出栈、入栈的操作</li>
<li>栈帧数据<br>
包括类文件、方法等</li>
</ul>
<p>栈内存溢出代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法区"><a class="header-anchor" href="#方法区"></a>方法区</h3>
<p>供各线程共享的运行时内存区域。它存储了<strong>每一个类的结构信息</strong>，例如运行时常量池（Runtime Constant Pool）、字段和方法数据、构造函数和普通方法的字节码内容。上面讲的是规范，在不同虚拟机里头实现是不一样的，最典型的就是永久代(PermGen space)和元空间(Metaspace)。<strong>但是实例变量存在堆内存中,和方法区无关</strong>。</p>
<h3 id="程序计数器"><a class="header-anchor" href="#程序计数器"></a>程序计数器</h3>
<p>每个线程都有一个程序计数器，是线程私有的,就是一个指针，指向方法区中的方法字节码（<strong>用来存储指向下一条指令的地址,也即将要执行的指令代码</strong>），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不记。<br>
这块内存区域很小，<strong>它是当前线程所执行的字节码的行号指示器</strong>，字节码解释器通过改变这个计数器的值来选取下一条需要执行的字节码指令。<br>
如果执行的是一个Native方法，那这个计数器是空的。<br>
用以完成分支、循环、跳转、异常处理、线程恢复等基础功能。不会发生内存溢出(OutOfMemory=OOM)错误。</p>
<h3 id="栈-堆-方法区的交互关系"><a class="header-anchor" href="#栈-堆-方法区的交互关系"></a>栈+堆+方法区的交互关系</h3>
<p><strong>1、通过句柄访问：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/1ad255ee68556af4960581bf41f9ee74.png" alt="在这里插入图片描述"></p>
<p>Java 堆中会分配一块内存作为句柄池。reference 存储的是句柄地址。详细参考上图。</p>
<p><strong>2、通过直接指针访问</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/eaef209706386bb5d2d2eecd40d39e92.png" alt="在这里插入图片描述"><br>
reference 中直接存储对象地址；HotSpot是使用直接指针的方式来访问对象。</p>
<p>两种方式的区别：使用句柄的最大好处是 reference 中存储的是稳定的句柄地址，在对象移动(GC)是只改变实例数据指针地址，reference 自身不需要修改。直接指针访问的最大好处是速度快，节省了一次指针定位的时间开销。如果是对象频繁 GC 那么句柄方法好，如果是对象频繁访问则直接指针访问好。</p>
<h2 id="堆体系结构概述"><a class="header-anchor" href="#堆体系结构概述"></a>堆体系结构概述</h2>
<h3 id="简介"><a class="header-anchor" href="#简介"></a>简介</h3>
<p>类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/792c07d7d5690e794062c4b1eba57096.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/a023b6d5456db744add1f34f35e3149f.png" alt="在这里插入图片描述"><br>
如上面两张图所示，堆逻辑上由&quot;新生+养老+永久代&quot;组成。按GC又可分为&quot;新生+养老代&quot;两部分。JAVA8用元空间代替了永久代。区别是<strong>永久代用的是堆内存，元空间使用本机物理内存</strong>。</p>
<h3 id="新生代和老年代"><a class="header-anchor" href="#新生代和老年代"></a>新生代和老年代</h3>
<p>除去永久代(元空间)，新生代占1/3，老年代占2/3。在新生代中，又分为伊甸园Eden、幸存者Survivor From和幸存者Survivor To三个区域，且比例为8:1:1。新生代是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命。参考后面的<strong>垃圾回收详细过程</strong>。</p>
<h3 id="永久代"><a class="header-anchor" href="#永久代"></a>永久代</h3>
<p>永久代是一个常驻内存区域，用于存放JDK自身所携带的Class,Interface 的元数据，也就是说它存储的是运行环境必须的类信息，<strong>被装载进此区域的数据是不会被垃圾回收器回收掉的，关闭 JVM 才会释放此区域所占用的内存</strong>。</p>
<h2 id="堆参数调优入门"><a class="header-anchor" href="#堆参数调优入门"></a>堆参数调优入门</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/15023b2ef6aa3f9d17b535517481e3b0.png" alt="在这里插入图片描述"></p>
<ul>
<li>堆的参数主要有两个<br>
-Xms 堆的初始内存大小<br>
-Xmx 堆的最大内存大小</li>
<li>新生代有一个参数 -Xmn用于调新生区和养老区的比例。这个一般不调。</li>
<li>永久代有两个参数<br>
-XX:PermSize        永久代的初始内存大小<br>
-XX:MaxPermSize 永久代的最大内存大小<br>
<strong>Java8后没有这两个参数了，因为元空间是使用物理内存</strong></li>
</ul>
<p><strong>程序打印出的JVM相关参数说明：</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/b5f982745235de64395e4ee7025f15ed.png" alt="在这里插入图片描述"></p>
<h2 id="垃圾回收"><a class="header-anchor" href="#垃圾回收"></a>垃圾回收</h2>
<h3 id="垃圾回收详细过程"><a class="header-anchor" href="#垃圾回收详细过程"></a>垃圾回收详细过程</h3>
<p>新生代 GC (Minor GC)：频繁，速度快。<br>
老年代 GC (Major GC / Full GC)：出现了 Major GC 经常会伴随至少一次 Minor GC(非绝对)。Major GC 的速度一般会比 Minor GC 慢十倍以上。<br>
垃圾回收详细过程如下：</p>
<ul>
<li>当Eden区的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对Eden区进行垃圾回收(Minor GC)，将Eden区中的不再被其他对象所引用的对象进行销毁，然后将Eden区中的剩余对象移动到From区。</li>
<li>当Eden区再次触发GC的时候会扫描Eden区和From区,对这两个区域进行垃圾回收，经过这次回收后还存活的对象,则直接<strong>复制</strong>到To区域（如果有对象的年龄已经达到了老年的标准，则赋值到老年代区），同时把这些对象的年龄+1。</li>
<li>然后，<strong>清空</strong>Eden和From中的对象。</li>
<li>最后，To区和From区<strong>互换</strong>，原To区成为下一次GC时的From区，保证名为To区是空的。。部分对象会在From区和To区中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代。</li>
<li>若老年代内存也满了，那么这个时候将产生MajorGC（FullGC），进行老年代的内存清理。若老年代执行了Full GC之后发现依然无法进行对象的保存，就会产生OOM错误“OutOfMemoryError”。</li>
</ul>
<p>如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够。原因有二：</p>
<ul>
<li>Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整。</li>
<li>代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）。</li>
</ul>
<h3 id="判断对象是否存活的算法"><a class="header-anchor" href="#判断对象是否存活的算法"></a>判断对象是否存活的算法</h3>
<h4 id="引用计数算法"><a class="header-anchor" href="#引用计数算法"></a>引用计数算法</h4>
<p>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。这种算法的优缺点：</p>
<ul>
<li>优点<br>
简单且高效(object-c用的这种算法)</li>
<li>缺点<br>
需要额外的空间来存储计数器、很难处理循环引用</li>
</ul>
<h4 id="可达性分析算法"><a class="header-anchor" href="#可达性分析算法"></a>可达性分析算法</h4>
<p>可达性分析算法又叫<strong>根搜索算法</strong>，是通过一些&quot;GC Roots&quot;对象作为起点，从这些节点开始往下搜索，搜索通过的路径成为引用链(Reference Chain)，当一个对象没有被GC Roots的引用链连接的时候，说明这个对象是不可用的。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/08a0df56fbde760012495be71140e3f2.jpeg" alt="在这里插入图片描述"><br>
上图中对象1-4是GC Roots可达的，不会被回收；对象5-7之间虽然可达但是GC Roots不可达所以会被回收。<br>
在Java中固定可作为GC Roots的对象有：</p>
<ul>
<li>在虚拟机栈中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数，局部变量，临时变量等</li>
<li>在方法区中类静态属性引用的对象，如Java类的引用类型静态变量</li>
<li>在方法区中常量引用的对象，如字符串常量池里的引用</li>
<li>在本地方法栈中JNI引用的对象（Native方法）</li>
<li>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常NPE,OOM等，系统类加载器</li>
<li>所有被同步锁（Synchronized）持有的对象</li>
<li>反应Java虚拟机内部情况的JMXBean,JVMTI中注册的回调，本地代码缓存等</li>
</ul>
<p>可达性算法的优缺点如下：</p>
<ul>
<li>优点<br>
解决了循环引用的问题</li>
<li>缺点<br>
在多线程环境下，其他线程可能会更新已经访问过的对象中的引用，从而造成误报（将引用设置为null）或者漏报（将引用设置为未被访问过的对象）。<br>
误报并没有什么伤害，Java虚拟机至多损失了部分垃圾回收的机会。漏报则比较麻烦，因为垃圾回收器可能回收事实上仍被引用的对象内存。 一旦从原引用访问已经被回收了的对象，则很有可能会直接导致Java虚拟机崩溃。</li>
</ul>
<h3 id="垃圾回收算法有哪些"><a class="header-anchor" href="#垃圾回收算法有哪些"></a>垃圾回收算法有哪些</h3>
<h4 id="复制算法"><a class="header-anchor" href="#复制算法"></a>复制算法</h4>
<p>复制算法的基本思想就是将内存分为两块，每次只用其中一块，当这一块内存用完，就将还活着的对象复制到另外一块上面。 HotSpot JVM年轻代的垃圾回收就是使用着复制算法。动图如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/ddb5369ed583ae05acb61d27e93b9e2f.gif#pic_center" alt="在这里插入图片描述"><br>
上图动画中，Area空闲表示To区域，Area激活表示From区域，绿色表示不被回收对象，红色表示被回收对象。<br>
复制算法适用于年轻代，因为年轻代对象90%以上都是&quot;朝生夕死&quot;的，其优缺点如下：</p>
<ul>
<li>优点<br>
不产生内存碎片</li>
<li>缺点<br>
浪费一半内存；对象存活率很高时浪费复制时间</li>
</ul>
<h4 id="标记清除算法"><a class="header-anchor" href="#标记清除算法"></a>标记清除算法</h4>
<p>标记清除算法就是在程序运行期间，若可以使用的内存被耗尽的时候，GC线程就会被触发并将程序暂停，随后将要回收的对象标记一遍，最终统一回收这些对象，完成标记清理工作接下来便让应用程序恢复运行。<strong>标记</strong>是指从根节点开始标记引用的对象，<strong>清除</strong>是指清理未被标记引用的对象(垃圾对象)。动图如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/effaceddd65bf0d64b2d9776d50169d0.gif#pic_center" alt="在这里插入图片描述"><br>
绿色表示不被回收对象，红色表示被回收对象。</p>
<p>标记清除算法适用于老年代，其优缺点如下：</p>
<ul>
<li>优点<br>
解决了引用计数器算法中的循环引用的问题</li>
<li>缺点
<ul>
<li><strong>效率较低</strong>，标记和清除两个动作都需要遍历所有的对象，并且在GC时，需要<strong>暂停应用程序</strong>，对于交互性要求比较高的应用，体验非常差。</li>
<li>通过标记清除算法清理出的内存，<strong>碎片化比较严重</strong>，被回收的对象存在于内存的各个角落，所以清理出来的内存是不连贯的。</li>
</ul>
</li>
</ul>
<h4 id="标记整理算法"><a class="header-anchor" href="#标记整理算法"></a>标记整理算法</h4>
<p>标记整理又叫标记压缩算法，是一种老年代的回收算法，它在标记清除算法的基础上做了一些优化。它的基本思想是首先从根节点开始对所有可达对象做一次标记，但之后，它并不简单地清理未标记的对象，而是将所有的存活对象压缩到内存的一端。之后，清理边界外所有的空间。<br>
动图如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/43bd67c9570e12481ef19a01f564742f.gif#pic_center" alt="在这里插入图片描述"><br>
绿色表示不被回收对象，红色表示被回收对象。</p>
<p>标记整理算法适用于老年代，其优缺点如下：</p>
<ul>
<li>优点<br>
解决了复制算法中的占内存问题，解决了标记清除算法中产生内存碎片问题</li>
<li>缺点<br>
不仅要标记所有存活对象，还要整理所有存活对象的引用地址，<strong>导致效率不高</strong>。</li>
</ul>
<h4 id="分代收集算法"><a class="header-anchor" href="#分代收集算法"></a>分代收集算法</h4>
<p>分代收集算法就是目前虚拟机使用的回收算法，它解决了标记整理不适用于老年代的问题，将内存分为各个年代。一般情况下将堆区划分为老年代（Tenured Generation）和新生代（Young Generation），在堆区之外还有一个代就是永久代（Permanet Generation）。<br>
在不同年代使用最合适的算法，新生代存活率低，可以使用复制算法。而老年代对象存活率高，没有额外空间对它进行分配担保，所以只能使用标记清除或者标记整理算法。</p>
<h3 id="垃圾回收器有哪些"><a class="header-anchor" href="#垃圾回收器有哪些"></a>垃圾回收器有哪些</h3>
<h4 id="串行垃圾收集器"><a class="header-anchor" href="#串行垃圾收集器"></a>串行垃圾收集器</h4>
<p><img src="https://i-blog.csdnimg.cn/direct/be5b5fdfc3fb42229f105e665aaaa1e1.png" alt="在这里插入图片描述"></p>
<h4 id="并行垃圾收集器"><a class="header-anchor" href="#并行垃圾收集器"></a>并行垃圾收集器</h4>
<p><img src="https://i-blog.csdnimg.cn/direct/950e313ed7f640499aa1168226196d9a.png" alt="在这里插入图片描述"></p>
<h4 id="CMS（并发）垃圾收集器"><a class="header-anchor" href="#CMS（并发）垃圾收集器"></a>CMS（并发）垃圾收集器</h4>
<p><img src="https://i-blog.csdnimg.cn/direct/bce99acc92b34ec6aafdab10e5d17518.png" alt="在这里插入图片描述"></p>
<h4 id="G1垃圾收集器"><a class="header-anchor" href="#G1垃圾收集器"></a>G1垃圾收集器</h4>
<p><img src="https://i-blog.csdnimg.cn/direct/c8d2775b2d80408abd29149760fff343.png" alt="在这里插入图片描述"></p>
<p>参考链接如下：<br>
<a href="http://www.atguigu.com/">尚硅谷周阳JVM视频</a><br>
<a href="https://blog.csdn.net/qq_41701956/article/details/81664921">Java虚拟机（JVM）你只要看这一篇就够了</a><br>
<a href="https://zhuanlan.zhihu.com/p/54851319">JVM的4种垃圾回收算法、垃圾回收机制与总结</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>电动车引起的一些交通安全问题</title>
    <url>/2021/07/06/electric_vehicles/</url>
    <content><![CDATA[<blockquote>
<p>中国的交通正处于历史上最混乱的局面。走不到一公里的路，险些被两个电动车撞上。这些外卖送货员已经完全不遵守交通规则。逆行，上人行道，在人群中乱穿，还对人按喇叭，已经无法无天。每一天从这路上走过，都有险些被撞被擦的惊险场面出现。<br>
眼观六路，耳听八方都是不够的，因为他们从十六个以上的方向冲来。傍晚黑乎乎的路上，只看见满街的电动车在乱串。末世的景色。好些电动车上，还有棱角锐利的箱子或金属架子，就像是锋利的武器。真的是防不慎防，心惊胆战。<br>
这恐怕是任何国家历史上都从未出现过的交通混乱。人行道都不能安全行走，中国现在恐怕是世界上交通最混乱的国家。前所未有地感觉到中国人生命的廉价。<br>
政府和交通部门应该给外卖和快递公司施加压力，出动警力维持秩序，严惩违章的送货员，并且支持群众举报。由于生命安全受到严重威胁，群众应该有权拦截，训斥并举报违章的外卖送货员。一旦被举报，就从外卖系统除名。<br>
另外，应该禁止外卖公司给送货员设置不合理的&quot;超时赔付&quot;，逼迫他们赶时间违章。<br>
这么简单的事情，怎么就是不会做呢？</p>
</blockquote>
<span id="more"></span>
<p>深有感触！就拿我住的深圳城中村来说，每分钟碰到20辆电动车毫不夸张，尤其是送外卖的，速度比普通车快2~3倍，生命安全受到严重威胁，这可比新冠病毒危险多了…</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>《生命进化的跃升》读书笔记</title>
    <url>/2021/01/10/life_ascending/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/aaf5a7ac2dfcf5114fad2104f712db30.jpeg" width="460px" align="center"></img><br>
书名：生命进化的跃升<br>
英文名: <em>Life Ascending: The Ten Great Inventions of Evolution</em><br>
作者：[英] 尼克·莱恩<br>
译者: 梅苃芢<br>
读完时间：2020年11月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<h3 id="第三章-光合作用——太阳的召唤"><a class="header-anchor" href="#第三章-光合作用——太阳的召唤"></a>第三章　光合作用——太阳的召唤</h3>
<ul>
<li>氧气是行星生命的关键。氧气虽然只是光合作用产生的废料，但却是创造世界的分子。</li>
<li>很快就超出地球吸收的极限。最终所有的灰尘和岩石中的铁、所有海洋里的硫和空气中的甲烷，全部被氧化了，然后多出来的氧气才开始填满大气层。直到此时，氧气才开始保护地球，不让水分继续流失到太空中去。同时从水中冒出来的氢气，才有机会在逃到外太空之前碰到更多的氧气，很快氢气和氧气开始反应生成水，再以雨的形式从天而降，回到海洋中补充流失的水分。当氧气开始在大气层中积聚，才能形成一层臭氧保护膜阻挡紫外线的烧炙，让地球成为适宜居住的地方。</li>
</ul>
<h3 id="第四章-复杂细胞——命运的邂逅"><a class="header-anchor" href="#第四章-复杂细胞——命运的邂逅"></a>第四章　复杂细胞——命运的邂逅</h3>
<ul>
<li>地球上几乎所有有点名堂的东西都由真核细胞构成，我们谈论过的所有复杂生命都是。</li>
<li>因此真核细胞有真正的细胞核，这让它们与细菌不同，细菌是原核细胞（prokaryote），原核细胞并没有核。</li>
</ul>
<h3 id="第五章-性——地球上最伟大的彩票"><a class="header-anchor" href="#第五章-性——地球上最伟大的彩票"></a>第五章　性——地球上最伟大的彩票</h3>
<ul>
<li>几乎所有的真核生物都会沉溺于性，无性生殖的物种大多走向灭亡。</li>
</ul>
<h3 id="第十章-死亡——不朽的代价"><a class="header-anchor" href="#第十章-死亡——不朽的代价"></a>第十章　死亡——不朽的代价</h3>
<ul>
<li>死亡看起来或许像残酷的笑话，但是衰老却更让人伤悲。</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多态</title>
    <url>/2021/06/04/java_polymorphism/</url>
    <content><![CDATA[<h2 id="简介"><a class="header-anchor" href="#简介"></a>简介</h2>
<p>同一方法作用于不同类的实例，将产生不同的执行结果。即&quot;一个对外接口的方法有多种表现形式&quot;。<br>
<strong>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。</strong><br>
Java中，父类的引用既可以指向父类的对象，也可以指向子类的对象，但<strong>子类的引用不能指向父类的对象</strong>。</p>
<span id="more"></span>
<h2 id="必要条件"><a class="header-anchor" href="#必要条件"></a>必要条件</h2>
<ul>
<li>要有继承(或实现接口)</li>
<li>要有重写</li>
<li>父类引用指向子类对象：Parent p = new Child();</li>
</ul>
<h2 id="多态优点"><a class="header-anchor" href="#多态优点"></a>多态优点</h2>
<ul>
<li>可扩充性</li>
<li>接口性</li>
<li>简洁灵活</li>
</ul>
<h2 id="实现方式"><a class="header-anchor" href="#实现方式"></a>实现方式</h2>
<ul>
<li>继承父类，重写父类方法</li>
<li>实现接口，重写接口方法</li>
</ul>
<h2 id="案例"><a class="header-anchor" href="#案例"></a>案例</h2>
<p>父类Shape：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Shape.draw()&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子类Circle：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">cirCleDraw</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle.cirCleDraw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子类Square：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Square .draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类Test：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(); <span class="comment">// 父类引用指向子类对象</span></span><br><span class="line">        s.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br>
Circle.draw()</p>
<p>注意，用子类引用指向父类对象会报错，父类引用调用子类特有的方法会报错，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Circle</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shape</span>(); <span class="comment">// IDEA检测报错</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Shape</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(); <span class="comment">// 父类引用指向子类对象</span></span><br><span class="line">s.cirCleDraw(); <span class="comment">// IDEA检测报错</span></span><br></pre></td></tr></table></figure>
<p>如有错误，欢迎指正！</p>
<p><a href="https://www.runoob.com/java/java-polymorphism.html">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java递归生成目录菜单树</title>
    <url>/2021/09/05/java_recursively_generate_directory_menu_tree/</url>
    <content><![CDATA[<h2 id="需求"><a class="header-anchor" href="#需求"></a>需求</h2>
<p>要求前端展示所有奖励政策分类，一共有两级菜单，如下图所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/0d6e2540a046ddea63ece1fa61caea51.png" alt="在这里插入图片描述"></p>
<span id="more"></span>
<h2 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h2>
<p>数据库表设计脚本如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_incentive_policy_type` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;奖励分类 id&#x27;</span>,</span><br><span class="line">  `type_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类名称&#x27;</span>,</span><br><span class="line">  `parent_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;父id&#x27;</span>,</span><br><span class="line">  `status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;状态  0 开启  1 关闭&#x27;</span>,</span><br><span class="line">  `icon` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图标&#x27;</span>,</span><br><span class="line">  `sort` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;排序号&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">9</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span></span><br></pre></td></tr></table></figure>
<p>插入几条测试数据：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/29887e40afd3958268d8d386ac9f0b66.png" alt="在这里插入图片描述"></p>
<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IncentivePolicyType</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String typeName;</span><br><span class="line">    <span class="keyword">private</span> String parentTypeName;</span><br><span class="line">    <span class="keyword">private</span> Integer parentId;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="keyword">private</span> List&lt;IncentivePolicyType&gt; childTypeList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Controller请求方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/querytypetree&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;查询分类列表树&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ListResponseMsg <span class="title function_">queryTypeTree</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;IncentivePolicyType&gt; policyTypeList = policyTypeService.queryTypeTree();</span><br><span class="line">    <span class="keyword">if</span>(policyTypeList.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getListResponseMsg(MessageCode.Data_Not_Found.code);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getListResponseMsg(MessageCode.RSP_CODE_SUCCED.code,policyTypeList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>服务接口实现类(核心)</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;IncentivePolicyType&gt; <span class="title function_">queryTypeTree</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;IncentivePolicyType&gt; rootList = policyTypeMapper.queryTypeList();</span><br><span class="line">    List&lt;IncentivePolicyType&gt; treeList = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(rootList != <span class="literal">null</span>)&#123;</span><br><span class="line">        treeList = buildTypeTree(rootList, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  treeList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;IncentivePolicyType&gt; <span class="title function_">buildTypeTree</span><span class="params">(List&lt;IncentivePolicyType&gt; rootList, Integer id)</span> &#123;</span><br><span class="line">    List&lt;IncentivePolicyType&gt; treeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    rootList.forEach(type -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (id == type.getParentId()) &#123;</span><br><span class="line">            type.setChildTypeList(buildTypeTree(rootList, type.getId()));</span><br><span class="line">            treeList.add(type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> treeList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MyBatisXMl映射文件:<br>
为了更方便演示，sql中没有筛选status的值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.aspirecn.rewardportal.mapper.IncentivePolicyTypeMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.aspirecn.rewardportal.entity.IncentivePolicyType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;type_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;typeName&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;parent_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;parentId&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;icon&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sort&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sort&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;update_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;updateTime&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">    id, type_name, parent_id, status, icon, sort, create_time, update_time</span><br><span class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryTypeList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span></span><br><span class="line">    FROM t_incentive_policy_type</span><br><span class="line">    order by sort desc</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>调用接口返回结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;200&quot;</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;0952测试奖励政策&quot;</span>,</span><br><span class="line">            <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">&quot;parentId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;/hello/policytype&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sort&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-28T01:45:55.000+00:00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-28T02:06:25.000+00:00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;childTypeList&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">5</span>,</span><br><span class="line">                    <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;1739测试啦啊&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;parentId&quot;</span>: <span class="number">7</span>,</span><br><span class="line">                    <span class="string">&quot;status&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;icon&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;sort&quot;</span>: <span class="number">8</span>,</span><br><span class="line">                    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-27T09:40:03.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-28T02:06:42.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;childTypeList&quot;</span>: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">                    <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;科技创新&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;parentId&quot;</span>: <span class="number">7</span>,</span><br><span class="line">                    <span class="string">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">&quot;icon&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;sort&quot;</span>: <span class="number">4</span>,</span><br><span class="line">                    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-27T09:35:32.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-27T09:35:33.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;childTypeList&quot;</span>: []</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;0727测试测试&quot;</span>,</span><br><span class="line">            <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">&quot;parentId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">&quot;status&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;icon&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">&quot;sort&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-27T09:34:25.000+00:00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-27T09:34:26.000+00:00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;childTypeList&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">6</span>,</span><br><span class="line">                    <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;1000测试奖励政策&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;parentId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;/hello/policytype&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;sort&quot;</span>: <span class="number">6</span>,</span><br><span class="line">                    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-28T01:43:05.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-28T01:54:25.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;childTypeList&quot;</span>: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;0728哈哈哈哈啊哈哈&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;parentId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;status&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;icon&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-27T09:34:43.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-27T09:34:44.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;childTypeList&quot;</span>: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">8</span>,</span><br><span class="line">                    <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;0953测试奖励政策&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;parentId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;status&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;/hello/policytype&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;sort&quot;</span>: -<span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-28T01:46:38.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-28T02:06:42.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;childTypeList&quot;</span>: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">9</span>,</span><br><span class="line">                    <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;1605添加&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;parentId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;status&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;icon&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;sort&quot;</span>: -<span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-28T08:05:47.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-28T08:05:48.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;childTypeList&quot;</span>: []</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用<a href="https://www.jsonla.com/json/editor.html">JSON在线工具</a>验证发现结果完全正确，搞定！</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2021/03/28/mergeSort/</url>
    <content><![CDATA[<h2 id="归并排序"><a class="header-anchor" href="#归并排序"></a>归并排序</h2>
<p>归并排序（Merge Sort）是建立在归并操作上的一种有效且稳定的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。基本思路是将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。由约翰·冯·诺伊曼在1945年提出。</p>
<span id="more"></span>
<p><a href="https://baike.baidu.com/item/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1639015?fr=aladdin">参考链接</a></p>
<h3 id="算法描述"><a class="header-anchor" href="#算法描述"></a>算法描述</h3>
<p>1、首先把长度为n的输入序列分成两个长度为n/2的子序列。<br>
2、再对这两个子序列分别采用归并排序。<br>
3、最后将两个排序好的子序列合并成一个最终的排序序列。</p>
<h3 id="动图演示"><a class="header-anchor" href="#动图演示"></a>动图演示</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/2a327bedc1ff5fe229736f991e893603.gif#pic_center" alt="在这里插入图片描述"></p>
<h3 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h3>
<h4 id="Java"><a class="header-anchor" href="#Java"></a>Java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line">    <span class="comment">//临时数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">23</span>, <span class="number">20</span>, <span class="number">32</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        tmp = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length]; <span class="comment">// 不需要用户初始化会更友好(需要再写一个接口传入mergeSort和merge)</span></span><br><span class="line">        mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序结果：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            mergeSort(arr, left, mid);</span><br><span class="line">            mergeSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">            merge(arr, left, mid, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归并方法</span></span><br><span class="line"><span class="comment">     * 先将arr[]的所有元素复制到临时数组tmp[]中，然后再归并到arr[]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   待排序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  左指针</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mid   中间指针</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> left; k &lt;= right; k++) &#123;</span><br><span class="line">            tmp[k] = arr[k];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> left; k &lt;= right; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) &#123;<span class="comment">//左半边元素用完，取右半边</span></span><br><span class="line">                arr[k] = tmp[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; right) &#123;<span class="comment">//右半边元素用完，取左半边</span></span><br><span class="line">                arr[k] = tmp[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp[j] &lt; tmp[i]) &#123;<span class="comment">//右半边的当前元素小于左半边的当前元素，取右半边的元素</span></span><br><span class="line">                arr[k] = tmp[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//右半边的当前元素大于左半边的当前元素，取左半边的元素</span></span><br><span class="line">                arr[k] = tmp[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>排序结果：[1, 5, 6, 8, 9, 15, 20, 23, 32, 45]</p>
<h4 id="JavaScript"><a class="header-anchor" href="#JavaScript"></a>JavaScript</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">arr,left,right</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">		<span class="keyword">var</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);<span class="comment">//注意js的/不是取整的 需要用Math函数</span></span><br><span class="line">		<span class="title function_">mergeSort</span>(arr, left, mid);</span><br><span class="line">		<span class="title function_">mergeSort</span>(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">		<span class="title function_">merge</span>(arr, left, mid, right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 归并方法</span></span><br><span class="line"><span class="comment">* 先将arr[]的所有元素复制到临时数组tmp[]中，然后再归并到arr[]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">arr,left,mid,right</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> i = left;</span><br><span class="line">	<span class="keyword">var</span> j = mid + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> k = left; k &lt;= right; k++) &#123;</span><br><span class="line">		tmp[k] = arr[k];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> k = left; k &lt;= right; k++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &gt; mid) &#123;<span class="comment">//左半边元素用完，取右半边</span></span><br><span class="line">			arr[k] = tmp[j++];</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; right) &#123;<span class="comment">//右半边元素用完，取左半边</span></span><br><span class="line">			arr[k] = tmp[i++];</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp[j] &lt; tmp[i]) &#123;<span class="comment">//右半边的当前元素小于左半边的当前元素，取右半边的元素</span></span><br><span class="line">			arr[k] = tmp[j++];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;<span class="comment">//右半边的当前元素大于左半边的当前元素，取左半边的元素</span></span><br><span class="line">			arr[k] = tmp[i++];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">23</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="title class_">Array</span>(arr.<span class="property">length</span>);<span class="comment">// 不需要用户初始化会更友好(需要再写一个接口传入mergeSort和merge)</span></span><br><span class="line"><span class="title function_">mergeSort</span>(arr,<span class="number">0</span>,arr.<span class="property">length</span>-<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure>
<p>(10) [1, 5, 6, 8, 9, 15, 20, 23, 32, 45]</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaScript</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现列表中上移、下移操作</title>
    <url>/2021/08/15/move_operation/</url>
    <content><![CDATA[<h2 id="需求说明"><a class="header-anchor" href="#需求说明"></a>需求说明</h2>
<p>最近有个需求：用户点击上下移动可以实现对数据自定义排序，每次移动一个位置。具体如下图所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/6e1e8937f99b3daee4a35fea922ee2e4.png" alt="在这里插入图片描述"></p>
<h2 id="实现思路"><a class="header-anchor" href="#实现思路"></a>实现思路</h2>
<ul>
<li>数据库表中添加一个order字段，默认设置为和主键一样的值，数据按照order降序排列<br>
<strong>由于MySQL表只能有一个自增的键</strong>(已设置为主键自增)，所以这里的实现是每次插入数据后获取主键id的值，然后更新order字段的值(设置为id字段的值)。</li>
<li>上移操作<br>
取出上一条记录的排序号，将当前记录与上一条记录的排序号调换位置</li>
<li>下移操作<br>
取出下一条记录的排序号，将当前记录与下一条记录的排序号调换位置</li>
</ul>
<span id="more"></span>
<h2 id="相关代码"><a class="header-anchor" href="#相关代码"></a>相关代码</h2>
<p>公告分类表脚本如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_notice_type` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;公告分类 id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类名称&#x27;</span>,</span><br><span class="line">  `icon` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;公告图标&#x27;</span>,</span><br><span class="line">  `status` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;状态  0  开启  1  关闭&#x27;</span>,</span><br><span class="line">  `sort` <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;排序&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `create_user` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建者&#x27;</span>,</span><br><span class="line">  `last_update_user` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;最后修改人&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">12</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span></span><br></pre></td></tr></table></figure>
<p>AdjustOrderReq实体，用于接收前端请求入参，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdjustOrderReq</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;公告分类id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;排序方式&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer operaType;<span class="comment">//1上移 2下移</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Controller请求方法代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/adjustorder&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;公告分类顺序调整&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseMsg <span class="title function_">adjustOrder</span><span class="params">(<span class="meta">@RequestBody</span> AdjustOrderReq orderReq)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!ObjectUtil.checkIsNotNull(orderReq))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.errorRsp(MessageCode.Param_NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!orderReq.getOperaType().equals(<span class="number">1</span>) &amp;&amp; !orderReq.getOperaType().equals(<span class="number">2</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.errorRsp(MessageCode.Param_Error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> noticeTypeService.adjustOrder(orderReq);</span><br><span class="line">    <span class="keyword">if</span>(a != <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.errorRsp(MessageCode.Update_Error,String.valueOf(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.successRsp(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务实现方法代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">adjustOrder</span><span class="params">(AdjustOrderReq orderReq)</span> &#123;</span><br><span class="line">     <span class="comment">// 1、查询是否存在分类</span></span><br><span class="line">     <span class="type">NoticeType</span> <span class="variable">noticeType</span> <span class="operator">=</span> noticeTypeMapper.selectByPrimaryKey(orderReq.getId());</span><br><span class="line">     <span class="keyword">if</span>(noticeType == <span class="literal">null</span>)&#123;</span><br><span class="line">         log.info(<span class="string">&quot;NoticeServiceImpl.adjustOrder未查询到公告分类！&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> -<span class="number">2</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 2、上移</span></span><br><span class="line">     <span class="keyword">if</span>(orderReq.getOperaType().equals(<span class="number">1</span>))&#123;</span><br><span class="line">         <span class="comment">//查询下一条记录Id和sort</span></span><br><span class="line">         <span class="type">Integer</span> <span class="variable">nextId</span> <span class="operator">=</span> noticeTypeMapper.selectNextId(noticeType);</span><br><span class="line">         <span class="type">NoticeType</span> <span class="variable">nextNotice</span> <span class="operator">=</span>  noticeTypeMapper.selectByPrimaryKey(nextId);</span><br><span class="line">         <span class="comment">//更新下一条记录的sort为当前值</span></span><br><span class="line">         noticeType.setId(nextId);</span><br><span class="line">         noticeTypeMapper.updateSortById(noticeType);</span><br><span class="line">         <span class="comment">//更新当前记录的sort为下一条</span></span><br><span class="line">         nextNotice.setId(orderReq.getId());</span><br><span class="line">         noticeTypeMapper.updateSortById(nextNotice);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 3、下移动</span></span><br><span class="line">     <span class="keyword">if</span>(orderReq.getOperaType().equals(<span class="number">2</span>))&#123;</span><br><span class="line">         <span class="comment">//查询上一条记录Id和sort</span></span><br><span class="line">         <span class="type">Integer</span> <span class="variable">previousId</span> <span class="operator">=</span> noticeTypeMapper.selectPreviousId(noticeType);</span><br><span class="line">         <span class="type">NoticeType</span> <span class="variable">previousNotice</span> <span class="operator">=</span>  noticeTypeMapper.selectByPrimaryKey(previousId);</span><br><span class="line">         <span class="comment">//更新上一条记录的sort为当前值</span></span><br><span class="line">         noticeType.setId(previousId);</span><br><span class="line">         noticeTypeMapper.updateSortById(noticeType);</span><br><span class="line">         <span class="comment">//更新当前记录的sort为上一条</span></span><br><span class="line">         previousNotice.setId(orderReq.getId());</span><br><span class="line">         noticeTypeMapper.updateSortById(previousNotice);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>MyBatis的XML映射文件代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据主键更新排序号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateSortById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.aspirecn.rewardmanagement.entity.NoticeType&quot;</span> &gt;</span></span><br><span class="line">  update t_notice_type</span><br><span class="line">  set sort = #&#123;sort&#125;,update_time = now()</span><br><span class="line">  where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--根据sort查询上一条记录主键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPreviousId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.aspirecn.rewardmanagement.entity.NoticeType&quot;</span>&gt;</span></span><br><span class="line">  SELECT IFNULL(</span><br><span class="line">  (SELECT id FROM t_notice_type WHERE sort <span class="symbol">&amp;lt;</span> #&#123;sort&#125;</span><br><span class="line">  ORDER BY  sort DESC LIMIT 0,1),1</span><br><span class="line">  ) AS preTypeId</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--根据sort查询下一条记录主键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectNextId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.aspirecn.rewardmanagement.entity.NoticeType&quot;</span>&gt;</span></span><br><span class="line">  SELECT IFNULL(</span><br><span class="line">  (SELECT id FROM t_notice_type WHERE sort <span class="symbol">&amp;gt;</span> #&#123;sort&#125;</span><br><span class="line">  ORDER BY  sort asc LIMIT 0,1),1</span><br><span class="line">  ) AS nextTypeId</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>selectByPrimaryKey方法作用是根据主键查询，代码就不贴了。<br>
若有更好的实现方案或者上续代码有任何问题，都欢迎交流!<br>
<a href="https://blog.csdn.net/lan_qinger/article/details/83028190">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MySQL</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目里用MultipartFile获取到的file为null问题</title>
    <url>/2021/08/22/multipartfile_null/</url>
    <content><![CDATA[<h2 id="问题描述"><a class="header-anchor" href="#问题描述"></a>问题描述</h2>
<p>SpringBoot项目中用MultipartFile获取到的file为null(不加@RequestParam(“file”)注解),如果加上@RequestParam(“file”)注解就报<strong>Requied request part ‘file’ is not present</strong>错误。<br>
用Postman和Swagger调都是一样的问题，并且F12检查前端请求参数也是没问题的，真是奇怪了。<br>
接口代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> ResponseMsg&lt;Attachment&gt; <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> <span class="keyword">final</span> MultipartFile file, <span class="keyword">final</span> HttpServletRequest request)</span> &#123;</span><br><span class="line">	......</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>Postman部分报错信息如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/7d1983d6971436f823ef74bc2e3c970a.png" alt="在这里插入图片描述"></p>
<h2 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h2>
<p>网上查到了很多解决方法：</p>
<ul>
<li>在启动类加@SpringBootApplication(exclude = {MultipartAutoConfiguration.class})注解排除SpringBoot依赖，然后写一个配置文件UploadConfig</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(name=&quot;multipartResolver&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然而问题并没有解决</p>
<ul>
<li>说前端传的file名不一致，我这边是一致的😂	。</li>
<li>说没加@RequestParam(“file”)注解，经过验证这个注解可有可无。</li>
</ul>
<p>最后发现是项目中加了过滤器导致的，过滤器是为了request重复使用，但是文件请求类型multipart/form-data和其他类型不一样，所以过滤器没法处理导致进不了Controller。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebFilter</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestWrapperFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">requestWrapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(request <span class="keyword">instanceof</span> HttpServletRequest) &#123;</span><br><span class="line">            requestWrapper = <span class="keyword">new</span> <span class="title class_">BodyReaderHttpServletRequestWrapper</span>((HttpServletRequest) request);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == requestWrapper) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;包装request失败!将返回原来的request&quot;</span>);</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;包装request成功&quot;</span>);</span><br><span class="line">            chain.doFilter(requestWrapper, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>把@Component和@WebFilter注释掉，临时解决</strong>。</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>《墨菲定律》读书笔记</title>
    <url>/2021/04/18/murphy_law/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/add036280b1113bb357f3c9b17dbe823.jpeg" width="460px" align="center"></img></p>
<p>书名：墨菲定律<br>
编著：李原<br>
读完时间：2021年2月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<h3 id="权威效应：人微则言轻，人贵则言重"><a class="header-anchor" href="#权威效应：人微则言轻，人贵则言重"></a>权威效应：人微则言轻，人贵则言重</h3>
<ul>
<li>
<p>人微则言轻，人贵则言重</p>
</li>
<li>
<p>在现实生活中，无论是做人，还是做事，我们都要擦亮双眼，理智思考，不要让权威成为遮盖事实真相的心理面纱。</p>
</li>
</ul>
<h3 id="禁果效应：越“禁”越“禁不掉”的心理"><a class="header-anchor" href="#禁果效应：越“禁”越“禁不掉”的心理"></a>禁果效应：越“禁”越“禁不掉”的心理</h3>
<ul>
<li>在现实生活中，我们常常会遇到这样的情况：越是被禁止的东西或事情，越会引发人们更大的兴趣和关注，使人们充满窥探和尝试的欲望，千方百计通过各种渠道获得或尝试它，即上面所说的“禁果效应”。其实，这种做法与东西本身没有太大的关系，主要是因为“禁”激起了人们情绪中的好奇心理和逆反心理。</li>
</ul>
<h3 id="马斯洛理论：人是一种有欲求的动物"><a class="header-anchor" href="#马斯洛理论：人是一种有欲求的动物"></a>马斯洛理论：人是一种有欲求的动物</h3>
<ul>
<li>也有人说：我们吃饭是为了活着，但是活着却不仅仅是为了吃饭。很简单地两句话，却给我们揭示了一个很深刻的道理：单纯的生存只要满足基本的生理需求就可以了，但是生活不一样，在满足了吃穿住行这些基本的生活需求之后，我们还需要更多的东西？我们还会有梦想，有追求，渴望成功，渴望被尊重。</li>
</ul>
<h3 id="首因效应：先入为主的第一印象"><a class="header-anchor" href="#首因效应：先入为主的第一印象"></a>首因效应：先入为主的第一印象</h3>
<ul>
<li>现代社会，人们对时间愈来愈重视，往往把不守时和不守信用联系在一起。若你第一次与人见面就迟到，可能会造成难以弥补的损失，最好避免。</li>
</ul>
<h3 id="互惠定律：你来我往，人情互惠"><a class="header-anchor" href="#互惠定律：你来我往，人情互惠"></a>互惠定律：你来我往，人情互惠</h3>
<ul>
<li>人与人的相处其实是很简单的，你想要别人把你当做朋友，那你必须先把别人当做朋友。</li>
</ul>
<h3 id="换位思考定律：将心比心，换位思考"><a class="header-anchor" href="#换位思考定律：将心比心，换位思考"></a>换位思考定律：将心比心，换位思考</h3>
<p>换位思考</p>
<blockquote>
<p>把自己当成别人，把别人当成自己，把别人当成别人，把自己当成自己</p>
</blockquote>
<ul>
<li>
<p>把自己当成别人，把别人当成自己，把别人当成别人，把自己当成自己</p>
</li>
<li>
<p>总之，己所不欲，勿施于人，懂得站在别人的立场上考虑问题，希望别人怎么对你，你就怎么对别人。</p>
</li>
</ul>
<h3 id="古德曼定律：没有沉默，就没有沟通"><a class="header-anchor" href="#古德曼定律：没有沉默，就没有沟通"></a>古德曼定律：没有沉默，就没有沟通</h3>
<ul>
<li>倾听，让对方满足，让自己受益。</li>
</ul>
<h3 id="公地悲剧：都是“公共”惹的祸"><a class="header-anchor" href="#公地悲剧：都是“公共”惹的祸"></a>公地悲剧：都是“公共”惹的祸</h3>
<ul>
<li>总之，一味地困守于资源或财产的完全“公共”或完全“反公共”，都会导致相应的悲剧。我们只有懂得采取相应的措施，有效平衡资源或财产的“共有”和“私有”，才能从根本上避免悲剧的发生。</li>
</ul>
<h3 id="马太效应：富者越来越富，穷者越来越穷"><a class="header-anchor" href="#马太效应：富者越来越富，穷者越来越穷"></a>马太效应：富者越来越富，穷者越来越穷</h3>
<ul>
<li>
<p>现实生活中，人人都希望自己富裕起来。那么，我们不能只看眼前的既得利益，应该把目光放得更远一些，看到马太效应的增值效果，让眼前的收益不断增值。</p>
</li>
<li>
<p>让金钱流动起来，它就是你的摇钱树！</p>
</li>
</ul>
<h3 id="羊群效应：别被潮流牵着鼻子走"><a class="header-anchor" href="#羊群效应：别被潮流牵着鼻子走"></a>羊群效应：别被潮流牵着鼻子走</h3>
<ul>
<li>就拿中国目前的股市来说，很多散户被股市情绪控制，从而出现从众心理：好的时候都蜂拥而上，坏的时候都消极沮丧。其实，在股市投资中，往往是少数人的看法才是正确的。</li>
</ul>
<h3 id="棘轮效应：由俭入奢易，由奢入俭难"><a class="header-anchor" href="#棘轮效应：由俭入奢易，由奢入俭难"></a>棘轮效应：由俭入奢易，由奢入俭难</h3>
<ul>
<li>棘轮效应是出于人的一种本性，人生而有欲，“饥而欲食，寒而欲暖”，这是人与生俱来的欲望。人有了欲望就会千方百计地寻求满足。但是，消费要结合自身情况，不要养成奢侈的消费习惯。哪怕只是几元钱甚至几分钱，也要让其发挥出最大的效益，养成良好的消费习惯。</li>
</ul>
<h3 id="格雷欣法则：劣币驱逐良币与信息不对称"><a class="header-anchor" href="#格雷欣法则：劣币驱逐良币与信息不对称"></a>格雷欣法则：劣币驱逐良币与信息不对称</h3>
<ul>
<li>爱情的市场也是一个“劣币”与“良币”共存的市场，我们在逆向选择的作用下，或许不免阴差阳错地和梦中情人擦身而过。为了最大化地避免遗憾，要么你在遇到心仪对象时好好把握，勇于追求；要么，和那些优秀的人一样，收起自己不切实际的幻想，过平平淡淡才是真的幸福生活！</li>
</ul>
<h3 id="沸腾效应：临门一脚至关重要"><a class="header-anchor" href="#沸腾效应：临门一脚至关重要"></a>沸腾效应：临门一脚至关重要</h3>
<ul>
<li>朋友不在于数量的多少，而在于真正的价值。</li>
</ul>
<h3 id="蜕皮效应：勇于挑战，不断超越"><a class="header-anchor" href="#蜕皮效应：勇于挑战，不断超越"></a>蜕皮效应：勇于挑战，不断超越</h3>
<ul>
<li>
<p>人的才华是没有极限的，唯一的限制来自我们自身！蜕掉旧的皮，这样才有长大的空间，这样才能获得新的生命力！只有先超越了自己，才能够不断进步，最终超越别人。对于成功来说，最大的障碍往往来自于自身。不要自我设限，要不断制定高的目标，我们才能每天都有所进步！</p>
</li>
<li>
<p>人生如打牌，不要对还没有打的牌局说“不可能”，一切皆有可能，只有想不到，没有做不到，只要努力朝着赢牌的目标奔去，就很可能获得成功。</p>
</li>
</ul>
<h3 id="250定律：每一位顾客都是上帝"><a class="header-anchor" href="#250定律：每一位顾客都是上帝"></a>250定律：每一位顾客都是上帝</h3>
<ul>
<li>
<p>真正的销售始于售后</p>
</li>
<li>
<p>推销活动真正的开始在成交之后，而不是之前。</p>
</li>
</ul>
<h3 id="王永庆法则：富翁是省出来的"><a class="header-anchor" href="#王永庆法则：富翁是省出来的"></a>王永庆法则：富翁是省出来的</h3>
<ul>
<li>节约是一种习惯，也是一种态度，更是一种原则。从小养成节约的好习惯，一生都会因此而受益。其实，节约一时容易，难的是坚持。穷苦的时候，你会懂得节约，那是生活所迫；可贵的是你钱多到花不完时却依然懂得节约，这时节约已经成为一种品德。真正懂得节约的人，是知道如何花钱的人，他们用的每一分钱都会创造出更高的价值。</li>
</ul>
<h3 id="幸福定律：幸福，就是别让欲望超出效用的范围"><a class="header-anchor" href="#幸福定律：幸福，就是别让欲望超出效用的范围"></a>幸福定律：幸福，就是别让欲望超出效用的范围</h3>
<ul>
<li>
<p>美国经济学家保罗·萨谬尔森提出了一个关于幸福的方程式：幸福=效用/欲望</p>
</li>
<li>
<p>如果欲望超过了效用，幸福感就会消失。</p>
</li>
<li>
<p>幸福感和与周围人的比较有关。比如，一个人虽然买了一套属于自己的房子，和以前租房住相比有了很大的改观，但是他的朋友都住在别墅里，所以房子给他带来的效用仍然很小，他的欲望得到满足的程度很小，所以他的幸福指数也小。但是，如果他住的是别墅，而他的同事朋友住的都是普通楼房，他就会感到非常幸福。所以我们常会用“比上不足，比下有余”、“知足常乐”来安慰自己。</p>
</li>
</ul>
<h3 id="公平理论：绝对公平是乌托邦"><a class="header-anchor" href="#公平理论：绝对公平是乌托邦"></a>公平理论：绝对公平是乌托邦</h3>
<ul>
<li>绝对的公平根本不存在</li>
</ul>
<h3 id="收入效应：别让降价成为你购买的理由"><a class="header-anchor" href="#收入效应：别让降价成为你购买的理由"></a>收入效应：别让降价成为你购买的理由</h3>
<ul>
<li>免费的午餐，不管是不是骗局，都不要去试，否则，一旦上当你连哭的地方都没有。</li>
</ul>
<h3 id="幸福递减定律：知足才能常乐"><a class="header-anchor" href="#幸福递减定律：知足才能常乐"></a>幸福递减定律：知足才能常乐</h3>
<ul>
<li>所以，请时刻提醒自己，幸福就在我们身边，要懂得用心去感受，不要让我们的内心麻痹，失去对幸福的敏感。</li>
</ul>
<h3 id="贝勃定律：珍惜多少，才真正拥有多少"><a class="header-anchor" href="#贝勃定律：珍惜多少，才真正拥有多少"></a>贝勃定律：珍惜多少，才真正拥有多少</h3>
<ul>
<li>贪婪得来的东西，永远是人生的累赘。想要的越来越多，生活的压力越来越大，脸上的笑容越来越少，这或许便是贪婪的代价。</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL命令行导入导出文件(全)</title>
    <url>/2021/12/02/mysql_import_export_command/</url>
    <content><![CDATA[<h2 id="命令行导出数据库相关表为SQL文件"><a class="header-anchor" href="#命令行导出数据库相关表为SQL文件"></a>命令行导出数据库相关表为SQL文件</h2>
<p>语法：mysqldump -h[主机所在IP] -u[用户名] -p [要导出的数据库]&gt;[导出的路径//[文件名].sql]<br>
例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mysqldump -hlocalhost -uroot -p reward_testdb&gt;E:<span class="comment">//reward_testdb.sql</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="导出数据库表结构"><a class="header-anchor" href="#导出数据库表结构"></a>导出数据库表结构</h3>
<p>语法：mysqldump -d [数据库名] -u [用户名] -p[密码] --tables [表名1] [表名2] [表名3]&gt;[导出路径]<br>
例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mysqldump -d reward_testdb -u root -p123456 --tables t_awards t_awards_detail &gt;D:\t_awards.sql</span><br></pre></td></tr></table></figure>
<h3 id="导出数据库表结构和数据"><a class="header-anchor" href="#导出数据库表结构和数据"></a>导出数据库表结构和数据</h3>
<p>语法(去掉-d)：mysqldump [数据库名] -u [用户名] -p[密码] --tables [表名1] [表名2] &gt;[导出路径]<br>
例子(去掉-d)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mysqldump reward_testdb -u root -pa123456 --tables t_awards t_awards_detail &gt;D:\t_awards.sql</span><br></pre></td></tr></table></figure>
<h2 id="命令行导入SQL文件到MySQL"><a class="header-anchor" href="#命令行导入SQL文件到MySQL"></a>命令行导入SQL文件到MySQL</h2>
<h3 id="命令行登陆到MySQL并选择要使用的数据库"><a class="header-anchor" href="#命令行登陆到MySQL并选择要使用的数据库"></a>命令行登陆到MySQL并选择要使用的数据库</h3>
<p>语法：mysql -u[用户名] -h[主机所在地址，默认不写是localhost] -p<br>
例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure>
<h3 id="将SQL文件进行导入"><a class="header-anchor" href="#将SQL文件进行导入"></a>将SQL文件进行导入</h3>
<p>语法：source [所在的路径//*.sql]<br>
例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">source E:<span class="comment">//t_awards_detail.sql</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/xiaoxuetu/p/3204511.html">参考链接1</a>、<a href="https://www.cnblogs.com/go-jzg/p/4192118.html">参考链接2</a>、<a href="https://www.cnblogs.com/linjiqin/p/11888943.html">参考链接3</a>、<a href="https://blog.csdn.net/qq_26900081/article/details/103183332">参考链接4</a></p>
<h2 id="命令行直接导出Excle文件"><a class="header-anchor" href="#命令行直接导出Excle文件"></a>命令行直接导出Excle文件</h2>
<h3 id="在my-ini文件中新增下面的配置，重启MySQL"><a class="header-anchor" href="#在my-ini文件中新增下面的配置，重启MySQL"></a>在my.ini文件中新增下面的配置，重启MySQL</h3>
<ul>
<li>在My.ini文件的[mysqld]下面添加；文件路径必须存在否则MySQL服务无法启动</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># &quot;&quot;表示所有目录都有权限，也可写成secure_file_priv<span class="operator">=</span>&quot;&quot;</span><br><span class="line">secure<span class="operator">-</span>file<span class="operator">-</span>priv<span class="operator">=</span>&quot;&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>停止、重启MySQL(不区分大小写)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C:\Users\liquanhong&gt;net stop MySQL</span><br><span class="line">MySQL 服务正在停止.</span><br><span class="line">MySQL 服务已成功停止。</span><br><span class="line">C:\Users\liquanhong&gt;net start MySQL</span><br><span class="line">MySQL 服务正在启动 .</span><br><span class="line">MySQL 服务已经启动成功。</span><br></pre></td></tr></table></figure>
<h3 id="命令行登陆到MySQL并选择要使用的数据库-v2"><a class="header-anchor" href="#命令行登陆到MySQL并选择要使用的数据库-v2"></a>命令行登陆到MySQL并选择要使用的数据库</h3>
<p>语法：mysql -u[用户名] -h[主机所在地址，默认不写是localhost] -p</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure>
<h3 id="导出命令"><a class="header-anchor" href="#导出命令"></a>导出命令</h3>
<p>语法：SQL查询语句 into outfile ‘文件路径(左划线分割)’;<br>
例子一(不含列名)：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 文件后缀可以随便写 txt、csv、xls、xlsx、<span class="keyword">sql</span>都可以</span><br><span class="line"> <span class="keyword">select</span> achievement_id,name <span class="keyword">from</span> t_achievement limit <span class="number">20</span> <span class="keyword">into</span> outfile <span class="string">&#x27;d:/export/achievement1.xlsx&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>例子二(含列名)：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 用<span class="keyword">union</span> <span class="keyword">all</span>查列名，文件后缀可以随便写 txt、csv、xls、xlsx、<span class="keyword">sql</span>都可以</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;achievement_id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>  <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> achievement_id,name <span class="keyword">from</span> t_achievement limit <span class="number">20</span> <span class="keyword">into</span> outfile <span class="string">&#x27;d:/export/achievement.txt&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>如果数据库文本有换行，用上面的两个SQL格式会乱，所以需要<strong>对每个字段的数据都用&quot; &quot;包起来，然后用,分割</strong>。<br>
例子三(支持导出换行的文本不乱码，需要csv格式才行，推荐)：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 用<span class="keyword">union</span> <span class="keyword">all</span>查列名，FIELDS TERMINATED <span class="keyword">BY</span> 和ENCLOSED <span class="keyword">BY</span>把每个字段的数据包起来</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;achievement_id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>  <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> achievement_id,name <span class="keyword">from</span> t_achievement limit <span class="number">20</span> <span class="keyword">into</span> outfile <span class="string">&#x27;d:/export/achievement.csv&#x27;</span> FIELDS TERMINATED <span class="keyword">BY</span> &quot;,&quot; ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="命令行直接导入Excle文件"><a class="header-anchor" href="#命令行直接导入Excle文件"></a>命令行直接导入Excle文件</h2>
<h3 id="使用命令load-data-local-infile"><a class="header-anchor" href="#使用命令load-data-local-infile"></a>使用命令load data local infile</h3>
<h4 id="设置客户端加载功能，并选择数据库"><a class="header-anchor" href="#设置客户端加载功能，并选择数据库"></a>设置客户端加载功能，并选择数据库</h4>
<p>若不设置，会出现Loading local data is disabled； this must be enabled on both the client and server sides错误。<br>
按顺序执行下面的命令即可：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 登陆MySQL</span><br><span class="line">mysql <span class="comment">--local-infile=1 -uroot -p</span></span><br><span class="line"># 设置客户端加载功能</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> local_infile <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"># 选择数据库</span><br><span class="line">use [数据库名];</span><br></pre></td></tr></table></figure>
<h4 id="导入命令"><a class="header-anchor" href="#导入命令"></a>导入命令</h4>
<p>语法：load data local infile ‘文件路径(左划线分割)’  into  table 数据库表名;<br>
例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;d:/export/t_achievement_company_map.xls&#x27;</span>  <span class="keyword">into</span>  <span class="keyword">table</span> t_achievement_company_map;</span><br></pre></td></tr></table></figure>
<h3 id="使用命令mysqlimport"><a class="header-anchor" href="#使用命令mysqlimport"></a>使用命令mysqlimport</h3>
<h4 id="在my-ini文件中新增下面的配置，重启MySQL-v2"><a class="header-anchor" href="#在my-ini文件中新增下面的配置，重启MySQL-v2"></a>在my.ini文件中新增下面的配置，重启MySQL</h4>
<p>参考前文</p>
<h4 id="导入命令-v2"><a class="header-anchor" href="#导入命令-v2"></a>导入命令</h4>
<p>使用命令mysqlimport时文件名必须和数据库里面表名一样。<br>
语法：mysqlimport  -uroot -p 数据库名  文件路径(左划线分割)<br>
例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">C:\Users\liquanhong<span class="operator">&gt;</span> mysqlimport <span class="operator">-</span>uroot <span class="operator">-</span>p reward_testdb d:<span class="operator">/</span>export<span class="operator">/</span>t_achievement_company_map.xls</span><br></pre></td></tr></table></figure>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/mysqlimport.html">详细语法参考官网</a><br>
写了这么多，还是数据库连接工具香啊😂</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PageHelper分页总数、页数错误问题</title>
    <url>/2021/10/16/pagehelper_issues/</url>
    <content><![CDATA[<h2 id="问题描述"><a class="header-anchor" href="#问题描述"></a>问题描述</h2>
<p>在使用PageHelper进行分页的时候，大部分时候都是正常的，但是有一个接口的分页总数一直有问题(<strong>为当前页的数量、页数一直为1</strong>)。先看看目前的代码:</p>
<span id="more"></span>
<p>Controller层代码（修改前）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PageResponseMsg <span class="title function_">queryPolicyTypePageList</span><span class="params">(<span class="meta">@RequestBody</span> PageRequest&lt;PolicyTypePageReq&gt; noticePageReq)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(noticePageReq == <span class="literal">null</span> || noticePageReq.getPage() == <span class="literal">null</span> || noticePageReq.getRows() == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getPageResponseMsg(MessageCode.Param_NULL.code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置分页</span></span><br><span class="line">        PageHelper.startPage(noticePageReq.getPage(),noticePageReq.getRows());</span><br><span class="line">        <span class="comment">//查询列表</span></span><br><span class="line">        List&lt;PolicyTypeResp&gt; noticeList = policyTypeService.queryPolicyTypeList(noticePageReq);</span><br><span class="line">        <span class="keyword">if</span>(noticeList == <span class="literal">null</span> || noticeList.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getPageResponseMsg(MessageCode.Data_Not_Found.code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取分页数据</span></span><br><span class="line">        PageInfo&lt;PolicyTypeResp&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(noticeList,noticePageReq.getPage());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getPageResponseMsg(MessageCode.RSP_CODE_SUCCED.code,pageInfo.getList(),pageInfo.getPageNum(),pageInfo.getTotal(),pageInfo.getPages());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Service层代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;PolicyTypeResp&gt; <span class="title function_">queryPolicyTypeList</span><span class="params">(PageRequest&lt;PolicyTypePageReq&gt; noticePageReq)</span> &#123;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list = policyTypeMapper.queryPolicyTypeList(BeanMap.create(noticePageReq));</span><br><span class="line">    List&lt;PolicyTypeResp&gt; policyTypeRespList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(list == <span class="literal">null</span> || list.size()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(Map&lt;String, Object&gt; map: list)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PolicyTypeResp</span> <span class="variable">resp</span> <span class="operator">=</span> MapTransformUtil.mapToObject(map,PolicyTypeResp.class);</span><br><span class="line">            policyTypeRespList.add(resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;PolicyTypeServiceImpl.queryPolicyTypeList转换异常：&quot;</span>+e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> policyTypeRespList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>controller代码与其他分页查询接口完全一样，service也没做其他数据库的操作，真是奇怪了。</p>
<h2 id="问题原因"><a class="header-anchor" href="#问题原因"></a>问题原因</h2>
<p>搜了几篇博客，发现问题出现在Map转实体这个步骤。原因如下：</p>
<ul>
<li>PageHelper.startPage(pageIndex, pageSize);<strong>返回Page对象(继承ArrayList)</strong>，里面有总数、当前页、页数等信息。</li>
<li>policyTypeService.queryPolicyTypePageList(pageReq);返回的实际也是Page对象，所以在进行Map转换的时候会丢失Page的分页信息。</li>
</ul>
<p>PageHelper的部分源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">PageInfo</span><span class="params">(List&lt;T&gt; list, <span class="type">int</span> navigatePages)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(list);</span><br><span class="line">    <span class="built_in">this</span>.isFirstPage = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.isLastPage = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.hasPreviousPage = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.hasNextPage = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (list <span class="keyword">instanceof</span> Page) &#123;<span class="comment">// 本来应该走这个逻辑</span></span><br><span class="line">        <span class="type">Page</span> <span class="variable">page</span> <span class="operator">=</span> (Page)list;</span><br><span class="line">        <span class="built_in">this</span>.pageNum = page.getPageNum();</span><br><span class="line">        <span class="built_in">this</span>.pageSize = page.getPageSize();</span><br><span class="line">        <span class="built_in">this</span>.pages = page.getPages();</span><br><span class="line">        <span class="built_in">this</span>.size = page.size();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.startRow = <span class="number">0L</span>;</span><br><span class="line">            <span class="built_in">this</span>.endRow = <span class="number">0L</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.startRow = page.getStartRow() + <span class="number">1L</span>;</span><br><span class="line">            <span class="built_in">this</span>.endRow = <span class="built_in">this</span>.startRow - <span class="number">1L</span> + (<span class="type">long</span>)<span class="built_in">this</span>.size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list <span class="keyword">instanceof</span> Collection) &#123;<span class="comment">// 实际走的这个逻辑</span></span><br><span class="line">        <span class="built_in">this</span>.pageNum = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = list.size();</span><br><span class="line">        <span class="built_in">this</span>.pages = <span class="built_in">this</span>.pageSize &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.size = list.size();</span><br><span class="line">        <span class="built_in">this</span>.startRow = <span class="number">0L</span>;</span><br><span class="line">        <span class="built_in">this</span>.endRow = list.size() &gt; <span class="number">0</span> ? (<span class="type">long</span>)(list.size() - <span class="number">1</span>) : <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (list <span class="keyword">instanceof</span> Collection) &#123;</span><br><span class="line">        <span class="built_in">this</span>.calcByNavigatePages(navigatePages);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="问题解决"><a class="header-anchor" href="#问题解决"></a>问题解决</h2>
<p>把服务层代码修改一下，核心就是数据库查出list后，直接创建PageInfo对象，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置分页</span></span><br><span class="line">PageHelper.startPage(pageReq.getPage(),pageReq.getRows());</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; list = policyTypeMapper.queryPolicyTypeList(BeanMap.create(pageReq));</span><br><span class="line"><span class="keyword">if</span>(list == <span class="literal">null</span> || list.size()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取分页数据</span></span><br><span class="line">PageInfo&lt;Map&lt;String, Object&gt;&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(list,pageReq.getPage());</span><br></pre></td></tr></table></figure>
<h2 id="其他问题"><a class="header-anchor" href="#其他问题"></a>其他问题</h2>
<p>在分页开始后对pageReq进行数据封装也会使分页失效。解决方法一样：PageHelper代码放在操作数据库前后(Mapper层)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取分页</span></span><br><span class="line">PageHelper.startPage(pageReq.getPage(),pageReq.getRows());</span><br><span class="line"><span class="comment">// 如果对pageReq进行数据封装也会使分页失效</span></span><br></pre></td></tr></table></figure>
<h2 id="小结"><a class="header-anchor" href="#小结"></a>小结</h2>
<ul>
<li>用PageHelper分页不能对pageReq对象进行赋值，不能对查询出的结果进行对象转换。</li>
<li>PageHelper代码要放在service层，且紧跟着查询数据库的代码。</li>
</ul>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>PageHelper</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis自查询递归生成目录菜单树</title>
    <url>/2021/09/05/mybatis_recursive_generate_directory_menu_tree/</url>
    <content><![CDATA[<h2 id="需求"><a class="header-anchor" href="#需求"></a>需求</h2>
<p>要求前端展示所有奖励政策分类，一共有两级菜单，如下图所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/0d6e2540a046ddea63ece1fa61caea51.png" alt="在这里插入图片描述"></p>
<h2 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h2>
<p>数据库表设计脚本如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_incentive_policy_type` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;奖励分类 id&#x27;</span>,</span><br><span class="line">  `type_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类名称&#x27;</span>,</span><br><span class="line">  `parent_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;父id&#x27;</span>,</span><br><span class="line">  `status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;状态  0 开启  1 关闭&#x27;</span>,</span><br><span class="line">  `icon` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图标&#x27;</span>,</span><br><span class="line">  `sort` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;-1&#x27;</span> COMMENT <span class="string">&#x27;排序号&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">9</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span></span><br></pre></td></tr></table></figure>
<p>插入几条测试数据：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/238c3699a718d74c84c28aa4cfd82014.png" alt="在这里插入图片描述"></p>
<span id="more"></span>
<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IncentivePolicyType</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String typeName;</span><br><span class="line">    <span class="keyword">private</span> String parentTypeName;</span><br><span class="line">    <span class="keyword">private</span> Integer parentId;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="keyword">private</span> List&lt;IncentivePolicyType&gt; childTypeList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Controller请求方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/querytypetree&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;查询分类列表树&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ListResponseMsg <span class="title function_">queryTypeTree</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;IncentivePolicyType&gt; policyTypeList = policyTypeService.queryTypeTree();</span><br><span class="line">    <span class="keyword">if</span>(policyTypeList.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getListResponseMsg(MessageCode.Data_Not_Found.code);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getListResponseMsg(MessageCode.RSP_CODE_SUCCED.code,policyTypeList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务接口实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;IncentivePolicyType&gt; <span class="title function_">queryTypeTree</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>  policyTypeMapper.queryTypeTree();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>MyBatisXMl映射文件(核心)</strong>：<br>
为了更方便演示，sql中没有筛选status的值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.aspirecn.rewardportal.mapper.IncentivePolicyTypeMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- collection中的property对应IncentivePolicyType中的属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.aspirecn.rewardportal.entity.IncentivePolicyType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;type_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;typeName&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;parent_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;parentId&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;icon&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sort&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sort&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;update_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;updateTime&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;childTypeList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.aspirecn.rewardportal.entity.IncentivePolicyType&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getChildren&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">    id, type_name, parent_id, status, icon, sort, create_time, update_time</span><br><span class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 先查询菜单根级目录 返回结果必须为resultMap，并且值为上面构建的resultMap的id的值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryTypeTree&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span></span><br><span class="line">    FROM t_incentive_policy_type</span><br><span class="line">    WHERE parent_id is null</span><br><span class="line">    order by sort desc</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 再利用上次查询结果colliection中column的值id做递归查询，查出所有子菜单 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里的返回结果必须为resultMap，并且值为上面构建的resultMap的id的值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getChildren&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span></span><br><span class="line">    FROM t_incentive_policy_type</span><br><span class="line">    WHERE parent_id = #&#123;id&#125;</span><br><span class="line">    order by sort desc</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>调用接口返回结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;200&quot;</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;0952测试奖励政策&quot;</span>,</span><br><span class="line">            <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">&quot;parentId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;/hello/policytype&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sort&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-28T01:45:55.000+00:00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-28T02:06:25.000+00:00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;childTypeList&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">5</span>,</span><br><span class="line">                    <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;1739测试啦啊&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;parentId&quot;</span>: <span class="number">7</span>,</span><br><span class="line">                    <span class="string">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">&quot;icon&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;sort&quot;</span>: <span class="number">8</span>,</span><br><span class="line">                    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-27T09:40:03.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-28T02:06:42.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;childTypeList&quot;</span>: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">                    <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;科技创新&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;parentId&quot;</span>: <span class="number">7</span>,</span><br><span class="line">                    <span class="string">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">&quot;icon&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;sort&quot;</span>: <span class="number">4</span>,</span><br><span class="line">                    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-27T09:35:32.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-27T09:35:33.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;childTypeList&quot;</span>: []</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;0727测试测试&quot;</span>,</span><br><span class="line">            <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">&quot;parentId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">&quot;status&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;icon&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">&quot;sort&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-27T09:34:25.000+00:00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-27T09:34:26.000+00:00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;childTypeList&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">6</span>,</span><br><span class="line">                    <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;1000测试奖励政策&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;parentId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;/hello/policytype&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;sort&quot;</span>: <span class="number">6</span>,</span><br><span class="line">                    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-28T01:43:05.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-28T01:54:25.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;childTypeList&quot;</span>: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;0728哈哈哈哈啊哈哈&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;parentId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;status&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;icon&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-27T09:34:43.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-27T09:34:44.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;childTypeList&quot;</span>: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="number">8</span>,</span><br><span class="line">                    <span class="string">&quot;typeName&quot;</span>: <span class="string">&quot;0953测试奖励政策&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;parentTypeName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="string">&quot;parentId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;status&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;/hello/policytype&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;sort&quot;</span>: -<span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2021-07-28T01:46:38.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-07-28T02:06:42.000+00:00&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;childTypeList&quot;</span>: []</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用<a href="https://www.jsonla.com/json/editor.html">JSON在线工具</a>验证发现结果完全正确，搞定！</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>《人类未来》读书笔记</title>
    <url>/2021/01/17/on_the_future/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/07348f26bbe05fac2e6f1f6aa810eb0b.jpeg" width="460px" align="center"></img></p>
<p>书名：人类未来<br>
英文名: <em>on the future: prospects for humanity</em><br>
作者：[英]马丁·里斯<br>
译者: 姚嵩 丁丁虫<br>
读完时间：2020年12月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<ul>
<li>目前我们正在计划建立100万颗直径大于50米的小行星的数据集，它们的轨道有可能穿越地球。我们将会精确地跟踪它们的轨迹，识别那些可能接近并对地球带来威胁的小行星。有了预警，人们就可以提前疏散将会遭遇撞击的地区。甚至还有更好的办法：我们可以制造宇宙飞船来保护我们。在威胁较大的撞击来临的数年前，我们可以在太空中“轻推”小行星，改变其运行速度（仅需每秒几厘米），这样就能使它偏离撞击地球的轨道。</li>
<li>我们只是不知道——不知道地球生命的DNA/RNA化学过程是不是生命唯一可能的化学基础，或者仅仅是诸多选择中的一个，而其他的化学过程已经在别的地方发生了。我们甚至不知道液态水是否真的对生命的形成具有决定意义。如果存在一个化学路径，能让生命得以在泰坦星上冰冷的甲烷湖泊里产生，那么对于“宜居行星”的定义将会大大拓宽。</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis大数据量批量插入或者更新(on duplicate key update)的详细说明以及项目碰坑记录</title>
    <url>/2021/11/21/on_duplicate_key_update/</url>
    <content><![CDATA[<h2 id="背景"><a class="header-anchor" href="#背景"></a>背景</h2>
<p>项目需要把Excel导入，并且支持<strong>更新成果简介字段</strong>的值。这种Excel模版一共有9个，对应9大奖项，其中双创奖的导入模版如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/473d04f4964ec4428436f3a3c697637e.png" alt="在这里插入图片描述"></p>
<h2 id="数据库表设计"><a class="header-anchor" href="#数据库表设计"></a>数据库表设计</h2>
<p>主表为t_awards，<strong>主键用的是UUID</strong>，主要存储合并单元格部分的数据(一级分类、二级分类、获奖年份、成果名称等)，通过award_type区分不同奖项；详细表为t_awards_detail，主要存储非合并单元格数据(获奖单位、获奖个人、员工编号等)，award_id对应t_awards表的主键。</p>
<p>t_awards表结构如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/ed649b4d2c962895e9943a96ea119e8d.png" alt="在这里插入图片描述"><br>
t_awards_detail表结构如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/e5d54deb06a738341b19e15ebe153e68.png" alt="在这里插入图片描述"><br>
截图中橙色为主键、绿色为普通索引、红色为联合唯一索引。</p>
<span id="more"></span>
<h2 id="实现逻辑"><a class="header-anchor" href="#实现逻辑"></a>实现逻辑</h2>
<p>因为Excel中的数据没有唯一列，后端是通过<strong>唯一索引</strong>去做区分的。大致的实现逻辑如下：</p>
<ul>
<li>在Controller层通过EasyExcel读出Excel中的数据得到一个list、然后校验数据的合法性。</li>
<li>在Service层先把list分组得到一个map，把map的键封装存入主表，把map的值封装存入详细表。</li>
<li>导入的数据有时候会有几万条，这里使用的批量插入或更新on duplicate key update，避免对数据库进行多次的连接和断开操作。</li>
</ul>
<h2 id="on-duplicate-key-update"><a class="header-anchor" href="#on-duplicate-key-update"></a>on duplicate key update</h2>
<h3 id="说明"><a class="header-anchor" href="#说明"></a>说明</h3>
<p>官网原话：</p>
<blockquote>
<p>If you specify an ON DUPLICATE KEY UPDATE clause and a row to be<br>
inserted would cause a duplicate value in a UNIQUE index or PRIMARY<br>
KEY, an UPDATE of the old row occurs. For example, if column a is<br>
declared as UNIQUE and contains the value 1, the following two<br>
statements have similar effect:</p>
</blockquote>
<p>翻译为中文：<br>
如果指定ON DUPLICATE KEY UPDATE子句，并且要插入的行将导致<strong>唯一索引或主键</strong>中出现重复值，则会更新旧行。例如，如果列a声明为唯一且包含值1，则以下两条语句具有类似的效果：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 (a,b,c) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">ON</span> DUPLICATE KEY <span class="keyword">UPDATE</span> c<span class="operator">=</span>c<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> t1 <span class="keyword">SET</span> c<span class="operator">=</span>c<span class="operator">+</span><span class="number">1</span> <span class="keyword">WHERE</span> a<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>If column b is also unique, the INSERT is equivalent to this UPDATE<br>
statement instead:</p>
</blockquote>
<p>翻译为中文：<br>
如果列b也是唯一的，则INSERT相当于这个UPDATE语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t1 <span class="keyword">SET</span> c<span class="operator">=</span>c<span class="operator">+</span><span class="number">1</span> <span class="keyword">WHERE</span> a<span class="operator">=</span><span class="number">1</span> <span class="keyword">OR</span> b<span class="operator">=</span><span class="number">2</span> LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>一句话总结就是&quot;有就更新，没有就插入&quot;。<br>
官方文档还提到从MySQL 8.0.20开始，不推荐使用VALUES()来引入新行或者列，后续可能还会删除。<br>
<a href="https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html">官方文档地址</a></p>
<h3 id="与replace-into对比"><a class="header-anchor" href="#与replace-into对比"></a>与replace into对比</h3>
<ul>
<li>相同点：插入数据的表必须有主键或者是唯一索引，否则会出现重复数据。</li>
<li>不同点：replace into如果发现表中有相同数据（根据主键或者唯一索引判断）则先删除此行数据，然后再插入新的数据，所以on duplicate  key update效率会更高一些。 如果没有相同数据，replace into和on duplicate key update都会插入新数据。</li>
</ul>
<h3 id="总结"><a class="header-anchor" href="#总结"></a>总结</h3>
<ul>
<li><strong>唯一索引不允许两行具有相同的索引值，但是可以都为NULL</strong>。所以，int类型可以给字段设置默认值1 varchar类型给字段设置默认值空串；如果已经有null值需要更新下数据。</li>
<li>on duplicate key update需要有在INSERT语句中有存在<strong>主键或者唯一索引</strong>的列，并且对应的数据已经在表中才会执行更新操作。而且如果要更新的字段是<strong>主键或者唯一索引</strong>，不能和表中已有的数据重复，否则插入更新都失败。</li>
<li>不管是更新还是增加语句都不允许将<strong>主键或者唯一索引</strong>的对应字段的数据变成表中已经存在的数据。</li>
<li>在并行且开启事务的时候使用on duplicate key update语句会出现死锁。<br>
<a href="https://www.cnblogs.com/sueyyyy/p/13047035.html">参考链接</a></li>
</ul>
<h2 id="碰到的问题"><a class="header-anchor" href="#碰到的问题"></a>碰到的问题</h2>
<ul>
<li><strong>数据库设置了自增主键，在使用on duplicate key update进行批量插入的时候，有更新更新时间，影响行肯定大于1条。使用MyBatis的useGeneratedKeys=&quot;true&quot;只有第1条数据返回了主键。使用replace into也有类似问题，有时候返回一个主键有时候返回两个主键，而且返回的主键可能是删除了的。</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/137edace5e6468ac9e9930bdf52a92a6.png" alt="在这里插入图片描述"><br>
去掉on duplicate key update语句时可以返回所有主键的，不知道为啥。<strong>所以要做批量插入且更新的功能不要依赖数据库返回主键</strong>。</li>
<li>使用uuid作为主键的话，主键是通过Java代码生成，所以找不到主表哪些数据是更新了。目前的做法是不更新旧的详细表数据，也符合产品的需求。</li>
</ul>
<h2 id="相关代码"><a class="header-anchor" href="#相关代码"></a>相关代码</h2>
<p>Service层的主要代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doubleInnovation</span><span class="params">(List&lt;ImportInnovationField&gt; list)</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> sessionUserApi.getSessionUser().getUsername();</span><br><span class="line">	<span class="comment">// 1、对list根据多字段进行分组，得到map</span></span><br><span class="line">	Map&lt;String,List&lt;ImportInnovationField&gt;&gt; map = list.stream().collect(</span><br><span class="line">			Collectors.groupingBy(</span><br><span class="line">					field -&gt; field.getTopClass()+CommonConstant.SEPARATOR_B+field.getSecondClass()+CommonConstant.SEPARATOR_B+field.getAwardYear()+CommonConstant.SEPARATOR_B+field.getAwardProduct()+CommonConstant.SEPARATOR_B+field.getBriefIntroduction()</span><br><span class="line">			));</span><br><span class="line">	<span class="comment">// 2、循环map，把map键插入主表，返回主表主键id；把id封装到map值里面，批量插入从表</span></span><br><span class="line">	<span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">	List&lt;Awards&gt; awardsList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	List&lt;AwardsDetail&gt; detailList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	<span class="keyword">for</span>(Map.Entry&lt;String,List&lt;ImportInnovationField&gt;&gt; entrySet: map.entrySet())&#123;</span><br><span class="line">		<span class="comment">// 2.1 封装Awards并加入awardsList</span></span><br><span class="line">		String[] strs = entrySet.getKey().split(CommonConstant.SEPARATOR_B);</span><br><span class="line">		<span class="type">Awards</span> <span class="variable">awards</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Awards</span>();</span><br><span class="line">		awards.setId(UUID.randomUUID().toString());</span><br><span class="line">		awards.setAwardType(AwardsEnum.AwardTypeEnum.INNOVATION_AND_ENTREPRENEURSHIP.getCode());</span><br><span class="line">		awards.setTopClass(strs[<span class="number">0</span>]);</span><br><span class="line">		awards.setSecondClass(strs[<span class="number">1</span>].equals(CommonConstant.NULL)?<span class="literal">null</span>:strs[<span class="number">1</span>]);</span><br><span class="line">		awards.setAwardYear(strs[<span class="number">2</span>]);</span><br><span class="line">		awards.setAwardProduct(strs[<span class="number">3</span>]);</span><br><span class="line">		awards.setBriefIntroduction(strs[<span class="number">4</span>].equals(CommonConstant.NULL)?<span class="literal">null</span>:strs[<span class="number">4</span>]);</span><br><span class="line">		<span class="type">BigDecimal</span> <span class="variable">awardMoney</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span>(ImportInnovationField field: entrySet.getValue())&#123;</span><br><span class="line">			awardMoney = awardMoney.add(field.getMoney());</span><br><span class="line">		&#125;</span><br><span class="line">		awards.setAwardMoney(awardMoney);</span><br><span class="line">		awards.setCreateUser(userName);</span><br><span class="line">		awards.setLastUpdateUser(userName);</span><br><span class="line">		awardsList.add(awards);</span><br><span class="line">		<span class="comment">// 2.2 封装detailList</span></span><br><span class="line">		<span class="keyword">for</span>(ImportInnovationField field: entrySet.getValue())&#123;</span><br><span class="line">			<span class="type">AwardsDetail</span> <span class="variable">awardsDetail</span> <span class="operator">=</span> gson.fromJson(gson.toJson(field),AwardsDetail.class);</span><br><span class="line">			awardsDetail.setAwardId(awards.getId());</span><br><span class="line">			awardsDetail.setCompanyType(setCompanyType(awardsDetail.getCompany()));</span><br><span class="line">			awardsDetail.setCreateUser(userName);</span><br><span class="line">			awardsDetail.setLastUpdateUser(userName);</span><br><span class="line">			detailList.add(awardsDetail);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 3、 批量插入成果</span></span><br><span class="line">	batchInsertAwards(awardsList,detailList);</span><br><span class="line">	<span class="comment">// 4、记录日志</span></span><br><span class="line">	List&lt;String&gt; businessIdList = awardsList.stream().map(Awards::getId).collect(Collectors.toList());</span><br><span class="line">	logService.batchInsertLog(businessIdList,<span class="string">&quot;导入获奖成果&quot;</span>,LogEnum.TypeEnum.AWARDS.getCode());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批量插入获奖成果</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">batchInsertAwards</span><span class="params">(List&lt;Awards&gt; awardsList,List&lt;AwardsDetail&gt; detailList)</span>&#123;</span><br><span class="line">      <span class="comment">// 1、 把map键批量插入主表，若存在则更新成果简介等信息</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          awardsImportMapper.batchInsertAwards(awardsList);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">          log.error(<span class="string">&quot;AwardsImportServiceImpl批量插入主表失败：&quot;</span>+e);</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CommonsException</span>(MessageCode.Param_Error, CommonConstant.INSERT_TO_MAIN_TABLE_FAIL,e);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 2、 把map的值批量插入从表</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          awardsImportMapper.batchInsertAwardsDetail(detailList);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">          log.error(<span class="string">&quot;AwardsImportServiceImpl批量插入详细表失败：&quot;</span>+e);</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CommonsException</span>(MessageCode.Param_Error, CommonConstant.INSERT_TO_FROM_TABLE_FAIL,e);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 3、删除从表数据</span></span><br><span class="line">      <span class="comment">// 3.1 从主表中查询出最近5分钟所有id</span></span><br><span class="line">      List&lt;String&gt; idList = awardsImportMapper.queryIdList();</span><br><span class="line">      <span class="comment">// 3.2 从详细表中查询出最近5分钟所有awardId</span></span><br><span class="line">      List&lt;String&gt; awardIdList = awardsImportMapper.queryAwardIdList();</span><br><span class="line">      <span class="comment">// 3.3 找出详细表比主表多的awardId(差集awardIdList-idList)用来删除从表数据</span></span><br><span class="line">      List&lt;String&gt; deleteIdList = awardIdList.stream().filter(item -&gt; !idList.contains(item)).collect(toList());</span><br><span class="line">      <span class="comment">// 3.4 删除详细表数据</span></span><br><span class="line">      <span class="keyword">if</span>(CollUtil.isNotEmpty(deleteIdList))&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              awardsImportMapper.batchDeleteDetail(deleteIdList);</span><br><span class="line">          &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">              log.error(<span class="string">&quot;AwardsImportServiceImpl批量删除从表失败：&quot;</span>+e);</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CommonsException</span>(MessageCode.Param_Error, CommonConstant.INSERT_TO_MAIN_TABLE_FAIL,e);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Dao层主要代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># id是Java代码生成的UUID,on duplicate key update可以更新主键或者唯一键的值但是不能和已有的数据重复</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;batchInsertAwards&quot;</span>&gt;</span></span><br><span class="line">   insert into t_awards(</span><br><span class="line">     id, award_type, top_class, second_class, award_year,</span><br><span class="line">     award_product, brief_Introduction,award_money, innovation_points, application_effect,</span><br><span class="line">     display_diagram, project_data,patent_no, patent_type, apply_date,</span><br><span class="line">     organizer,create_user, create_time, last_update_user,update_time</span><br><span class="line">       )</span><br><span class="line">   values</span><br><span class="line">   <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">     (</span><br><span class="line">     #&#123;item.id&#125;,#&#123;item.awardType&#125;,ifnull(#&#123;item.topClass&#125;,&#x27;&#x27;),ifnull(#&#123;item.secondClass&#125;,&#x27;&#x27;),#&#123;item.awardYear&#125;,</span><br><span class="line">     ifnull(#&#123;item.awardProduct&#125;,&#x27;&#x27;),#&#123;item.briefIntroduction&#125;,#&#123;item.awardMoney&#125;,#&#123;item.innovationPoints&#125;,#&#123;item.applicationEffect&#125;,</span><br><span class="line">     #&#123;item.displayDiagram&#125;,#&#123;item.projectData&#125;,ifnull(#&#123;item.patentNo&#125;,&#x27;&#x27;),#&#123;item.patentType&#125;,#&#123;item.applyDate&#125;,</span><br><span class="line">     #&#123;item.organizer&#125;,#&#123;item.createUser&#125;,now(),#&#123;item.lastUpdateUser&#125;,now()</span><br><span class="line">     )</span><br><span class="line">   <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">   on DUPLICATE key update brief_Introduction = VALUES(brief_Introduction),organizer = VALUES(organizer),</span><br><span class="line">                           patent_type = VALUES(patent_type),apply_date = VALUES(apply_date),update_time = now()</span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/wysnxzm/article/details/80914574">参考链接1</a><br>
<a href="https://www.cnblogs.com/dawuge/p/10486777.html">参考链接2</a><br>
<a href="https://blog.csdn.net/ahzxj2012/article/details/52223211">参考链接3</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MySQL</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>《贫穷的本质》读书笔记</title>
    <url>/2021/02/24/poor_economics/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/e1bf8d36440a50f23d964231933c3149.jpeg" alt="在这里插入图片描述"></p>
<p>书名：贫穷的本质<br>
英文名: <em>Poor Economics:A radical Rethinking of the Way to Fight Global Poverty</em><br>
作者：[印度]阿比吉特.班纳吉、[法]埃斯特.迪弗洛<br>
译者：景芳<br>
读完时间：2020年11月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<p>恶性循环</p>
<blockquote>
<p>“贫穷陷阱”：穷人变得越来越穷；而富人则变得越来越富，吃得越来越好，身体也越来越强壮，从而变得更加富有。因此，贫富差距会进一步扩大。</p>
</blockquote>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2021/03/30/quickSort/</url>
    <content><![CDATA[<h2 id="快速排序"><a class="header-anchor" href="#快速排序"></a>快速排序</h2>
<p>快速排序（Quick Sort）由C. A. R. Hoare在1960年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。快速排序也是分治法的经典实现，是不稳定的算法。</p>
<span id="more"></span>
<p><a href="https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/369842?fromtitle=%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F&amp;fromid=2084344&amp;fr=aladdin">参考链接</a></p>
<h3 id="算法描述"><a class="header-anchor" href="#算法描述"></a>算法描述</h3>
<p>1、从数列中挑出一个元素，称为 “枢纽值”（pivot）。<br>
2、重新排序数列，比枢纽值小的所有元素摆放在枢纽值前面，比枢纽值大的所有元素摆放在枢纽值后面（相同的数可以到任一边）。在这个分区退出之后，该枢纽值就处于数列的中间位置。<br>
3、最后将两个排序好的子序列合并成一个最终的排序序列。</p>
<h3 id="选取枢纽值"><a class="header-anchor" href="#选取枢纽值"></a>选取枢纽值</h3>
<p>一般不选用第一个元素做枢纽值，因为如果输入有序序列那么快速排序将花费很多时间做无用功，这很尴尬。一种可取的做法是三数取中法，即把数列的起始、中间和末尾位置上的三个元素的中值作为枢纽值。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/134e6e8f5036dcab71217e39e1ab2177.png" alt="在这里插入图片描述"><br>
上图中枢纽值为6，把6放在arr.length-1的位置以便后续分割。<br>
<a href="https://www.cnblogs.com/chengxiao/p/6262208.html">图片来源</a></p>
<h3 id="分割策略"><a class="header-anchor" href="#分割策略"></a>分割策略</h3>
<p>具体分割实现步骤如下所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/f74535f47773f7a57679ae6ec046bef4.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/82db5183662d232ded587fd54fe39d5e.png" alt="在这里插入图片描述"><br>
<a href="https://www.cnblogs.com/chengxiao/p/6262208.html">图片来源</a></p>
<h3 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h3>
<h4 id="Java"><a class="header-anchor" href="#Java"></a>Java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    quickSort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;排序结果：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序具体实现</span></span><br><span class="line"><span class="comment"> * i和枢纽值交换注释if(i&lt;right),改为while中添加i&lt;pivot</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left 左指针</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 右指针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">//1、获取枢纽值，并将其放在当前待处理序列倒数第二位</span></span><br><span class="line">        getPivot(arr,left,right);</span><br><span class="line">        <span class="comment">//2、定义枢纽值位置、左指针i、右指针j</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> right-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> right-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//3、移动指针：确保左指针前的元素小于枢纽值；右指针后的元素大于枢纽值</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;pivot&amp;&amp;arr[++i]&lt;arr[pivot])&#123;&#125;;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;arr[--j]&gt;arr[pivot])&#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)<span class="comment">// i指向的元素比枢纽值大且j指向的元素比枢纽值小</span></span><br><span class="line">                swapReferences(arr,i,j);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4、restore pivot：将i和枢纽值交换</span></span><br><span class="line">        <span class="comment">//if(i&lt;right)</span></span><br><span class="line">            swapReferences(arr,i,pivot);</span><br><span class="line">        <span class="comment">//5、分治法：左右部分递归</span></span><br><span class="line">        quickSort(arr,left,i-<span class="number">1</span>);</span><br><span class="line">        quickSort(arr,i+<span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取枢纽值，并将其放在当前待处理序列倒数第二位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待处理数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left 左指针</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 右指针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getPivot</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="comment">//1、排序：确保arr[left]&lt;arr[center]&lt;arr[right]</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">center</span> <span class="operator">=</span> (left+right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(arr[left]&gt;arr[center])</span><br><span class="line">        swapReferences(arr,left,center);</span><br><span class="line">    <span class="keyword">if</span>(arr[left]&gt;arr[right])</span><br><span class="line">        swapReferences(arr,left,right);</span><br><span class="line">    <span class="keyword">if</span>(arr[center]&gt;arr[right])</span><br><span class="line">        swapReferences(arr,center,right);</span><br><span class="line">    <span class="comment">//2、把枢纽值放在倒数第二个位置</span></span><br><span class="line">    swapReferences(arr,center,right-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组元素值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待交换数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index0 下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index1 下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swapReferences</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> index0,<span class="type">int</span> index1)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[index0];</span><br><span class="line">    arr[index0] = arr[index1];</span><br><span class="line">    arr[index1] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>排序结果：[0, 1, 2, 3, 4, 5, 7, 8, 9, 15, 20]</p>
<h4 id="JavaScript"><a class="header-anchor" href="#JavaScript"></a>JavaScript</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 快速排序具体实现</span></span><br><span class="line"><span class="comment">* i和枢纽值交换注释if(i&lt;right),改为while中添加i&lt;pivot</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> arr 待排序数组</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> left 左指针</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> right 右指针</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr,left,right</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">       <span class="comment">//1、获取枢纽值，并将其放在当前待处理序列倒数第二位</span></span><br><span class="line">       <span class="title function_">getPivot</span>(arr,left,right);</span><br><span class="line">       <span class="comment">//2、定义枢纽值位置、左指针i、右指针j</span></span><br><span class="line">       <span class="keyword">var</span> i = left;</span><br><span class="line">       <span class="keyword">var</span> j = right-<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">var</span> pivot = right-<span class="number">1</span>;</span><br><span class="line">       <span class="comment">//3、移动指针：确保左指针前的元素小于枢纽值；右指针后的元素大于枢纽值</span></span><br><span class="line">       <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">           <span class="keyword">while</span>(i&lt;pivot&amp;&amp;arr[++i]&lt;arr[pivot])&#123;&#125;;</span><br><span class="line">           <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;arr[--j]&gt;arr[pivot])&#123;&#125;;</span><br><span class="line">           <span class="keyword">if</span>(i&lt;j)<span class="comment">// i指向的元素比枢纽值大且j指向的元素比枢纽值小</span></span><br><span class="line">               <span class="title function_">swapReferences</span>(arr,i,j);</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//4、restore pivot：将i和枢纽值交换</span></span><br><span class="line">       <span class="comment">//if(i&lt;right)</span></span><br><span class="line">           <span class="title function_">swapReferences</span>(arr,i,pivot);</span><br><span class="line">       <span class="comment">//5、分治法：左右部分递归</span></span><br><span class="line">       <span class="title function_">quickSort</span>(arr,left,i-<span class="number">1</span>);</span><br><span class="line">       <span class="title function_">quickSort</span>(arr,i+<span class="number">1</span>,right);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取枢纽值，并将其放在当前待处理序列倒数第二位</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> arr 待处理数组</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> left 左指针</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> right 右指针</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPivot</span>(<span class="params">arr,left,right</span>)&#123;</span><br><span class="line">   <span class="comment">//1、排序：确保arr[left]&lt;arr[center]&lt;arr[right]</span></span><br><span class="line">   <span class="keyword">var</span> center = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left+right)/<span class="number">2</span>);<span class="comment">//注意js的&quot;/&quot;非取余运算</span></span><br><span class="line">   <span class="keyword">if</span>(arr[left]&gt;arr[center])</span><br><span class="line">       <span class="title function_">swapReferences</span>(arr,left,center);</span><br><span class="line">   <span class="keyword">if</span>(arr[left]&gt;arr[right])</span><br><span class="line">       <span class="title function_">swapReferences</span>(arr,left,right);</span><br><span class="line">   <span class="keyword">if</span>(arr[center]&gt;arr[right])</span><br><span class="line">       <span class="title function_">swapReferences</span>(arr,center,right);</span><br><span class="line">   <span class="comment">//2、把枢纽值放在倒数第二个位置</span></span><br><span class="line">   <span class="title function_">swapReferences</span>(arr,center,right-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 交换数组元素值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> arr 待交换数组</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> index0 下标</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> index1 下标</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swapReferences</span>(<span class="params">arr,index0,index1</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> tmp = arr[index0];</span><br><span class="line">   arr[index0] = arr[index1];</span><br><span class="line">   arr[index1] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>];</span><br><span class="line"><span class="title function_">quickSort</span>(arr,<span class="number">0</span>,arr.<span class="property">length</span>-<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure>
<p>(11) [0, 1, 2, 3, 4, 5, 7, 8, 9, 15, 20]</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaScript</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>希尔排序</title>
    <url>/2021/04/13/shellSort/</url>
    <content><![CDATA[<h2 id="希尔排序"><a class="header-anchor" href="#希尔排序"></a>希尔排序</h2>
<p>希尔排序是简单插入排序的改进，它是一种不稳定排序算法。由D.L.Shell在1959年提出。希尔排序实质上是一种分组插入方法。</p>
<h3 id="算法描述"><a class="header-anchor" href="#算法描述"></a>算法描述</h3>
<p>1、对于n个待排序的数列，取一个小于n的整数gap(称为步长)将待排序元素分成若干个组子序列，所有距离为gap的倍数的记录放在同一个组中。<br>
2、然后对各组内的元素进行直接插入排序，这一趟排序完成之后，每一个组的元素都是有序的。<br>
3、接下来减小gap的值，并重复执行上述的分组和排序。<br>
4、重复这样的操作，当gap=1时，整个数列就是有序的。</p>
<span id="more"></span>
<h3 id="图文演示"><a class="header-anchor" href="#图文演示"></a>图文演示</h3>
<p>下面以数列{23,20,32,45,6,8,9,15}为例，演示它的希尔排序过程。<br>
<strong>第1趟：(gap=4)</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/bdfb261a0ff7c70ba68f45fac507bf22.jpeg" alt="在这里插入图片描述"><br>
当gap=4时,意味着将数列分为4个组： {23,6}，{20,8}，{32,9}，{45,15}。 对应数列： {23,20,32,45,6,8,9,15}<br>
对这4个组分别进行排序，排序结果： {6,23}，{8,20}，{9,32}，{15,45}。 对应数列： {6,8,9,15,23,20,32,45}<br>
<strong>第2趟：(gap=2)</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/c590008c06b82c9f61d378683ce69497.jpeg" alt="在这里插入图片描述"><br>
当gap=2时,意味着将数列分为2个组：{6,9,23,32}, {8,15,20,45}。 对应数列： {6,8,9,15,23,20,32,45}<br>
<strong>注意</strong>：{6,9,23,32}实际上是上一步中的两个有序数列{6,23}和{9,32}组成。<br>
{8,15,20,45}实际上是上一步中的两个有序数列{8,20}和{15,45}组成。<br>
对这2个组分别进行排序，排序结果：{6,9,23,32}, 8,15,20,45}。 对应数列： {6,8,9,15,23,20,32,45}。<br>
这一步其实啥都没做，这也可以看出希尔排序的不稳定性。<br>
<strong>第3趟：(gap=1)</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/b57b471443cc79217d3c52b7c136869c.jpeg" alt="在这里插入图片描述"><br>
当gap=1时,意味着将数列分为1个组：{6,8,9,15,23,20,32,45}<br>
注意：{6,8,9,15,23,20,32,45}实际上是上一步中的两个有序数列{6,9,23,32},和{8,15,20,45}组成。<br>
对这1个组分别进行排序，排序结果：{6, 8, 9, 15, 20, 23, 32, 45}</p>
<h3 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h3>
<h4 id="Java"><a class="header-anchor" href="#Java"></a>Java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShellSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">23</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">15</span>&#125;;</span><br><span class="line">        shellSort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序结果：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 希尔排序</span></span><br><span class="line"><span class="comment">     * 用了三层循环，最外层循环控制排序趟数;后两层循环相当于插入排序的1改为了gap</span></span><br><span class="line"><span class="comment">     * i=1 -&gt; i=gap、j&gt;0 -&gt; j&gt;=gap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> arr.length/<span class="number">2</span>;gap &gt; <span class="number">0</span>;gap = gap/<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; arr.length; i += gap) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                <span class="type">int</span> j;</span><br><span class="line">                <span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; tmp &lt; arr[j-gap]; j -= gap)&#123;</span><br><span class="line">                    arr[j] = arr[j-gap];</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>排序结果：[6, 8, 9, 15, 20, 23, 32, 45]</p>
<h4 id="JavaScript"><a class="header-anchor" href="#JavaScript"></a>JavaScript</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shellSort</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> gap = <span class="title class_">Math</span>.<span class="title function_">floor</span>(arr.<span class="property">length</span>/<span class="number">2</span>);gap &gt; <span class="number">0</span>;gap = <span class="title class_">Math</span>.<span class="title function_">floor</span>(gap/<span class="number">2</span>)) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; arr.<span class="property">length</span>; i += gap) &#123;</span><br><span class="line">               <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">               <span class="keyword">var</span> j;</span><br><span class="line">               <span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; tmp &lt; arr[j-gap]; j -= gap)&#123;</span><br><span class="line">                   arr[j] = arr[j-gap];</span><br><span class="line">               &#125;</span><br><span class="line">               arr[j] = tmp;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">23</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">15</span>];</span><br><span class="line"><span class="title function_">shellSort</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure>
<p>(8) [6, 8, 9, 15, 20, 23, 32, 45]</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaScript</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习(五)：事务管理</title>
    <url>/2021/05/08/spring_five/</url>
    <content><![CDATA[<h2 id="概述"><a class="header-anchor" href="#概述"></a>概述</h2>
<h3 id="什么是事务"><a class="header-anchor" href="#什么是事务"></a>什么是事务</h3>
<p>事务是数据库操作最基本单元。逻辑上一组操作，要么都成功，如果有一个失败所有操<br>
作都失败。</p>
<h3 id="事务的四个特性"><a class="header-anchor" href="#事务的四个特性"></a>事务的四个特性</h3>
<ul>
<li>原子性 Atomicity</li>
<li>一致性 Consistency</li>
<li>隔离性 Isolation</li>
<li>持久性 Durability</li>
</ul>
<span id="more"></span>
<h2 id="搭建环境"><a class="header-anchor" href="#搭建环境"></a>搭建环境</h2>
<p>模拟转账场景：Lucy给Mary转账，Lucy少钱，Mary多钱。</p>
<h3 id="配置步骤"><a class="header-anchor" href="#配置步骤"></a>配置步骤</h3>
<ul>
<li>
<p><strong>引入相关jar包</strong><br>
druid-1.1.9.jar<br>
mysql-connector-java-5.1.7-bin.jar<br>
spring-jdbc-5.2.6.RELEASE.jar<br>
spring-orm-5.2.6.RELEASE.jar<br>
spring-tx-5.2.6.RELEASE.jar<br>
引入后所有包：<br>
com.springsource.net.sf.cglib-2.2.0.jar<br>
com.springsource.org.aopalliance-1.0.0.jar<br>
com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar<br>
commons-logging-1.1.1.jar<br>
druid-1.1.9.jar<br>
mysql-connector-java-5.1.7-bin.jar<br>
spring-aop-5.2.6.RELEASE.jar<br>
spring-aspects-5.2.6.RELEASE.jar<br>
spring-beans-5.2.6.RELEASE.jar<br>
spring-context-5.2.6.RELEASE.jar<br>
spring-core-5.2.6.RELEASE.jar<br>
spring-expression-5.2.6.RELEASE.jar<br>
spring-jdbc-5.2.6.RELEASE.jar<br>
spring-orm-5.2.6.RELEASE.jar<br>
spring-tx-5.2.6.RELEASE.jar</p>
</li>
<li>
<p><strong>创建数据库和建表</strong><br>
数据库user_db、表t_account<br>
插入数据后表结果：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">id      username   money  </span><br><span class="line">------  --------  --------</span><br><span class="line"><span class="number">1</span>       Lucy          <span class="number">1000</span></span><br><span class="line"><span class="number">2</span>       Mary          <span class="number">1000</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>spring的配置文件注入连接池和jdbcTemplate</strong></p>
</li>
<li>
<p><strong>创建 service和dao并完成对象的创建和注入关系</strong></p>
</li>
<li>
<p><strong>在dao中创建多钱和少钱的方法，在service中创建转账的方法</strong></p>
</li>
</ul>
<h3 id="示例代码"><a class="header-anchor" href="#示例代码"></a>示例代码</h3>
<p>代码结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">└─src</span><br><span class="line">    │  bean.xml</span><br><span class="line">    │</span><br><span class="line">    └─com</span><br><span class="line">        └─spring5</span><br><span class="line">            │  Test.java</span><br><span class="line">            │</span><br><span class="line">            ├─dao</span><br><span class="line">            │      UserDao.java</span><br><span class="line">            │      UserDaoImpl.java</span><br><span class="line">            │</span><br><span class="line">            └─service</span><br><span class="line">                    UserService.java</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>bean.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.spring5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///user_db?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JdbcTemplate 对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--set方式注入dataSource--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>UserDao接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addMoney</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserDaoImpl类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span>  <span class="string">&quot;update t_account set money=money+? where username=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,<span class="number">100</span>, <span class="string">&quot;Mary&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span>  <span class="string">&quot;update t_account set money=money-? where username=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,<span class="number">100</span>, <span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserService类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 两个方法是为了更好的看清楚事务案例</span></span><br><span class="line">        userDao.reduceMoney();</span><br><span class="line">        userDao.addMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Test类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAccount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        userService.accountMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行后程序没有异常，数据库效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">id      username   money  </span><br><span class="line">------  --------  --------</span><br><span class="line"><span class="number">1</span>       Lucy           <span class="number">900</span></span><br><span class="line"><span class="number">2</span>       Mary          <span class="number">1100</span></span><br></pre></td></tr></table></figure>
<h2 id="场景引入"><a class="header-anchor" href="#场景引入"></a>场景引入</h2>
<p>上面的例子若运行有异常，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 两个方法是为了更好的看清楚事务案例</span></span><br><span class="line">    userDao.reduceMoney();</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>/<span class="number">0</span>;</span><br><span class="line">    userDao.addMoney();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据库效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">id      username   money  </span><br><span class="line">------  --------  --------</span><br><span class="line"><span class="number">1</span>       Lucy           <span class="number">800</span></span><br><span class="line"><span class="number">2</span>       Mary          <span class="number">1100</span></span><br></pre></td></tr></table></figure>
<p>Lucy少钱，而Mary没多钱。这时候就需要用到事务。</p>
<h2 id="Sping事务管理介绍"><a class="header-anchor" href="#Sping事务管理介绍"></a>Sping事务管理介绍</h2>
<ul>
<li>一般把事务添加到service层</li>
<li>事务管理方式<br>
编程式事务管理 ：1、开启事务 2、执行业务逻辑 3、若业务逻辑没有异常提交事务，若有异常事务回滚。<br>
声明式事务管理：1、基于注解实现 2、基于XML实现</li>
<li>Spring的声明式事务底层用的是AOP原理</li>
</ul>
<h2 id="声明式事务管理"><a class="header-anchor" href="#声明式事务管理"></a>声明式事务管理</h2>
<h3 id="注解实现"><a class="header-anchor" href="#注解实现"></a>注解实现</h3>
<h4 id="配置步骤-v2"><a class="header-anchor" href="#配置步骤-v2"></a>配置步骤</h4>
<ul>
<li>
<p>在spring配置文件中配置事务管理器</p>
</li>
<li>
<p>在spring配置文件中开启事务注解<br>
需要引入tx空间</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用@Transactional注解开启事务。<br>
如果把这个注解添加类上面，这个类里面所有的方法都添加事务，如果把这个注解添加方法上面，为这个方法添加事务。</p>
</li>
</ul>
<h4 id="Spring事务的传播行为"><a class="header-anchor" href="#Spring事务的传播行为"></a>Spring事务的传播行为</h4>
<table>
<thead>
<tr>
<th style="text-align:center">事务传播行为类型</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">PROPAGATION_REQUIRED</td>
<td style="text-align:center">如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</td>
</tr>
<tr>
<td style="text-align:center">PROPAGATION_REQUIRES_NEW</td>
<td style="text-align:center">新建事务，如果当前存在事务，把当前事务挂起。</td>
</tr>
<tr>
<td style="text-align:center">PROPAGATION_SUPPORTS</td>
<td style="text-align:center">支持当前事务，如果当前没有事务，就以非事务方式执行。</td>
</tr>
<tr>
<td style="text-align:center">PROPAGATION_MANDATORY</td>
<td style="text-align:center">使用当前的事务，如果当前没有事务，就抛出异常。</td>
</tr>
<tr>
<td style="text-align:center">PROPAGATION_NOT_SUPPORTED</td>
<td style="text-align:center">以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td>
</tr>
<tr>
<td style="text-align:center">PROPAGATION_NEVER</td>
<td style="text-align:center">以非事务方式执行，如果当前存在事务，则抛出异常。</td>
</tr>
<tr>
<td style="text-align:center">PROPAGATION_NESTED</td>
<td style="text-align:center">如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td>
</tr>
</tbody>
</table>
<p>前两种比较常用，需要掌握。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/bb948b157832e6ebe7676a62df6949dc.png" alt="在这里插入图片描述"></p>
<p><a href="https://www.jb51.net/article/135539.htm">参考链接1</a><br>
<a href="https://www.cnblogs.com/happy4java/p/11206804.html">参考链接2</a></p>
<h4 id="spring事务的隔离级别"><a class="header-anchor" href="#spring事务的隔离级别"></a>spring事务的隔离级别</h4>
<h5 id="问题"><a class="header-anchor" href="#问题"></a>问题</h5>
<p>事务有隔离性，多事务操作之间不会产生影响。不考虑隔离性产生很多问题，比如脏读、不可重复读和幻读。</p>
<ul>
<li>脏读：一个未提交事务读取到另一个未提交事务的数据。<br>
比如银行取钱，事务A开启事务，此时切换到事务B，事务B开启事务–&gt;取走100元，此时切换回事务A，事务A读取的肯定是数据库里面的原始数据，因为事务B取走了100块钱，并没有提交，数据库里面的账务余额肯定还是原始余额，这就是脏读。</li>
<li>不可重复读：一个未提交事务读取到另一提交事务<strong>修改</strong>数据。一个事务对同一行数据重复读取两次，但是却得到了不同的结果。<br>
比如银行取钱，事务A开启事务–&gt;查出银行卡余额为1000元，此时切换到事务B事务B开启事务–&gt;事务B取走100元–&gt;提交，数据库里面余额变为900元，此时切换回事务A，事务A再查一次查出账户余额为900元，这样对事务A而言，在同一个事务内两次读取账户余额数据不一致，这就是不可重复读。</li>
<li>幻读：一个未提交事务读取到另一提交事务<strong>添加或删除</strong>数据。<br>
比如学生信息，事务A开启事务–&gt;修改所有学生当天签到状况为false，此时切换到事务B，事务B开启事务–&gt;事务B插入了一条学生数据，此时切换回事务A，事务A提交的时候发现了一条自己没有修改过的数据，这就是幻读，就好像发生了幻觉一样。幻读出现的前提是并发的事务中有事务发生了插入、删除操作。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/e6fb968f273927db90dbb0198c281c35.png" alt="在这里插入图片描述"></li>
</ul>
<h5 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h5>
<table>
<thead>
<tr>
<th style="text-align:center">隔离级别/是否解决问题</th>
<th style="text-align:center">脏读</th>
<th style="text-align:center">不可重复读</th>
<th style="text-align:center">幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">READ_UNCOMMITTED(读未提交)</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">READ_COMMITED(读已提交)</td>
<td style="text-align:center">是</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">REPEATABLE_READ(可重复读)</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">SERLALIZABLE(串行化)</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
</tbody>
</table>
<p>Spring隔离级别DEFAULT将使用底层数据库的默认事务隔离级别。MySQL默认隔离级别是REPEATABLE_READ，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Spring事务的其他参数"><a class="header-anchor" href="#Spring事务的其他参数"></a>Spring事务的其他参数</h4>
<ul>
<li>timeout ：超时时间<br>
事务需要在一定时间内进行提交，如果不提交进行回滚；默认值是 -1表示不失效，设置时间以秒单位进行计算</li>
<li>readOnly ：是否只读<br>
readOnly 默认值 false，可以进行增删查改操作；设置为true后只能进行查询操作</li>
<li>rollbackFor ：回滚<br>
设置出现哪些异常进行事务回滚</li>
<li>noRollbackFor ：不回滚<br>
设置出现哪些异常不进行事务回滚</li>
</ul>
<p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(timeout = 100,readOnly = false,rollbackFor = &#123;ArrayIndexOutOfBoundsException.class,RuntimeException.class&#125;)</span></span><br></pre></td></tr></table></figure>
<h3 id="XML实现"><a class="header-anchor" href="#XML实现"></a>XML实现</h3>
<h4 id="步骤"><a class="header-anchor" href="#步骤"></a>步骤</h4>
<ul>
<li>配置事务管理器</li>
<li>配置通知</li>
<li>配置切入点和切面</li>
</ul>
<h4 id="相关代码"><a class="header-anchor" href="#相关代码"></a>相关代码</h4>
<p>java代码中去掉@Transactional注解，其他不变。spring配置文件代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.spring5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///user_db?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JdbcTemplate 对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--set方式注入dataSource--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--1 创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>= <span class="string">&quot;dataSource&quot;</span>  <span class="attr">ref</span>= <span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2 配置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span>  <span class="attr">id</span>= <span class="string">&quot;txadvice&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置事务参数--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--指定哪种规则的方法上面添加事务 *表示匹配所有--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;tx:method name=&quot;account*&quot;/&gt;--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span>  <span class="attr">name</span>= <span class="string">&quot;accountMoney&quot;</span>  <span class="attr">propagation</span>= <span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3 配置切入点和切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:pointcut</span>  <span class="attr">id</span>= <span class="string">&quot;pt&quot;</span>  <span class="attr">expression</span>= <span class="string">&quot;execution(* com.spring5.service.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:advisor</span>  <span class="attr">advice-ref</span>= <span class="string">&quot;txadvice&quot;</span>  <span class="attr">pointcut-ref</span>= <span class="string">&quot;pt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>把Notepad++添加到右键菜单中</title>
    <url>/2021/07/25/notepad++/</url>
    <content><![CDATA[<h2 id="问题描述"><a class="header-anchor" href="#问题描述"></a>问题描述</h2>
<p>电脑的Notepad<ins>安装目录移动了，发现鼠标右键看不到Notepad</ins>菜单。下面的解决方法也适用于免安装版Notepad++。</p>
<h2 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h2>
<p>第一步、在注册表HKEY_CLASSES_ROOT*\shell\目录下<strong>新建Open With Notepad<ins>目录。然后在目录下新建一个字符串，字符串的Name为Icon，值为Notepad</ins>的安装路径。</strong><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/1c7b1896205861b91badd5ecaba9b829.png#pic_center" alt="在这里插入图片描述"><br>
第二步、在注册表HKEY_CLASSES_ROOT*\shell\Open With Notepad<ins>目录下再<strong>新建一个目录Command(名字不能更改)</strong>，值为Notepad</ins>的安装路径。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/22c55a0026af328bb71122e2fde98d18.png#pic_center" alt="在这里插入图片描述"><br>
如果不做这步，电脑会提示该文件没有相关联的应用程序来执行操作。</p>
<p>第三步、测试效果<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/342a68f04dd61b539a40189f50dcc920.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射和EasyExcel把实体信息导出为Excel表格</title>
    <url>/2021/09/12/reflex_and_easyexcel_to_excel/</url>
    <content><![CDATA[<p>前后端分离，后端虽然用了Swagger但有时候还是需要手动维护文档的，Java实体字段很多的时候，维护起来还是很费时间。本文介绍如何通过Java反射和EasyExcel把实体信息导出为Excel表格，<strong>表格可用于维护接口文档</strong>。</p>
<span id="more"></span>
<h2 id="大致思路"><a class="header-anchor" href="#大致思路"></a>大致思路</h2>
<ul>
<li>通过Java反射得到字段名、字段类型和注释信息。</li>
<li>通过EasyExcel导出。</li>
</ul>
<h2 id="完整源码"><a class="header-anchor" href="#完整源码"></a>完整源码</h2>
<p>pom.xml引入的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ApiModelProperty：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ApiModelProperty &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Awards是需要导出到Excel的类，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Awards</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;id主键&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;awardType获奖类型：1双奖 2科技成果转化奖 3双创奖 4专利奖 5自主开发大赛奖 6在岗技术革新奖 7创客马拉松 8外部获奖&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer awardType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;topClass奖项等级-一级分类&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String topClass;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;secondClass奖项等级-二级分类&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secondClass;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;awardYear获奖年份：专利奖可为字符&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String awardYear;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;awardProduct获奖/成果/专利产品名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String awardProduct;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;briefIntroduction成果简介&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String briefIntroduction;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;awardMoney成果奖金&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal awardMoney;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;innovationPoints亮点及创新点&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String innovationPoints;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;applicationEffect应用成效及前景&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String applicationEffect;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;displayDiagram项目展示图，以“,”拼接附件表主键&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String displayDiagram;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;projectData项目资料，以“,”拼接附件表主键&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String projectData;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;patentNo专利号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String patentNo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;patentType专利类型：1发明型 2实用新型&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer patentType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;applyDate申请日&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date applyDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;organizer主办/归属单位&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String organizer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;createUser创建人&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;createTime创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;lastUpdateUser最后修改人&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer lastUpdateUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;updateTime修改时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ExportData类对应Excel的列名，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportData</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value=&quot;字段名&quot;,index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ExcelProperty(value=&quot;字段类型&quot;,index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="meta">@ExcelProperty(value=&quot;字段说明&quot;,index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ExportTest是程序测试入口，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1、封装导出Excel所需的数据</span></span><br><span class="line">        List&lt;ExportData&gt; exportDataList = getExportData(Awards.class);</span><br><span class="line">        <span class="comment">//2、 通过EasyExcel导出</span></span><br><span class="line">        EasyExcel.write(<span class="string">&quot;exportJavaBean.xlsx&quot;</span>, ExportData.class).sheet(<span class="string">&quot;JavaBean导出Excel表格&quot;</span>).doWrite(exportDataList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装导出Excel所需的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: cls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.List&lt;com.chuenhung.bean.ExportData&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> liquanhong</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/8/19</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;ExportData&gt; <span class="title function_">getExportData</span><span class="params">(Class cls)</span>&#123;</span><br><span class="line">        <span class="comment">//1、 通过Java反射得到注解和属性信息</span></span><br><span class="line">        Field[] fields = cls.getDeclaredFields();</span><br><span class="line">        List&lt;ExportData&gt; exportDataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Field field: fields)&#123;</span><br><span class="line">            <span class="comment">// 属性类型</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">typeName</span> <span class="operator">=</span> field.getGenericType().getTypeName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">tyNameNew</span> <span class="operator">=</span> typeName.substring(typeName.lastIndexOf(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 泛型值</span></span><br><span class="line">            <span class="type">ApiModelProperty</span> <span class="variable">apiModelProperty</span> <span class="operator">=</span> field.getAnnotation(ApiModelProperty.class);</span><br><span class="line">            <span class="comment">// ExportData数据</span></span><br><span class="line">            <span class="type">ExportData</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExportData</span>();</span><br><span class="line">            data.setType(tyNameNew);</span><br><span class="line">            data.setName(field.getName());</span><br><span class="line">            data.setDescription(apiModelProperty.value());</span><br><span class="line">            exportDataList.add(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exportDataList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终导出的Excel如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/72653f7283f4b345991f693d81c90d93.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习(四)：AOP详解</title>
    <url>/2021/05/07/spring_four/</url>
    <content><![CDATA[<h2 id="概述"><a class="header-anchor" href="#概述"></a>概述</h2>
<p>AOP是aspect-oriented programming的缩写，译为面向切面编程。利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得 业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。简单来说，<strong>AOP就是不修改源代码在主干功能里面添加新功能。</strong></p>
<h2 id="底层原理"><a class="header-anchor" href="#底层原理"></a>底层原理</h2>
<p>AOP底层使用了动态代理：<strong>在有接口的时候使用JDK 动态代理、在没有接口的时候使用CGLIB字节码动态代理</strong>。</p>
<span id="more"></span>
<h3 id="JDK动态代理"><a class="header-anchor" href="#JDK动态代理"></a>JDK动态代理</h3>
<h4 id="简介"><a class="header-anchor" href="#简介"></a>简介</h4>
<p>使用JDK 动态代理需要用到JDK中的Proxy类里面的newProxyInstance方法创建代理对象。方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span>;</span><br></pre></td></tr></table></figure>
<p>newProxyInstance方法的三个参数说明：</p>
<ul>
<li>loader 定义代理类的类加载器</li>
<li>interfaces 代理类要实现的接口列表（可以多个）</li>
<li>h 指派方法调用的处理程序（要增强的功能在这里面实现）</li>
</ul>
<p>newProxyInstance方法返回一个指定接口的代理类实例。</p>
<p>InvocationHandler接口中有个invoke方法,用于实现增强的功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable;</span><br></pre></td></tr></table></figure>
<p>invoke方法的三个参数说明：</p>
<ul>
<li>proxy表示代理对象</li>
<li>method表示被增强的方法</li>
<li>args是方法的参数 若没有则为null</li>
</ul>
<h4 id="示例代码"><a class="header-anchor" href="#示例代码"></a>示例代码</h4>
<p>代码结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">└─src</span><br><span class="line">    └─com</span><br><span class="line">        └─spring5</span><br><span class="line">                JDKProxy.java</span><br><span class="line">                UserDao.java</span><br><span class="line">                UserDaoImpl.java</span><br></pre></td></tr></table></figure>
<p>UserDao接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">     String <span class="title function_">update</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserDaoImpl类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am add...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JDKProxy类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span>(UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UserDaoProxy</span>(userDao));</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> dao.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用有参构造方法来接收传递过来的待代理对象*，比如UserDaoImpl</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoProxy</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法之前执行....&quot;</span> + method.getName() + <span class="string">&quot; :传递的参数...&quot;</span> + Arrays.toString(args));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;方法之后执行....&quot;</span> + obj);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br>
方法之前执行…add :传递的参数…[1, 2]<br>
I am add…<br>
方法之后执行…com.spring5.UserDaoImpl@355da254<br>
result:3</p>
<h3 id="CGLIB字节码动态代理"><a class="header-anchor" href="#CGLIB字节码动态代理"></a>CGLIB字节码动态代理</h3>
<h4 id="简介-v2"><a class="header-anchor" href="#简介-v2"></a>简介</h4>
<p>使用CGLIB字节码动态代理不受代理类必须实现接口的限制，其底层采用ASM字节码生成框架。CGLIB动态代理的优缺点：</p>
<ul>
<li>使用字节码技术生产代理类比JAVA反射效率高</li>
<li>不能对声明为final的类和方法进行代理，因为其原理是动态生成被代理类的子类</li>
</ul>
<p>需要实现接口MethodInterceptor，然后重写intercept方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object <span class="title function_">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy arg3)</span> <span class="keyword">throws</span> Throwable;</span><br></pre></td></tr></table></figure>
<p>intercept方法的参数说明：</p>
<ul>
<li>proxy CGLIB生成的<strong>代理类实例</strong>,<strong>也是目标对象的子类</strong><br>
相当于重写父类方法</li>
<li>method 被代理方法</li>
<li>args 方法参数</li>
<li>为生成的代理类对方法的代理引用<br>
intercept方法返回<br>
<a href="http://www.360doc.com/content/14/0618/11/454045_387708106.shtml">参考链接</a></li>
</ul>
<p>另外用到了<strong>Enhancer类</strong>，它是Cglib中的一个字节码增强器，先调它的setSuperclass()将被代理类设置成父类、再调setCallback函数执行intercept方法，最后调create()生成代理类。</p>
<h4 id="示例代码-v2"><a class="header-anchor" href="#示例代码-v2"></a>示例代码</h4>
<p>代码结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">└─src</span><br><span class="line">    └─com</span><br><span class="line">        └─spring5</span><br><span class="line">                CglibProxy.java</span><br><span class="line">                User.java</span><br></pre></td></tr></table></figure>
<p>User类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我想睡觉...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CglibProxy类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserProxy</span> <span class="variable">userProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserProxy</span>();</span><br><span class="line">        User base=(User) userProxy.getProxy(<span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">        base.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserProxy</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">(Object object)</span>&#123;</span><br><span class="line">        Enhancer e=<span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        e.setSuperclass(object.getClass());</span><br><span class="line">        e.setCallback(<span class="built_in">this</span>);<span class="comment">//设置回调函数，即调用intercept()</span></span><br><span class="line">        <span class="keyword">return</span> e.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object proxy, Method method, Object[] args,</span></span><br><span class="line"><span class="params">                            MethodProxy arg3)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉前脱衣服&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> arg3.invokeSuper(proxy, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;起床穿衣服&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br>
睡觉前脱衣服<br>
我想睡觉…<br>
起床穿衣服</p>
<h2 id="AOP操作"><a class="header-anchor" href="#AOP操作"></a>AOP操作</h2>
<h3 id="概述-v2"><a class="header-anchor" href="#概述-v2"></a>概述</h3>
<p>AOP相关的几个术语：</p>
<ul>
<li>连接点<br>
类里面哪些方法可以被增强，这些方法称为连接点</li>
<li>切入点<br>
实际被真正增强的方法称为切入点</li>
<li>通知<br>
实际增强的逻辑部分称为通知，分为前置通知、后置通知、环绕通知、异常通知和最终通知五种类型，其中<strong>最终通知相当于JAVA的finally</strong>。</li>
<li>切面<br>
把通知应用到切入点<strong>过程</strong></li>
</ul>
<h3 id="AspectJ"><a class="header-anchor" href="#AspectJ"></a>AspectJ</h3>
<p>AspectJ不是 Spring 组成部分，是一个独立的AOP 框架，一般把 AspectJ 和 Spirng 框架一起使 用，进行 AOP操作。<strong>增强就是代理的意思</strong>。</p>
<h4 id="准备工作"><a class="header-anchor" href="#准备工作"></a>准备工作</h4>
<p>在进行AOP操作的时候需要先引入下面四个Jar包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.springsource.net.sf.cglib-<span class="number">2.2</span><span class="number">.0</span>.jar</span><br><span class="line">com.springsource.org.aopalliance-<span class="number">1.0</span><span class="number">.0</span>.jar</span><br><span class="line">com.springsource.org.aspectj.weaver-<span class="number">1.6</span><span class="number">.8</span>.RELEASE.jar</span><br><span class="line">spring-aspects-<span class="number">5.2</span><span class="number">.6</span>.RELEASE.jar</span><br></pre></td></tr></table></figure>
<p>引入包后的所有包如下：</p>
<ul>
<li>com.springsource.net.sf.cglib-2.2.0.jar</li>
<li>com.springsource.org.aopalliance-1.0.0.jar</li>
<li>com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</li>
<li>spring-aspects-5.2.6.RELEASE.jar</li>
<li>commons-logging-1.1.1.jar</li>
<li>spring-aop-5.2.6.RELEASE.jar</li>
<li>spring-beans-5.2.6.RELEASE.jar</li>
<li>spring-context-5.2.6.RELEASE.jar</li>
<li>spring-core-5.2.6.RELEASE.jar</li>
<li>spring-expression-5.2.6.RELEASE.jar</li>
</ul>
<h4 id="AspectJ的切入点表达式语法说明"><a class="header-anchor" href="#AspectJ的切入点表达式语法说明"></a>AspectJ的切入点表达式语法说明</h4>
<ul>
<li>语法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )</span><br></pre></td></tr></table></figure>
<ul>
<li>示例语法详细说明</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution (* com.sample.service.impl..*. *(..))</span><br></pre></td></tr></table></figure>
<p>1、execution(): 表达式主体。<br>
2、第一个*号：表示返回类型， <em>号表示所有的类型。<br>
3、包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，com.sample.service.impl包、子孙包下所有类的方法。<br>
4、第二个</em>号：表示类名，<em>号表示所有的类。<br>
5、</em>(…):最后这个星号表示方法名，*号表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数</p>
<ul>
<li>其他示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例1 对com.dao.BookDao 类里面的 add 进行增强</span></span><br><span class="line">execution(* com.dao.BookDao.add(..))</span><br><span class="line"><span class="comment">// 例2 对多个方法进行增强 用||和or都可以</span></span><br><span class="line">execution(* com.dao.BookDao.add(..))  || excution(* com.dao.BookDao.delete(..))</span><br><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(* com.dao.BookDao.add(..)) || execution(* com.dao.BookDao.delete(..))&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例3 对com.dao.BookDao 类里面的所有的方法进行增强</span></span><br><span class="line">execution(* com.dao.BookDao.* (..))</span><br><span class="line"><span class="comment">//例4 对com.dao 包里面所有类里面的所有方法进行增强</span></span><br><span class="line">execution(* com.dao.*.* (..))</span><br></pre></td></tr></table></figure>
<h4 id="基于注解实现"><a class="header-anchor" href="#基于注解实现"></a>基于注解实现</h4>
<h5 id="主要步骤"><a class="header-anchor" href="#主要步骤"></a>主要步骤</h5>
<p>主要步骤如下：</p>
<ul>
<li>
<p>在Spring配置文件中，开启注解扫描<br>
需要在XML中引入context和aop的上下文空间。</p>
</li>
<li>
<p>使用注解创建 User 和 UserProxy 对象</p>
</li>
<li>
<p>在增强类上面添加注解 @Aspect</p>
</li>
<li>
<p>在Spring配置文件中开启生成代理对象</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>开启Aspectj生成对象后，会去代码中扫描@aspect注解</p>
</li>
<li>
<p>配置不同类型的通知<br>
在<strong>通知方法</strong>上面使用@Before、@AfterReturning、@Around、@AfterThrowing和@After注解，结合切入点表达式配置。<br>
@after是在方法执行之后执行(有异常也执行)，@afterReturning是在返回值之后执行(有异常不执行)。</p>
</li>
</ul>
<h5 id="示例代码-v3"><a class="header-anchor" href="#示例代码-v3"></a>示例代码</h5>
<p>代码结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">└─src</span><br><span class="line">    │  bean.xml</span><br><span class="line">    │</span><br><span class="line">    └─com</span><br><span class="line">        └─spring5</span><br><span class="line">            └─aopanno</span><br><span class="line">                    Test.java</span><br><span class="line">                    User.java</span><br><span class="line">                    UserProxy.java</span><br></pre></td></tr></table></figure>
<p>User类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>/<span class="number">0</span>;<span class="comment">// 测试异常通知</span></span><br><span class="line">        System.out.println(<span class="string">&quot;I am add&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserProxy类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value =  &quot;execution(* com.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System. out .println( <span class="string">&quot;前置通知 before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知（返回通知）afterReturning&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* com.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知 after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知 afterThrowing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Around 环绕之前&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Around 环绕之后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Test类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAopAnno</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>,User.class);</span><br><span class="line">        user.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>无异常返回结果：</strong><br>
Around 环绕之前<br>
前置通知 before<br>
I am add<br>
Around 环绕之后<br>
最终通知 after<br>
后置通知（返回通知）afterReturning<br>
<strong>有异常时返回结果：</strong><br>
Around 环绕之前<br>
前置通知 before<br>
最终通知 after<br>
异常通知 afterThrowing<br>
java.lang.ArithmeticException: / by zero</p>
<h5 id="相同切入点提取"><a class="header-anchor" href="#相同切入点提取"></a>相同切入点提取</h5>
<p>用@Pointcut标签</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//相同切入点抽取</span></span><br><span class="line"><span class="meta">@Pointcut(value =  &quot;execution(* com.spring5.aopanno.User.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointTest</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(value =  &quot;pointTest()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">    System. out .println( <span class="string">&quot;前置通知 before&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning(value = &quot;pointTest()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;后置通知（返回通知）afterReturning&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="多个增强类对同一个方法进行增强"><a class="header-anchor" href="#多个增强类对同一个方法进行增强"></a>多个增强类对同一个方法进行增强</h5>
<p>用@Order注解设置增强类优先级，数字类型值越小表示优先级越高。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonProxy</span>&#123; &#125;</span><br></pre></td></tr></table></figure>
<h5 id="完全注解开发"><a class="header-anchor" href="#完全注解开发"></a>完全注解开发</h5>
<p>在启动配置类中添加@EnableAspectJAutoProxy注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123; &quot;com.spring5&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass =  true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigAop</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="基于配置文件实现"><a class="header-anchor" href="#基于配置文件实现"></a>基于配置文件实现</h4>
<h5 id="具体步骤"><a class="header-anchor" href="#具体步骤"></a>具体步骤</h5>
<ul>
<li>创建增强类和被增强类，创建相关方法</li>
<li>在Spring配置文件中配置两个类对象</li>
<li>在Spring配置文件中配置AOP</li>
</ul>
<h5 id="示例代码-v4"><a class="header-anchor" href="#示例代码-v4"></a>示例代码</h5>
<p>代码结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">└─src</span><br><span class="line">    │  bean.xml</span><br><span class="line">    │</span><br><span class="line">    └─com</span><br><span class="line">        └─spring5</span><br><span class="line">            └─aopxml</span><br><span class="line">                    Student.java</span><br><span class="line">                    StudentProxy.java</span><br><span class="line">                    Test.java</span><br></pre></td></tr></table></figure>
<p>Student类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I want to buy a book...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>StudentProxy类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturn</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am afterReturn...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Test类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAopXml</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;student&quot;</span>,Student.class);</span><br><span class="line">        student.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bean.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring5.aopxml.Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring5.aopxml.StudentProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span>  <span class="attr">id</span>= <span class="string">&quot;p&quot;</span>  <span class="attr">expression</span>= <span class="string">&quot;execution(* com.spring5.aopxml.Student.buy(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span>  <span class="attr">ref</span>= <span class="string">&quot;studentProxy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--表示把before方法作用到buy方法上，并且做的是前置通知,p是上面的切入点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span>  <span class="attr">method</span>= <span class="string">&quot;before&quot;</span>  <span class="attr">pointcut-ref</span>= <span class="string">&quot;p&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span>  <span class="attr">ref</span>= <span class="string">&quot;studentProxy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--表示把afterReturn方法作用到buy方法上，并且做的是后置通知,p是上面的切入点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span>  <span class="attr">method</span>= <span class="string">&quot;afterReturn&quot;</span>  <span class="attr">pointcut-ref</span>= <span class="string">&quot;p&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果：<br>
I am before…<br>
I want to buy a book…<br>
I am afterReturn…</p>
<h3 id="AspectJ获取方法参数和返回值"><a class="header-anchor" href="#AspectJ获取方法参数和返回值"></a>AspectJ获取方法参数和返回值</h3>
<p><strong>示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取方法参数</span></span><br><span class="line"><span class="comment">// joinPoint.getArgs() 返回方法参数数组，0、1、2对应第1、2、3个参数</span></span><br><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(* com.xxxImpl.doBusiness(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">secondProposition</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">	<span class="type">PropositionApprovalBo</span> <span class="variable">bo</span> <span class="operator">=</span> (PropositionApprovalBo) joinPoint.getArgs()[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取方法返回值</span></span><br><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(* com.xxxImpl.addPropositionList(..))&quot;,</span></span><br><span class="line"><span class="meta">				returning=&quot;returnValue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPropositionList</span><span class="params">(JoinPoint joinPoint, Object returnValue)</span>&#123;</span><br><span class="line">	List&lt;PropositionCollect&gt; propositionCollectList = (List&lt;PropositionCollect&gt;) returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>只使用返回值时，joinPoint可以省略。</strong></p>
<h3 id="AOP失效场景"><a class="header-anchor" href="#AOP失效场景"></a>AOP失效场景</h3>
<p><strong>1、类内部调用被代理方法，此时被代理方法并不会被增强。<br>
2、被代理方法非public修饰 (未验证，最好改为public)。</strong></p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropositionManageServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PropositionManageService</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BatchImport</span><span class="params">(MultipartFile file, ISessionUser sessionUser)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.addPropositionList();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> List&lt;PropositionCollect&gt; <span class="title function_">addPropositionList</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>由于addPropositionList方法是在PropositionManageServiceImpl类内部调用的，所以AOP代理会失效。不会执行这个切面方法。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(* com.xxxImpl.addPropositionList(..))&quot;,</span></span><br><span class="line"><span class="meta">				returning=&quot;returnValue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPropositionList</span><span class="params">(JoinPoint joinPoint, Object returnValue)</span>&#123;</span><br><span class="line">	List&lt;PropositionCollect&gt; propositionCollectList = (List&lt;PropositionCollect&gt;) returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>解决方法：使用service调用需要代理的方法。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropositionManageServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PropositionManageService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PropositionManageService propositionManageService;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BatchImport</span><span class="params">(MultipartFile file, ISessionUser sessionUser)</span> &#123;</span><br><span class="line">		propositionManageService.addPropositionList();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> List&lt;PropositionCollect&gt; <span class="title function_">addPropositionList</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Spring-AOP切面方法出现异常，会影响主程序运行的解决方法"><a class="header-anchor" href="#Spring-AOP切面方法出现异常，会影响主程序运行的解决方法"></a>Spring AOP切面方法出现异常，会影响主程序运行的解决方法</h3>
<ul>
<li>采用@AfterReturning,在主程序走完后执行</li>
<li>try catch住异常代码,并且不要抛出新异常</li>
</ul>
<p>第二步是必须的。</p>
<h3 id="Spring-AOP切面中启用新事务-可以用-After注解代替"><a class="header-anchor" href="#Spring-AOP切面中启用新事务-可以用-After注解代替"></a>Spring AOP切面中启用新事务 (可以用@After注解代替)</h3>
<p>Spring AOP切面中启用新事务，<strong>解决不管主程序是否回滚，都会执行切面方法(比如记录日志)</strong>。<br>
因为@Transactional也是声明式事务，本身就是AOP实现的，在AOP的代码中使用不起作用。<br>
所以就只能使用spring的编程式事务了，需要引入TransactionTemplate。<br>
<strong>示例代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(* com.rewardinnovation..addAchievementApplication(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAchievement</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">	log.info(<span class="string">&quot;AchievementAspect.addAchievement 开始执行新增成果切面逻辑,joinPoint：&#123;&#125;&quot;</span>,joinPoint);</span><br><span class="line">	<span class="comment">//声明式事务在切面中不起作用，需使用编程式事务</span></span><br><span class="line">	<span class="comment">//设置传播行为：总是新启一个事务，如果存在原事务，就挂起原事务</span></span><br><span class="line">	transactionTemplate.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);</span><br><span class="line">	transactionTemplate.execute(<span class="keyword">new</span> <span class="title class_">TransactionCallback</span>&lt;T&gt;() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> T <span class="title function_">doInTransaction</span><span class="params">(TransactionStatus transactionStatus)</span> &#123;</span><br><span class="line">				<span class="comment">// 具体的切面逻辑都写在这儿</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>这种方式只适合于&quot;主程序异常但需要切面正常执行&quot;的场景。完全可以使用@After注解代替</strong><br>
<a href="https://blog.csdn.net/aabbyyz/article/details/83188069">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习(一)：框架概述</title>
    <url>/2021/04/28/spring_one/</url>
    <content><![CDATA[<h2 id="什么是spring"><a class="header-anchor" href="#什么是spring"></a>什么是spring?</h2>
<ul>
<li>Spring是一个<strong>轻量级Java开发框架</strong>，最早由Rod Johnson创建，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的JavaSE/JavaEE full-stack（一站式）轻量级开源框架，为开发Java应用程序提供全面的基础架构支持。Spring负责基础架构，因此Java开发者可以专注于应用程序的开发</li>
<li>Spring最根本的使命是<strong>解决企业级应用开发的复杂性</strong>，即简化Java开发</li>
<li>Spring可以做很多事情，它为企业级开发提供给了丰富的功能，但是这些功能的底层都依赖于它的两个核心特性，也就是依赖注入（dependency injection，DI）和面向切面编程（aspect-oriented programming，AOP）</li>
</ul>
<span id="more"></span>
<h2 id="Spring的相关概念"><a class="header-anchor" href="#Spring的相关概念"></a>Spring的相关概念</h2>
<h3 id="IOC（控制反转）"><a class="header-anchor" href="#IOC（控制反转）"></a>IOC（控制反转）</h3>
<p>把对象创建和对象之间的调用过程，交给 Spring 进行管理。<br>
创建对象实例的控制权从代码控制剥离到IOC容器控制，实际就是你在xml文件控制，<strong>侧重于原理</strong></p>
<h3 id="DI（依赖注入）"><a class="header-anchor" href="#DI（依赖注入）"></a>DI（依赖注入）</h3>
<p>创建对象实例时，为这个对象注入属性值或其它对象实例，<strong>侧重于实现</strong></p>
<h3 id="AOP（面向切面编程）"><a class="header-anchor" href="#AOP（面向切面编程）"></a>AOP（面向切面编程）</h3>
<p>不修改源代码，在主干功能里面添加新功能</p>
<h2 id="Spring的优缺点"><a class="header-anchor" href="#Spring的优缺点"></a>Spring的优缺点</h2>
<h3 id="优点"><a class="header-anchor" href="#优点"></a>优点</h3>
<ul>
<li>方便解耦，简化开发<br>
Spring就是一个大工厂，可以将所有对象的创建和依赖关系的维护，交给Spring管理</li>
<li>AOP 编程支持</li>
<li>方便程序测试<br>
Spring对Junit4支持，可以通过注解方便的测试Spring程序</li>
<li>方便和其他框架进行整合<br>
其内部提供了对各种优秀框架的直接支持如Struts、Hibernate、MyBatis等</li>
<li>声明式事务支持<br>
只需要通过配置就可以完成对事务的管理，而无需手动编程</li>
<li>降低 API 开发难度<br>
对一些难调用的API都进行了封装，比如JDBC</li>
</ul>
<h3 id="缺点"><a class="header-anchor" href="#缺点"></a>缺点</h3>
<ul>
<li>Spring依赖反射，反射影响性能</li>
<li>使用门槛升高，入门Spring需要较长时间</li>
</ul>
<h2 id="Spring由哪些模块组成"><a class="header-anchor" href="#Spring由哪些模块组成"></a>Spring由哪些模块组成</h2>
<p>Spring 总共大约有 20 个模块， 由 1300 多个不同的文件构成。 以下是 Spring 5 的模块结构图：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/9d2dac99762408a95376b30f627350fb.png" alt="在这里插入图片描述"><br>
spring-beans、spring-core、spring-context 和 spring-expression（Spring Expression Language, SpEL） 4 个模块是Spring的核心模块</p>
<ul>
<li>spring core：提供了框架的基本组成部分，包括控制反转（Inversion of Control，IOC）和依赖注入（Dependency Injection，DI）功能</li>
<li>spring-beans：提供了BeanFactory，是工厂模式的一个经典实现，Spring将管理对象称为Bean</li>
<li>spring-context：构建于 core 封装包基础上的context 封装包，提供了一种框架式的对象访问方法</li>
<li>spring-jdbc：提供了一个JDBC的抽象层，消除了烦琐的JDBC编码和数据库厂商特有的错误代码解析， 用于简化JDBC</li>
<li>spring-aop：提供了面向切面的编程实现，让你可以自定义拦截器、切点等</li>
<li>spring-web：提供了针对 Web 开发的集成特性，例如文件上传，利用 servlet listeners 进行 IOC容器初始化和针对 Web 的 ApplicationContext</li>
<li>spring-test：主要为测试提供支持的，支持使用JUnit或TestNG对Spring组件进行单元测试和集成测试</li>
</ul>
<h2 id="Spring-框架中都用到了哪些设计模式"><a class="header-anchor" href="#Spring-框架中都用到了哪些设计模式"></a>Spring 框架中都用到了哪些设计模式</h2>
<ul>
<li>工厂模式<br>
BeanFactory就是简单工厂模式的体现，用来创建对象的实例</li>
<li>单例模式<br>
Bean默认为单例模式</li>
<li>代理模式<br>
Spring的AOP功能用到了JDK的动态代理和CGLIB字节码生成技术</li>
<li>模板方法<br>
用来解决代码重复的问题。比如RestTemplate, JmsTemplate, JpaTemplate</li>
<li>观察者模式<br>
定义对象键一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知被制动更新，如Spring中listener的实现–ApplicationListener</li>
</ul>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习(二)：入门案例</title>
    <url>/2021/04/28/spring_two/</url>
    <content><![CDATA[<h2 id="下载Spring5"><a class="header-anchor" href="#下载Spring5"></a>下载Spring5</h2>
<p>下载地址：<br>
<a href="https://repo.spring.io/release/org/springframework/spring/">https://repo.spring.io/release/org/springframework/spring/</a><br>
release代表稳定版本，我这里下载5.2.6<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/d1c56e21fa15f6960c10d097389dbbb6.png" alt="在这里插入图片描述"><br>
下载后效果：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/34b25b858739578122a7ad5766288648.png" alt="在这里插入图片描述"></p>
<span id="more"></span>
<h2 id="IDEA创建项目"><a class="header-anchor" href="#IDEA创建项目"></a>IDEA创建项目</h2>
<p>打开IDEA,新建一个普通JAVA项目：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/71b526bf45ee42126f184ac07d28b13f.png" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/181a8afb52cb95a0b5d937d39d5a0a8d.png" alt="在这里插入图片描述"><br>
创建完后的效果如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/744c8030b3abdfc3fa5c9e9fa65de128.png" alt="在这里插入图片描述"></p>
<h2 id="导入Spring5核心Jar包"><a class="header-anchor" href="#导入Spring5核心Jar包"></a>导入Spring5核心Jar包</h2>
<p>先建个lib文件夹：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/3fa69b16d62c7e12841abae38292f8a1.png" alt="在这里插入图片描述"><br>
导入Spring5核心Jar包：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/c7cc7b081f0c5655d50b3159f3ea2c95.png" alt="在这里插入图片描述"></p>
<h2 id="导入Junit相关Jar包"><a class="header-anchor" href="#导入Junit相关Jar包"></a>导入Junit相关Jar包</h2>
<p>IDEA可能无法自动引入Junit包需要手动导入下。jar包在IDEA安装路径的lib文件夹下。需要导入下面这两个jar包：</p>
<ul>
<li>hamcrest-core-1.3.jar</li>
<li>junit-4.12.jar<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/b02f893c378b9e435600934b0180787d.png" alt="在这里插入图片描述"></li>
</ul>
<h2 id="创建类和方法"><a class="header-anchor" href="#创建类和方法"></a>创建类和方法</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/b336649638761725d22d05f64d30fd2a.png" alt="在这里插入图片描述"><br>
代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am test...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="XML文件配置"><a class="header-anchor" href="#XML文件配置"></a>XML文件配置</h2>
<p>新建bean.xml文件，类型为Spring Config。XML文件代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置 User对象创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="测试代码编写"><a class="header-anchor" href="#测试代码编写"></a>测试代码编写</h2>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1 加载 spring 配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2 获取配置创建的对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a class="header-anchor" href="#运行结果"></a>运行结果</h2>
<p>com.spring5.User@4abdb505<br>
I am test…</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap的底层原理学习</title>
    <url>/2021/06/04/study_of_hashmap/</url>
    <content><![CDATA[<h2 id="HashMap的存储结构"><a class="header-anchor" href="#HashMap的存储结构"></a>HashMap的存储结构</h2>
<h3 id="JDK-1-8之前"><a class="header-anchor" href="#JDK-1-8之前"></a>JDK 1.8之前</h3>
<p>在JDK 1.7，HashMap采用的是**数组+链表(头插法)**的存储结构。HashMap通过key的hashCode经过hash方法处理过后得到hash值，然后通过 (n - 1) &amp; hash 判断当前元素存放的位置（n指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存在的元素的hash值以及key是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。JDK 1.8之前的hash方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(<span class="type">int</span> h)</span> &#123;</span><br><span class="line"> h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line"> <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>存储结构如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/2a13fec335859eb6f62c06283b78c27e.png" alt="在这里插入图片描述"></p>
<p>所谓 “拉链法” 就是将链表和数组相结合。也就是说创建⼀个链表数组，数组中每⼀格就是⼀个链表。若遇到哈希冲突，则将冲突的值加到链表中即可</p>
<span id="more"></span>
<h3 id="JDK-1-8"><a class="header-anchor" href="#JDK-1-8"></a>JDK 1.8</h3>
<p>JDK 1.8之前的HashMapHashMap采用的是数组+链表(头插法)的存储结构，在链表很长时查询效率明显降低o(n)，所以JDK 1.8做了很多优化采用<strong>数组+链表(尾插法)+红黑树</strong>的存储结构。红黑树的查询时间复杂度是o(log n)。当链表长度大于阈值(默认8)时，如果当前数组的长度小于阈值(默认64)，那么会先进行数组扩容，否则会把链表转化为红黑树，以提高查询效率。当红黑树上的元素个数减少到阈值(默认6)时，会再转为链表。JDK 1.8的hash方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line"> <span class="type">int</span> h;</span><br><span class="line"> <span class="comment">// key.hashCode() 返回散列值也就是hashcode</span></span><br><span class="line"> <span class="comment">// ^ 按位异或</span></span><br><span class="line"> <span class="comment">// &gt;&gt;&gt; ⽆符号右移，忽略符号位，空位都以0补⻬</span></span><br><span class="line"> <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>相对于JDK 1.7的hash方法的性能会稍微差一点点，因为扰动了4次。</p>
<p>存储结构如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/eaeee5f51644a36c4bf7daac8e144824.png" alt="在这里插入图片描述"></p>
<h2 id="常用变量"><a class="header-anchor" href="#常用变量"></a>常用变量</h2>
<p>在 HashMap源码中，比较重要的常用变量，主要有以下这些。还有两个内部类来表示普通链表的节点和红黑树节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认的初始化容量为16，必须是2的n次幂</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最大容量为 2^30</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认的加载因子0.75，乘以数组容量得到的值，用来表示元素个数达到多少时，需要扩容。</span></span><br><span class="line"><span class="comment">//为什么设置 0.75 这个值呢，简单来说就是时间和空间的权衡。</span></span><br><span class="line"><span class="comment">//若小于0.75如0.5，则数组长度达到一半大小就需要扩容，空间使用率大大降低，</span></span><br><span class="line"><span class="comment">//若大于0.75如0.8，则会增大hash冲突的概率，影响查询效率。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//刚才提到了当链表长度过长时，会有一个阈值，超过这个阈值8就会转化为红黑树</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当红黑树上的元素个数，减少到6个时，就退化为链表</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表转化为红黑树，除了有阈值的限制，还有另外一个限制，需要数组容量至少达到64，才会树化。</span></span><br><span class="line"><span class="comment">//这是为了避免，数组扩容和树化阈值之间的冲突。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放所有Node节点的数组</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放所有的键值对</span></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line"><span class="comment">//map中的实际键值对个数，即数组中元素个数</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每次结构改变时，都会自增，fail-fast机制，这是一种错误检测机制。</span></span><br><span class="line"><span class="comment">//当迭代集合的时候，如果结构发生改变，则会发生 fail-fast，抛出异常。</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> modCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组扩容阈值</span></span><br><span class="line"><span class="type">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载因子</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">float</span> loadFactor;					</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通单向链表节点类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">	<span class="comment">//key的hash值，put和get的时候都需要用到它来确定元素在数组中的位置</span></span><br><span class="line">	<span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">	<span class="keyword">final</span> K key;</span><br><span class="line">	V value;</span><br><span class="line">	<span class="comment">//指向单链表的下一个节点</span></span><br><span class="line">	Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">	Node(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">		<span class="built_in">this</span>.hash = hash;</span><br><span class="line">		<span class="built_in">this</span>.key = key;</span><br><span class="line">		<span class="built_in">this</span>.value = value;</span><br><span class="line">		<span class="built_in">this</span>.next = next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转化为红黑树的节点类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">	<span class="comment">//当前节点的父节点</span></span><br><span class="line">	TreeNode&lt;K,V&gt; parent;</span><br><span class="line">	<span class="comment">//左孩子节点</span></span><br><span class="line">	TreeNode&lt;K,V&gt; left;</span><br><span class="line">	<span class="comment">//右孩子节点</span></span><br><span class="line">	TreeNode&lt;K,V&gt; right;</span><br><span class="line">	<span class="comment">//指向前一个节点</span></span><br><span class="line">	TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">	<span class="comment">//当前节点是红色或者黑色的标识</span></span><br><span class="line">	<span class="type">boolean</span> red;</span><br><span class="line">	TreeNode(<span class="type">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">		<span class="built_in">super</span>(hash, key, val, next);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>
<h2 id="小结"><a class="header-anchor" href="#小结"></a>小结</h2>
<ul>
<li>
<p>HashMap是无序且线程不安全的</p>
</li>
<li>
<p>HashMap可以存null键和值，key重复会被覆盖，value可以重复</p>
</li>
<li>
<p>HashMap每次是成倍扩容，且长度都是2的幂次方<br>
这是为了尽量减少hash冲突考虑的。如果自己传的长度到HashMap构造方法，会返回大于等于参数的最小2次幂。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">13</span>);<span class="comment">//容量为16</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>JDK 1.7的HashMap在多线程环境下可能会出现链表死循环<br>
原因是采用头插法，多线程推荐使用ConcurrentHashMap(JDK 1.7使用Segment，JDK 1.8使用synchronized和CAS，synchronized只锁定当前链表或红黑树的首节点，效率提升n倍)</p>
</li>
</ul>
<p><a href="https://blog.csdn.net/weixin_43167418/article/details/105630923">参考链接</a></p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习(六)：WebFlux</title>
    <url>/2021/05/12/spring_six/</url>
    <content><![CDATA[<h2 id="WebFlux概述"><a class="header-anchor" href="#WebFlux概述"></a>WebFlux概述</h2>
<h3 id="简介"><a class="header-anchor" href="#简介"></a>简介</h3>
<ul>
<li>WebFlux是Spring5新添加的模块以用于web开发，功能和SpringMVC类似。</li>
<li>Webflux使用<strong>响应式编程</strong>的框架。</li>
<li>Webflux 是一种<strong>异步非阻塞</strong>的框架，异步非阻塞的框架在 Servlet3.1 以后才支持，核心是基于Reactor的相关 API 实现的。</li>
</ul>
<h3 id="异步非阻塞"><a class="header-anchor" href="#异步非阻塞"></a>异步非阻塞</h3>
<p><strong>异步和同步</strong>针对调用者，调用者发送请求，如果等着对方回应之后才去做其他事情就是同步，如果发送请求之后不等着对方回应就去做其他事情就是异步。<br>
<strong>阻塞和非阻塞</strong>针对被调用者，被调用者收到请求之后，做完请求任务之后才给出反馈就是阻塞，收到请求之后马上给出反馈然后再去做事情就是非阻塞。</p>
<span id="more"></span>
<h2 id="响应式编程"><a class="header-anchor" href="#响应式编程"></a>响应式编程</h2>
<h3 id="简介-v2"><a class="header-anchor" href="#简介-v2"></a>简介</h3>
<p>响应式编程是一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便<br>
地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。比如Excel表格中的公式，公式的值会随着单元格的变化而变化。<br>
Java8提供观察者模式两个类Observer和Observable，Java9提供Flow类实现响应式编程。</p>
<h3 id="Reactor实现"><a class="header-anchor" href="#Reactor实现"></a>Reactor实现</h3>
<h4 id="简介-v3"><a class="header-anchor" href="#简介-v3"></a>简介</h4>
<ul>
<li>Reactor是满足Reactive规范的框架</li>
<li>Reactor有Mono和Flux两个核心类，这两个类都实现了Publisher接口，提供丰富操作符。Flux对象实现发布者，返回 N 个元素；Mono实现发布者，返回 0 或者1个元素</li>
<li>Flux 和 Mono 都是数据流的发布者，使用 Flux 和 Mono 都可以发出三种数据信号：元素值，错误信号，完成信号<br>
错误信号和完成信号都代表终止信号，终止信号用于告诉订阅者数据流结束了。错误信号终止数据流同时把错误信息传递给订阅者</li>
</ul>
<h4 id="三种信号特点"><a class="header-anchor" href="#三种信号特点"></a>三种信号特点</h4>
<ul>
<li>错误信号和完成信号都是终止信号，不能共存的</li>
<li>如果没有发送任何元素值，而是直接发送错误或者完成信号，表示是空数据流</li>
<li>如果没有错误信号，没有完成信号，表示是无限数据流</li>
</ul>
<h4 id="操作符"><a class="header-anchor" href="#操作符"></a>操作符</h4>
<p>对数据流进行一道道操作成为操作符，比如工厂流水线。</p>
<ul>
<li>map元素映射为新元素<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/c6aa44a0cfb7e9bc8a45709ee918e76d.png" alt="在这里插入图片描述"><br>
比如上图对1、2和3进行了平方操作然后输出</li>
<li>flatMap元素映射为流<br>
把每个元素转换流，把转换之后多个流合并大的流<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/44555cf7112d1216825839f8a2c7bb66.bmp" alt="在这里插入图片描述"></li>
</ul>
<h4 id="示例代码"><a class="header-anchor" href="#示例代码"></a>示例代码</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 引入依赖</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;io.projectreactor&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;reactor-core&lt;/artifactId&gt;</span><br><span class="line"> &lt;version&gt;<span class="number">3.1</span><span class="number">.5</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//just 方法直接声明</span></span><br><span class="line">Flux.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).subscribe(System.out::println);</span><br><span class="line">Mono.just(<span class="number">1</span>).subscribe(System.out::print);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//其他的方法(集合和流)</span></span><br><span class="line"> Integer[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"> Flux.fromArray(array);</span><br><span class="line"> </span><br><span class="line"> List&lt;Integer&gt; list = Arrays.asList(array);</span><br><span class="line"> Flux.fromIterable(list);</span><br><span class="line"> Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line"> Flux.fromStream(stream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringWebflux执行流程和核心API"><a class="header-anchor" href="#SpringWebflux执行流程和核心API"></a>SpringWebflux执行流程和核心API</h2>
<p>SpringWebflux基于 Reactor，默认使用容器是 Netty，Netty是高性能的 NIO(同步非阻<br>
塞) 框架。</p>
<h3 id="执行流程"><a class="header-anchor" href="#执行流程"></a>执行流程</h3>
<p>SpringWebflux核心控制器DispatchHandler，实现接口WebHandler，接口中有个handler方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WebHandler</span> &#123;</span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">handle</span><span class="params">(ServerWebExchange var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">handle</span><span class="params">(ServerWebExchange exchange)</span> &#123;<span class="comment">// exchange放http请求信息</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.handlerMappings == <span class="literal">null</span> ? <span class="built_in">this</span>.createNotFoundError() : Flux.fromIterable(<span class="built_in">this</span>.handlerMappings).concatMap((mapping) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> mapping.getHandler(exchange);<span class="comment">//根据请求地址获取对应mapping</span></span><br><span class="line">    &#125;).next().switchIfEmpty(<span class="built_in">this</span>.createNotFoundError()).flatMap((handler) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.invokeHandler(exchange, handler);<span class="comment">//调用具体的业务方法</span></span><br><span class="line">    &#125;).flatMap((result) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.handleResult(exchange, result);<span class="comment">//处理结果返回</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="核心API"><a class="header-anchor" href="#核心API"></a>核心API</h3>
<p>SpringWebflux里面DispatcherHandler类负责请求的处理，具体如下：</p>
<ul>
<li>HandlerMapping<br>
请求查询到处理的方法</li>
<li>HandlerAdapter<br>
真正负责请求处理</li>
<li>HandlerResultHandler<br>
响应结果处理</li>
</ul>
<p>SpringWebflux 实现函数式编程，两个接口：</p>
<ul>
<li>RouterFunction<br>
路由处理</li>
<li>HandlerFunction<br>
处理函数</li>
</ul>
<h2 id="SpringWebflux基于注解编程"><a class="header-anchor" href="#SpringWebflux基于注解编程"></a>SpringWebflux基于注解编程</h2>
<p>SpringWebflux 使用注解编程模型方式，和之前 SpringMVC 使用相似的，只需要把相关依赖配置到项目中，SpringBoot自动配置相关运行容器，默认情况下使用 Netty服务器。SpringMVC和SpringWebflux对比如下：</p>
<ul>
<li>SpringMVC 方式实现，同步阻塞的方式，基于SpringMVC+Servlet+Tomcat</li>
<li>SpringWebflux 方式实现，异步非阻塞 方式，基于SpringWebflux+Reactor+Netty</li>
</ul>
<p><strong>示例代码如下：</strong><br>
这是SpringBoot+Maven项目，需要引入依赖：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>项目结构图：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">│</span><br><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─com</span><br><span class="line">│  │  │      └─webflux</span><br><span class="line">│  │  │          └─demo</span><br><span class="line">│  │  │              │  WebfluxdemoApplication.java</span><br><span class="line">│  │  │              │</span><br><span class="line">│  │  │              ├─controller</span><br><span class="line">│  │  │              │      UserController.java</span><br><span class="line">│  │  │              │</span><br><span class="line">│  │  │              ├─entity</span><br><span class="line">│  │  │              │      User.java</span><br><span class="line">│  │  │              │</span><br><span class="line">│  │  │              └─service</span><br><span class="line">│  │  │                  │  UserService.java</span><br><span class="line">│  │  │                  │</span><br><span class="line">│  │  │                  └─impl</span><br><span class="line">│  │  │                          UserServiceImpl.java</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─resources</span><br><span class="line">│  │          application.properties</span><br></pre></td></tr></table></figure>
<p>User类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String gender, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserService接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//根据 id 查询用户</span></span><br><span class="line">    Mono&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//查询所有用户</span></span><br><span class="line">    Flux&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//添加用户</span></span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">saveUserInfo</span><span class="params">(Mono&lt;User&gt; user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserServiceImpl类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 map 集合存储数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer,User&gt; users = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.users.put(<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;lucy&quot;</span>,<span class="string">&quot;female&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        <span class="built_in">this</span>.users.put(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;mary&quot;</span>,<span class="string">&quot;female&quot;</span>,<span class="number">25</span>));</span><br><span class="line">        <span class="built_in">this</span>.users.put(<span class="number">3</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;male&quot;</span>,<span class="number">30</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 id 查询</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.justOrEmpty(<span class="built_in">this</span>.users.get(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询多个用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Flux.fromIterable(<span class="built_in">this</span>.users.values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">saveUserInfo</span><span class="params">(Mono&lt;User&gt; userMono)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMono.doOnNext(person -&gt; &#123;</span><br><span class="line">            <span class="comment">//向 map 集合里面放值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> users.size()+<span class="number">1</span>;</span><br><span class="line">            users.put(id,person);</span><br><span class="line">        &#125;).thenEmpty(Mono.empty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserController类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//id 查询</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;User&gt; <span class="title function_">geetUserId</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getusers&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getAllUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/saveuser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        Mono&lt;User&gt; userMono = Mono.just(user);</span><br><span class="line">        <span class="keyword">return</span> userService.saveUserInfo(userMono);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>WebfluxdemoApplication类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebfluxdemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(WebfluxdemoApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>application.properties：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.port = <span class="number">8081</span></span><br></pre></td></tr></table></figure>
<p>运行结果：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/7ddb1232f1271520400c1b3fa8d42b1c.png" alt="在这里插入图片描述"></p>
<h2 id="SpringWebflux基于函数式编程"><a class="header-anchor" href="#SpringWebflux基于函数式编程"></a>SpringWebflux基于函数式编程</h2>
<p>在使用函数式编程模型操作时候，需要自己初始化服务器。基于函数式编程模型时候，有两个核心接口：RouterFunction（实现路由功能，请求转发给对应的 handler）和 HandlerFunction（处理请求生成响应的函数）。核心任务定义两个函数式接口的实现并且启动需要的服务器。SpringWebflux 请 求 和 响 应 不 再 是 ServletRequest和ServletResponse ，而是ServerRequest 和 ServerResponse。</p>
<h3 id="具体步骤"><a class="header-anchor" href="#具体步骤"></a>具体步骤</h3>
<ul>
<li>创建Handler(在这里写具体实现方法)</li>
<li>创建Router路由，并初始化服务器做适配
<ul>
<li>创建Router路由</li>
<li>创建服务器做适配</li>
<li>最终调用方法(main)编写</li>
</ul>
</li>
</ul>
<h3 id="示例代码-v2"><a class="header-anchor" href="#示例代码-v2"></a>示例代码</h3>
<p>项目结构图：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─com</span><br><span class="line">│  │  │      └─webflux</span><br><span class="line">│  │  │          └─demo</span><br><span class="line">│  │  │              │  Server.java</span><br><span class="line">│  │  │              │</span><br><span class="line">│  │  │              ├─entity</span><br><span class="line">│  │  │              │      User.java</span><br><span class="line">│  │  │              │</span><br><span class="line">│  │  │              ├─handler</span><br><span class="line">│  │  │              │      UserHandler.java</span><br><span class="line">│  │  │              │</span><br><span class="line">│  │  │              └─service</span><br><span class="line">│  │  │                  │  UserService.java</span><br><span class="line">│  │  │                  │</span><br><span class="line">│  │  │                  └─impl</span><br><span class="line">│  │  │                          UserServiceImpl.java</span><br></pre></td></tr></table></figure>
<p><strong>entity和service代码不变，与基于注解的代码一样</strong></p>
<p>UserHandler类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserHandler</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 id 查询</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">getUserById</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">//获取 id 值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> Integer.valueOf(request.pathVariable(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        <span class="comment">//空值处理</span></span><br><span class="line">        Mono&lt;ServerResponse&gt; notFound = ServerResponse.notFound().build();</span><br><span class="line">        <span class="comment">//调用 service 方法得到数据</span></span><br><span class="line">        Mono&lt;User&gt; userMono = <span class="built_in">this</span>.userService.getUserById(userId);</span><br><span class="line">        <span class="comment">//把 userMono 进行转换返回</span></span><br><span class="line">        <span class="comment">//使用 Reactor 操作符 flatMap</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">                userMono.flatMap(person -&gt; ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(fromObject(person)))</span><br><span class="line">                        .switchIfEmpty(notFound);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">getAllUsers</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">//调用 service 得到结果</span></span><br><span class="line">        Flux&lt;User&gt; users = <span class="built_in">this</span>.userService.getAllUser();</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">                ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(users, User.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">saveUser</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">//得到 user 对象</span></span><br><span class="line">        Mono&lt;User&gt; userMono = request.bodyToMono(User.class);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">                ServerResponse.ok().build(<span class="built_in">this</span>.userService.saveUserInfo(userMono));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Server类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1 创建 Router 路由</span></span><br><span class="line">    <span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">routingFunction</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建 hanler 对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        <span class="type">UserHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserHandler</span>(userService);</span><br><span class="line">        <span class="comment">//设置路由</span></span><br><span class="line">        <span class="keyword">return</span> RouterFunctions.route(GET(<span class="string">&quot;/users/&#123;id&#125;&quot;</span>).and(accept(APPLICATION_JSON)),handler::getUserById)</span><br><span class="line">                              .andRoute(GET(<span class="string">&quot;/getallusers&quot;</span>).and(accept(APPLICATION_JSON)),handler::getAllUsers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 创建服务器完成适配</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createReactorServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//路由和 handler 适配</span></span><br><span class="line">        RouterFunction&lt;ServerResponse&gt; route = routingFunction();</span><br><span class="line">        <span class="type">HttpHandler</span> <span class="variable">httpHandler</span> <span class="operator">=</span> toHttpHandler(route);</span><br><span class="line">        <span class="type">ReactorHttpHandlerAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ReactorHttpHandlerAdapter</span>(httpHandler);</span><br><span class="line">        <span class="comment">//创建服务器</span></span><br><span class="line">        <span class="type">HttpServer</span> <span class="variable">httpServer</span> <span class="operator">=</span> HttpServer.create();</span><br><span class="line">        httpServer.handle(adapter).bindNow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3 最终调用方法(main)编写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line">        server.createReactorServer();</span><br><span class="line">        System.out.println(<span class="string">&quot;enter to exit&quot;</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行main方法后效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">05</span>:<span class="number">18.184</span> [main] DEBUG io.netty.buffer.ByteBufUtil - -Dio.netty.allocator.type: pooled</span><br><span class="line"><span class="number">16</span>:<span class="number">05</span>:<span class="number">18.184</span> [main] DEBUG io.netty.buffer.ByteBufUtil - -Dio.netty.threadLocalDirectBufferSize: <span class="number">0</span></span><br><span class="line"><span class="number">16</span>:<span class="number">05</span>:<span class="number">18.184</span> [main] DEBUG io.netty.buffer.ByteBufUtil - -Dio.netty.maxThreadLocalCharBufferSize: <span class="number">16384</span></span><br><span class="line"><span class="number">16</span>:<span class="number">05</span>:<span class="number">18.204</span> [reactor-http-nio-<span class="number">1</span>] DEBUG reactor.netty.tcp.TcpServer - [id: <span class="number">0x16e3bd47</span>, L:/<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">51646</span>] Bound <span class="keyword">new</span> <span class="title class_">server</span></span><br><span class="line">enter to exit</span><br></pre></td></tr></table></figure>
<p><strong>运行成功会有一个端口，比如我这里是51646</strong>,然后在浏览器中用这个端口请求就可以了。如下所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/caa5762a2c26bd25b7c0c4c8ea6440de.png" alt="在这里插入图片描述"><br>
如有错误，欢迎指正!</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习(三)：IOC容器详解</title>
    <url>/2021/04/29/spring_three/</url>
    <content><![CDATA[<p>@[toc]</p>
<h2 id="什么是IOC"><a class="header-anchor" href="#什么是IOC"></a>什么是IOC</h2>
<p>Inversion of Control的缩写，中文译为控制反转，简单来说就是把对象创建和对象之间的调用过程，交给 Spring 进行管理。<br>
创建对象实例的控制权从代码控制剥离到IOC容器控制，实际就是你在xml文件控制，<strong>侧重于原理</strong></p>
<h2 id="IOC的作用"><a class="header-anchor" href="#IOC的作用"></a>IOC的作用</h2>
<ul>
<li><strong>DI依赖注入</strong><br>
Spring的DI实现了面向接口编程的核心思想，符合依赖倒置的原则。开发者只需要关注接口，而无需关注具体实现，<strong>降低了耦合度，代码复用性高，可拓展性强</strong></li>
<li><strong>统一管理bean的生命周期</strong></li>
</ul>
<span id="more"></span>
<h2 id="底层原理"><a class="header-anchor" href="#底层原理"></a>底层原理</h2>
<ul>
<li>XML解析<br>
使用dom4j解析</li>
<li>工厂模式</li>
<li>反射创建类对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz=Class.forName(classValue);</span><br><span class="line">UserService service=clazz.newInstance();</span><br><span class="line"><span class="keyword">return</span> service;</span><br></pre></td></tr></table></figure>
<h2 id="XML注入实现IOC"><a class="header-anchor" href="#XML注入实现IOC"></a>XML注入实现IOC</h2>
<h3 id="注入常规类型属性"><a class="header-anchor" href="#注入常规类型属性"></a>注入常规类型属性</h3>
<h4 id="set方法注入"><a class="header-anchor" href="#set方法注入"></a>set方法注入</h4>
<ul>
<li>第一步 在类中定义属性和对应的 set 方法</li>
<li>第二步 在XML文件中添加property标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置User对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring5.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--name的值对应于javaBean中的属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="有参构造注入"><a class="header-anchor" href="#有参构造注入"></a>有参构造注入</h4>
<ul>
<li>第一步 在类中定义有参构造方法</li>
<li>第二步 在XML文件中添加constructor-arg标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置User对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring5.User&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--name的值对应于javaBean中的属性值--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="P空间注入-了解"><a class="header-anchor" href="#P空间注入-了解"></a>P空间注入(了解)</h4>
<ul>
<li>第一步 在类中定义属性和对应的 <strong>set 方法</strong></li>
<li>第二步 修改XML文件<br>
在beans中添加<strong>xmlns:p</strong>属性；在bean中添加p:name属性</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置User对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring5.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="注入特殊类型属性"><a class="header-anchor" href="#注入特殊类型属性"></a>注入特殊类型属性</h3>
<h4 id="空值"><a class="header-anchor" href="#空值"></a>空值</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="特殊符号"><a class="header-anchor" href="#特殊符号"></a>特殊符号</h4>
<ul>
<li>
<p>方法一 把&lt;&gt;进行转义</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;&amp;lt;&amp;lt;王五&amp;gt;&amp;gt;&quot;</span>&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>把带特殊符号内容写到 CDATA</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;王五&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="外部Bean"><a class="header-anchor" href="#外部Bean"></a>外部Bean</h4>
<p>现有类UserService、接口UserDao、类UserDaoImpl，其中UserDaoImpl实现了接口UserDao。代码结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">   │  bean.xml</span><br><span class="line">   │</span><br><span class="line">   └─com</span><br><span class="line">       └─spring5</span><br><span class="line">           │  Test.java </span><br><span class="line">           │</span><br><span class="line">           ├─dao</span><br><span class="line">           │      UserDao.java</span><br><span class="line">           │      UserDaoImpl.java</span><br><span class="line">           │</span><br><span class="line">           └─service</span><br><span class="line">                   UserService.java</span><br></pre></td></tr></table></figure>
<p>如果类UserService要调用类UserDaoImpl的方法，传统做法是创建UserDao对象然后调用其方法，这种做法耦合太高。用spring注入的步骤如下：</p>
<ul>
<li>在UserService中创建属性UserDao，并写好set方法</li>
<li>在XML中配置UserService和UserDao对象</li>
<li>通过property标签注入UserDao对象</li>
</ul>
<p>示例代码如下：<br>
接口UserDao:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类UserDaoImpl：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am dao update...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类UserService：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am service add...&quot;</span>);</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bean.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    name属性：类里面的属性名称</span></span><br><span class="line"><span class="comment">            ref属性：bean标签id值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring5.service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="内部Bean和级联配置"><a class="header-anchor" href="#内部Bean和级联配置"></a>内部Bean和级联配置</h4>
<p>简单来说就是bean标签里面嵌套bean标签。在员工和部门，一个部门有多个员工，一个员工属于一个部门。示例代码如下：<br>
Dept类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String  dname;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDname</span><span class="params">(String dname)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>. dname = dname;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Emp类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String  ename;</span><br><span class="line">	<span class="keyword">private</span> String  gender;</span><br><span class="line">	<span class="comment">//员工属于某一个部门，使用对象形式表示</span></span><br><span class="line">	<span class="keyword">private</span> Dept  dept;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>. dept = dept;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEname</span><span class="params">(String ename)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>. ename = ename;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>. gender = gender;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="内部Bean配置"><a class="header-anchor" href="#内部Bean配置"></a>内部Bean配置</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--内部 bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>= <span class="string">&quot;emp&quot;</span>  <span class="attr">class</span>= <span class="string">&quot;com.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>= <span class="string">&quot;ename&quot;</span>  <span class="attr">value</span>= <span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>= <span class="string">&quot;gender&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--设置对象类型属性--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>= <span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>= <span class="string">&quot;dept&quot;</span>  <span class="attr">class</span>= <span class="string">&quot;com.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>= <span class="string">&quot;dname&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;技术部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="级联配置"><a class="header-anchor" href="#级联配置"></a>级联配置</h5>
<p>Emp类需要生成getDep的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Dept <span class="title function_">getDept</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>XML文件中dept.dname获取属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>= <span class="string">&quot;emp&quot;</span>  <span class="attr">class</span>= <span class="string">&quot;com.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>= <span class="string">&quot;ename&quot;</span>  <span class="attr">value</span>= <span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>= <span class="string">&quot;gender&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>= <span class="string">&quot;dept.dname&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;商务部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="注入集合属性"><a class="header-anchor" href="#注入集合属性"></a>注入集合属性</h3>
<h4 id="普通注入"><a class="header-anchor" href="#普通注入"></a>普通注入</h4>
<p>新建类User，包含集合属性和相关set方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[]  arrs;<span class="comment">// 数组</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;<span class="comment">// list</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;<span class="comment">// map</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;<span class="comment">// set</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArrs</span><span class="params">(String[] arrs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arrs = arrs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSets</span><span class="params">(Set&lt;String&gt; sets)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sets = sets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>XML配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>= <span class="string">&quot;user&quot;</span>  <span class="attr">class</span>= <span class="string">&quot;com.spring5.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>= <span class="string">&quot;arrs&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>mySQL课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--list 类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>= <span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--map 类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>= <span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>  <span class="attr">key</span>= <span class="string">&quot;JAVA&quot;</span>  <span class="attr">value</span>= <span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>  <span class="attr">key</span>= <span class="string">&quot;PHP&quot;</span>  <span class="attr">value</span>= <span class="string">&quot;php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set 类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>= <span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Oracle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Oracle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="注入对象集合"><a class="header-anchor" href="#注入对象集合"></a>注入对象集合</h4>
<p>Dept类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="comment">//部门有多个员工</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Emp&gt; empList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmpList</span><span class="params">(List&lt;Emp&gt; empList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.empList = empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Emp类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String eName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seteName</span><span class="params">(String eName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eName = eName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>XML配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>= <span class="string">&quot;dept&quot;</span>  <span class="attr">class</span>= <span class="string">&quot;com.spring5.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入 list集合类型，值是对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;empList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;emp1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;emp2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;emp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring5.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;eName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring5.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;eName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring5.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;eName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王五&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="自动装配"><a class="header-anchor" href="#自动装配"></a>自动装配</h3>
<p>Spring可以根据属性名称或者类型进行自动装配，<strong>使用byType时相同类型的Bean不能配置多个</strong>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>= <span class="string">&quot;emp&quot;</span>  <span class="attr">class</span>= <span class="string">&quot;com.spring5.autowire.Emp&quot;</span>  <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>= <span class="string">&quot;dept&quot;</span>  <span class="attr">class</span>= <span class="string">&quot;com.spring5.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="外部属性文件"><a class="header-anchor" href="#外部属性文件"></a>外部属性文件</h3>
<p>一、创建外部属性文件jdbc.properties,填写数据库信息,key随便写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">prop.driverClass=com.mysql.jdbc.Driver</span><br><span class="line">prop.url=jdbc:mysql:<span class="comment">//localhost:3306/userDb</span></span><br><span class="line">prop.userName=root</span><br><span class="line">prop.password=root</span><br></pre></td></tr></table></figure>
<p>二、把外部 properties 属性文件引入到 spring 配置文件中</p>
<ul>
<li>
<p>引入 context 名称空间<br>
xmlns:context=“http://www.springframework.org/schema/context”<br>
http://www.springframework.org/schema/context<br>
http://www.springframework.org/schema/context/spring- - context.xsd&quot;</p>
</li>
<li>
<p>在 spring 配置文件使用标签引入外部属性文件</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入外部属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="工厂Bean"><a class="header-anchor" href="#工厂Bean"></a>工厂Bean</h2>
<p>Spring  有两种类型:普通 bean和工厂bean(FactoryBean)。普通 bean在配置文件中定义的bean类型和返回类型一样，而<strong>工厂bean在配置文件定义 bean类型可以和返回类型不一样</strong>。实现工厂Bean的步骤如下：</p>
<ul>
<li>第一步 创建类，让这个类作为工厂 bean，实现FactoryBean接口</li>
<li>第二步 重写接口里面的方法，在方法中定义返回的bean类型</li>
</ul>
<p>示例代码如下：<br>
MyBean和User类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;User&gt; <span class="title function_">getObjectType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am test...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bean.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring5.MyBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Test类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1 加载 spring 配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2 获取配置创建的对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;myBean&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br>
com.spring5.User@42d8062c<br>
I am test…</p>
<h2 id="Bean的作用域"><a class="header-anchor" href="#Bean的作用域"></a>Bean的作用域</h2>
<table>
<thead>
<tr>
<th style="text-align:center">作用域</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">单例(singleton)</td>
<td style="text-align:center">默认）每一个Spring IoC容器都拥有唯一的一个实例对象</td>
</tr>
<tr>
<td style="text-align:center">原型（prototype）</td>
<td style="text-align:center">一个Bean定义，任意多个对象</td>
</tr>
<tr>
<td style="text-align:center">请求（request）</td>
<td style="text-align:center">一个HTTP请求会产生一个Bean对象，也就是说，每一个HTTP请求都有自己的Bean实例。只在基于web的Spring ApplicationContext中可用</td>
</tr>
<tr>
<td style="text-align:center">会话（session）</td>
<td style="text-align:center">限定一个Bean的作用域为HTTPsession的生命周期。同样，只有基于web的Spring ApplicationContext才能使用</td>
</tr>
<tr>
<td style="text-align:center">全局会话（global session）</td>
<td style="text-align:center">限定一个Bean的作用域为全局HTTPSession的生命周期。通常用于门户网站场景，同样，只有基于web的Spring ApplicationContext可用</td>
</tr>
</tbody>
</table>
<h2 id="Bean的生命周期"><a class="header-anchor" href="#Bean的生命周期"></a>Bean的生命周期</h2>
<ul>
<li>
<p>第一步，执行无参构造创建Bean实例</p>
</li>
<li>
<p>第二步，调用类的set方法设置属性值</p>
</li>
<li>
<p>第三步，调用预初始化方法postProcessBeforeInitialzation()<br>
需要有Bean实现了BeanPostProcessor接口</p>
</li>
<li>
<p>第四步，调用bean的初始化的方法<br>
需要在XML的bean属性中进行配置</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">init-method=<span class="string">&quot;初始化调用方法名&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>第五步，调用后初始化方法postProcessAfterInitialization()<br>
需要有Bean实现了BeanPostProcessor接口</p>
</li>
<li>
<p>第六步，对象获取到了，bean可以使用了</p>
</li>
<li>
<p>第七步，当容器关闭时调用bean的销毁的方法<br>
需要在XML的bean属性中进行配置</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">destroy-method=<span class="string">&quot;销毁调用方法名&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>实例代码如下：<br>
User类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步 执行无参构造创建Bean实例&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步 调用set方法设置属性值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步 调用bean的初始化的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第七步 当容器关闭时调用bean的销毁的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am test...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MyBeanPost类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPost</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步，调用预初始化方法postProcessBeforeInitialzation()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第五步，调用后初始化方法postProcessAfterInitialization()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Test类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1 加载 spring 配置文件</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2 获取配置创建的对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;第六步 对象获取到了，bean可以使用了&quot;</span>);</span><br><span class="line">        user.test();</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bean.xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--配置User对象--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;user&quot;</span> class=<span class="string">&quot;com.spring5.User&quot;</span> init-method=<span class="string">&quot;initMethod&quot;</span> destroy-method=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span><br><span class="line">   &lt;!--name的值对应于javaBean中的属性值--&gt;</span><br><span class="line">   &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;小明&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;myBeanPost&quot;</span> class=<span class="string">&quot;com.spring5.MyBeanPost&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h2 id="注解方式实现IOC"><a class="header-anchor" href="#注解方式实现IOC"></a>注解方式实现IOC</h2>
<h3 id="注解概述"><a class="header-anchor" href="#注解概述"></a>注解概述</h3>
<ul>
<li>注解是代码特殊标记<br>
语法：@注解名称(属性名称=属性值, 属性名称=属性值…)</li>
<li>怎么用注解<br>
注解可以用在类、方法和属性上面</li>
<li>使用注解目的<br>
简化 xml 配置</li>
</ul>
<h3 id="Spring针对-Bean管理中创建对象提供的注解"><a class="header-anchor" href="#Spring针对-Bean管理中创建对象提供的注解"></a>Spring针对 Bean管理中创建对象提供的注解</h3>
<ul>
<li>@Component</li>
<li>@Service</li>
<li>@Controller</li>
<li>@Repository<br>
<strong>上面四个注解功能是一样的，都可以用来创建 bean 实例，在服务层用@Service、在控制层用@Controller只是方便管理</strong>。</li>
</ul>
<h3 id="实现对象创建"><a class="header-anchor" href="#实现对象创建"></a>实现对象创建</h3>
<ul>
<li>第一步 引入依赖<br>
把spring-aop-5.2.6.RELEASE.jar包引入到IDEA中</li>
<li>​ 第二步 开启组件扫描<br>
需要引入context名称空间：xmlns:context=“http://www.springframework.org/schema/context”、http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启组件扫描</span></span><br><span class="line"><span class="comment"> 如果扫描多个包可以用下面两种方式实现：</span></span><br><span class="line"><span class="comment"> 1 多个包使用逗号隔开</span></span><br><span class="line"><span class="comment"> 2 扫描包上层目录</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.spring5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第三步 创建类，在类上面添加注解<br>
<strong>注解中的value值可以省略，默认值是类名首字母小写</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am UserService add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="扫描细节配置"><a class="header-anchor" href="#扫描细节配置"></a>扫描细节配置</h3>
<ul>
<li>不加use-default-filters=&quot;false&quot;表示会扫描包下面的所有注解</li>
<li>context:include-filter 配置扫描哪些内容</li>
<li>context:exclude-filter配置不扫描哪些内容</li>
</ul>
<p>示例一</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描包com.spring5下面@Controller注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.spring5&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>示例二</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描包com.spring5下面除了@Controller以外的所有注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.spring5&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">        	<span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="实现属性注入"><a class="header-anchor" href="#实现属性注入"></a>实现属性注入</h3>
<p>@Autowired、@Qualifier和@Resource用于&quot;对象&quot;属性，@Value用于普通属性。</p>
<h4 id="Autowired"><a class="header-anchor" href="#Autowired"></a>@Autowired</h4>
<p>现有类UserService、接口UserDao、类UserDaoImpl，其中UserDaoImpl实现了接口UserDao。代码结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">   │  bean.xml</span><br><span class="line">   │</span><br><span class="line">   └─com</span><br><span class="line">       └─spring5</span><br><span class="line">           │  Test.java </span><br><span class="line">           │</span><br><span class="line">           ├─dao</span><br><span class="line">           │      UserDao.java</span><br><span class="line">           │      UserDaoImpl.java</span><br><span class="line">           │</span><br><span class="line">           └─service</span><br><span class="line">                   UserService.java</span><br></pre></td></tr></table></figure>
<p>如果类UserService要调用类UserDaoImpl的方法，用spring注解实现的步骤如下：</p>
<ul>
<li>在 UserService和 UserDaoImpl类添加创建对象注解</li>
<li>在 UserService类添加UserDao类型属性，并在属性上面使用注解</li>
</ul>
<p>示例代码如下：<br>
接口UserDao:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类UserDaoImpl：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(value = &quot;userDaoImpl&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am dao update...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类UserService：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(value = &quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am UserService add...&quot;</span>);</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bean.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.spring5&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Qualifier"><a class="header-anchor" href="#Qualifier"></a>@Qualifier</h4>
<p>@Qualifier注解是根据名称进行注入。如果接口有很多实现类用@Autowired就不行，和@Qualifier一起使用就可以解决。使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;userDaoImpl2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure>
<h4 id="Resource"><a class="header-anchor" href="#Resource"></a>@Resource</h4>
<p>@Resource是<strong>javax.annotation.Resource包</strong>中的注解，既可以根据名称注入又可以根据类型注入。<br>
示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据类型注入</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据名称注入</span></span><br><span class="line"><span class="meta">@Resource(name = &quot;userDaoImpl&quot;)</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure>
<h4 id="Value"><a class="header-anchor" href="#Value"></a>@Value</h4>
<p>@Value用于普通属性。</p>
<h5 id="注入普通属性"><a class="header-anchor" href="#注入普通属性"></a>注入普通属性</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;张三丰&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>
<h5 id="注入List"><a class="header-anchor" href="#注入List"></a>注入List</h5>
<p>步骤如下：</p>
<ul>
<li>在src下简历属性文件application.properties</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">my.names=zhangsan,lisi,wangwu,zhaoli</span><br></pre></td></tr></table></figure>
<ul>
<li>在类UserService中添加@PropertySource和@Value注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(value = &quot;userService&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(value=&quot;classpath:application.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;userDaoImpl&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;&#x27;$&#123;my.names&#125;&#x27;.split(&#x27;,&#x27;)&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; names;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am UserService add...&quot;</span>);</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://memorynotfound.com/loading-list-from-properties-file-with-spring-value/">参考链接</a></p>
<h3 id="完全注解开发"><a class="header-anchor" href="#完全注解开发"></a>完全注解开发</h3>
<ul>
<li>创建配置类，替代 xml 配置文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.spring5&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>编写测试类<br>
用AnnotationConfigApplicationContext加载spring的java配置文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1 加载spring的java配置文件</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="comment">//2 获取创建的对象</span></span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>《闲话中国人》读书笔记</title>
    <url>/2021/02/23/talking_about_chinese/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/e5fe802aa48219df008db083ae0135f3.jpeg" alt="在这里插入图片描述"><br>
书名：闲话中国人<br>
作者：易中天<br>
读完时间：2020年12月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<h3 id="引言"><a class="header-anchor" href="#引言"></a>引言</h3>
<p>英国人有绅士风度，日本人脾气不好，美国人幽默且有礼貌</p>
<blockquote>
<p>这个英国人一声不响站起身来，掏出钱放在咖啡杯下，扬长而去。第二个是日本人。日本人拍案而起，把领班臭骂了一通，并扬言要教会他们如何管理企业。第三个是美国人。美国人舒舒服服地靠在椅子上，手指一勾叫来女招待，笑眯眯地对她说：小姐，在我们美国，苍蝇是单独放在碟子里，和咖啡、伴侣、奶、糖一起送上来的，顾客自己放，想要多少就放多少。</p>
</blockquote>
<ul>
<li>
<p>比方说，中国人见面鞠躬作揖，是因为中国人的性格“内向”；西方人见面握手拥抱，则是因为西方人的性格“外向”。外向，所以伸出手去握别人的手；内向，所以伸出手握自己的手。这就正如中国人吃饭用筷子夹，是向内用力；西方人吃饭用叉子戳，是向外用力。一向外，一向内，故西方文化的象征物是十字架，中国文化的象征物是太极图，一个从一点出发向四面扩展，一个由两极构成在圈内互动。</p>
</li>
<li>
<p>中国文化的思想内核是群体意识，而西方文化的思想内核是个体意识。</p>
</li>
</ul>
<h3 id="民以食为天"><a class="header-anchor" href="#民以食为天"></a>民以食为天</h3>
<ul>
<li>
<p>中国文化是吃饭吃出来的，西方文化是做爱做出来的。</p>
</li>
<li>
<p>席位，就是每个人在餐厅里坐的位子。古人席地而坐，所以叫席位。席位其实也就是地位——席地而坐之位。所以席位要根据地位来安排。首脑人物、中心人物、显赫人物的席位设在正中，叫主席（主人或主宾之席）；其余参加者的席位，又依照一定的等级秩序，分列于两边，叫列席。什么人主席，什么人只能列席，都有一定之规。这些规矩，就叫“礼”。</p>
</li>
<li>
<p>所谓酒具，主要是尊与爵。尊是酒罐，爵是酒杯。酒会上，尊放在地位最高者面前，于是由“尊”（酒罐）而“尊”（尊贵）。至于爵，当然是人手一只。但爵有质地好坏之分，便用以区分贵贱。比如卿用玉爵，大夫用瑶爵，士和其他低级官吏用散爵。这样，爵与位就一致了，合称“爵位”，用以区分贵族的等级。</p>
</li>
<li>
<p>母子是“吃与被吃”（食）的关系，兄弟、乡亲则是“同吃”（共食）的关系。或者说，兄弟是吃同一个娘的奶长大的人，乡亲则是吃同一口井的水长大的人</p>
</li>
<li>
<p>敬酒的学问主要有三条：一是要注意先后次序，即尊者先，卑者次；二是在碰杯时，自己的杯子要低一点，以示谦虚；三是自己要先喝完，叫作先干为敬。</p>
</li>
<li>
<p>火锅热，表示“亲热”；火锅圆，表示“团圆”；火锅用汤水处理原料，表示“以柔克刚”；火锅不拒荤腥，不嫌寒素，用料不分南北，调味不拒东西，山珍、海味、河鲜、时菜、豆腐、粉条，来者不拒，一律均可入锅，表示“兼济天下”；火锅荤素杂糅，五味俱全，主料配料，味相渗透，又体现了一种中和之美。更重要的是，火锅能最为形象直观地体现“在同一口锅里吃饭”这样一层深刻的意义，可以说是不折不扣的“共食”。更何况，这种“共食”又绝不带任何强制性，每个人都可以任意选择自己喜爱的主料烫而食之，正可谓“既有统一意志又有个人心情舒畅”的那样一种生动活泼的局面。所以，北至东北，南到广州，西入川滇，东达江浙，几乎无不爱吃火锅。</p>
</li>
</ul>
<p>元谋人是直立人，现在的人类是智人，这句话有误。</p>
<blockquote>
<p>我们民族用火的历史相当悠久，早在一百七十万年以前就已开始（云南元谋人）</p>
</blockquote>
<ul>
<li>中国人喜欢请客吃饭，并不是中国人好吃，而是中国文化的思想内核——群体意识所使然。</li>
</ul>
<h3 id="文明与野蛮"><a class="header-anchor" href="#文明与野蛮"></a>文明与野蛮</h3>
<ul>
<li>
<p>其实，古代中国人的服饰，几乎无不具有道德的意义。比如冠就是贯，表示一以贯之、始终如一的意思；弁就是辩，表示辩明身份、明辨是非的意思；冕就是免（免是冕的本字），也就是勉（勉本写作免），表示勤勉国事，以德相勉的意思。又比如，衣就是依，表示依附；衽就是任，表示担任；襟就是禁，表示禁止；至于履，则表示履行职责、实践礼法，也表示脚踏实地、行得正站得直，等等。</p>
</li>
<li>
<p>内衣，古人叫“衷”。它不但最为贴身，而且简直就是着衣者本人及其内心世界的代表，因此才有无动于衷、言不由衷、衷心感谢、互诉衷肠、道出衷情等说法，都是以衷衣代中心，以贴身代贴心。</p>
</li>
</ul>
<h3 id="家为国之本"><a class="header-anchor" href="#家为国之本"></a>家为国之本</h3>
<ul>
<li>
<p>内外有别，亲疏有差，长幼有序，贵贱有等，就构成了中国古代伦理的全部基础。</p>
</li>
<li>
<p>以，“关进深屋的公猪”——“家”，也就成了防止乱伦的符号和象征。</p>
</li>
</ul>
<h3 id="无爱的婚姻"><a class="header-anchor" href="#无爱的婚姻"></a>无爱的婚姻</h3>
<ul>
<li>
<p>纳妾是婚内还是婚外？不好说。妾不同于妓。妓“人尽可夫”，妾“专事一人”；妓之子为“私生”，妾之子为“婚生”。如此，则妾在婚内。但妻家与夫家是亲家，纳妾则并无“合二姓之好”的婚姻关系。如此，妾又在婚外。总之，妻在婚内，妓在婚外，妾介乎二者之间，算是半婚内半婚外吧！</p>
</li>
<li>
<p>事实上，大家心里都很清楚：大家族的时代已成为历史，“三代同堂”或“四世同堂”的家庭，不但不现实，而且也未必很好。当代社会老人们与子女之间最理想的家庭方式是：同在一地，相距不远，平时单过，节假日相聚，招之即来，挥之即去。</p>
</li>
</ul>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p>看了易中天老师的几本书，发现他几乎每章甚至每一小节都会用承上启下、铺垫等写作技巧，不知觉地吸引你读下去，着实厉害👍</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《人体简史》读书笔记</title>
    <url>/2021/01/10/the_body/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/3ebcfaeb0728cbcc62a34328b0b3c53b.jpeg" width="460px" align="center"></img></p>
<p>书名：人体简史<br>
英文名: <em>The Body: A Guide for Occupants</em><br>
作者：[英] 比尔·布莱森<br>
译者: 闾佳<br>
读完时间：2020年11月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<h3 id="第一章-制造一个人要花多少钱"><a class="header-anchor" href="#第一章-制造一个人要花多少钱"></a>第一章 制造一个人要花多少钱</h3>
<ul>
<li>但在遗传上实际又是相同的。所有人类共享99.9％的DNA，但没有哪两个人一模一样。我的DNA和你的DNA有着300万~400万个不同之处，只占总数的极小比例，但它们足以让我们产生巨大的差异。你体内还有着一百来个只属于你的个人基因突变——也就是说，这些基因跟你双亲赋予你的基因无一相符，而是专属于你自己。</li>
</ul>
<h3 id="第二章-皮肤：人体最大的器官"><a class="header-anchor" href="#第二章-皮肤：人体最大的器官"></a>第二章 皮肤：人体最大的器官</h3>
<ul>
<li>美丽只是肤浅表面，丑陋却深入骨髓。</li>
<li>皮肤由内外两层组成，内层叫真皮，外层叫表皮。表皮的最外面，称为角质层，完全由死细胞组成。想到让你变得这么可爱的所有东西其实都是些死物，不免有些惊悚。</li>
<li>无论我们属于什么种族，所有人都拥有相同数量的黑色素细胞，只不过，不同人种生成的黑色素多少有着不同。</li>
<li>头部毛发在寒冷的天气下是良好的绝缘体，在炎热的天气下是出色的热反射器。</li>
</ul>
<h3 id="第三章-微生物：你和地球都是属于微生物的"><a class="header-anchor" href="#第三章-微生物：你和地球都是属于微生物的"></a>第三章 微生物：你和地球都是属于微生物的</h3>
<ul>
<li>从基因上看，你体内大约有2万种你自己的基因，但兴许还有多达2000万种细菌基因，故此，从这个角度来看，你大约有99%是细菌，不到1%的“你”。</li>
<li>根据病毒学家多萝西·克劳福德（Dorothy H. Crawford）的说法，光是海洋病毒，如果将它们挨个摆放在一起，其长度将绵延1000万光年，这是一个基本无法想象的距离。</li>
</ul>
<h3 id="第四章-大脑：你的大脑80-都是水"><a class="header-anchor" href="#第四章-大脑：你的大脑80-都是水"></a>第四章 大脑：你的大脑80%都是水</h3>
<ul>
<li>总的来说，人类大脑可以容纳200艾字节（exabytes）的信息，大致相当于“当今世界的所有数字内容”。如果这还不是宇宙中最非同凡响的东西，那就肯定是还有人类没发现的奇迹。</li>
<li>人只使用了大脑10％的说法纯属传说。没有人知道这个说法来自何处，它从来不是真的，甚至可以说相去甚远。你兴许未能十分明智合理地使用大脑，但多多少少你在使用自己的整个大脑。</li>
</ul>
<h3 id="第六章-嘴：人是最容易被噎死的动物"><a class="header-anchor" href="#第六章-嘴：人是最容易被噎死的动物"></a>第六章 嘴：人是最容易被噎死的动物</h3>
<ul>
<li>吞咽的时候，食物并不是因为重力而落入胃部的，而是被肌肉的压缩挤下去的。这就是为什么哪怕你头朝下，也能吃吃喝喝。</li>
</ul>
<h3 id="第七章-心脏和血液：你分不分手和心脏可没有半点关系"><a class="header-anchor" href="#第七章-心脏和血液：你分不分手和心脏可没有半点关系"></a>第七章 心脏和血液：你分不分手和心脏可没有半点关系</h3>
<ul>
<li>据计算（天知道是怎么算的），人一生中，心脏所完成的工作量，足以将重达1吨的物体往高空抬升240千米。这真的是令人叹为观止的执行力。</li>
<li>在美国，血浆销售占所有商品出口量的1.6％，比美国从卖飞机中赚的钱还要多。</li>
</ul>
<h3 id="第八章-化学部门：三个月还你一个新的肝"><a class="header-anchor" href="#第八章-化学部门：三个月还你一个新的肝"></a>第八章 化学部门：三个月还你一个新的肝</h3>
<ul>
<li>在亨利八世的统治时期，人们到了十六七岁才进入青春期。如今更常见的是11岁。几乎可以肯定这是因为营养得到了改善。</li>
<li>从40多岁开始，男性的睾酮水平每年下降约1％，这使得许多人服用补剂，以期提高性欲和精力水平。</li>
</ul>
<h3 id="第九章-解剖和骨骼：三块肌肉造就人类文明"><a class="header-anchor" href="#第九章-解剖和骨骼：三块肌肉造就人类文明"></a>第九章 解剖和骨骼：三块肌肉造就人类文明</h3>
<ul>
<li>我们的拇指里有3块名字精彩的小肌肉，不见于其他任何动物（黑猩猩也不例外）：短伸肌、长屈肌和亨利掌侧骨间肌。它们协同工作，让你得以牢靠又灵敏地抓握和操作工具。你可能从未听说过它们，但这3块小肌肉是人类文明的核心。没有了它们，我们最大的集体成就兴许就只不过是用棍子把蚂蚁从巢穴里赶出来。</li>
<li>从中年后期开始，我们骨骼密度以每年约1％的速度减少，这就是为什么老年人和骨折几乎成了一对不幸的同义词。臀部骨折对老年人来说尤其麻烦。75岁以上臀部骨折的患者，40%丧失了自我照料的能力。</li>
</ul>
<h3 id="第十章-直立行走与锻炼：为什么只有人选择了直立行走"><a class="header-anchor" href="#第十章-直立行走与锻炼：为什么只有人选择了直立行走"></a>第十章 直立行走与锻炼：为什么只有人选择了直立行走</h3>
<ul>
<li>任何一种猿猴，经过训练也无法像人一样行走。骨骼结构逼得它们蹒跚而行，而且效率极为低下。要在地面上像人类那样行动，黑猩猩使用的能量比人类多四倍。</li>
<li>最重要的是，为了适应新的步态，我们采用了更狭窄的骨盆，为分娩的妇女带来了巨大的疼痛和风险。</li>
<li>人类社会进入近现代之前，地球上没有任何其他动物在分娩时死亡的概率比人类更高，甚至直到现在，也没有其他任何动物在生育时要承受那么大的痛苦。</li>
</ul>
<h3 id="第十一章-体内平衡：发烧是你的身体在自救"><a class="header-anchor" href="#第十一章-体内平衡：发烧是你的身体在自救"></a>第十一章 体内平衡：发烧是你的身体在自救</h3>
<ul>
<li>体温仅升高1℃左右，病毒的复制速度就会降低至此前的1/200——体温小幅上升，人对抗病毒的自卫能力就有了惊人的提高。</li>
<li>如果只要把体温升高1℃~2℃，就能极大地帮助身体抵御入侵的微生物，那为什么不永久性地升高体温呢？答案是它太贵了。只把体温提高2℃，我们对能量的需求就将上升20%。我们现在的问题，是效用和成本之间的理性权衡，在大多数情况下，哪怕是正常体温，也能不错地抵挡微生物了。</li>
</ul>
<h3 id="第十四章-食物：熟食给了人类更大的大脑和更多的时间"><a class="header-anchor" href="#第十四章-食物：熟食给了人类更大的大脑和更多的时间"></a>第十四章 食物：熟食给了人类更大的大脑和更多的时间</h3>
<ul>
<li>饮食中几乎所有的碳水化合物都来自植物，只有一种明显例外：乳糖，它来自牛奶。</li>
<li>喝太多水其实有害无利。正常来说，你的身体能很好地维持体液平衡，但有时人们会摄入太多的水，而肾脏无法足够快地排掉水分，最终便错误地稀释了血液中的钠含量，引发低钠血症。</li>
<li>我们处在历史上一个非常特殊的位置，受肥胖折磨的人远多于挨饿的人。老实说，要长胖实在不必费工夫。如果没有附加任何锻炼，每个星期吃一块巧克力饼干，一年就会增加两三斤体重。</li>
<li>许多水果和蔬菜的营养价值甚至比不上几十年前。</li>
<li>现代农业实践着眼于高产量和长得快，牺牲了品质。</li>
</ul>
<h3 id="第十六章-睡眠：为什么你睡觉不会从床上掉下来？"><a class="header-anchor" href="#第十六章-睡眠：为什么你睡觉不会从床上掉下来？"></a>第十六章 睡眠：为什么你睡觉不会从床上掉下来？</h3>
<ul>
<li>大多数男性在REM睡眠期会勃起。类似地，女性生殖器的血流量也会增加。没有人知道为什么，但它似乎与情爱冲动没有明显的联系。一般来说，男性每晚勃起2小时左右。</li>
</ul>
<h3 id="第十七章-进入不可描述地带：Y染色体将在460万年后消失"><a class="header-anchor" href="#第十七章-进入不可描述地带：Y染色体将在460万年后消失"></a>第十七章 进入不可描述地带：Y染色体将在460万年后消失</h3>
<ul>
<li>有趣的是，性别其实并非必需。相当多的生物体已经放弃了它。在热带地区，人们常常会看到壁虎像真空粘钩般贴在墙上，这种绿色的小蜥蜴就彻底抛弃了雄性。</li>
</ul>
<h3 id="第十八章-怀孕与生育：人的分娩是最大的设计失误"><a class="header-anchor" href="#第十八章-怀孕与生育：人的分娩是最大的设计失误"></a>第十八章 怀孕与生育：人的分娩是最大的设计失误</h3>
<ul>
<li>35岁的女性已耗尽了自己95%的卵子库存，而剩下的卵子，更容易产生故障或意外（如多胞胎等）。一旦女性过了30岁，生双胞胎的概率就更大。</li>
<li>已经生过双胞胎的妇女生第二胎仍是双胞胎的概率，是没有生过双胞胎妇女的10倍。</li>
<li>看起来，我们不光因为吃，把自己早早送进了坟墓，还养育了一代跟着我们一起跳入坟墓的孩子。</li>
</ul>
<h3 id="第二十一章-癌症：你每天都有5次得癌症的机会"><a class="header-anchor" href="#第二十一章-癌症：你每天都有5次得癌症的机会"></a>第二十一章 癌症：你每天都有5次得癌症的机会</h3>
<ul>
<li>60岁以上的男性中有一半、70岁以上的男性中有3/4的人死前从来不知道自己患有前列腺癌。事实上，研究表明，如果所有男性都活得足够长，全都会得前列腺癌。</li>
</ul>
<h3 id="第二十二章-医疗：“过度治疗”才是健康的最大杀手"><a class="header-anchor" href="#第二十二章-医疗：“过度治疗”才是健康的最大杀手"></a>第二十二章 医疗：“过度治疗”才是健康的最大杀手</h3>
<ul>
<li>如果你人届中年，特别富裕，来自几乎任何高收入国家，那么，你差不多准能活到80多岁。一个其他方面跟你完全一样只是比你穷的人（跟你锻炼一样多，睡得一样多，饮食跟你同样健康，只是银行存款比你少），可能比你早死10~15年。</li>
</ul>
<h3 id="第二十三章-衰老和死亡：选择生活方式，就是选择死亡方式"><a class="header-anchor" href="#第二十三章-衰老和死亡：选择生活方式，就是选择死亡方式"></a>第二十三章 衰老和死亡：选择生活方式，就是选择死亡方式</h3>
<ul>
<li>我们是唯一存在更年期的灵长类动物，存在更年期的动物本来就很少，我们便是其一。</li>
<li>更年期和衰老本身同样神秘。人们为此提出了两种主要理论，也即所谓的“母亲假说”和“祖母假说”。“母亲假说”认为，生孩子既危险，对母亲的消耗又大，而随着女性的年龄增长，情况就越来越严重。所以，更年期是一种保护策略。因为不再受分娩的折磨和干扰，女性可以更好地专心维护自身健康，更好地抚养孩子们，让后者进入自己生育力最强的岁数。这很自然地带来了“祖母假说”，也即女性到了中年就停止生育，这样才能帮助子女养孩子。</li>
<li>顺便说一句，说更年期由女性耗尽了卵细胞而引发，纯粹是胡扯。她们还有卵子，尽管肯定已经不太多了，但足够维持生育。因此，触发更年期过程的，并非卵子的耗尽（可就连很多医生似乎都这么相信）。没有人知道真正的诱因是什么。</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程池详解</title>
    <url>/2021/05/21/thread_pool/</url>
    <content><![CDATA[<h2 id="简介"><a class="header-anchor" href="#简介"></a>简介</h2>
<h3 id="什么是线程池"><a class="header-anchor" href="#什么是线程池"></a>什么是线程池</h3>
<p>线程池（ThreadPool）是一种基于池化思想管理和使用线程的机制。它是将多个线程预先存储在一个“池子”内，当有任务出现时可以避免重新创建和销毁线程所带来性能开销，只需要从“池子”内取出相应的线程执行对应的任务即可。常见的运用池化思想的有：内存池、数据库连接池。使用线程池的优点如下：</p>
<ul>
<li>提高线程的利用率</li>
<li>提高程序的响应速度</li>
<li>便于统一管理线程对象</li>
</ul>
<span id="more"></span>
<h3 id="银行营业厅案例"><a class="header-anchor" href="#银行营业厅案例"></a>银行营业厅案例</h3>
<p>假设银行正常可以同时给3个客户办理业务(绿色表示)，最多可同时给5个用户办理业务(多余的用红色表示)，等候区最多可以等待4个客户(用蓝色表示)，小人表示客户。正常的营业厅处理业务流程如下图所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/f40c37b86dbcf6eb527e74b0cfb46ffb.jpeg" alt="在这里插入图片描述"><br>
注：这个流程用于模拟线程池，和实际银行办理业务还是有点区别。</p>
<p>假设同时进来7个用户，办理业务效果如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/7fd5de056c1ff1a3af36451db41ab3a1.jpeg" alt="在这里插入图片描述"><br>
4个等待区用户只有等前面的窗口办理完才能依次办理。</p>
<p>假设同时进来10个用户，办理业务效果如下：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/84eee14021b33c8d0e3840fe83b1c23f.jpeg" alt="在这里插入图片描述"><br>
第10个用户超出最大限度被拒绝办理业务，其余等待区用户只有等前面的窗口办理完才能依次办理，4和5号窗口超时后会重新进入空闲状态。</p>
<h2 id="执行流程"><a class="header-anchor" href="#执行流程"></a>执行流程</h2>
<p>上面案例中的正常办理业务窗口数对应线程池中的<strong>核心线程数</strong>，最多办理业务窗口数对应线程池中的<strong>最大线程数</strong>，等候区对应线程池中的<strong>阻塞(等待)队列</strong>。线程池关键节点的执行流程如下：</p>
<ul>
<li>当线程数小于核心线程数时，创建线程。</li>
<li>当线程数大于等于核心线程数，且任务队列未满时，将任务放入任务队列。</li>
<li>当线程数大于等于核心线程数，且任务队列已满：若线程数小于最大线程数，创建线程；若线程数等于最大线程数，抛出异常，拒绝任务。</li>
</ul>
<p>线程池的执行流程如下图所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/234750a776b7ec97a45a7a15d4093a4a.png" alt="在这里插入图片描述"></p>
<p><a href="https://blog.csdn.net/qq36846776/article/details/111312342">参考链接</a></p>
<h2 id="创建方式"><a class="header-anchor" href="#创建方式"></a>创建方式</h2>
<h3 id="所有创建方式"><a class="header-anchor" href="#所有创建方式"></a>所有创建方式</h3>
<p>Java线程池一共有7种，按创建类分为两种：</p>
<ul>
<li>通过Executors类创建
<ul>
<li>Executors.newFixedThreadPool<br>
创建一个固定大小的线程池，可控制并发的线程数，超出的线程会在队列中等待</li>
<li>Executors.newCachedThreadPool<br>
创建一个可缓存的线程池，若线程数超过处理所需，缓存一段时间后会回收，若线程数不够，则新建线程</li>
<li>Executors.newSingleThreadExecutor<br>
创建单个线程数的线程池，它可以保证先进先出的执行顺序</li>
<li>Executors.newScheduledThreadPool<br>
创建一个可以执行延迟任务的线程池</li>
<li>Executors.newSingleThreadScheduledExecutor<br>
创建一个单线程的可以执行延迟任务的线程池</li>
<li>Executors.newWorkStealingPool<br>
创建一个抢占式执行的线程池（任务执行顺序不确定）JDK 1.8 中添加</li>
</ul>
</li>
<li>通过ThreadPoolExecutor类创建<br>
最原始的创建线程池的方式，它包含了 7 个参数可供设置，后面会详细讲。</li>
</ul>
<p>一般使用Java提供了创建线程池的接口Executor()，推荐用子类ThreadPoolExecutor来创建线程池。这在阿里巴巴《Java开发手册》中有说明：</p>
<blockquote>
<p>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<br>
说明：Executors 返回的线程池对象的弊端如下：<br>
1） FixedThreadPool 和 SingleThreadPool：允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。<br>
2）CachedThreadPool：允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p>
</blockquote>
<p><a href="https://blog.csdn.net/qq36846776/article/details/111312342">参考链接</a></p>
<h3 id="通过ThreadPoolExecutor创建"><a class="header-anchor" href="#通过ThreadPoolExecutor创建"></a>通过ThreadPoolExecutor创建</h3>
<p>该类参数最多的构造方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                         <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                         <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                         TimeUnit unit,</span></span><br><span class="line"><span class="params">                         BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                         ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                         RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">                         <span class="comment">// 省略相关代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参数说明如下：</p>
<ul>
<li>corePoolSize<br>
核心线程数</li>
<li>maximumPoolSize<br>
最大线程数</li>
<li>keepAliveTime<br>
最大线程数可以存活的时间，就是线程池中除了核心线程之外的其他的最长可以保留的时间，因为在线程池中，除了核心线程即使在无任务的情况下也不能被清除，其余的都是有存活时间的，意思就是非核心线程可以保留的最长的空闲时间</li>
<li>unit<br>
计算keepAliveTime的单位</li>
<li>workQueue<br>
阻塞(等待)队列。一共有ArrayBlockingQueue、LinkedBlockingQueue、SynchronousQueue等7种阻塞队列</li>
<li>threadFactory<br>
创建线程的工厂，主要用来创建线程，默认为正常优先级、非守护线程。</li>
<li>handler<br>
拒绝策略。一共有下面四种：
<ul>
<li>AbortPolicy<br>
不执行新任务，直接抛出异常，提示线程池已满</li>
<li>DisCardPolicy<br>
不执行新任务，也不抛出异常</li>
<li>DisCardOldSetPolicy<br>
将消息队列中的第一个任务替换为当前新进来的任务执行</li>
<li>CallerRunsPolicy<br>
直接调用execute来执行当前任务</li>
</ul>
</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">3</span>,<span class="number">5</span>,<span class="number">1L</span>, TimeUnit.SECONDS,<span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="number">4</span>),Executors.defaultThreadFactory());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">            executorService.execute(()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+<span class="string">&quot;---&gt;办理业务&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span> ---&gt;办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> ---&gt;办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span> ---&gt;办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> ---&gt;办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span> ---&gt;办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> ---&gt;办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span> ---&gt;办理业务</span><br></pre></td></tr></table></figure>
<p>当for循环中的i&lt;10时运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span> ---&gt;办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">4</span> ---&gt;办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span> ---&gt;办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span> ---&gt;办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span> ---&gt;办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> ---&gt;办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">5</span> ---&gt;办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span> ---&gt;办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">4</span> ---&gt;办理业务</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.util.concurrent.RejectedExecutionException: Task com.test.ThreadPoolTest$$Lambda$<span class="number">1</span>/<span class="number">1209271652</span>@7a79be86 rejected from java.util.concurrent.ThreadPoolExecutor@880ec60[Running, <span class="type">pool</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">5</span>, <span class="type">active</span> <span class="variable">threads</span> <span class="operator">=</span> <span class="number">0</span>, <span class="type">queued</span> <span class="variable">tasks</span> <span class="operator">=</span> <span class="number">0</span>, <span class="type">completed</span> <span class="variable">tasks</span> <span class="operator">=</span> <span class="number">9</span>]</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:<span class="number">2047</span>)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:<span class="number">823</span>)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:<span class="number">1369</span>)</span><br><span class="line">	at com.test.ThreadPoolTest.main(ThreadPoolTest.java:<span class="number">9</span>)</span><br></pre></td></tr></table></figure>
<p>可以发现只有9（最大+阻塞）个任务执行了，之后进来的任务会被拒绝。</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis学习笔记：含数据类型常用操作命令、事务、持久化等</title>
    <url>/2021/04/22/study_of_redis/</url>
    <content><![CDATA[<h2 id="典型应用场景"><a class="header-anchor" href="#典型应用场景"></a>典型应用场景</h2>
<ul>
<li>缓存系统<br>
可以用string实现</li>
<li>计数器<br>
有incr命令，可在单线程下进行非常高效的计数，且不会出现计数错误的问题，比如微博转发、评论的计数。<br>
可以用string实现</li>
<li>购物车<br>
可以用hash实现</li>
<li>排行榜<br>
可以用有序集合实现</li>
<li>消息队列<br>
可以用列表实现</li>
<li>活动秒杀</li>
</ul>
<span id="more"></span>
<h2 id="一些基础知识"><a class="header-anchor" href="#一些基础知识"></a>一些基础知识</h2>
<h3 id="单线程"><a class="header-anchor" href="#单线程"></a>单线程</h3>
<p>Redis一次只运行一条命令。但在做一些文件操作时不是单线程的，比如fysnc file descriptor。<br>
单线程速度还快的原因如下：</p>
<ul>
<li>纯内存 （本质）</li>
<li>非阻塞IO(IO多路复用) ，不在IO上浪费过多的时间（辅）</li>
<li>避免线程切换和竞态消耗（要知道对多线成使用不合理时，甚至会比单线程慢）（辅）</li>
</ul>
<h3 id="数据类型内部编码"><a class="header-anchor" href="#数据类型内部编码"></a>数据类型内部编码</h3>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">内部编码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">string</td>
<td style="text-align:center">raw、int、embstr</td>
</tr>
<tr>
<td style="text-align:center">hash</td>
<td style="text-align:center">hashtable、ziplist</td>
</tr>
<tr>
<td style="text-align:center">list</td>
<td style="text-align:center">linkedlist、ziplist</td>
</tr>
<tr>
<td style="text-align:center">set</td>
<td style="text-align:center">hashtable、intset</td>
</tr>
<tr>
<td style="text-align:center">zset</td>
<td style="text-align:center">skiplist、ziplist</td>
</tr>
</tbody>
</table>
<h3 id="数据库操作常用命令"><a class="header-anchor" href="#数据库操作常用命令"></a>数据库操作常用命令</h3>
<p>默认16个数据库，类似数组下表从零开始，初始默认使用0号库。<br>
数据库操作相关命令如下所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">语法</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">EXISTS</td>
<td style="text-align:center">EXISTS key</td>
<td style="text-align:center">检查给定 key 是否存在</td>
<td style="text-align:center">key 存在，返回 1 ，否则返回 0</td>
</tr>
<tr>
<td style="text-align:center">TYPE</td>
<td style="text-align:center">TYPE key</td>
<td style="text-align:center">返回 key 所储存的值的类型</td>
<td style="text-align:center">none (key不存在)、string、list、hash、set、zset、stream</td>
</tr>
<tr>
<td style="text-align:center">MOVE</td>
<td style="text-align:center">MOVE key</td>
<td style="text-align:center">将当前数据库的 key 移动到给定的数据库 db 当中</td>
<td style="text-align:center">移动成功返回 1 ，失败则返回 0</td>
</tr>
<tr>
<td style="text-align:center">DEL</td>
<td style="text-align:center">DEL key</td>
<td style="text-align:center">删除给定的一个或多个 key 。不存在的 key 会被忽略</td>
<td style="text-align:center">被删除 key 的数量</td>
</tr>
<tr>
<td style="text-align:center">DBSIZE</td>
<td style="text-align:center">DBSIZE key</td>
<td style="text-align:center">返回当前数据库的 key 的数量</td>
<td style="text-align:center">当前数据库的 key 的数量</td>
</tr>
<tr>
<td style="text-align:center">KEYS</td>
<td style="text-align:center">KEYS pattern</td>
<td style="text-align:center">查找所有符合给定模式 pattern 的 key，例如keys *(匹配数据库中所有key)、KEYS t*est (匹配 test和 taaaest)等.特殊符号用 \ 隔开</td>
<td style="text-align:center">符合给定模式的 key 列表</td>
</tr>
<tr>
<td style="text-align:center">FLUSHDB</td>
<td style="text-align:center">FLUSHDB</td>
<td style="text-align:center">清空当前数据库中的所有 key</td>
<td style="text-align:center">总是返回 OK</td>
</tr>
<tr>
<td style="text-align:center">FLUSHALL</td>
<td style="text-align:center">FLUSHALL</td>
<td style="text-align:center">清空整个 Redis 服务器的数据(删除所有数据库的所有 key )</td>
<td style="text-align:center">总是返回 OK</td>
</tr>
<tr>
<td style="text-align:center">SELECT</td>
<td style="text-align:center">SELECT index</td>
<td style="text-align:center">切换到指定的数据库，数据库索引号 index 用数字值指定，以 0 作为起始索引值</td>
<td style="text-align:center">总是返回 OK</td>
</tr>
</tbody>
</table>
<h2 id="数据类型"><a class="header-anchor" href="#数据类型"></a>数据类型</h2>
<h3 id="字符串-string"><a class="header-anchor" href="#字符串-string"></a>字符串(string)</h3>
<h4 id="特点"><a class="header-anchor" href="#特点"></a>特点</h4>
<ul>
<li>string是 Redis 最基本的类型，一个 key 对应一个 value</li>
<li>string是二进制安全的,也就是可以包含任何数据，比如jpg图片或者序列化的对象</li>
<li>string最大能存储 512MB</li>
</ul>
<h4 id="常用命令"><a class="header-anchor" href="#常用命令"></a>常用命令</h4>
<h5 id="SET"><a class="header-anchor" href="#SET"></a>SET</h5>
<ul>
<li>
<p>语法<br>
SET key value</p>
</li>
<li>
<p>说明<br>
将字符串值 value 关联到 key 。如果 key 已经持有其他值， SET 就覆写旧值， 无视类型。当 SET 命令对一个带有生存时间（TTL）的键进行设置之后， 该键原有的 TTL 将被清除。</p>
</li>
<li>
<p>相关案例<br>
正常设置值：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SET key <span class="string">&quot;test&quot;</span></span><br><span class="line">OK</span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; GET key</span><br><span class="line"><span class="string">&quot;test&quot;</span></span><br></pre></td></tr></table></figure>
<p>使用 EX 选项：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SET key-with-expire-time <span class="string">&quot;hello&quot;</span> EX <span class="number">10086</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; GET key-with-expire-time</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; TTL key-with-expire-time</span><br><span class="line">(integer) <span class="number">10069</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="GET"><a class="header-anchor" href="#GET"></a>GET</h5>
<ul>
<li>
<p>语法<br>
GET key</p>
</li>
<li>
<p>说明<br>
返回与键 key 相关联的字符串值。</p>
</li>
<li>
<p>返回值<br>
如果键 key 不存在， 那么返回特殊值 nil ； 否则， 返回键 key 的值。如果键    key 的值并非字符串类型， 那么返回一个错误， 因为 GET 命令只能用于字符串   值。</p>
</li>
<li>
<p>相关案例<br>
对不存在的键 key 或是字符串类型的键 key 执行 GET 命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; GET <span class="title function_">db</span></span><br><span class="line"><span class="params">(nil)</span></span><br><span class="line">redis&gt; SET db redis</span><br><span class="line">OK</span><br><span class="line">redis&gt; GET db</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br></pre></td></tr></table></figure>
<p>对不是字符串类型的键 key 执行 GET 命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; LPUSH db redis mongodb <span class="title function_">mysql</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">redis&gt; GET <span class="title function_">db</span></span><br><span class="line"><span class="params">(error)</span> ERR Operation against a key holding the wrong kind of value</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="INCR"><a class="header-anchor" href="#INCR"></a>INCR</h5>
<ul>
<li>
<p>语法<br>
INCR key</p>
</li>
<li>
<p>说明<br>
为键 key 储存的数字值加上1。如果键 key 不存在， 那么它的值会先被初始化为 0 ， 然后再执行 INCR 命令。如果键 key 储存的值不能被解释为数字， 那么 INCR 命令将返回一个错误。</p>
</li>
<li>
<p>返回值<br>
INCR 命令会返回键 key 在执行加一操作之后的值。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; SET page_view <span class="number">20</span></span><br><span class="line">OK</span><br><span class="line">redis&gt; INCR <span class="title function_">page_view</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">21</span></span><br><span class="line">redis&gt; GET page_view    # 数字值在 Redis 中以字符串的形式保存</span><br><span class="line"><span class="string">&quot;21&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="INCRBY"><a class="header-anchor" href="#INCRBY"></a>INCRBY</h5>
<ul>
<li>
<p>语法<br>
INCRBY key increment</p>
</li>
<li>
<p>说明<br>
为键 key 储存的数字值加上增量 increment 。如果键 key 不存在， 那么键 key 的值会先被初始化为 0 ， 然后再执行 INCRBY 命令。如果键 key 储存的值不能被解释为数字， 那么 INCRBY 命令将返回一个错误。</p>
</li>
<li>
<p>返回值<br>
在加上增量 increment 之后， 键 key 当前的值。</p>
</li>
<li>
<p>相关案例<br>
键存在，并且值为数字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; SET rank <span class="number">50</span></span><br><span class="line">OK</span><br><span class="line">redis&gt; INCRBY rank <span class="number">20</span></span><br><span class="line">(integer) <span class="number">70</span></span><br><span class="line">redis&gt; GET rank</span><br><span class="line"><span class="string">&quot;70&quot;</span></span><br></pre></td></tr></table></figure>
<p>键不存在：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; EXISTS <span class="title function_">counter</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">redis&gt; INCRBY counter <span class="number">30</span></span><br><span class="line">(integer) <span class="number">30</span></span><br><span class="line"></span><br><span class="line">redis&gt; GET counter</span><br><span class="line"><span class="string">&quot;30&quot;</span></span><br></pre></td></tr></table></figure>
<p>键存在，但值无法被解释为数字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; SET book <span class="string">&quot;long long ago...&quot;</span></span><br><span class="line">	OK</span><br><span class="line">redis&gt; INCRBY book <span class="number">200</span></span><br><span class="line">(error) ERR value is not an integer or out of range</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="DECR"><a class="header-anchor" href="#DECR"></a>DECR</h5>
<ul>
<li>
<p>语法<br>
DECR key</p>
</li>
<li>
<p>说明<br>
为键 key 储存的数字值减去一。如果键 key 不存在， 那么键 key 的值会先被初始化为 0 ， 然后再执行 DECR 操作。如果键 key 储存的值不能被解释为数字， 那么 DECR 命令将返回一个错误。</p>
</li>
<li>
<p>返回值<br>
DECR 命令会返回键 key 在执行减一操作之后的值。</p>
</li>
<li>
<p>相关案例<br>
对储存数字值的键 key 执行 DECR 命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; SET test <span class="number">10</span></span><br><span class="line">OK</span><br><span class="line">redis&gt; DECR <span class="title function_">test</span> </span><br><span class="line"><span class="params">(integer)</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>对不存在的键执行 DECR 命令：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; EXISTS <span class="title function_">count</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line">redis&gt; DECR <span class="title function_">count</span></span><br><span class="line"><span class="params">(integer)</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="DECRBY"><a class="header-anchor" href="#DECRBY"></a>DECRBY</h5>
<ul>
<li>
<p>语法<br>
DECRBY key decrement</p>
</li>
<li>
<p>说明<br>
将键 key 储存的整数值减去减量 decrement 。如果键 key 不存在， 那么键 key 的值会先被初始化为 0 ， 然后再执行 DECRBY 命令。如果键 key 储存的值不能被解释为数字， 那么 DECRBY 命令将返回一个错误。</p>
</li>
<li>
<p>返回值<br>
DECRBY 命令会返回键在执行减法操作之后的值。</p>
</li>
<li>
<p>相关案例<br>
对已经存在的键执行 DECRBY 命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; SET count <span class="number">100</span></span><br><span class="line">OK</span><br><span class="line">redis&gt; DECRBY count <span class="number">20</span></span><br><span class="line">(integer) <span class="number">80</span></span><br></pre></td></tr></table></figure>
<p>对不存在的键执行 DECRBY 命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; EXISTS <span class="title function_">pages</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line">redis&gt; DECRBY pages <span class="number">10</span></span><br><span class="line">(integer) -<span class="number">10</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="MSET"><a class="header-anchor" href="#MSET"></a>MSET</h5>
<ul>
<li>
<p>语法<br>
MSET key value [key value …]</p>
</li>
<li>
<p>说明<br>
同时为多个键设置值。如果某个给定键已经存在， 那么 MSET 将使用新值去覆盖旧值， 如果这不是你所希望的效果， 请考虑使用 MSETNX 命令， 这个命令只会在所有给定键都不存在的情况下进行设置。</p>
</li>
<li>
<p>返回值<br>
总是返回 OK 。</p>
</li>
<li>
<p>相关案例<br>
同时对多个键进行设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; MSET date <span class="string">&quot;2012.3.30&quot;</span> time <span class="string">&quot;11:00 a.m.&quot;</span> weather <span class="string">&quot;sunny&quot;</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; MGET date time weather</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;2012.3.30&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;11:00 a.m.&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;sunny&quot;</span></span><br></pre></td></tr></table></figure>
<p>覆盖已有的值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; MGET k1 k2</span><br><span class="line">	<span class="number">1</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line">	<span class="number">2</span>) <span class="string">&quot;world&quot;</span></span><br><span class="line">	</span><br><span class="line">	redis&gt; MSET k1 <span class="string">&quot;good&quot;</span> k2 <span class="string">&quot;bye&quot;</span></span><br><span class="line">	OK</span><br><span class="line">	</span><br><span class="line">	redis&gt; MGET k1 k2</span><br><span class="line">	<span class="number">1</span>) <span class="string">&quot;good&quot;</span></span><br><span class="line">	<span class="number">2</span>) <span class="string">&quot;bye&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="MGET"><a class="header-anchor" href="#MGET"></a>MGET</h5>
<ul>
<li>
<p>语法<br>
MGET key [key …]</p>
</li>
<li>
<p>说明<br>
返回给定的一个或多个字符串键的值。如果给定的字符串键里面， 有某个键不存在， 那么这个键的值将以特殊值 nil 表示。</p>
</li>
<li>
<p>返回值<br>
MGET 命令将返回一个列表， 列表中包含了所有给定键的值。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; SET baidu  baidu.com</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; SET google google.com</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; MGET baidu  google</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;baidu.com&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;google.com&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; MGET baidu  google mysql     # 不存在的 mysql 返回 nil</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;baidu.com&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;google.com&quot;</span></span><br><span class="line"><span class="number">3</span>) (nil)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="哈希表-hash"><a class="header-anchor" href="#哈希表-hash"></a>哈希表(hash)</h3>
<h4 id="特点-v2"><a class="header-anchor" href="#特点-v2"></a>特点</h4>
<ul>
<li>hash是一个键值(key=&gt;value)对集合</li>
<li>hash特别适合用于存储对象</li>
</ul>
<h4 id="常用命令-v2"><a class="header-anchor" href="#常用命令-v2"></a>常用命令</h4>
<h5 id="HSET"><a class="header-anchor" href="#HSET"></a>HSET</h5>
<ul>
<li>
<p>语法<br>
HSET hash field value</p>
</li>
<li>
<p>说明<br>
将哈希表 hash 中域 field 的值设置为 value 。如果给定的哈希表并不存在， 那么一个新的哈希表将被创建并执行 HSET 操作。如果域 field 已经存在于哈希表中， 那么它的旧值将被新值 value 覆盖。</p>
</li>
<li>
<p>返回值<br>
当 HSET 命令在哈希表中新创建 field 域并成功为它设置值时， 命令返回 1 ； 如果域 field 已经存在于哈希表， 并且 HSET 命令成功使用新值覆盖了它的旧值， 那么命令返回 0 。</p>
</li>
<li>
<p>相关案例<br>
设置一个新域：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; HSET website baidu <span class="string">&quot;www.baidu.org&quot;</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; HGET website baidu </span><br><span class="line"><span class="string">&quot;www.baidu.org&quot;</span></span><br></pre></td></tr></table></figure>
<p>对一个已存在的域进行更新：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; HSET website baidu <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"></span><br><span class="line">redis&gt; HGET website baidu </span><br><span class="line"><span class="string">&quot;www.baidu.com&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="HGET"><a class="header-anchor" href="#HGET"></a>HGET</h5>
<ul>
<li>
<p>语法<br>
HGET hash field</p>
</li>
<li>
<p>说明<br>
返回哈希表中给定域的值。如果给定域不存在于哈希表中， 又或者给定的哈希表并不存在， 那么命令返回 nil 。</p>
</li>
<li>
<p>返回值<br>
返回哈希表中给定域的值。</p>
</li>
<li>
<p>相关案例<br>
域存在的情况：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; HSET website baidu <span class="string">&quot;www.baidu.org&quot;</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; HGET website baidu </span><br><span class="line"><span class="string">&quot;www.baidu.org&quot;</span></span><br></pre></td></tr></table></figure>
<p>域不存在情况：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; HGET website <span class="title function_">mysql</span> </span><br><span class="line"><span class="params">(nil)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="HSETNX"><a class="header-anchor" href="#HSETNX"></a>HSETNX</h5>
<ul>
<li>
<p>语法<br>
HSETNX hash field value</p>
</li>
<li>
<p>说明<br>
当且仅当域 field 尚未存在于哈希表的情况下， 将它的值设置为 value 。如果给定域已经存在于哈希表当中， 那么命令将放弃执行设置操作。如果哈希表 hash 不存在， 那么一个新的哈希表将被创建并执行 HSETNX 命令。</p>
</li>
<li>
<p>返回值<br>
HSETNX 命令在设置成功时返回 1 ， 在给定域已经存在而放弃执行设置操作时返回 0 。</p>
</li>
<li>
<p>相关案例<br>
域尚未存在， 设置成功：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; HSETNX database key-value-store <span class="title function_">Redis</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; HGET database key-value-store</span><br><span class="line"><span class="string">&quot;Redis</span></span><br></pre></td></tr></table></figure>
<p>域已经存在， 设置未成功， 域原有的值未被改变：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; HSETNX database key-value-store <span class="title function_">Riak</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">redis&gt; HGET database key-value-store</span><br><span class="line"><span class="string">&quot;Redis&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="HEXISTS"><a class="header-anchor" href="#HEXISTS"></a>HEXISTS</h5>
<ul>
<li>
<p>语法<br>
HEXISTS hash field</p>
</li>
<li>
<p>说明<br>
检查给定域 field 是否存在于哈希表 hash 当中。</p>
</li>
<li>
<p>返回值<br>
HEXISTS 命令在给定域存在时返回 1 ， 在给定域不存在时返回 0 。</p>
</li>
<li>
<p>相关案例<br>
给定域不存在：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; HEXISTS phone <span class="title function_">myphone</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>给定域存在：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; HSET phone myphone nokia-<span class="number">1110</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; HEXISTS phone <span class="title function_">myphone</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="HLEN"><a class="header-anchor" href="#HLEN"></a>HLEN</h5>
<ul>
<li>
<p>语法<br>
HLEN key</p>
</li>
<li>
<p>说明<br>
返回哈希表 key 中域的数量。</p>
</li>
<li>
<p>返回值<br>
哈希表中域的数量。当 key 不存在时，返回 0 。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; HSET db redis redis.com</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; HSET db baidu baidu.com</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; HLEN <span class="title function_">db</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">redis&gt; HSET db google google.com</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; HLEN <span class="title function_">db</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="HDEL"><a class="header-anchor" href="#HDEL"></a>HDEL</h5>
<ul>
<li>
<p>语法<br>
HDEL key field [field …]</p>
</li>
<li>
<p>说明<br>
删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略。</p>
</li>
<li>
<p>返回值<br>
被成功移除的域的数量，不包括被忽略的域。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#测试数据</span><br><span class="line">redis&gt; HGETALL abbr</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;apple&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;banana&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;cat&quot;</span></span><br><span class="line"><span class="number">7</span>) <span class="string">&quot;d&quot;</span></span><br><span class="line"><span class="number">8</span>) <span class="string">&quot;dog&quot;</span></span><br><span class="line">	</span><br><span class="line"># 删除单个域</span><br><span class="line">redis&gt; HDEL abbr <span class="title function_">a</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">	</span><br><span class="line"># 删除不存在的域</span><br><span class="line">redis&gt; HDEL abbr not-exists-field</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line">	</span><br><span class="line"># 删除多个域	</span><br><span class="line">redis&gt; HDEL abbr b <span class="title function_">c</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span>	</span><br><span class="line">redis&gt; HGETALL abbr</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;d&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;dog&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="HKEYS"><a class="header-anchor" href="#HKEYS"></a>HKEYS</h5>
<ul>
<li>
<p>语法<br>
HKEYS key</p>
</li>
<li>
<p>说明<br>
返回哈希表 key 中的所有域。</p>
</li>
<li>
<p>返回值<br>
一个包含哈希表中所有域的表。当 key 不存在时，返回一个空表。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 哈希表非空</span><br><span class="line">redis&gt; HMSET website google www.google.com yahoo www.yahoo.com</span><br><span class="line">OK	</span><br><span class="line">redis&gt; HKEYS website</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;google&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;yahoo&quot;</span></span><br><span class="line"></span><br><span class="line"># 空哈希表/key不存在</span><br><span class="line">redis&gt; EXISTS <span class="title function_">fake_key</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">redis&gt; HKEYS <span class="title function_">fake_key</span></span><br><span class="line"><span class="params">(empty list or set)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="HVALS"><a class="header-anchor" href="#HVALS"></a>HVALS</h5>
<ul>
<li>
<p>语法<br>
HVALS key</p>
</li>
<li>
<p>说明<br>
返回哈希表 key 中所有域的值。</p>
</li>
<li>
<p>返回值<br>
一个包含哈希表中所有值的表。当 key 不存在时，返回一个空表。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 非空哈希表</span><br><span class="line">redis&gt; HMSET website google www.google.com yahoo www.yahoo.com</span><br><span class="line">OK</span><br><span class="line">redis&gt; HVALS website</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;www.google.com&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;www.yahoo.com&quot;</span></span><br><span class="line"></span><br><span class="line"># 空哈希表/不存在的key</span><br><span class="line">redis&gt; EXISTS <span class="title function_">not_exists</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">redis&gt; HVALS <span class="title function_">not_exists</span></span><br><span class="line"><span class="params">(empty list or set)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="HINCRBY"><a class="header-anchor" href="#HINCRBY"></a>HINCRBY</h5>
<ul>
<li>
<p>语法<br>
HINCRBY key field increment</p>
</li>
<li>
<p>说明<br>
为哈希表 key 中的域 field 的值加上增量 increment 。增量也可以为负数，相当于对给定域进行减法操作。如果 key 不存在，一个新的哈希表被创建并执行 HINCRBY 命令。如果域 field 不存在，那么在执行命令前，域的值被初始化为 0 。对一个储存字符串值的域 field 执行 HINCRBY 命令将造成一个错误。</p>
</li>
<li>
<p>返回值<br>
执行 HINCRBY 命令之后，哈希表 key 中域 field 的值。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># increment 为正数</span><br><span class="line"></span><br><span class="line">redis&gt; HEXISTS counter page_view    # 对空域进行设置</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"></span><br><span class="line">redis&gt; HINCRBY counter page_view <span class="number">200</span></span><br><span class="line">(integer) <span class="number">200</span></span><br><span class="line"></span><br><span class="line">redis&gt; HGET counter page_view</span><br><span class="line"><span class="string">&quot;200&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># increment 为负数</span><br><span class="line"></span><br><span class="line">redis&gt; HGET counter page_view</span><br><span class="line"><span class="string">&quot;200&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; HINCRBY counter page_view -<span class="number">50</span></span><br><span class="line">(integer) <span class="number">150</span></span><br><span class="line"></span><br><span class="line">redis&gt; HGET counter page_view</span><br><span class="line"><span class="string">&quot;150&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 尝试对字符串值的域执行HINCRBY命令</span><br><span class="line"></span><br><span class="line">redis&gt; HSET myhash string hello,world       # 设定一个字符串值</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; HGET myhash string</span><br><span class="line"><span class="string">&quot;hello,world&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; HINCRBY myhash string <span class="number">1</span>              # 命令执行失败，错误。</span><br><span class="line">(error) ERR hash value is not an integer</span><br><span class="line"></span><br><span class="line">redis&gt; HGET myhash string                   # 原值不变</span><br><span class="line"><span class="string">&quot;hello,world&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="HINCRBYFLOAT"><a class="header-anchor" href="#HINCRBYFLOAT"></a>HINCRBYFLOAT</h5>
<ul>
<li>
<p>语法<br>
HINCRBYFLOAT key field increment</p>
</li>
<li>
<p>说明<br>
为哈希表 key 中的域 field 加上浮点数增量 increment 。如果哈希表中没有域 field ，那么 HINCRBYFLOAT 会先将域 field 的值设为 0 ，然后再执行加法操作。如果键 key 不存在，那么 HINCRBYFLOAT 会先创建一个哈希表，再创建域 field ，最后再执行加法操作。<br>
当以下任意一个条件发生时，返回一个错误：</p>
<ul>
<li>域 field 的值不是字符串类型(因为 Redis 中的数字和浮点数都以字符串的形式保存，所以它们都属于字符串类型）</li>
<li>域 field 当前的值或给定的增量 increment 不能解释(parse)为双精度浮点数(double precision floating point number)</li>
</ul>
</li>
<li>
<p>返回值<br>
执行加法操作之后 field 域的值。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 值和增量都是普通小数</span><br><span class="line">redis&gt; HSET mykey field <span class="number">10.50</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">redis&gt; HINCRBYFLOAT mykey field <span class="number">0.1</span></span><br><span class="line"><span class="string">&quot;10.6&quot;</span></span><br><span class="line">		</span><br><span class="line"># 值和增量都是指数符号	</span><br><span class="line">redis&gt; HSET mykey field <span class="number">5.0e3</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line">redis&gt; HINCRBYFLOAT mykey field <span class="number">2.0e2</span></span><br><span class="line"><span class="string">&quot;5200&quot;</span></span><br><span class="line">	</span><br><span class="line"># 对不存在的键执行 HINCRBYFLOAT	</span><br><span class="line">redis&gt; EXISTS <span class="title function_">price</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line">redis&gt; HINCRBYFLOAT price milk <span class="number">3.5</span></span><br><span class="line"><span class="string">&quot;3.5&quot;</span></span><br><span class="line">redis&gt; HGETALL price</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;milk&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;3.5&quot;</span></span><br><span class="line">	</span><br><span class="line"># 对不存在的域进行 HINCRBYFLOAT	</span><br><span class="line">redis&gt; HGETALL price</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;milk&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;3.5&quot;</span></span><br><span class="line">redis&gt; HINCRBYFLOAT price coffee <span class="number">4.5</span>   # 新增 coffee 域</span><br><span class="line"><span class="string">&quot;4.5&quot;</span></span><br><span class="line">redis&gt; HGETALL price</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;milk&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;3.5&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;coffee&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;4.5&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="HGETALL"><a class="header-anchor" href="#HGETALL"></a>HGETALL</h5>
<ul>
<li>
<p>语法<br>
HGETALL key</p>
</li>
<li>
<p>说明<br>
返回哈希表 key 中，所有的域和值。在返回值里，紧跟每个域名(field name)之后是域的值(value)，所以返回值的长度是哈希表大小的两倍。</p>
</li>
<li>
<p>返回值<br>
以列表形式返回哈希表的域和域的值。<br>
若 key 不存在，返回空列表。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; HSET people jack <span class="string">&quot;Jack Sparrow&quot;</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">redis&gt; HSET people gump <span class="string">&quot;Forrest Gump&quot;</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; HGETALL people</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;jack&quot;</span>          # 域</span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Jack Sparrow&quot;</span>  # 值</span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;gump&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;Forrest Gump&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="列表-list"><a class="header-anchor" href="#列表-list"></a>列表(list)</h3>
<h4 id="特点-v3"><a class="header-anchor" href="#特点-v3"></a>特点</h4>
<ul>
<li>list是简单的字符串列表，一个key对应多个value</li>
<li>可以添加一个元素到列表的头部（左边）或者尾部（右边）</li>
<li>一个list最多可以包含2^32-1 个元素 (超过42亿)。</li>
</ul>
<h4 id="常用命令-v3"><a class="header-anchor" href="#常用命令-v3"></a>常用命令</h4>
<h5 id="LPUSH"><a class="header-anchor" href="#LPUSH"></a>LPUSH</h5>
<ul>
<li>
<p>语法<br>
LPUSH key value [value …]</p>
</li>
<li>
<p>说明<br>
将一个或多个值 value 插入到列表 key 的表头。如果有多个 value 值，那么各个 value 值按从左到右的顺序依次插入到表头： 比如说，对空列表 mylist 执行命令 LPUSH mylist a b c ，列表的值将是 c b a ，这等同于原子性地执行 LPUSH mylist a 、 LPUSH mylist b 和 LPUSH mylist c 三个命令。<br>
如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。当 key 存在但不是列表类型时，返回一个错误。</p>
</li>
<li>
<p>返回值<br>
执行 LPUSH 命令后，列表的长度。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 加入单个元素</span><br><span class="line"></span><br><span class="line">redis&gt; LPUSH languages <span class="title function_">english</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加入重复元素</span><br><span class="line">redis&gt; LPUSH languages <span class="title function_">english</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">redis&gt; LRANGE languages <span class="number">0</span> -<span class="number">1</span>     # 列表允许重复元素</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;english&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;english&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加入多个元素	</span><br><span class="line">redis&gt; LPUSH mylist a b <span class="title function_">c</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">redis&gt; LRANGE mylist <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="RPUSH"><a class="header-anchor" href="#RPUSH"></a>RPUSH</h5>
<ul>
<li>
<p>语法<br>
RPUSH key value [value …]</p>
</li>
<li>
<p>说明<br>
将一个或多个值 value 插入到列表 key 的表尾(最右边)。如果有多个 value 值，那么各个 value 值按从左到右的顺序依次插入到表尾：比如对一个空列表 mylist 执行 RPUSH mylist a b c ，得出的结果列表为 a b c ，等同于执行命令 RPUSH mylist a 、 RPUSH mylist b 、 RPUSH mylist c 。<br>
如果 key 不存在，一个空列表会被创建并执行 RPUSH 操作。当 key 存在但不是列表类型时，返回一个错误。</p>
</li>
<li>
<p>返回值<br>
执行 RPUSH 操作后，表的长度。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 添加单个元素</span><br><span class="line">redis&gt; RPUSH languages <span class="title function_">english</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加重复元素</span><br><span class="line"></span><br><span class="line">redis&gt; RPUSH languages <span class="title function_">english</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">redis&gt; LRANGE languages <span class="number">0</span> -<span class="number">1</span> # 列表允许重复元素</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;english&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;english&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加多个元素</span><br><span class="line"></span><br><span class="line">redis&gt; RPUSH mylist a b <span class="title function_">c</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">redis&gt; LRANGE mylist <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;c&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="LRANGE"><a class="header-anchor" href="#LRANGE"></a>LRANGE</h5>
<ul>
<li>
<p>语法<br>
LRANGE key start stop</p>
</li>
<li>
<p>说明<br>
返回列表 key 中指定区间内的元素，区间以偏移量 start 和 stop 指定。下标(index)参数 start 和 stop 都以 0 为底，也就是说，以 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。<br>
如果 start 下标比列表的最大下标 end ( LLEN list 减去 1 )还要大，那么 LRANGE 返回一个空列表。如果 stop 下标比 end 下标还要大，Redis将 stop 的值设置为 end 。</p>
</li>
<li>
<p>返回值<br>
一个列表，包含指定区间内的元素。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; RPUSH fp-language <span class="title function_">lisp</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; LRANGE fp-language <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;lisp&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; RPUSH fp-language <span class="title function_">scheme</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">redis&gt; LRANGE fp-language <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;lisp&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;scheme&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="LPOP"><a class="header-anchor" href="#LPOP"></a>LPOP</h5>
<ul>
<li>
<p>语法<br>
LPOP key</p>
</li>
<li>
<p>说明<br>
移除并返回列表 key 的头元素。</p>
</li>
<li>
<p>返回值<br>
列表的头元素。 当 key 不存在时，返回 nil 。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; LLEN <span class="title function_">course</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">redis&gt; RPUSH course <span class="title function_">English</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; RPUSH course <span class="title function_">Mathematics</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">redis&gt; LPOP course  # 移除头元素</span><br><span class="line"><span class="string">&quot;English&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="RPOP"><a class="header-anchor" href="#RPOP"></a>RPOP</h5>
<ul>
<li>
<p>语法<br>
RPOP key</p>
</li>
<li>
<p>说明<br>
移除并返回列表 key 的尾元素。</p>
</li>
<li>
<p>返回值<br>
列表的尾元素。 当 key 不存在时，返回 nil 。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; LLEN <span class="title function_">course</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">redis&gt; RPUSH course <span class="title function_">English</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; RPUSH course <span class="title function_">Mathematics</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">redis&gt; LPOP course  # 移除尾元素</span><br><span class="line"><span class="string">&quot;Mathematics&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="LINDEX"><a class="header-anchor" href="#LINDEX"></a>LINDEX</h5>
<ul>
<li>
<p>语法<br>
LINDEX key index</p>
</li>
<li>
<p>说明<br>
返回列表 key 中，下标为 index 的元素。下标(index)参数 start 和 stop 都以 0 为底，也就是说，以 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。<br>
如果 key 不是列表类型，返回一个错误。</p>
</li>
<li>
<p>返回值<br>
列表中下标为 index 的元素。 如果 index 参数的值不在列表的区间范围内(out of range)，返回 nil 。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; LPUSH mylist <span class="string">&quot;World&quot;</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; LPUSH mylist <span class="string">&quot;Hello&quot;</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"></span><br><span class="line">redis&gt; LINDEX mylist <span class="number">0</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; LINDEX mylist -<span class="number">1</span></span><br><span class="line"><span class="string">&quot;World&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; LINDEX mylist <span class="number">3</span>        # index不在 mylist 的区间范围内</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="LLEN"><a class="header-anchor" href="#LLEN"></a>LLEN</h5>
<ul>
<li>
<p>语法<br>
LLEN key</p>
</li>
<li>
<p>说明<br>
返回列表 key 的长度。</p>
</li>
<li>
<p>返回值<br>
列表的尾元素。 当 key 不存在时，返回 nil 。如果 key 不存在，则 key 被解释为一个空列表，返回 0 。如果 key 不是列表类型，返回一个错误。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 空列表</span><br><span class="line">redis&gt; LLEN <span class="title function_">job</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"># 非空列表</span><br><span class="line">redis&gt; LPUSH job <span class="string">&quot;cook food&quot;</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">redis&gt; LPUSH job <span class="string">&quot;have lunch&quot;</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line">redis&gt; LLEN <span class="title function_">job</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="LREM"><a class="header-anchor" href="#LREM"></a>LREM</h5>
<ul>
<li>
<p>语法<br>
LREM key count value</p>
</li>
<li>
<p>说明<br>
根据参数 count 的值，移除列表中与参数 value 相等的元素。<br>
count 的值可以是以下几种：</p>
<ul>
<li>count &gt; 0 : 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count 。</li>
<li>count &lt; 0 : 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对值。</li>
<li>count = 0 : 移除表中所有与 value 相等的值。</li>
</ul>
</li>
<li>
<p>返回值<br>
被移除元素的数量。 因为不存在的 key 被视作空表(empty list)，所以当 key 不存在时， LREM 命令总是返回 0 。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 先创建一个表，内容排列是</span><br><span class="line"># morning hello morning helllo morning</span><br><span class="line"></span><br><span class="line">redis&gt; LPUSH greet <span class="string">&quot;morning&quot;</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">redis&gt; LPUSH greet <span class="string">&quot;hello&quot;</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line">redis&gt; LPUSH greet <span class="string">&quot;morning&quot;</span></span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line">redis&gt; LPUSH greet <span class="string">&quot;hello&quot;</span></span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line">redis&gt; LPUSH greet <span class="string">&quot;morning&quot;</span></span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"></span><br><span class="line">redis&gt; LRANGE greet <span class="number">0</span> <span class="number">4</span>         # 查看所有元素</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;morning&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;morning&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;morning&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; LREM greet <span class="number">2</span> morning     # 移除从表头到表尾，最先发现的两个 morning</span><br><span class="line">(integer) <span class="number">2</span>                     # 两个元素被移除</span><br><span class="line"></span><br><span class="line">redis&gt; LLEN greet               # 还剩 <span class="number">3</span> 个元素</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"></span><br><span class="line">redis&gt; LRANGE greet <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;morning&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; LREM greet -<span class="number">1</span> morning    # 移除从表尾到表头，第一个 morning</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; LLEN greet               # 剩下两个元素</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"></span><br><span class="line">redis&gt; LRANGE greet <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; LREM greet <span class="number">0</span> hello      # 移除表中所有 hello</span><br><span class="line">(integer) <span class="number">2</span>                    # 两个 hello 被移除</span><br><span class="line"></span><br><span class="line">redis&gt; LLEN <span class="title function_">greet</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="LTRIM"><a class="header-anchor" href="#LTRIM"></a>LTRIM</h5>
<ul>
<li>
<p>语法<br>
LTRIM key start stop</p>
</li>
<li>
<p>说明<br>
对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。举个例子，执行命令 LTRIM list 0 2 ，表示只保留列表 list 的前三个元素，其余元素全部删除。<br>
下标(index)参数 start 和 stop 都以 0 为底，也就是说，以 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。<br>
当 key 不是列表类型时，返回一个错误。<br>
如果 start 下标比列表的最大下标 end ( LLEN list 减去 1 )还要大，或者 start &gt; stop ， LTRIM 返回一个空列表(因为 LTRIM 已经将整个列表清空)。如果 stop 下标比 end 下标还要大，Redis将 stop 的值设置为 end 。</p>
</li>
<li>
<p>返回值<br>
命令执行成功时，返回 ok 。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 情况 <span class="number">1</span>： 常见情况， start 和 stop 都在列表的索引范围之内</span><br><span class="line">redis&gt; LRANGE alpha <span class="number">0</span> -<span class="number">1</span>       # alpha 是一个包含 <span class="number">5</span> 个字符串的列表</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;h&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;e&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;l&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;l&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;o&quot;</span></span><br><span class="line">redis&gt; LTRIM alpha <span class="number">1</span> -<span class="number">1</span>        # 删除 alpha 列表索引为 <span class="number">0</span> 的元素</span><br><span class="line">OK</span><br><span class="line">redis&gt; LRANGE alpha <span class="number">0</span> -<span class="number">1</span>       # <span class="string">&quot;h&quot;</span> 被删除了</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;e&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;l&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;l&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;o&quot;</span></span><br><span class="line"></span><br><span class="line"># 情况 <span class="number">2</span>： stop 比列表的最大下标还要大</span><br><span class="line">redis&gt; LTRIM alpha <span class="number">1</span> <span class="number">10086</span> # 保留 alpha 列表索引 <span class="number">1</span> 至索引 <span class="number">10086</span> 上的元素</span><br><span class="line">OK</span><br><span class="line">redis&gt; LRANGE alpha <span class="number">0</span> -<span class="number">1</span>  # 只有索引 <span class="number">0</span> 上的元素 <span class="string">&quot;e&quot;</span> 被删除了，其他元素还在</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;l&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;l&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;o&quot;</span></span><br><span class="line"></span><br><span class="line"># 情况 <span class="number">3</span>： start 和 stop 都比列表的最大下标要大，并且 start &lt; stop</span><br><span class="line">redis&gt; LTRIM alpha <span class="number">10086</span> <span class="number">123321</span></span><br><span class="line">OK</span><br><span class="line">redis&gt; LRANGE alpha <span class="number">0</span> -<span class="number">1</span>        # 列表被清空</span><br><span class="line">(empty list or set)</span><br><span class="line"></span><br><span class="line"># 情况 <span class="number">4</span>： start 和 stop 都比列表的最大下标要大，并且 start &gt; stop</span><br><span class="line">redis&gt; RPUSH <span class="keyword">new</span>-alpha <span class="string">&quot;h&quot;</span> <span class="string">&quot;e&quot;</span> <span class="string">&quot;l&quot;</span> <span class="string">&quot;l&quot;</span> <span class="string">&quot;o&quot;</span>  # 重新建立一个新列表</span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line">redis&gt; LRANGE <span class="keyword">new</span>-alpha <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;h&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;e&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;l&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;l&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;o&quot;</span></span><br><span class="line">redis&gt; LTRIM <span class="keyword">new</span>-alpha <span class="number">123321</span> <span class="number">10086</span>    # 执行 LTRIM</span><br><span class="line">OK</span><br><span class="line">redis&gt; LRANGE <span class="keyword">new</span>-alpha <span class="number">0</span> -<span class="number">1</span>           # 同样被清空</span><br><span class="line">(empty list or set)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="RPOPLPUSH"><a class="header-anchor" href="#RPOPLPUSH"></a>RPOPLPUSH</h5>
<ul>
<li>语法<br>
RPOPLPUSH source destination</li>
<li>说明<br>
命令 RPOPLPUSH 在一个原子时间内，执行以下两个动作：
<ul>
<li>将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。</li>
<li>将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。</li>
</ul>
</li>
</ul>
<p>如果 source 不存在，值 nil 被返回，并且不执行其他动作。如果 source 和 destination 相同，则列表中的表尾元素被移动到表头，并返回该元素，可以把这种特殊情况视作列表的旋转(rotation)操作。</p>
<ul>
<li>
<p>返回值<br>
被弹出的元素。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	# source 和 destination 不同</span><br><span class="line">redis&gt; LRANGE alpha <span class="number">0</span> -<span class="number">1</span>         # 查看所有元素</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;d&quot;</span></span><br><span class="line">redis&gt; RPOPLPUSH alpha reciver   # 执行一次 RPOPLPUSH 看看</span><br><span class="line"><span class="string">&quot;d&quot;</span></span><br><span class="line">redis&gt; LRANGE alpha <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line">redis&gt; LRANGE reciver <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;d&quot;</span></span><br><span class="line">redis&gt; RPOPLPUSH alpha reciver # 再执行一次，证实 RPOP 和 LPUSH 的位置正确</span><br><span class="line"><span class="string">&quot;c&quot;</span>	</span><br><span class="line">redis&gt; LRANGE alpha <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line">redis&gt; LRANGE reciver <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;d&quot;</span></span><br><span class="line"></span><br><span class="line"># source 和 destination 相同</span><br><span class="line">redis&gt; LRANGE number <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;4&quot;</span></span><br><span class="line">redis&gt; RPOPLPUSH number number</span><br><span class="line"><span class="string">&quot;4&quot;</span></span><br><span class="line">redis&gt; LRANGE number <span class="number">0</span> -<span class="number">1</span>           # <span class="number">4</span> 被旋转到了表头</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;3&quot;</span>	</span><br><span class="line">redis&gt; RPOPLPUSH number number</span><br><span class="line"><span class="string">&quot;3&quot;</span>	</span><br><span class="line">redis&gt; LRANGE number <span class="number">0</span> -<span class="number">1</span>           # 这次是 <span class="number">3</span> 被旋转到了表头</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="BRPOPLPUSH"><a class="header-anchor" href="#BRPOPLPUSH"></a>BRPOPLPUSH</h5>
<ul>
<li>
<p>语法<br>
BRPOPLPUSH source destination timeout</p>
</li>
<li>
<p>说明<br>
BRPOPLPUSH 是 RPOPLPUSH source destination 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH source destination 一样。<br>
当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH key value [value …] 或 RPUSH key value [value …] 命令为止。<br>
超时参数 timeout 接受一个以秒为单位的数字作为值。超时参数设为 0 表示阻塞时间可以无限期延长(block indefinitely) 。</p>
</li>
<li>
<p>返回值<br>
假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。 反之，返回一个含有两个元素的列表，第一个元素是被弹出元素的值，第二个元素是等待时长。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 非空列表</span><br><span class="line">redis&gt; BRPOPLPUSH msg reciver <span class="number">500</span></span><br><span class="line"><span class="string">&quot;hello moto&quot;</span>                        # 弹出元素的值</span><br><span class="line">(<span class="number">3.</span>38s)                             # 等待时长</span><br><span class="line">redis&gt; LLEN <span class="title function_">reciver</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">redis&gt; LRANGE reciver <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;hello moto&quot;</span></span><br><span class="line"></span><br><span class="line"># 空列表</span><br><span class="line">redis&gt; BRPOPLPUSH msg reciver <span class="number">1</span></span><br><span class="line">(nil)</span><br><span class="line">(<span class="number">1.</span>34s)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="LSET"><a class="header-anchor" href="#LSET"></a>LSET</h5>
<ul>
<li>
<p>语法<br>
LSET key index value</p>
</li>
<li>
<p>说明<br>
将列表 key 下标为 index 的元素的值设置为 value 。<br>
当 index 参数超出范围，或对一个空列表( key 不存在)进行 LSET 时，返回一个错误。</p>
</li>
<li>
<p>返回值<br>
操作成功返回 ok ，否则返回错误信息。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 对空列表(key 不存在)进行 LSET</span><br><span class="line">redis&gt; EXISTS <span class="title function_">list</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span>	</span><br><span class="line">redis&gt; LSET list <span class="number">0</span> item</span><br><span class="line">(error) ERR no such key</span><br><span class="line"></span><br><span class="line"># 对非空列表进行 LSET</span><br><span class="line">redis&gt; LPUSH job <span class="string">&quot;cook food&quot;</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">redis&gt; LRANGE job <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;cook food&quot;</span></span><br><span class="line">redis&gt; LSET job <span class="number">0</span> <span class="string">&quot;play game&quot;</span></span><br><span class="line">OK	</span><br><span class="line">redis&gt; LRANGE job  <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;play game&quot;</span></span><br><span class="line">	</span><br><span class="line"># index 超出范围</span><br><span class="line">redis&gt; LLEN list                    # 列表长度为 <span class="number">1</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">redis&gt; LSET list <span class="number">3</span> <span class="string">&#x27;out of range&#x27;</span></span><br><span class="line">(error) ERR index out of range</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="集合-set"><a class="header-anchor" href="#集合-set"></a>集合(set)</h3>
<h4 id="特点-v4"><a class="header-anchor" href="#特点-v4"></a>特点</h4>
<ul>
<li>set是无序不能重复的集合,单值多value</li>
<li>set是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)</li>
<li>集合中最大的成员数为 2^32 - 1 (超过42亿个成员)</li>
</ul>
<h4 id="常用命令-v4"><a class="header-anchor" href="#常用命令-v4"></a>常用命令</h4>
<h5 id="SADD"><a class="header-anchor" href="#SADD"></a>SADD</h5>
<ul>
<li>
<p>语法<br>
SADD key member [member …]</p>
</li>
<li>
<p>说明<br>
将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略。<br>
假如 key 不存在，则创建一个只包含 member 元素作成员的集合。<br>
当 key 不是集合类型时，返回一个错误。</p>
</li>
<li>
<p>返回值<br>
被添加到集合中的新元素的数量，不包括被忽略的元素。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 添加单个元素</span><br><span class="line">redis&gt; SADD bbs <span class="string">&quot;discuz.net&quot;</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line"># 添加重复元素</span><br><span class="line">redis&gt; SADD bbs <span class="string">&quot;discuz.net&quot;</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"></span><br><span class="line"># 添加多个元素</span><br><span class="line">redis&gt; SADD bbs <span class="string">&quot;tianya.cn&quot;</span> <span class="string">&quot;groups.google.com&quot;</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line">redis&gt; SMEMBERS bbs</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;discuz.net&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;groups.google.com&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;tianya.cn&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="SMEMBERS"><a class="header-anchor" href="#SMEMBERS"></a>SMEMBERS</h5>
<ul>
<li>
<p>语法<br>
SMEMBERS key</p>
</li>
<li>
<p>说明<br>
返回集合 key 中的所有成员。不存在的 key 被视为空集合。</p>
</li>
<li>
<p>返回值<br>
集合中的所有成员。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># key 不存在或集合为空</span><br><span class="line">redis&gt; EXISTS <span class="title function_">not_exists_key</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line">redis&gt; SMEMBERS <span class="title function_">not_exists_key</span></span><br><span class="line"><span class="params">(empty list or set)</span></span><br><span class="line"></span><br><span class="line"># 非空集合</span><br><span class="line">redis&gt; SADD language Ruby Python <span class="title function_">Clojure</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">redis&gt; SMEMBERS language</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Ruby&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;Clojure&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="SISMEMBER"><a class="header-anchor" href="#SISMEMBER"></a>SISMEMBER</h5>
<ul>
<li>
<p>语法<br>
SISMEMBER key member</p>
</li>
<li>
<p>说明<br>
判断 member 元素是否集合 key 的成员。</p>
</li>
<li>
<p>返回值<br>
如果 member 元素是集合的成员，返回 1 。 如果 member 元素不是集合的成员，或 key 不存在，返回 0 。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; SMEMBERS website</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;baidu.com&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;google.cn&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;souhu.com&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; SISMEMBER website <span class="string">&quot;tencent.com&quot;</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"></span><br><span class="line">redis&gt; SISMEMBER website <span class="string">&quot;baidu.com&quot;</span></span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="SCARD"><a class="header-anchor" href="#SCARD"></a>SCARD</h5>
<ul>
<li>
<p>语法<br>
SCARD key</p>
</li>
<li>
<p>说明<br>
返回集合 key 的基数(集合中元素的数量)。</p>
</li>
<li>
<p>返回值<br>
集合的基数。 当 key 不存在时，返回 0 。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; SADD tool pc printer <span class="title function_">phone</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">redis&gt; SCARD tool   # 非空集合</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"></span><br><span class="line">redis&gt; DEL <span class="title function_">tool</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; SCARD tool   # 空集合</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="SREM"><a class="header-anchor" href="#SREM"></a>SREM</h5>
<ul>
<li>
<p>语法<br>
SREM key member [member …]</p>
</li>
<li>
<p>说明<br>
移除集合 key 中的一个或多个 member 元素，不存在的 member 元素会被忽略。当 key 不是集合类型，返回一个错误。</p>
</li>
<li>
<p>返回值<br>
被成功移除的元素的数量，不包括被忽略的元素。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 测试数据</span><br><span class="line">redis&gt; SMEMBERS languages</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;lisp&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;ruby&quot;</span></span><br><span class="line"></span><br><span class="line"># 移除单个元素</span><br><span class="line">redis&gt; SREM languages <span class="title function_">ruby</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"># 移除不存在元素</span><br><span class="line">redis&gt; SREM languages non-exists-language</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"></span><br><span class="line"># 移除多个元素</span><br><span class="line">redis&gt; SREM languages lisp python <span class="title function_">c</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">redis&gt; SMEMBERS <span class="title function_">languages</span></span><br><span class="line"><span class="params">(empty list or set)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="SRANDMEMBER"><a class="header-anchor" href="#SRANDMEMBER"></a>SRANDMEMBER</h5>
<ul>
<li>
<p>语法<br>
SRANDMEMBER key [count]</p>
</li>
<li>
<p>说明<br>
如果命令执行时，只提供了 key 参数，那么返回集合中的一个随机元素。<br>
从 Redis 2.6 版本开始， SRANDMEMBER 命令接受可选的 count 参数：</p>
<ul>
<li>如果 count 为正数，且小于集合基数，那么命令返回一个包含 count 个元素的数组，数组中的元素各不相同。如果 count 大于等于集合基数，那么返回整个集合。</li>
<li>如果 count 为负数，那么命令返回一个数组，数组中的元素<strong>可能会重复出现多次</strong>，而数组的长度为 count 的绝对值。</li>
</ul>
<p>该操作和 SPOP key 相似，但 SPOP key 将随机元素从集合中移除并返回，而 SRANDMEMBER 则仅仅返回随机元素，而不对集合进行任何改动。</p>
</li>
<li>
<p>返回值<br>
只提供 key 参数时，返回一个元素；如果集合为空，返回 nil 。 如果提供了 count 参数，那么返回一个数组；如果集合为空，返回空数组。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 添加元素</span><br><span class="line">redis&gt; SADD fruit apple banana <span class="title function_">cherry</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"># 只给定 key 参数，返回一个随机元素</span><br><span class="line">redis&gt; SRANDMEMBER fruit</span><br><span class="line"><span class="string">&quot;cherry&quot;</span></span><br><span class="line">redis&gt; SRANDMEMBER fruit</span><br><span class="line"><span class="string">&quot;apple&quot;</span></span><br><span class="line"></span><br><span class="line"># 给定 <span class="number">3</span> 为 count 参数，返回 <span class="number">3</span> 个随机元素</span><br><span class="line"># 每个随机元素都不相同</span><br><span class="line">redis&gt; SRANDMEMBER fruit <span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;apple&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;banana&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;cherry&quot;</span></span><br><span class="line"></span><br><span class="line"># 给定 -<span class="number">3</span> 为 count 参数，返回 <span class="number">3</span> 个随机元素</span><br><span class="line"># 元素可能会重复出现多次</span><br><span class="line">redis&gt; SRANDMEMBER fruit -<span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;banana&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;cherry&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;apple&quot;</span></span><br><span class="line">redis&gt; SRANDMEMBER fruit -<span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;apple&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;apple&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;cherry&quot;</span></span><br><span class="line"></span><br><span class="line"># 如果 count 是整数，且大于等于集合基数，那么返回整个集合</span><br><span class="line">redis&gt; SRANDMEMBER fruit <span class="number">10</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;apple&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;banana&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;cherry&quot;</span></span><br><span class="line"></span><br><span class="line"># 如果 count 是负数，且 count 的绝对值大于集合的基数</span><br><span class="line"># 那么返回的数组的长度为 count 的绝对值</span><br><span class="line">redis&gt; SRANDMEMBER fruit -<span class="number">10</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;banana&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;apple&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;banana&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;cherry&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;apple&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;apple&quot;</span></span><br><span class="line"><span class="number">7</span>) <span class="string">&quot;cherry&quot;</span></span><br><span class="line"><span class="number">8</span>) <span class="string">&quot;apple&quot;</span></span><br><span class="line"><span class="number">9</span>) <span class="string">&quot;apple&quot;</span></span><br><span class="line"><span class="number">10</span>) <span class="string">&quot;banana&quot;</span></span><br><span class="line"></span><br><span class="line"># SRANDMEMBER 并不会修改集合内容</span><br><span class="line">redis&gt; SMEMBERS fruit</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;apple&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;cherry&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;banana&quot;</span></span><br><span class="line"></span><br><span class="line"># 集合为空时返回 nil 或者空数组</span><br><span class="line">redis&gt; SRANDMEMBER not-exists</span><br><span class="line">(nil)</span><br><span class="line">redis&gt; SRANDMEMBER not-eixsts <span class="number">10</span></span><br><span class="line">(empty list or set)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="SPOP"><a class="header-anchor" href="#SPOP"></a>SPOP</h5>
<ul>
<li>
<p>语法<br>
SPOP key</p>
</li>
<li>
<p>说明<br>
移除并返回集合中的一个随机元素。如果只想获取一个随机元素，但不想该元素从集合中被移除的话，可以使用 SRANDMEMBER key [count] 命令。</p>
</li>
<li>
<p>返回值<br>
被移除的随机元素。 当 key 不存在或 key 是空集时，返回 nil 。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; SMEMBERS db</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;MySQL&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;MongoDB&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;Redis&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; SPOP db</span><br><span class="line"><span class="string">&quot;Redis&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; SMEMBERS db</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;MySQL&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;MongoDB&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; SPOP db</span><br><span class="line"><span class="string">&quot;MySQL&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; SMEMBERS db</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;MongoDB&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="SMOVE"><a class="header-anchor" href="#SMOVE"></a>SMOVE</h5>
<ul>
<li>
<p>语法<br>
SMOVE source destination member</p>
</li>
<li>
<p>说明<br>
将 member 元素从 source 集合移动到 destination 集合。SMOVE 是原子性操作。<br>
如果 source 集合不存在或不包含指定的 member 元素，则 SMOVE 命令不执行任何操作，仅返回 0 。否则， member 元素从 source 集合中被移除，并添加到 destination 集合中去。<br>
当 destination 集合已经包含 member 元素时， SMOVE 命令只是简单地将 source 集合中的 member 元素删除。<br>
当 source 或 destination 不是集合类型时，返回一个错误。</p>
</li>
<li>
<p>返回值<br>
如果 member 元素被成功移除，返回 1 。 如果 member 元素不是 source 集合的成员，并且没有任何操作对 destination 集合执行，那么返回 0 。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; SMEMBERS songs</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Billie Jean&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Believe Me&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; SMEMBERS <span class="title function_">my_songs</span></span><br><span class="line"><span class="params">(empty list or set)</span></span><br><span class="line"></span><br><span class="line">redis&gt; SMOVE songs my_songs <span class="string">&quot;Believe Me&quot;</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis&gt; SMEMBERS songs</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Billie Jean&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; SMEMBERS my_songs</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Believe Me&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="SDIFF"><a class="header-anchor" href="#SDIFF"></a>SDIFF</h5>
<ul>
<li>
<p>语法<br>
SDIFF key [key …]</p>
</li>
<li>
<p>说明<br>
返回一个集合的全部成员，该集合是所有给定集合之间的差集。不存在的 key 被视为空集。</p>
</li>
<li>
<p>返回值<br>
一个包含差集成员的列表。。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; SMEMBERS peter<span class="string">&#x27;s_movies</span></span><br><span class="line"><span class="string">1) &quot;bet man&quot;</span></span><br><span class="line"><span class="string">2) &quot;start war&quot;</span></span><br><span class="line"><span class="string">3) &quot;2012&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">redis&gt; SMEMBERS joe&#x27;</span>s_movies</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;hi, lady&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Fast Five&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;2012&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; SDIFF peter<span class="string">&#x27;s_movies joe&#x27;</span>s_movies</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;bet man&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;start war&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="SUNION"><a class="header-anchor" href="#SUNION"></a>SUNION</h5>
<ul>
<li>
<p>语法<br>
SUNION key [key …]</p>
</li>
<li>
<p>说明<br>
返回一个集合的全部成员，该集合是所有给定集合的并集。不存在的 key 被视为空集。</p>
</li>
<li>
<p>返回值<br>
并集成员的列表。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; SMEMBERS songs</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Billie Jean&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; SMEMBERS my_songs</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Believe Me&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; SUNION songs my_songs</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Billie Jean&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Believe Me&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="有序集合-zset"><a class="header-anchor" href="#有序集合-zset"></a>有序集合(zset)</h3>
<h4 id="特点-v5"><a class="header-anchor" href="#特点-v5"></a>特点</h4>
<ul>
<li>zset是有序不可重复的集合</li>
<li>zset每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序</li>
<li>zset的成员是唯一的,但分数(score)却可以重复</li>
<li>zset通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)</li>
<li>zset中最大的成员数为 2^32 - 1 (超过42亿个成员)</li>
</ul>
<h4 id="常用命令-v5"><a class="header-anchor" href="#常用命令-v5"></a>常用命令</h4>
<h5 id="ZADD"><a class="header-anchor" href="#ZADD"></a>ZADD</h5>
<ul>
<li>
<p>语法<br>
ZADD key score member [[score member] [score member] …]</p>
</li>
<li>
<p>说明<br>
将一个或多个 member 元素及其 score 值加入到有序集 key 当中。<br>
如果某个 member 已经是有序集的成员，那么更新这个 member 的 score 值，并通过重新插入这个 member 元素，来保证该 member 在正确的位置上。<br>
score 值可以是整数值或双精度浮点数。<br>
如果 key 不存在，则创建一个空的有序集并执行 ZADD 操作。<br>
当 key 存在但不是有序集类型时，返回一个错误。</p>
</li>
<li>
<p>返回值<br>
被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 添加单个元素</span><br><span class="line">redis&gt; ZADD page_rank <span class="number">10</span> google.com</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line"># 添加多个元素</span><br><span class="line">redis&gt; ZADD page_rank <span class="number">9</span> baidu.com <span class="number">8</span> bing.com</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line">redis&gt; ZRANGE page_rank <span class="number">0</span> -<span class="number">1</span> WITHSCORES</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;bing.com&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;8&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;baidu.com&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;9&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;google.com&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;10&quot;</span></span><br><span class="line"></span><br><span class="line"># 添加已存在元素，且 score 值不变</span><br><span class="line">redis&gt; ZADD page_rank <span class="number">10</span> google.com</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line">redis&gt; ZRANGE page_rank <span class="number">0</span> -<span class="number">1</span> WITHSCORES  # 没有改变</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;bing.com&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;8&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;baidu.com&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;9&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;google.com&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;10&quot;</span></span><br><span class="line"></span><br><span class="line"># 添加已存在元素，但是改变 score 值</span><br><span class="line">redis&gt; ZADD page_rank <span class="number">6</span> bing.com</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line">redis&gt; ZRANGE page_rank <span class="number">0</span> -<span class="number">1</span> WITHSCORES # bing.com 元素的 score 值被改变</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;bing.com&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;6&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;baidu.com&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;9&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;google.com&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;10&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="ZRANGE"><a class="header-anchor" href="#ZRANGE"></a>ZRANGE</h5>
<ul>
<li>
<p>语法<br>
ZRANGE key start stop [WITHSCORES]</p>
</li>
<li>
<p>说明<br>
返回有序集 key 中，指定区间内的成员。<br>
其中成员的位置按 score 值递增(从小到大)来排序。<br>
具有相同 score 值的成员按字典序(lexicographical order )来排列。<br>
如果你需要成员按 score 值递减(从大到小)来排列，请使用 ZREVRANGE key start stop [WITHSCORES] 命令。<br>
下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。 你也可以使用负数下标，以 -1 表示最后一个成员， -2 表示倒数第二个成员，以此类推。<br>
超出范围的下标并不会引起错误。 比如说，当 start 的值比有序集的最大下标还要大，或是 start &gt; stop 时， ZRANGE 命令只是简单地返回一个空列表。 另一方面，假如 stop 参数的值比有序集的最大下标还要大，那么 Redis 将 stop 当作最大下标来处理。<br>
可以通过使用 WITHSCORES 选项，来让成员和它的 score 值一并返回，返回列表以 value1,score1, …, valueN,scoreN 的格式表示。 客户端库可能会返回一些更复杂的数据类型，比如数组、元组等。</p>
</li>
<li>
<p>返回值<br>
指定区间内，带有 score 值(可选)的有序集成员的列表。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis &gt; ZRANGE salary <span class="number">0</span> -<span class="number">1</span> WITHSCORES    # 显示整个有序集成员</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;3500&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;5000&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;boss&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;10086&quot;</span></span><br><span class="line"></span><br><span class="line">redis &gt; ZRANGE salary <span class="number">1</span> <span class="number">2</span> WITHSCORES  # 显示有序集下标区间 <span class="number">1</span> 至 <span class="number">2</span> 的成员</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;5000&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;boss&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;10086&quot;</span></span><br><span class="line"></span><br><span class="line">redis &gt; ZRANGE salary <span class="number">0</span> <span class="number">200000</span> WITHSCORES  # 测试 end 下标超出最大下标时的情况</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;3500&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;5000&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;boss&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;10086&quot;</span></span><br><span class="line"></span><br><span class="line">redis &gt; ZRANGE salary <span class="number">200000</span> <span class="number">3000000</span> WITHSCORES # 测试当给定区间不存在于有序集时的情况</span><br><span class="line">(empty list or set)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="ZSCORE"><a class="header-anchor" href="#ZSCORE"></a>ZSCORE</h5>
<ul>
<li>
<p>语法<br>
ZSCORE key member</p>
</li>
<li>
<p>说明<br>
返回有序集 key 中，成员 member 的 score 值。如果 member 元素不是有序集 key 的成员，或 key 不存在，返回 nil 。</p>
</li>
<li>
<p>返回值<br>
member 成员的 score 值，以字符串形式表示。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; ZRANGE salary <span class="number">0</span> -<span class="number">1</span> WITHSCORES    # 测试数据</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;2000&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;peter&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;3500&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;5000&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; ZSCORE salary peter              # 注意返回值是字符串</span><br><span class="line"><span class="string">&quot;3500&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="ZCARD"><a class="header-anchor" href="#ZCARD"></a>ZCARD</h5>
<ul>
<li>
<p>语法<br>
ZCARD key</p>
</li>
<li>
<p>说明<br>
返回有序集 key 的数量。</p>
</li>
<li>
<p>返回值<br>
当 key 存在且是有序集类型时，返回有序集的数量。 当 key 不存在时，返回 0 。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis &gt; ZADD salary <span class="number">2000</span> tom    # 添加一个成员</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis &gt; ZCARD <span class="title function_">salary</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis &gt; ZADD salary <span class="number">5000</span> jack   # 再添加一个成员</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">redis &gt; ZCARD <span class="title function_">salary</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">redis &gt; EXISTS non_exists_key   # 对不存在的 key 进行 ZCARD 操作</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"></span><br><span class="line">redis &gt; ZCARD <span class="title function_">non_exists_key</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="ZCOUNT"><a class="header-anchor" href="#ZCOUNT"></a>ZCOUNT</h5>
<ul>
<li>
<p>语法<br>
ZCOUNT key min max</p>
</li>
<li>
<p>说明<br>
返回有序集 key 中， score 值在 min 和 max 之间(默认包括 score 值等于 min 或 max )的成员的数量。</p>
</li>
<li>
<p>返回值<br>
score 值在 min 和 max 之间的成员的数量。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; ZRANGE salary <span class="number">0</span> -<span class="number">1</span> WITHSCORES  # 测试数据</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;2000&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;peter&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;3500&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;5000&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; ZCOUNT salary <span class="number">2000</span> <span class="number">5000</span>  # 计算薪水在 <span class="number">2000</span>-<span class="number">5000</span> 之间的人数</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"></span><br><span class="line">redis&gt; ZCOUNT salary <span class="number">3000</span> <span class="number">5000</span>  # 计算薪水在 <span class="number">3000</span>-<span class="number">5000</span> 之间的人数</span><br><span class="line">(integer) <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="ZRANK"><a class="header-anchor" href="#ZRANK"></a>ZRANK</h5>
<ul>
<li>
<p>语法<br>
ZRANK key member</p>
</li>
<li>
<p>说明<br>
返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递增(从小到大)顺序排列。<br>
排名以 0 为底，也就是说， score 值最小的成员排名为 0 。<br>
使用 ZREVRANK key member 命令可以获得成员按 score 值递减(从大到小)排列的排名。</p>
</li>
<li>
<p>返回值<br>
如果 member 是有序集 key 的成员，返回 member 的排名。 如果 member 不是有序集 key 的成员，返回 nil 。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis&gt; ZRANGE salary <span class="number">0</span> -<span class="number">1</span> WITHSCORES  # 显示所有成员及其score值</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;peter&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;3500&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;4000&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;5000&quot;</span></span><br><span class="line"></span><br><span class="line">redis&gt; ZRANK salary tom        # 显示 tom 的薪水排名，第二</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="ZREM"><a class="header-anchor" href="#ZREM"></a>ZREM</h5>
<ul>
<li>
<p>语法<br>
ZREM key member [member …]</p>
</li>
<li>
<p>说明<br>
移除有序集 key 中的一个或多个成员，不存在的成员将被忽略。当 key 存在但不是有序集类型时，返回一个错误。</p>
</li>
<li>
<p>返回值<br>
被成功移除的成员的数量，不包括被忽略的成员。</p>
</li>
<li>
<p>相关案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 测试数据</span><br><span class="line">redis&gt; ZRANGE page_rank <span class="number">0</span> -<span class="number">1</span> WITHSCORES</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;bing.com&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;8&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;baidu.com&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;9&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;google.com&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;10&quot;</span></span><br><span class="line"></span><br><span class="line"># 移除单个元素</span><br><span class="line">redis&gt; ZREM page_rank google.com</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">redis&gt; ZRANGE page_rank <span class="number">0</span> -<span class="number">1</span> WITHSCORES</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;bing.com&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;8&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;baidu.com&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;9&quot;</span></span><br><span class="line"></span><br><span class="line"># 移除多个元素</span><br><span class="line">redis&gt; ZREM page_rank baidu.com bing.com</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line">redis&gt; ZRANGE page_rank <span class="number">0</span> -<span class="number">1</span> WITHSCORES</span><br><span class="line">(empty list or set)</span><br><span class="line"></span><br><span class="line"># 移除不存在元素</span><br><span class="line">redis&gt; ZREM page_rank non-exists-element</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="持久化"><a class="header-anchor" href="#持久化"></a>持久化</h2>
<h3 id="RDB（Redis-DataBase）"><a class="header-anchor" href="#RDB（Redis-DataBase）"></a>RDB（Redis DataBase）</h3>
<h4 id="是什么"><a class="header-anchor" href="#是什么"></a>是什么</h4>
<ul>
<li>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。</li>
<li>rdb 保存的是dump.rdb文件</li>
<li>相关配置在配置文件中搜索### SNAPSHOTTING ###</li>
</ul>
<h4 id="如何触发RDB快照"><a class="header-anchor" href="#如何触发RDB快照"></a>如何触发RDB快照</h4>
<ul>
<li>配置文件中默认的快照配置dbfilename dump.rdb
<ul>
<li>冷拷贝后重新使用</li>
<li>可以cp dump.rdb dump_new.rdb</li>
</ul>
</li>
<li>命令save或者是bgsave
<ul>
<li>Save：save时只管保存其它不管，命令执行完前，其它命令处于等待状态，数据量大时会出现阻塞</li>
<li>BGSAVE：Redis会在后台异步进行快照操作， 快照同时还可以响应客户端请求。可以通过lastsave 命令获取最后一次成功执行快照的时间。基本不会阻塞进程</li>
</ul>
</li>
<li>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</li>
</ul>
<h4 id="如何恢复"><a class="header-anchor" href="#如何恢复"></a>如何恢复</h4>
<ul>
<li>将备份文件 (dump.rdb) 移动到 Redis 安装目录并启动服务即可</li>
<li>CONFIG GET dir获取目录</li>
</ul>
<h4 id="自动生成RDB的策略"><a class="header-anchor" href="#自动生成RDB的策略"></a>自动生成RDB的策略</h4>
<table>
<thead>
<tr>
<th style="text-align:center">配置</th>
<th style="text-align:center">seconds</th>
<th style="text-align:center">changes</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">save</td>
<td style="text-align:center">900</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">save</td>
<td style="text-align:center">300</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">save</td>
<td style="text-align:center">60</td>
<td style="text-align:center">1000</td>
</tr>
</tbody>
</table>
<p>数据写入量不受控制，所以生成的规则也不好控制。频繁的操作会对硬盘造成一定压力。</p>
<h4 id="优势与劣势"><a class="header-anchor" href="#优势与劣势"></a>优势与劣势</h4>
<ul>
<li>优势
<ul>
<li>体积更小<br>
相同的数据量rdb数据比aof的小，因为rdb是紧凑型文件</li>
<li>恢复更快<br>
因为rdb是数据的快照，基本上就是数据的复制，不用重新读取再写入内存</li>
<li>性能更高<br>
父进程在保存rdb时候只需要fork一个子进程，无需父进程的进行其他io操作，也保证了服务器的性能</li>
</ul>
</li>
<li>劣势
<ul>
<li>在一定间隔时间做一次备份，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改，根据自己的配置，最少五分钟，甚至几小时的数据。</li>
</ul>
</li>
</ul>
<p><a href="https://blog.csdn.net/qq_52033688/article/details/113890849">参考链接</a></p>
<h3 id="AOF（Append-Only-File）"><a class="header-anchor" href="#AOF（Append-Only-File）"></a>AOF（Append Only File）</h3>
<h4 id="是什么-v2"><a class="header-anchor" href="#是什么-v2"></a>是什么</h4>
<p>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，Redis启动之初会读取该文件重新构建数据，换言之，Redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p>
<h4 id="AOF配置"><a class="header-anchor" href="#AOF配置"></a>AOF配置</h4>
<ul>
<li>相关配置在配置文件的位置 - 在redis.conf搜寻### APPEND ONLY MODE ###</li>
<li>AOF保存的是appendonly.aof文件（在配置文件可修改文件名）</li>
</ul>
<h4 id="AOF启动-修复-恢复"><a class="header-anchor" href="#AOF启动-修复-恢复"></a>AOF启动/修复/恢复</h4>
<ul>
<li>正常恢复
<ul>
<li>启动：设置Yes
<ul>
<li>修改默认的appendonly no，改为yes</li>
</ul>
</li>
<li>将有数据的aof文件复制一份保存到对应目录(config get dir)</li>
<li>恢复：重启redis然后重新加载</li>
</ul>
</li>
<li>异常恢复
<ul>
<li>启动：设置Yes
<ul>
<li>修改默认的appendonly no，改为yes</li>
</ul>
</li>
</ul>
</li>
<li>备份被写坏的AOF文件</li>
<li>修复：
<ul>
<li>Redis-check-aof --fix进行修复</li>
</ul>
</li>
<li>恢复：重启redis然后重新加载</li>
</ul>
<h4 id="rewrite"><a class="header-anchor" href="#rewrite"></a>rewrite</h4>
<ul>
<li>是什么<br>
AOF采用文件追加方式，文件会越来越大。为避免出现此种情况，新增了重写机制， 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集。可以使用命令bgrewriteaof</li>
<li>重写原理<br>
AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)， 遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件， 而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似</li>
<li>触发机制<br>
Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发</li>
</ul>
<h4 id="三种策略对比"><a class="header-anchor" href="#三种策略对比"></a>三种策略对比</h4>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">优点</th>
<th style="text-align:center">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">always (每修改同步)</td>
<td style="text-align:center">每次发生数据变更会被立即记录到磁盘,数据完整性比较好</td>
<td style="text-align:center">IO开销大,性能差</td>
</tr>
<tr>
<td style="text-align:center">everysec (没秒同步）</td>
<td style="text-align:center">每秒记录 如果一秒内宕机，有数据丢失</td>
<td style="text-align:center">可能会丢一秒数据</td>
</tr>
<tr>
<td style="text-align:center">no</td>
<td style="text-align:center">从不同步</td>
<td style="text-align:center">不可控</td>
</tr>
</tbody>
</table>
<p>一般使用默认配置everysec</p>
<h4 id="优势与劣势-v2"><a class="header-anchor" href="#优势与劣势-v2"></a>优势与劣势</h4>
<ul>
<li>优势
<ul>
<li>数据完整性好<br>
可以设置fsync策略，一般默认是everysec，也可以设置每次写入追加，所以即使服务死掉了，最多丢失一秒数据</li>
</ul>
</li>
<li>劣势
<ul>
<li>体积大<br>
相同数据集的数据而言aof文件要远大于rdb文件</li>
<li>恢复速度慢<br>
要重新执行一遍大体积日志文件</li>
<li>性能相对较差</li>
</ul>
</li>
</ul>
<p><a href="https://blog.csdn.net/qq_52033688/article/details/113890849">参考链接</a></p>
<h2 id="事务"><a class="header-anchor" href="#事务"></a>事务</h2>
<h3 id="是什么-v3"><a class="header-anchor" href="#是什么-v3"></a>是什么</h3>
<p>可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其它命令插入，不许加塞。Redis对事物是部分支持(参考冤头债主)且不支持回滚。</p>
<h3 id="能干嘛"><a class="header-anchor" href="#能干嘛"></a>能干嘛</h3>
<p>一个队列中，一次性、顺序性、排他性的执行一系列命令。</p>
<h3 id="常用命令-v6"><a class="header-anchor" href="#常用命令-v6"></a>常用命令</h3>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DISCARD</td>
<td style="text-align:center">取消事务，放弃执行事务块内的所有命令。</td>
</tr>
<tr>
<td style="text-align:center">EXEC</td>
<td style="text-align:center">执行所有事务块内的命令。</td>
</tr>
<tr>
<td style="text-align:center">MULTI</td>
<td style="text-align:center">标记一个事务块的开始。</td>
</tr>
<tr>
<td style="text-align:center">UNWATCH</td>
<td style="text-align:center">取消 WATCH 命令对所有 key 的监视。</td>
</tr>
<tr>
<td style="text-align:center">WATCH key [key …]</td>
<td style="text-align:center">监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</td>
</tr>
</tbody>
</table>
<h3 id="case场景"><a class="header-anchor" href="#case场景"></a>case场景</h3>
<ul>
<li>放弃事务<br>
使用DISCARD	命令</li>
<li>全体连坐<br>
输入语句命令过程中有报错，之后执行事务所有语句都不会执行。相当于java的编译异常。</li>
<li>冤头债主<br>
输入语句命令过程中会入队,执行事务的时候只有有问题的语句报错其他语句正常执行。比如incr k1(k1不是数字类型)。相当于Java运行异常。</li>
</ul>
<h3 id="watch与unwatch"><a class="header-anchor" href="#watch与unwatch"></a>watch与unwatch</h3>
<p><a href="http://www.redis.cn/topics/transactions.html">Redis事务处理</a></p>
<h4 id="watch"><a class="header-anchor" href="#watch"></a>watch</h4>
<ul>
<li>watch命令监控了key，如果key被修改了，后面一个事务的执行失效</li>
<li>watch指令，类似<strong>乐观锁(行加版本号)</strong>，事务提交时，如果Key的值已被别的客户端改变， 比如某个list已被别的客户端push/pop过了，整个事务队列都不会被执行</li>
</ul>
<h4 id="unwatch"><a class="header-anchor" href="#unwatch"></a>unwatch</h4>
<ul>
<li>取消 WATCH 命令对所有 key 的监视。<br>
如果在执行 WATCH 命令之后， EXEC 命令或 DISCARD 命令先被执行了的话，那么就不需要再执行 UNWATCH 了。因为 EXEC 命令会执行事务，因此 WATCH 命令的效果已经产生了；而 DISCARD 命令在取消事务的同时也会取消所有对 key 的监视，因此这两个命令执行之后，就没有必要执行 UNWATCH 了。</li>
</ul>
<h3 id="3阶段"><a class="header-anchor" href="#3阶段"></a>3阶段</h3>
<ul>
<li>开启<br>
以MULTI开始一个事务</li>
<li>入队<br>
将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面</li>
<li>执行<br>
由EXEC命令触发事务</li>
</ul>
<h3 id="3特性"><a class="header-anchor" href="#3特性"></a>3特性</h3>
<ul>
<li>单独的隔离操作<br>
事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>
<li>没有隔离级别的概念<br>
队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行， 也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题</li>
<li>不保证原子性<br>
Redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚。所以Redis对事物是部分支持(参考冤头债主)的。</li>
</ul>
<h2 id="发布订阅"><a class="header-anchor" href="#发布订阅"></a>发布订阅</h2>
<ul>
<li>企业一般不会用这个做消息中间件，会选择ActiveMQ之类的</li>
<li>Redis本身不提供消息队列，而是通过列表实现。</li>
<li>消息队列与发布订阅的区别<br>
消息队列中的资源只用一个客户端获得。而发布订阅消息是所有订阅者均能获得</li>
<li>相关命令<br>
SUBSCRIBE 、PUBLISH</li>
</ul>
<h2 id="主从复制"><a class="header-anchor" href="#主从复制"></a>主从复制</h2>
<h3 id="是什么-v4"><a class="header-anchor" href="#是什么-v4"></a>是什么</h3>
<p>主机数据更新后根据配置和策略， 自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主。</p>
<h3 id="能干嘛-v2"><a class="header-anchor" href="#能干嘛-v2"></a>能干嘛</h3>
<ul>
<li>读写分离</li>
<li>容灾恢复</li>
</ul>
<h3 id="准备工作"><a class="header-anchor" href="#准备工作"></a>准备工作</h3>
<ul>
<li>配从(库)不配主(库)</li>
<li>从库配置命令：slaveof 主库IP 主库端口
<ul>
<li><strong>每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件</strong>（具体位置：redis.conf搜寻#### REPLICATION ####）</li>
<li>info replication</li>
</ul>
</li>
<li>修改配置文件细节操作
<ul>
<li>拷贝多个redis.conf文件，按’redis[port].conf’重命名</li>
<li>开启daemonize yes</li>
<li>pid文件名字</li>
<li>指定端口</li>
<li>log文件名字</li>
<li>dump.rdb名字</li>
</ul>
</li>
</ul>
<h3 id="案例演示"><a class="header-anchor" href="#案例演示"></a>案例演示</h3>
<h4 id="一主二仆"><a class="header-anchor" href="#一主二仆"></a>一主二仆</h4>
<p>一个Master两个Slave，即79主机是80和81主机的master 。</p>
<h5 id="相关问题"><a class="header-anchor" href="#相关问题"></a>相关问题</h5>
<ul>
<li>slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的123是否也可以复制？<br>
答：从头开始复制；123也可以复制</li>
<li>从机是否可以写？set可否？<br>
答：从机不可写，不可set，主机可写</li>
<li>主机shutdown后情况如何？从机是上位还是原地待命<br>
答：从机还是原地待命（咸鱼翻身，还是咸鱼）</li>
<li>主机又回来了后，主机新增记录，从机还能否顺利复制？<br>
答：能</li>
<li>其中一台从机down后情况如何？依照原有它能跟上大部队吗？<br>
答：不能跟上，每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件（具体位置：redis.conf搜寻#### REPLICATION ####）</li>
</ul>
<h4 id="薪火相传"><a class="header-anchor" href="#薪火相传"></a>薪火相传</h4>
<p>目的是去中心化，79主机是80主机的master且 80主机是81主机的master,最终80主机在Redis中还是slave。本质也是<strong>一主二仆</strong>。</p>
<h4 id="反客为主"><a class="header-anchor" href="#反客为主"></a>反客为主</h4>
<p>从机执行<strong>SLAVEOF no one</strong>命令成为master，需要成为该从机的从机执行<strong>slaveof ip 端口</strong>命令。目的是使当前数据库停止与其他数据库的同步，转成主数据库，形成新的中心点。</p>
<p>事实上以上三种案例在实际生产环境中不使用(不可能半夜出问题了还人工去执行Redis命令)，实际中应该是自动反客为主模式，即下面讲的哨兵模式。</p>
<h3 id="哨兵模式-sentinel"><a class="header-anchor" href="#哨兵模式-sentinel"></a>哨兵模式(sentinel)</h3>
<h4 id="是什么-v5"><a class="header-anchor" href="#是什么-v5"></a>是什么</h4>
<p>一组sentinel能同时监控多个master。反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p>
<h4 id="配置步骤"><a class="header-anchor" href="#配置步骤"></a>配置步骤</h4>
<ul>
<li>调整结构，6379带着6380、6381</li>
<li>新建sentinel.conf文件，名字绝不能错</li>
<li>配置哨兵,填写内容
<ul>
<li>sentinel monitor 被监控数据库名字(自己起名字) 127.0.0.1 6379 1</li>
<li>上面最后一个数字1，表示主机挂掉后salve投票看让谁接替成为主机，得票数多少后成为主机（PS. 跟官网的描述有出入，下面有官方文档说明）</li>
</ul>
</li>
<li>启动哨兵
<ul>
<li>redis-sentinel /sentinel.conf（上述目录依照各自的实际情况配置，可能目录不同）</li>
</ul>
</li>
<li>正常主从演示</li>
<li>原有的master挂了</li>
<li>投票新选</li>
<li>重新主从继续开工，info replication查查看</li>
</ul>
<h4 id="问题"><a class="header-anchor" href="#问题"></a>问题</h4>
<p>如果之前挂了的master重启回来，会不会双master冲突？<br>
答： 不会，原master会变成slave。</p>
<h3 id="复制的原理"><a class="header-anchor" href="#复制的原理"></a>复制的原理</h3>
<ul>
<li>slave启动成功连接到master后会发送一个sync命令</li>
<li>master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步</li>
<li>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li>
<li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</li>
<li>但是只要是重新连接master，一次完全同步（全量复制)将被自动执行</li>
</ul>
<h3 id="复制的缺点"><a class="header-anchor" href="#复制的缺点"></a>复制的缺点</h3>
<p>由于所有的写操作都是先在Master上操作，然后同步更新到slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p>
<h2 id="集群"><a class="header-anchor" href="#集群"></a>集群</h2>
<h3 id="为什么要用集群"><a class="header-anchor" href="#为什么要用集群"></a>为什么要用集群</h3>
<ul>
<li>并发量</li>
<li>数据量</li>
</ul>
<h3 id="数据分布"><a class="header-anchor" href="#数据分布"></a>数据分布</h3>
<ul>
<li>顺序分区<br>
顺序分布其实不支持批量操作</li>
<li>哈希分区<br>
节点取余：  建议多倍扩容比较好，数据迁移量少<br>
一致性哈希：token环，只影响邻近节点，对其他节点影响小（节点多时候建议）</li>
<li>虚拟槽分区</li>
</ul>
<p>温馨提示：本文是观看尚硅谷周阳老师的Redis教学视频后写的学习笔记，如有错误请联系修改。</p>
<p>自愿打赏成功后发送截图到邮箱1271826574@qq.com可获取本文的MarkDown源文件，邮件标题为：需要一份study_of_redis。</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>关于《徒手攀岩》的几句话</title>
    <url>/2020/02/11/Free_Solo/</url>
    <content><![CDATA[<p><img src="https://i-blog.csdnimg.cn/blog_migrate/72c700d41139a48ca993431d93adbe30.png" alt="在这里插入图片描述"></p>
<span id="more"></span>	
<ul>
<li>全程看得瑟瑟发抖、手心出汗😱</li>
<li>要相信爱情，极端的Alex也能找到几任女朋友</li>
<li>国外在控制人口方面一直很领先鸭</li>
<li>“就像参加奥运比赛一样，你没有拿到金牌，你就得死”</li>
<li>“面对死亡的时候 满足感更强烈”</li>
<li>“人总有一死，不如趁着活着做点想做的事”</li>
<li>看完电影想关心下，有保险公司买他的保险？</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>电影</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>26个字母，26句话</title>
    <url>/2020/04/25/26_letters_26_sentences/</url>
    <content><![CDATA[<ul>
<li>All things are difficult before they are easy.<br>
凡事先难后易。</li>
<li>Better late than never.<br>
迟做总比不做的好。</li>
<li>Cease to struggle and you cease to live.<br>
生命不止，奋斗不息。<span id="more"></span></li>
<li>Do what you say, say what you do.<br>
做你说过的,说你能做的。</li>
<li>Every man is his own worst enemy.<br>
一个人最大的敌人就是他自己。</li>
<li>From small beginnings come great things.<br>
伟大始于渺小。</li>
<li>Grasp all, lost all.<br>
贪多必失。</li>
<li>Happiness is nearly always a reward from hard work.<br>
幸福几乎总是辛勤工作的回报。</li>
<li>If courage is gone, then all is gone.<br>
失去勇气，就失去了一切。</li>
<li>Just do it.<br>
去做就对了(就是搞IT😹)。</li>
<li>Knowledge is power.<br>
知识就是力量。</li>
<li>Live a noble and honest life. Reviving past times in your old age will help you to enjoy your life again.<br>
过一种高尚而诚实的生活。当你年老时回想起过去，你就能再一次享受人生。</li>
<li>Make yourself a better person and know who you are before you try and know someone else and expect them to know you.<br>
在你想了解别人也想让别人了解你之前，先完善并了解自己。</li>
<li>Never judge people by their appearance.  永远不要以貌取人。</li>
<li>Only those who have the patience to do simple things perfectly ever acquire the skill to do difficult things easily.<br>
只有有耐心圆满完成简单工作的人才能够轻而易举的完成困难的事。</li>
<li>Progress is the activity of today and the assurance of tomorrow.<br>
进步是今天的行动、明天的保证。</li>
<li>Quality determines one’s act.<br>
品质决定行为。</li>
<li>Remember that you have the ability to change yourself.<br>
记住你有能力改变自己。</li>
<li>Success is the ability to go from one failure to another with no loss of enthusiasm.<br>
成功是你即使跨过一个又一个失败但也没有失去热情。</li>
<li>The only thing we have to fear is fear itself.<br>
我们唯一不得不害怕的就是害怕本身。</li>
<li>Understand yourself in order to gain a better understanding of others.<br>
了解自己，以便更好地理解他人。</li>
<li>Victory won’t come to me unless we go to it.<br>
胜利是不会向我们走来的，我们必须自己走向胜利。</li>
<li>What makes life dreary is the want of motive.<br>
没有了目的，生活便郁闷无光。</li>
<li>Accelerat[əkˈseləreɪt] your efforts.<br>
强化你的努力。(都用的这句,x开头的单词很少，很难造句)</li>
<li>You have to believe in yourself: that’s the secret of success.<br>
你必须相信自己，这是成功的关键。</li>
<li>Zero is the beginning of everything, so it is also the beginning of success.<br>
零是一切的开始，因此它也是成功的开始。</li>
</ul>
<p><a href="https://new.qq.com/omn/20191226/20191226A0F2K500">原文链接</a></p>
]]></content>
      <categories>
        <category>精华转载</category>
        <category>英语学习</category>
      </categories>
      <tags>
        <tag>英语学习</tag>
      </tags>
  </entry>
  <entry>
    <title>《万历十五年》读书笔记</title>
    <url>/2020/01/27/1587/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/5c4f5dee81e3a53f70446436243c6a94.png" width="460px" align="center"></img> 		<br>
书名：万历十五年<br>
英文名：<em>1587,A Year of No Significance</em><br>
作者：黄仁宇<br>
内容简介：万历十五年，亦即公元1587年，在西欧历史上为西班牙舰队全部出动征英的前一年；而在中国，这平平淡淡的一年中，发生了若干为历史学家所易于忽视的事件。这些事件，表面看来虽似末端小节，但实质上却是以前发生大事的症结，也是将在以后掀起波澜的机缘。在历史学家黄仁宇的眼中，其间的关系因果，恰为历史的重点，而我们的大历史之旅，也自此开始……<br>
读完时间：2020年1月</p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<ul>
<li>这种不公平的现象当然不能持久。到十六世纪初，大部分的高级官员和宦官都已经过着十分奢侈的生活。尤其是高级宦官更为人所艳羡，他们不但在皇城内筑有精美的住宅，而且根据传统习惯，他们也有相好的宫女，同居如同夫妇。他们没有子女，但不乏大批干儿、侄子、外甥的趋奉，因而也颇不寂寞。</li>
<li>统治我们这个庞大的帝国，专靠严刑骏法是不可能的，其秘诀在于运用伦理道德的力量使卑下者服从尊上，女人听从男人的吩咐，而未受教育的愚民则以读书识字的人作为标榜。</li>
<li>圣旨一下，锦衣卫把四个犯官逮到午门之外。两个翰林各受廷杖六十下，并予以“削籍”，即褫夺了文官的身分而降为庶民。另外两个官员因为言辞更加孟浪，多打二十下。打完以后再充军边省，终身不赦。掌刑人员十分了然于犯官的罪恶，打来也特别用力。十几下以后，犯官的臀部即皮开肉绽，继之而血肉狼藉。受责者有一人昏死，嗣后的复苏，也被公认为是一个奇迹；另一人受刑痊愈之后，臀部变成了一边大一边小。皇帝紧接着又降下敕书，内称，参奏张居正的人假借忠孝之名掩盖一个大逆不道的目的，即欺负朕躬年幼，妄图赶走辅粥，使朕躬孤立无援而得遂其私。此次给予杖责，不过是小示做戒，如果有人胆敢继续顽抗，当然要给予更严厉的处罚。</li>
<li>宫廷固然伟大，但是单调。即使有宫室的画栋雕梁和其他豪华装饰，紫禁城也无非是同一模式的再三再四的重复。每至一定的节令，成百成千的宦官宫女，把身上的皮裘换成绸缎，又换成轻纱；又按照时间表把花卉从暖房中取出，或者是把落叶打扫，御沟疏通，这一切都不能改变精神世界中的空虚和寂寞。在按着固定节奏流逝的时光之中，既缺乏动人心魄的事件，也缺乏令人企羡的奇遇。这种冷酷的气氛笼罩一切，即使贵为天子，也很难有所改变。</li>
<li>绝大多数的宫女在使婢生涯中度过了青春，中年以后也<br>
许配给某个宦官作伴，即所谓“答应”，也可能送到紫禁城的西北部养老打杂。经历过这可悲可感的一生，最后老病而死，还不许家属领取尸体。她们的尸体经过火化后，埋葬在没有标记的坟墓里。</li>
<li>张居正死后两年再被抄没家财，在技术上还造成了一些更加复杂的情况。按本朝的习惯，所抄没的家财，应该是张居正死后的全部家财，这两年之内被家属花费、转移的物资钱财必须全部追补，即所谓“追赃”。而应该追补的数字又无法有确切的根据，所以只能根据“情理”的估计。张居正生前毫无俭约的名声，负责“追赃”的官员即使意存袒护，也决不敢把这个数字估计过低。张居正的弟弟和儿子在原籍江陵被拘留，凑缴的各种财物约值白银十万两以上。这个数字远不能符合估计，于是执行“追赃”的官员对张居正的长子张敬修严刑拷打。张敬修供称，确实还有白银三十万两寄存在各处，但招供的当晚他即自缢身死，几天之后，张家的一个仆人也继而自杀。</li>
<li>官员们的品级由“文官花样”表示。此亦即西方人所称 Mandarin Square。文官的花样总是绣着两只鸟，鸟的品格和姿态则因级别的高低而异。如一品官的花样为仙鹤翱翔于云中；三品官的为孔雀，一只着地，一只冲天；至九品官则为鹧鸪二只，彼此都在草丛中觅食。武官的袍服形色和文官相似，但品级不用鸟而用猛兽来表示，依次为狮子、虎豹、熊罴等等。监察官员亦称“风宪官”，虽然也是文官，但是花样却不标品级而诱以“獬豸”。这是传说中的一种猛兽，能辨善恶。它对好人完全无害，但当坏人接近，它就一跃而前将其撕为碎块。还有极少数的文武官员，包括宦官在内，可以由皇帝特赐绣有蟒、飞鱼、斗牛等形象的袍服，其尊贵又在其他花样之上，这是一种特殊的荣誉。申时行于 1585 年即由万历赐予蟒袍。</li>
<li>文官绝大多数由科举出身。最低级的考试合格者称为生员。生员应三年一度的乡试，合格者称为举人；举人参加在北京的会试殿试，合格者称为进士。举人得授九品官职；进士得授七品官职。此处尚有监生、贡生等名称，也都可以经过一定的途径得到官职。总之，科举制度以各种考试的办法选拔人才，考来考去，全国的读书人被网罗而应试的总数当在百万以上，其中文理通达的即可由此而登仕途。一个人的进学中举，表面上似乎只是个人的聪明和努力的结果，实则父祖的节衣缩食，寡母的自我牺牲，贤妻的茹苦含辛，经常是这些成功的背景。</li>
<li>1587年以后的内外形势并不平静，杨应龙在西南叛变，孛拜在宁夏造反，日本的关白丰臣秀吉侵占朝鲜，东北的努尔哈赤在白山黑水间发难，但内外兵事都没有像建储一事能在廷臣中引起这么多的纷纷扰扰。两万名身穿锦袍的文官所最关心的，乃是今上皇帝一旦宫车宴驾，谁将继他登上宝座。即使在常洛封为太子、常洵去河南之国之后，事情仍然没有结束。</li>
<li>最近一百年内仅仅有一个正德皇帝做过这样的事情，而正德的行动，又被公认为离开了传统的轨道。为人君者，就应该安居垂裳，所以不仅练兵要遭到反对，就是外出旅行也应该在限制之列。今上的祖父嘉靖皇帝一生，仅在1539年一度回到湖广承天府巡视过他的出生之地，此后的27年中就没有离开北京一步。父皇隆庆在位5年余，仅仅到京郊谒陵一次，而且为时只有4日。而万历在1583年春天到1585年夏天却已谒陵4次，这毫无疑问是过于频繁了。</li>
<li>经过慎重的考虑，阳历11月，海瑞向嘉靖递上了著名的奏疏。奏疏中指出，他是一个虚荣、残忍、自私、多疑和愚蠢的君主，举凡官吏贪污、役重税多、宫廷的无限浪费和各地的盗匪滋炽，皇帝本人都应该直接负责。皇帝陛下天天和方士混在一起，但上天毕竟不会说话，长生也不可求致，这些迷信统统不过是“系风捕影”。然而奏疏中最具有刺激性的一句话，还是“盖天下之人不直陛下久矣”，就是说普天下的官员百姓，很久以来就认为你是不正确的了。</li>
<li>洪武皇帝两百年以前创建本朝，并确立了整套的政治和经济制度，其主要的着眼点在于保存一个农业社会的俭朴风气。当时全国的文官仅有八千人。所有办理文牌和事务的技术人员称之为“吏”，和文官属于两个不同的阶层，如泾渭之分明。官可以罚降为吏，吏却很少能上升为官。这些吏的薪给极为微薄，仅足以供一家糊口。</li>
<li>农村的组织方式是以每一乡村为单位，构成一个近于自治的集团，按照中央政府的规定订立自己的乡约。一村内设“申明亭”和“旌善亭”各一座，前者为村中耆者仲裁产业、婚姻、争斗等纠纷的场所，后者则用以表扬村民中为人所钦佩的善行。一年两度，在阴历的正月和十月，各村都要举行全体村民大宴，名日“乡饮”。在分配饮食之前，与会者必须恭听年高德劭者的训辞和选读的朝廷法令，主持者在这一场合还要申饬行为不检的村民。如果此人既无改悔的决心而又规避不到，那就要被大众称为“顽民”，并呈请政府把他充军到边疆。在为全国农村规划这样一张蓝图的同时，洪武皇帝又连兴大狱，打击官僚、缙绅、地方等高级人士，从朝廷内的高级官员直到民间的殷实富户，株连极广。据有的历史学家估计，因之丧生者有逾十万。没收了案犯的家产并把其中的土地重新分配，加上建国以来大批的移民屯田开荒，就使全国成了一个以自耕农为基础的农业社会。</li>
<li>洪武皇帝所推行的农村政策及一整套的措施，对本朝今后的历史，影响至为深远。其最显著的后果是，在全国的广大农村中遏止了法制的成长发育，而以抽象的道德取代了法律。上自官僚下至村民，其判断是非的标准是“善”和“恶”，而不是“合法”或“非法”。</li>
<li>但是他和洪武皇帝都没有想到，政府不用技术和经济的力量扶植民众，而单纯依靠政治上的压力和道德上的宣传，结果只能是事与愿违。政府的绝大部分收入出自农民，而在海瑞出任巡抚的时候，大部分农民又都身受高利贷的压迫和威胁。政府缺乏资金，农民无法从政府机构获得低利率的贷款。当时民间的借贷机构是当铺，贷款利率之高自不待言；即便是亲戚邻右的贷款，也决不会温情脉脉地降低利率。既然如此，政府所规定的限制高利贷的条文就只能是一纸空文。</li>
<li>碎银通货君临于全国人民的经济生活之中，其“政绩”自然也不能完美无缺。首先，碎银没有足够数量的铜币作为辅助，零售业极受限制。其次，这种货币既非政府的财政机构所统一发行，主管当局就无法作必要的调节，以伸缩全国货币的流通量。更为普遍的情况乃是一般富裕的家庭如不放债买田，必将金银埋于地下，或是制成金银器皿首饰（其方便之处，乃是随时可以复原为货币）。可是这种趋势，必更促使通货紧缩，使农民借款更加不易。以上种种因素刺激了高利贷者的活跃，而追本溯源，却依然要归之于政府的无能。好心的巡抚想要用一时的政治力量去解决这些财政和经济政策上的问题，无疑是舍本途末，其结果必然是事与愿违。</li>
<li>也许是有鉴于唐朝藩镇的跋扈，本朝从洪武开始，就具有这重文轻武的趋向。大约经过了一百年，文官集团进入了成熟的阶段，她们的社会地位上升到历史上的最高点；换句话说，也就是武官的社会地位下降到历史上的最低点。这种畸形的出现，原因在于本朝的政治组织为一元化，一元化的思想基础则是两千年来的孔孟之道。如果让军队保持独立的、严格的组织，和文官集团分庭抗礼，这一元化的统治就不可能如所预期的成长、发展，以至于登峰造极。这种制度既经固定，将领们即使出生入死，屡建奇功，其社会影响，也未必抵得上一篇精彩的大块文章。</li>
<li>蹂躏东南沿海的倭寇不同于普通的海盗。海盗大多是乌合之众，只要抄掠财物的目的一经达到，随即呼啸而去。而倭寇则不然。他们登陆以后通常要建立根据地，有时还围攻城池。其中的成员也并非全部来自日本，而常常混有不少的中国人。在一般情况下，中国人还在其中占有多数，而且可以担任高级头目。</li>
<li>一般来说，仁与慈爱、温和、侧隐、以天下为己任等等观念相通。然而在不同的场合，孔子又赋予仁以不同的概念：“己所不欲，勿施于人”的自我克制，言辞谨慎、按照礼仪行事，都可以算作仁或者接近于仁；出于环境的需要，一个人牺牲自己的生命，也叫做“杀身以成仁”。仁是最容易获得的品质，任何人有志于仁，就可以得到仁。但是仁也是最难保持的品质，即在圣贤，例如孔子自己，也难能始终不断地不违反仁。</li>
<li>到八世纪以后，也就是唐宋两代，中国经历了一次巨大的变化：经济的重心，由华北旱田地带移至华中和华南的水田地带。</li>
<li>两千年前的孔孟之道，在过去曾经是领导和改造社会的力量，至此已成为限制创造的牢笼。在道德的雄旗下，拘谨和雷同被视为高尚的教养，虚伪和欺诈成为官僚生活中不可分离的组成部分，无怪乎李贽要慨乎言之：“其流弊至于今日，阳为道学，阴为富贵！”</li>
<li>治理如此庞大的帝国，不依靠公正而周详的法律，就势必依靠道德的信条。而当信条僵化而越来越失去它的实用价值，沦于半瘫痪状态中的法律也当然无法填补这种缺陷。</li>
<li>皇帝只是活在一个虚无飘渺自我陶醉的境界里。他是天之子，拥有四海，这涵义本身就值得深思。他既富有得无所不包，为何还有受贿赂之说（有烟必有火）？他的权力不次于天，为何自己的老岳父还要找外快补官俸之不足？他拥有三宫六院，无限的女人，但连由一个心爱的妻子、骨肉之感的儿子所组成的家庭却也没有。这一切悖于常情的生活，难道就是做天子的幸福吗？他住在深宫，基本与世隔绝，那些大报告如星呈、小报告如密探来的市井消息，又有多少代表性和可靠性？何况他总得高高在上，要以圣德明智来显示这不同之处，就很难发挥得恰到好处。他明明被疏呈气得吹胡子瞪眼睛，最后还把自己架空在“圣度”的圈圈里，这不也是阿Q精神？他富有四海之财，吃穿用以及医药等必然是时代之精华，但这毕竟与四海之财相比耗费太有限了，人既不能长生不死，生命均有尽期，贵为天子，到底也不能象“天”之永恒。这一点和常人是毫无例外的，他应该从这规律中得到醒悟。他只好早掘坟墓，早料后事，在活着的时候就准备着死，这活又有什么意思？那大量的人力财富都投入他葬身之地，也只是显示他暂时拥有财富支配权。也好，四百年后，让人们走进那已不再神秘的地宫，多少可以抒发思古之幽情：金冠玉饰尚在，僵尸骸骨何存？</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么亚马逊河不能架桥？</title>
    <url>/2020/01/24/Amazon_River_cant__bridge/</url>
    <content><![CDATA[<p>亚马逊有一个巨大的丛林盆地、令人叹为观止的瀑布以及世界上最大的河豚，但它可能更引人注目的是它没有一座桥。没错，亚马逊河是世界上最长的河流，但是没有任何桥梁可以跨越。主要有以下几个原因：</p>
<span id="more"></span>
<ul>
<li>亚马逊河在干旱季节不会太宽而无法跨越，但在雨季河水会上涨30英尺，过去3英里宽的过境点在几周内就会膨胀到30英里。构成河岸的软沉积物不断被侵蚀，河流中经常堆满了残渣，其中包括被称为matupás的漂浮植被岛，面积可达10平方英亩。这是土木工程师最可怕的噩梦。</li>
<li>亚马逊河流两边本身就道路很少，茂密的雨林附近人烟稀少，河流就是主要交通工具。</li>
<li>修桥的第一步是砍伐森林，环保人士不支持。<br>
</br><br>
<a href="https://www.cntraveler.com/story/why-the-amazon-river-cant-be-crossed-by-bridge">原文链接</a></li>
</ul>
]]></content>
      <categories>
        <category>精华转载</category>
        <category>社会百科</category>
      </categories>
      <tags>
        <tag>亚马逊河</tag>
      </tags>
  </entry>
  <entry>
    <title>《枪炮、病菌与钢铁》读书笔记</title>
    <url>/2020/04/19/Guns_Germs_and_Steel/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/880be06b9770e573f006c49a856e6b86.jpeg" alt="在这里插入图片描述"><br>
书名：枪炮、病菌与钢铁<br>
副标题: 人类社会的命运<br>
英文名: <em>Guns,Germs,and Steel</em><br>
作者：[美]贾雷德·戴蒙德<br>
译者: 谢延光<br>
读完时间：2020年04月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<h3 id="第一章-走上起跑线——公元前11000年前各个大陆发生了些什么"><a class="header-anchor" href="#第一章-走上起跑线——公元前11000年前各个大陆发生了些什么"></a>第一章 走上起跑线——公元前11000年前各个大陆发生了些什么</h3>
<ul>
<li>在冰川时代，海洋中大量的水被封闭在冰川中，因此全世界海平面要比现在低几百英尺。结果，现在亚洲和印度尼西亚的苏门答腊、婆罗洲、爪哇和巴厘这些岛屿之间的浅海当时成了干燥的陆地。(其他一些水浅的海峡如白令海峡和英吉利海峡情况也是如此。)东南亚大陆边缘比现在的位置要往东700英里。<br>
然而，在巴厘岛和澳大利亚之间的印度尼西亚中部诸岛仍然为一些深水海峡所包围和分隔。那时候，要从亚洲大陆到达澳大利亚／新几内亚，仍然需要渡过至少8个海映，其中最宽的一个海峡至少有50英里宽。被大多数这样的海峡分隔开的岛屿彼此隔海相望．但从澳大利亚看不见印度尼西亚，即使最近的岛屿——帝汉岛和塔宁巴岛。<br>
因此，对澳大利亚／新几内亚的占有是一个重大事件，因为那需要有水运工具，因此这一点显然提供了关于历史上使用水运工具的最早证据。直到大约3万年后(13000年前)才有了除地中海外世界上任何其他地方出现了水运工具的有利证据。</li>
<li>即使最初的移民只有100个人，而他们的人数以每年百分之一点一增加，那么．不出1000年，人口最高可达l000万人。（自己备注：100*1.1<sup>1000</sup> ）</li>
</ul>
<h3 id="第二章-历史的自然实验——地理因素是怎样塑造波利尼西亚群岛的社会的"><a class="header-anchor" href="#第二章-历史的自然实验——地理因素是怎样塑造波利尼西亚群岛的社会的"></a>第二章 历史的自然实验——地理因素是怎样塑造波利尼西亚群岛的社会的</h3>
<ul>
<li>波利尼西亚人的祖先曾带来3种驯化动物(猪、鸡和狗)，从那以后，在波利尼西亚范围内就再也没有驯养过任何其他动物。许多岛上仍然饲养着所有这3种动物，但那些比较孤立的波利尼西亚岛屿总要缺少一两种，达或许是由于用独木舟运送的家畜在移民的长时间的水上航行中没能存活下来，或许是由于家畜在岛上灭绝后无法迅速从外面得到补充。</li>
</ul>
<h3 id="第三章-卡哈马卡的冲突"><a class="header-anchor" href="#第三章-卡哈马卡的冲突"></a>第三章 卡哈马卡的冲突</h3>
<ul>
<li>阿塔瓦尔帕在卡哈马卡的出现突出了世界史上的一个关键因素：具有相当免疫力的入侵民族把疾病传染给没有免疫力的民族。天花、麻疹、流行性感冒、班疹伤寒、腺鼠疫以及其他一些在欧洲流行的传染病，毁灭了其他大陆的许多民族，从而在欧洲人的征服中起了—种决定性的作用。例如，一次天花流行在1520年西班才人第一次进攻失败后蹂躏了阿兹特克人，并杀死了刚刚继承蒙特朱马为阿兹特克皇帝的奎特拉瓦克。在整个美洲，随欧洲人传进来的疾病从一个部落传播到另一个部落，远远走在欧洲人之前，据估计把哥伦布来到前的美洲土著人杀死了95％。</li>
</ul>
<h3 id="第四章-农民的力量"><a class="header-anchor" href="#第四章-农民的力量"></a>第四章 农民的力量</h3>
<ul>
<li>一个经常变换营地、以狩猎采集为生的母亲只能带一个孩子和很少几件随身物品。在前一个蹒跚学步的孩子能够快步行走，赶上大伙儿而不致成为累赘之前，她是不能生第二个孩子的。事实上，到处流浪的以狩猎采集为生的人通过哺乳期无月经、禁欲、杀婴和堕胎等办法，把孩子出生的间隔安排为大约每4年一个。相比之下，定居的部族由于没有在迁移途中携带小孩这种问题的限制，他们可以多生多养，只要养得活就行。许多农业部族的生育间隔期是两年左右，为狩猎采集部族的一半。</li>
</ul>
<h3 id="第六章-种田还是不种田——粮食生产传播的原因"><a class="header-anchor" href="#第六章-种田还是不种田——粮食生产传播的原因"></a>第六章 种田还是不种田——粮食生产传播的原因</h3>
<ul>
<li>我们已经注意到，每个大陆上的农民是不可能有意识地去选择农业的，因为他们没有看到过他们的附近有任何别的农民。然而，粮食生产—旦在某个大陆的某个部分出现，邻近的狩猎采集族群就能看到粮食生产的结果，从而作出有意识的决定。在某些情况下，这些狩猪采集族群几乎是全盘接受了邻近的粮食生产制度；在另一些情况下，他们只选择其中的某些成分；在还有一些情况下，他们则是完全拒绝粮食生产，而继续做以狩猎采集为生的人。</li>
</ul>
<h3 id="第七章-怎样识别杏仁——古代作物的无意识的发展"><a class="header-anchor" href="#第七章-怎样识别杏仁——古代作物的无意识的发展"></a>第七章 怎样识别杏仁——古代作物的无意识的发展</h3>
<ul>
<li>自然选择对种子和果实所起的作用正好相反。果实好吃的植物让动物来撒播它们的种子，但果实里的种子必须很难吃。否则，动物就会把种子嚼碎，种子也就发不出芽来了。</li>
<li>既然无意识驯化的第一阶段是采集可以吃的种子，那么对野生杏仁的驯化又是怎样达到这第一阶段的呢? 对此的解释是：偶然有几棵巴旦杏树在一个基因上产生了突变，使它们不能合成苦味的苦杏仁苷o这些树在荒野里灭绝了，没有留下任何后代，因为鸟儿发现了它们的种子，把种子吃个精光。但最初的农民的孩于们由于好奇或饥饿，把他们周围的野生植物每一种都弄一点来尝尝．最后竟品尝到并发现了这些没有苦味的巴旦杏树。(同样，如果今天的欧洲农民偶然发现了几棵橡实甜而不苦的橡树，他们仍然会感到庆幸。)这些不苦的巴旦杏的种子就是古代农民可能会去种的种子，开头是无心地任其生长在垃圾堆上，后来则是有意地种在自己的果园里了。</li>
</ul>
<h3 id="第八章-问题在苹果还是在印第安人——为什么有些地区的族群未能驯化动植物"><a class="header-anchor" href="#第八章-问题在苹果还是在印第安人——为什么有些地区的族群未能驯化动植物"></a>第八章 问题在苹果还是在印第安人——为什么有些地区的族群未能驯化动植物</h3>
<ul>
<li>新几内亚人无分老幼，常常吃老鼠、蜘蛛、青蛙和其他小动物，而在别的地方．由于能够得到大型家畜或大型野生猎物，人们对那些东西是不屑一顾的。蛋白质缺乏可能也是新儿内亚高原社会流行吃人肉的根本原因。</li>
<li>苹果在历史上是最难栽培的果树之一，也是在欧亚大陆驯化的最后一批主要的果树之一，因为苹果的繁殖需要复杂的嫁接技术。</li>
</ul>
<h3 id="第九章-斑马、不幸的婚姻和安娜-卡列尼娜原则——为什么大多数大型野生哺乳动物没有得到驯化"><a class="header-anchor" href="#第九章-斑马、不幸的婚姻和安娜-卡列尼娜原则——为什么大多数大型野生哺乳动物没有得到驯化"></a>第九章 斑马、不幸的婚姻和安娜.卡列尼娜原则——为什么大多数大型野生哺乳动物没有得到驯化</h3>
<ul>
<li>可驯化的动物都是可以驯化的；不可驯化的动物各有各的不可驯化之处。</li>
<li>幸福的家庭都是幸福的；不幸的家庭各有各的不幸。</li>
<li>没有一种食肉的哺乳动物为了充当食物而被驯化。狗不是严格的食肉动物，而是杂食动物。</li>
<li>关在笼子里的猎豹通常拒绝按照那种精心策划的求爱程式办事。</li>
<li>自然，容易紧张的那几种难以圈养。如果把它们关在围栏里，它们也可能惊恐不安，不是被吓死，就是为了逃生在围栏上撞死。</li>
<li>人类同大多数动物缔结了一种不幸的婚姻，这是由于许多可能的原因中的一个或多个原因造成的：动物的日常食物、生长速度、交配习惯、性情、容易受惊的倾向以及群居组织的几个不同的特点。只有很少一部分野生哺乳动物由于在上述所有这些方面都能协调一致而最终得以和人类结成美满的婚姻。</li>
<li>“被传唤者众，被选中者少”——托尔斯泰。</li>
</ul>
<h3 id="第十章-辽阔的天空与偏斜的轴线"><a class="header-anchor" href="#第十章-辽阔的天空与偏斜的轴线"></a>第十章 辽阔的天空与偏斜的轴线</h3>
<ul>
<li>粮食生产的这种传播的主要路线，是从西南亚到欧洲、埃及和北非、埃塞俄比亚、中亚和印度河河谷；从萨赫勒地带和西非到东非和南非；从中国到热带东南亚、菲律宾、印度尼西亚、朝鲜和日本；以及从中美洲到北美洲。</li>
</ul>
<h3 id="第十一章-牲畜的致命礼物——病菌的演化"><a class="header-anchor" href="#第十一章-牲畜的致命礼物——病菌的演化"></a>第十一章 牲畜的致命礼物——病菌的演化</h3>
<ul>
<li>人类历史上最大的一次流行病是在第一次世界大战结束时杀死2100万人的流行性感冒。黑死病(腺鼠疫)在1346年到1352年间杀死了欧洲四分之一的人口，在有些城市里死亡人数高达70％。<br>
<strong>表11.1 来自我们动物朋友的致命礼物</strong></li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">人类疾病</th>
<th style="text-align:center">携带亲缘关系最为接近的抗原体的动物</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">麻疹</td>
<td style="text-align:center">牛(牛瘟)</td>
</tr>
<tr>
<td style="text-align:center">肺结核</td>
<td style="text-align:center">牛</td>
</tr>
<tr>
<td style="text-align:center">天花</td>
<td style="text-align:center">牛(牛痘)或携带亲缘痘病毒的其他牲畜</td>
</tr>
<tr>
<td style="text-align:center">流行性感冒</td>
<td style="text-align:center">猪和鸭</td>
</tr>
<tr>
<td style="text-align:center">百日咳</td>
<td style="text-align:center">猪、狗</td>
</tr>
<tr>
<td style="text-align:center">恶性疟疾</td>
<td style="text-align:center">禽鸟(鸡和鸭?)</td>
</tr>
</tbody>
</table>
<ul>
<li>1520年，天花随着一个受到感染的来自西班牙属地古巴的奴隶到达墨西哥。由此而产生的天花流行接着杀死了阿兹特克的近一半人口，包括奎特拉瓦克皇帝。大难不死的阿兹特克人也被这种怪病弄得士气低落，因为这种病专杀印第安人而竟不伤害西班牙人，就好像在为西班牙人的不可战胜作宣传似的。到1618年，墨西哥原来2000万左右的人口急剧减少到160万左右。皮萨罗于1531年率领168个人在秘鲁海岸登陆去征服有几百万人口的印加帝国时，同样带来了一场浩劫。对皮萨罗来说幸运的而对印加人来说不幸的是，天花已在1526年由陆路到达，杀死了印加的很大一部分人口，包括瓦伊纳·卡帕克皇帝和他的指定继承人。</li>
<li>印第安人原来的人数在2000万左右。就整个新大陆来说，据估计在哥伦布来到后的一两个世纪中，印第安人口减少了95％。</li>
</ul>
<h3 id="第十三章-需要之母"><a class="header-anchor" href="#第十三章-需要之母"></a>第十三章 需要之母</h3>
<ul>
<li>技术的发展是长期积累的，而不是靠孤立的英雄行为；技术在发明出来后大部分都得到了使用，而不是发明出来去满足某种预见到的需要。</li>
</ul>
<h3 id="第十五章-耶利的族人——澳大利亚和新几内亚的历史"><a class="header-anchor" href="#第十五章-耶利的族人——澳大利亚和新几内亚的历史"></a>第十五章 耶利的族人——澳大利亚和新几内亚的历史</h3>
<ul>
<li>澳大利亚是最干燥、最小、最平坦、最贫瘠、气候最变化无常、生物品种最稀少的大陆。它是欧洲人占领的最后一个大陆。在欧洲人占领前，它已在维持着与任何大陆相比都是最具特色的人类社会和最少的人口。</li>
<li>澳大利亚土著是流动的或半流动的以狩猎采集为生的人，他们组成族群，住在临时搭建的住所或简陋小屋中，并且仍然依靠石器。在过去的13000年中，澳大利亚的文化变革积累比其他任何大陆都要少。欧洲人对澳大利亚土著的流行看法，可以以早期的一个法国探险者的话为代表，他说，“他们是世界上最悲惨的人，是和没有理性的野兽差不多的人。”</li>
</ul>
<h3 id="第十六章-中国是怎样成为中国人的中国的"><a class="header-anchor" href="#第十六章-中国是怎样成为中国人的中国的"></a>第十六章 中国是怎样成为中国人的中国的</h3>
<ul>
<li>朝鲜和日本在公元前第二个一千年中采纳了中国的水稻，在公元前第一个一千年中采用了中国的青铜冶炼术，在公元第一个一千年中采用了中国的文字。中国还把西亚小麦和大麦传入朝鲜和日本。</li>
</ul>
<h3 id="第十九章-非洲是怎样成为黑人的非洲的"><a class="header-anchor" href="#第十九章-非洲是怎样成为黑人的非洲的"></a>第十九章 非洲是怎样成为黑人的非洲的</h3>
<ul>
<li>所有马达加斯加人——亚洲人、黑人和混血人——所说的语言是南岛语，与印度尼西亚婆罗洲岛上说的马安亚语非常相似，而婆罗洲与马达加斯加隔着开阔的印度洋有4000多英里远。没有任何一个哪怕与婆罗洲人有—点点相似的民族是生活在马达加斯加的几千英里范围之内的。人类地理学最令人惊异的事实。</li>
<li>我们确切知道是在非洲驯化的唯一动物，是一种叫做珍珠鸡的像火鸡一样的鸟，因为它的野生祖先只有非洲才有。</li>
<li>好望角科伊桑人的家园碰巧很少有适于驯化的野生植物；班图人碰巧从他们5000年前的祖先那里继承了适应夏雨的作物；而欧洲人碰巧从他们近1万年前的祖先那里继承了适应冬雨的作物。正像新独立的纳米比亚首都的那块“戈林街”路牌提醒我的那样，非洲的过去给非洲的现在打上了深深的烙印。(自己备注：当时纳米比亚是德国的殖民地，戈林街道是纪念纳粹德国空军魔头赫曼·戈林的父亲)</li>
<li>甚至在白人殖民主义者来到之前，已经生活在非洲的不只是黑人，而是(我们将要看到)世界上6大人种中有5个生活在非洲．其中3个只生活在非洲。世界上的语言，有四分之一仅仅在非洲才有人说。没有哪一个大陆在人种的多样性方面可以与非洲相提并论。</li>
<li>非洲多样化的人种来自它的多样化的地理条件和悠久的史前史。非洲是唯一的地跨南北温带的大陆，同时它也有一些世界上最大的沙漠、最大的热带雨林和最高的赤道山脉。人类在非洲生活的时间比在任何其他地方都要长得多：我们的远祖大约在700万年前发源于非洲，解剖学上的现代智人可能是在那以后在非洲出现的。非洲许多民族之间长期以来的相互作用，产生了令人着迷的史前史，包括过去5000年中两次最引人注目的人口大迁移——班图人的扩张和印度尼西亚人向马达加斯加的移民。所有过去的这些相互作用在继续产生巨大的影响。</li>
</ul>
<h3 id="尾声"><a class="header-anchor" href="#尾声"></a>尾声</h3>
<ul>
<li>在过去12000年里，地球上出现农业崛起的地方不超过9个：中国、新月沃地和其他几个地方。12000年前，地球上人人都是涉猎采集者，到现在几乎所有人都或是农民，或被农民喂养。</li>
<li>创新在带有最优中间程度分裂的社会里发展最快：太过统一的社会处于劣势，太过分裂的社会也不占优。</li>
<li>相较于身处温带的人，热带国家的人因病不能工作的时间更长。平均而言，他们也死得早。这不仅对个人而言是悲哀的事，对其国家经济而言也是如此。热带的另一个经济劣势是农业生产力更低，因为这里土壤更贫瘠、动植物疾病更繁多。</li>
<li>至于内陆位置的劣势，也很容易理解：陆运大约比沿海港口或通航河流的海运贵7倍。</li>
</ul>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<ul>
<li>作者叙述分析推理非常详细。我读完这本书前前后后花了一个多月。</li>
<li>作物在欧亚大陆传播速度很快的原因是欧亚大陆是东西向轴线的，位于相同纬度，白天的长度和季节变化完全相同，带来的气候也基本相同。相比之下非洲和美洲的作物传播非常缓慢。</li>
<li>病菌和我们一样都是自然选择的结果。病毒感染人类的目的并不是杀死人类，人类死了它们自己脱离宿主也会挂。发烧实际上是烤死我们自己之前把病菌烤死。传染性越强的病毒必定是致死率越低。</li>
<li>农业出现后人口更密集、生活在排放的污水中更利于病菌传播(出现)。</li>
<li>文字传播更准确、详细并且传播得更远，同武器、病菌还有集中统一的行政组织并驾齐驱，成为现代征服的一种手段。</li>
<li>澳大利亚是最干燥、最小、最平坦、最贫瘠、气候最变化无常、生物品种最稀少的大陆。它是欧洲人占领的最后一个大陆。</li>
<li>澳大利亚土著比邻近的印尼和新几内亚土著生活方式更落后。</li>
<li>台湾人、印尼人、马来人、越南人、菲律宾人、澳大利亚人、波利尼西亚人、新几内亚人等都是南岛人(中国华南沿海一带)的后代。</li>
<li>并不是有了好的制度国家就一定能富起来，国家贫富状况和集中统一的历史政权以及地理环境有着很大的关系。</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>那些年玩过的任天堂红白机游戏</title>
    <url>/2020/01/22/FcGame/</url>
    <content><![CDATA[<p>任天堂红白机游戏(FC游戏)，当时主要是插卡在游戏机上玩，风靡全国很多年，是80后90后一代的美好回忆。我大概买了50多张小卡(一张卡4个游戏那种)，和5张大卡(RPG游戏)，这些游戏卡陪伴我度过了童年甚至少年。那时候几个小伙伴围在我家，一部电视、一台游戏机，就足以开心一整天。所以今天写篇博客记录下主要玩过的一些游戏。</p>
<span id="more"></span>
<h2 id="一、星战情缘"><a class="header-anchor" href="#一、星战情缘"></a>一、星战情缘</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/eeeaccd437e0b5935f21d409b8cdfc9d.png" alt="在这里插入图片描述"><br>
这是我最喜欢的红白机游戏之一。这个游戏另外还有外星战士2、星际争霸等名称，属于角色扮演类。剧情很给力，后期还可以去另一个星球。清楚记得最后一个BOSS打了两个小时。已经通关三次玩的不亦乐乎。我的游戏机不能存档，所以我早上7点起直到晚上2点多通关，当然第二次玩路线熟悉就快很多了。</p>
<h2 id="二、智慧桥"><a class="header-anchor" href="#二、智慧桥"></a>二、智慧桥</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/7ab4dd9a4393a47d5399b0fc2160067f.png" alt="在这里插入图片描述"><br>
这是我最喜欢的红白机游戏之一。这个游戏也叫摩艾君，属于益智类游戏，把所有的人头加完并能在规定时间内顺利进入门就算过关。一共56关，我至少通关3次，之前还记录了关卡密码和难关的攻略。</p>
<h2 id="三、快打旋风"><a class="header-anchor" href="#三、快打旋风"></a>三、快打旋风</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/417627685b1f88d108cb1451369ff880.png" alt="在这里插入图片描述"><br>
这是我最喜欢的红白机游戏之一。这个游戏好像是四关，没关一个BOSS，我每个角色都通关好几次，用手柄玩得很带劲。</p>
<h2 id="四、兔宝宝系列"><a class="header-anchor" href="#四、兔宝宝系列"></a>四、兔宝宝系列</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/dcebd5f306d9265d0860d3c956e6823b.png" alt="在这里插入图片描述"></p>
<center>邦尼兔-趣味屋(我特么也是刚刚才知道名字)</center>  
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/b71ab6616ab6a381fc4d1e5f21662a33.png" alt="在这里插入图片描述"></p>
<center>宾尼兔1代</center>
<p>兔宝宝有好几个版本，印象最深的就是[邦尼兔-趣味屋]，这个游戏属于益智类，吃完萝卜就算过关,一共60关，过关后会有关卡密码，到时候可以直接进。</p>
<h2 id="五、雪人兄弟"><a class="header-anchor" href="#五、雪人兄弟"></a>五、雪人兄弟</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/f7cc9d565b9d75ca0d14176f7822ce46.png" alt="在这里插入图片描述"><br>
这个游戏是发射子弹，可以把怪物打成雪球，到时候可以用这个雪球攻击其他敌人。雪人兄弟每10关一个BOSS，一共50关，救完公主就结束了。</p>
<h2 id="六、松鼠大作战系列"><a class="header-anchor" href="#六、松鼠大作战系列"></a>六、松鼠大作战系列</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/0d54e9cd99735834b6e6f2378d3b3ed1.png" alt="在这里插入图片描述"></p>
<center>松鼠大作战1代</center>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/9d7b8ac5d2553df19bc7d3b913da90ff.png" alt="在这里插入图片描述"></p>
<center>松鼠大作战2代</center>
<p>两个游戏都是冒险类游戏，惊险刺激，每一关都一个大BOSS，我玩过4关左右。</p>
<h2 id="七、西游记"><a class="header-anchor" href="#七、西游记"></a>七、西游记</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/edca481a066c989cc58c8108fefc7d19.png" alt="在这里插入图片描述"><br>
这也是冒险类游戏(单人)，游戏难度高，而且敌人的攻击方式有些无赖，稍有不慎就会把主角无限攻击屈死。</p>
<h2 id="八、忍者神龟系列"><a class="header-anchor" href="#八、忍者神龟系列"></a>八、忍者神龟系列</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/c7bb890d2d94d9a6fac7f2fdafee16c5.png" alt="在这里插入图片描述"></p>
<center>忍者神龟1代</center>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/f9e6c47c2c6667a5e3bb7cbee56d1383.png" alt="在这里插入图片描述"></p>
<center>忍者神龟格斗</center>
<p>忍者神龟1、2和3代都是闯关类型的，我好像都没通关(神龟3玩到救小女孩那儿)。忍者神龟格斗我玩了无数遍，所有角色的技能以及所有角色的弱点都了如指掌，我可以用任意角色不损伤一滴血玩死电脑的任意角色。</p>
<h2 id="九、魂斗罗系列"><a class="header-anchor" href="#九、魂斗罗系列"></a>九、魂斗罗系列</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/049523344595081a110be2ec4e0d3467.png" alt="在这里插入图片描述"></p>
<center>水上魂斗罗</center>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/ada31069ac960e2ba38fdac82907e967.png" alt="在这里插入图片描述"></p>
<center>空中魂斗罗</center>
<p>玩游戏机的绝对玩过魂斗罗。魂斗罗也很多版本，93魂斗罗、超级魂斗罗、空中魂斗罗、魂斗罗和水上魂斗罗等。一般都是8关来着，除了水上魂斗罗都通关了，水上魂斗罗玩到将军那儿(我太难了😂)。</p>
<h2 id="十、洛克人系列"><a class="header-anchor" href="#十、洛克人系列"></a>十、洛克人系列</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/cad5a1d8a815f416edbdddaef8769204.png" alt="在这里插入图片描述">	<br>
洛克人系列差不多有7个版本，印象不是很深了，基本是个人冒险闯关类型的。</p>
<h2 id="十一、双截龙系列"><a class="header-anchor" href="#十一、双截龙系列"></a>十一、双截龙系列</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/b85dcbb9a7c6f6c0e5020f2264aaa616.png" alt="在这里插入图片描述">	<br>
双截龙系列有3个版本，印象不是很深了，基本是冒险闯关类型的。</p>
<h2 id="十二、赤色要塞"><a class="header-anchor" href="#十二、赤色要塞"></a>十二、赤色要塞</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/7113496911001003a80e4b091aaa411d.png" alt="在这里插入图片描述">	<br>
赤色要塞是双人动作射击闯关类型游戏，消灭所有敌人就过关，一共有六关。</p>
<h2 id="十三、热血系列"><a class="header-anchor" href="#十三、热血系列"></a>十三、热血系列</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/14f7d7a0c7bc7f661b101fca35e6ad52.png" alt="在这里插入图片描述"><br>
热血系列也很多，比如热血足球、热血高校、热血物语和热血格斗等。热血格斗还挺有意思的，五局三胜制，打倒所有对手就算胜利；热血物语是闯关类的，剧情已无印象。</p>
<h2 id="十四、冒险岛系列"><a class="header-anchor" href="#十四、冒险岛系列"></a>十四、冒险岛系列</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/371e81fe2358f58d2393139178d16757.png" alt="在这里插入图片描述">	<br>
冒险岛很多版本，这个是可以骑龙的，过一关换一个场景，好像还可以去其他岛。</p>
<h2 id="十五、大力水手"><a class="header-anchor" href="#十五、大力水手"></a>十五、大力水手</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/9e9b44f19f138fc73cf836371ccd6715.png" alt="在这里插入图片描述">	<br>
把爱心(也可能是音乐符号)在未完全落入水中时全部加满就算过关，我好像只玩过了4-5关。</p>
<h2 id="十六、其他"><a class="header-anchor" href="#十六、其他"></a>十六、其他</h2>
<p>彩虹岛、坦克大战、淘金者、炸弹人、三目童子、忍者龙剑传系列…</p>
<p>你的童年里有多少时间沉浸在任天堂的红白游戏机里？在你的记忆深处，是否某款游戏也激起了你的回忆？</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境下搭建Git远程私库</title>
    <url>/2020/02/05/Linux_git/</url>
    <content><![CDATA[<p>Git远程私库就是把自己的Linux下的Git仓库作为服务端，客户端通过Git和其建立连接。远程私库可以用于部署项目或者团队协同开发。本人主要介绍Git安装和配置过程。本人涉及的Linux系统版本是Ubantu18.04和Centos6.5。</p>
<span id="more"></span>
<p>搭建远程私库前确保远程服务器可以通过ssh连接成功，命令格式：ssh 用户名@ip地址。连接成功如下所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/e4e1f698edf1161369ecec69528320c4.png" alt="在这里插入图片描述"></p>
<h2 id="Git安装"><a class="header-anchor" href="#Git安装"></a>Git安装</h2>
<h3 id="通过包管理工具安装"><a class="header-anchor" href="#通过包管理工具安装"></a>通过包管理工具安装</h3>
<h4 id="Ubuntu18-04环境下"><a class="header-anchor" href="#Ubuntu18-04环境下"></a>Ubuntu18.04环境下</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更新系统工具包</span></span><br><span class="line">apt-get update -y</span><br><span class="line"><span class="comment">#安装Git</span></span><br><span class="line">apt install git</span><br><span class="line"><span class="comment">#查看Git</span></span><br><span class="line">git version</span><br></pre></td></tr></table></figure>
<h4 id="Centors6-5环境下"><a class="header-anchor" href="#Centors6-5环境下"></a>Centors6.5环境下</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装Git</span></span><br><span class="line">yum install -y git	</span><br><span class="line"><span class="comment">#查看Git</span></span><br><span class="line">git version</span><br></pre></td></tr></table></figure>
<h3 id="通过安装包安装"><a class="header-anchor" href="#通过安装包安装"></a>通过安装包安装</h3>
<h4 id="安装前准备"><a class="header-anchor" href="#安装前准备"></a>安装前准备</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install curl curl-devel zlib-devel openssl-devel perl cpio expat-devel gettext-devel gcc cc</span><br></pre></td></tr></table></figure>
<h4 id="下载安装包"><a class="header-anchor" href="#下载安装包"></a>下载安装包</h4>
<pre><code>https://github.com/git/git/releases	
</code></pre>
<h4 id="解压"><a class="header-anchor" href="#解压"></a>解压</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf git-2.25.0.tar.gz</span><br></pre></td></tr></table></figure>
<h4 id="编译安装"><a class="header-anchor" href="#编译安装"></a>编译安装</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> git-2.25.0</span><br><span class="line">make prefix=/usr/local/git-2.25.0 all</span><br><span class="line">make prefix=/usr/local/git-2.25.0 install</span><br></pre></td></tr></table></figure>
<h4 id="查看Git"><a class="header-anchor" href="#查看Git"></a>查看Git</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure>
<h2 id="Git配置"><a class="header-anchor" href="#Git配置"></a>Git配置</h2>
<h3 id="配置环境变量-安装包安装时"><a class="header-anchor" href="#配置环境变量-安装包安装时"></a>配置环境变量(安装包安装时)</h3>
<h4 id="编辑配置文件"><a class="header-anchor" href="#编辑配置文件"></a>编辑配置文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>
<p>在里面加入加入export PATH=$PATH:/usr/local/git-2.25.0/bin</p>
<h4 id="生效配置文件"><a class="header-anchor" href="#生效配置文件"></a>生效配置文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<h3 id="配置Git"><a class="header-anchor" href="#配置Git"></a>配置Git</h3>
<h4 id="设置用户名-密码-邮箱"><a class="header-anchor" href="#设置用户名-密码-邮箱"></a>设置用户名 密码 邮箱</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.password  <span class="string">&quot;Your Password &quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br><span class="line"><span class="comment">#查看配置是否生效</span></span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure>
<h4 id="配置ssh公钥"><a class="header-anchor" href="#配置ssh公钥"></a>配置ssh公钥</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa //按三下回车键 系统会提示密钥的保存位置（一般是~/.ssh目录）</span><br></pre></td></tr></table></figure>
<h3 id="创建仓库"><a class="header-anchor" href="#创建仓库"></a>创建仓库</h3>
<h4 id="创建仓库文件"><a class="header-anchor" href="#创建仓库文件"></a>创建仓库文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/gitspace</span><br></pre></td></tr></table></figure>
<h4 id="初始化仓库"><a class="header-anchor" href="#初始化仓库"></a>初始化仓库</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> gitspace</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure>
<h3 id="创建Linux用户-可选"><a class="header-anchor" href="#创建Linux用户-可选"></a>创建Linux用户(可选)</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -m liquanhong //Ubuntu中需要加-m参数,不然不会在home中创建文件夹</span><br><span class="line">passwd liquanhong //设置用户密码</span><br><span class="line"><span class="built_in">chown</span> -R liquanhong:liquanhong /usr/local/gitspace //给仓库分配所属组		</span><br></pre></td></tr></table></figure>
<h3 id="ssh免密登录"><a class="header-anchor" href="#ssh免密登录"></a>ssh免密登录</h3>
<p>方法1：把本地的Git公钥文件id_rsa.pub，复制到~/.ssh文件夹并改为 authorized_keys<br>
方法2：新建 authorized_keys文件，内容改为本地的Git公钥文件id_rsa.pub的内容<br>
设置成功后客户端不需要输入密码也可以进行拉取、提交代码等操作。<br>
<strong>~相当于/home/liquanhong</strong></p>
<h3 id="配置hooks"><a class="header-anchor" href="#配置hooks"></a>配置hooks</h3>
<h4 id="编辑post-receive"><a class="header-anchor" href="#编辑post-receive"></a>编辑post-receive</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/local/gitspace/hooks/post-receive</span><br></pre></td></tr></table></figure>
<p>如果没有该文件，创建一个。文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --work-tree=/usr/local/blog --git-dir=/usr/local/gitspace checkout -f</span><br></pre></td></tr></table></figure>
<p>其中/usr/local/blog是提交代码后Git自动生成文件夹目录</p>
<h4 id="赋予权限"><a class="header-anchor" href="#赋予权限"></a>赋予权限</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R liquanhong:liquanhong /usr/local/blog</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/gitspace/hooks/post-receive//这个很关键必须执行</span><br></pre></td></tr></table></figure>
<p><strong>hooks配置成功后，客户端每次提交代码git会自动在/usr/local/blog目录更新提交的代码文件</strong><br>
<strong>如果用root作为Git用户,所有chown命令不需要执行。</strong></p>
<h2 id="客户端操作"><a class="header-anchor" href="#客户端操作"></a>客户端操作</h2>
<h3 id="本地克隆仓库"><a class="header-anchor" href="#本地克隆仓库"></a>本地克隆仓库</h3>
<p>远程私库格式：git clone linux用户名@ip地址:仓库路径<br>
例子：git clone liquanhong@106.12.8.172:/usr/local/gitspace</p>
<p>仓库能克隆到本地说明远程私库没问题，正常用git commit,git push等命令就能愉快玩耍了！</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>《高情商聊天术》读书笔记</title>
    <url>/2020/07/11/High_EQ_chat/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<img src="https://i-blog.csdnimg.cn/blog_migrate/31a31534a6bc364a09e9636d6dfefb73.jpeg" width="460px" align="center" />
<p>书名：高情商聊天术<br>
编著：镜心<br>
读完时间：2020年06月</br></p>
<span id="more"></span>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p>该书里面例举了很多实际案例，读一遍还是很容易忘记，把重点整理成了思维导图，如下所示。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/5fbcdf81c104532a0693fb62a59bfe32.jpeg" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Nothing to Envy 读书笔记</title>
    <url>/2020/01/21/Nothing_to_Envy/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/befe4272dd4b8431b9291a845d3952aa.png" alt="在这里插入图片描述"><br>
书名：<em>Nothing to Envy: Ordinary Lives in North Korea</em><br>
中文名：我们最幸福<br>
作者：Barbara Demick<br>
书评：迄今为止看过的写得最好的关于朝鲜的书。作者不只是在做奇观展示，而是深入每一个脱北者的内心，讲诉他们的真情实感。通过他们描述了这个世界上最沉默的国家的生活和挣扎下去的人民  — 来自豆瓣</br><br>
读完时间：2019年8月</p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<blockquote>
<p>Until her early teens, Mi-ran had no reason not to believe the signs. Her father was a humble mine worker. Her family was poor, but so was everyone they knew. Since all outside publications, films, and broadcasts were banned, Mi-ran assumed that nowhere else in the world were people better off, and that most probably fared far worse. She heard many, many times on the radio and television that South Koreans were miserable under the thumb of the pro-American puppet leader Park Chung-hee and, later, his successor, Chun Doohwan. They learned that China’s diluted brand of communism was less successful than that brought by Kim Il-sung and that millions of Chinese were going hungry. All in all, Mi-ran felt she was quite lucky to have been born in North Korea under the loving care of the fatherly leader.</p>
</blockquote>
<p>由于所有的外部出版物、电影和广播都被禁止，米兰认为世界上其他地方的人们生活都没朝鲜好。她在电台和电视上多次听到，在亲美傀儡领导人朴正熙和后来的继任者全斗焕的指点下，韩国人很悲惨。他们了解到，中国淡化的共产主义品牌不如金日成带来的成功，数百万中国人正在挨饿。总之，米兰出生在朝鲜并在这位慈父领袖的关爱下，觉得自己很幸运。</p>
<blockquote>
<p>He walked around the perimeter of the crowd a couple of times to get a better look and debated what to do. He was a scholar, not a fighter. It wouldn’t do to try to push his way back to the box office. Then an idea lodged in his mind. The movie was about to start, and his brother wasn’t there yet. If he sold her the extra movie ticket, she would have to sit next to him since the tickets were for assigned seats. He circled her again, formulating in his mind the exact words he would use to offer her the ticket.In the end, he couldn’t muster the courage to speak to a girl he didn’t know. He slipped into the movie theater. As the screen filled with the image of the movie’s heroine galloping across a snowy field, Jun-sang thought of the opportunity he had let pass. The actress played a fierce resistance fighter who wore her hair tomboy-short and rode her horse across the Manchurian steppe, proclaiming revolutionary slogans. Jun-sang couldn’t stop thinking of the girl outside the theater. When the credits rolled at the end of the movie, he shed outside to look for her, but she was gone.</p>
</blockquote>
<p>俊生刚见到米兰的时候想把电影票卖给她，这样她就可以坐到他旁边，但是最终错过了机会。当看完电影后再去找米兰时，她已经不在了。(还在就奇怪了😂)</p>
<blockquote>
<p>The North Koreans were methodical to a fault. Each person was put through eight background checks. Your songbun, as the rating was called, took into account the backgrounds of your parents, grandparents, and even second cousins. The loyalty surveys were carried out in various phases with inspiring names. “Intensive Guidance by the Central Party” was the first announced phase. The classifications became more refined in subsequent phases, such as the “Understanding People Project,” between 1972 and1974.</p>
</blockquote>
<p>每个朝鲜人都要经过8次背景调查。你的社会等级是根据你的父母、祖父母甚至远房表亲的背景来的。</p>
<blockquote>
<p>People of his rank would be closely watched by their neighbors. North Koreans are organized into what are called the inminban literally, “people’s group”-cooperatives of twenty or so families whose job it is to keep tabs on one another and run the neighborhood.The inminban have an elected leader, usually a middle-aged woman, who reports anything suspicious to higher-ranking authorities. It was almost impossible for a North Korean of low rank to improve his status. Personal files were locked away in local offices of the Ministry for the Protection of State Security and, for extra safekeeping, just in case someone dared to think of tampering with the records, in the mountainous Yanggang province. The only mobility within the class system was downward. Even if you were in the core class reserved for relatives of the ruling family and party cadres-you could get demoted for bad behavior. But once in the hostile class, you remained there for life. Whatever your original stain, it was permanent and immutable. And just like the caste system of old Korea amily status was hereditary. The sins of the father were the sins of the children and the grandchildren</p>
</blockquote>
<p>像他(米兰父亲,一个矿工)这样级别的人会受到邻居的密切监视。朝鲜人被组织成所谓的inminban，字面意思是“人民团体”——由大约20个家庭组成的合作社，他们的工作是相互监督并管理社区。inminban有一个民选的领导人，通常是一位中年妇女，她向上级当局报告任何可疑的事情。一个地位低下的朝鲜人几乎不可能提高自己的地位。个人档案被锁在国家安全部的地方办公室里，为了更好地保管，以防有人胆敢篡改记录，位于山区的阳冈省。阶级制度中唯一的流动性是向下的。即使你是属于统治家族的亲属和党内干部的核心阶层，你也可能因为行为不端而被降职。但一旦进入了敌对阶级，你就一辈子呆在那里。无论你最初的污点是什么，它都是永恒不变的。就像旧朝鲜的种姓制度一样，家庭地位是世袭的。父亲的罪过就是子孙的罪过。</p>
<blockquote>
<p>With the first birth, her mother-in-law cooked her a soup with slimy ribbons of seaweed, a traditional Korean recipe to help a new mother recover her iron. The next time her mother-in-law–disappointed by the birth of another girl-threw the seaweed at Mrs. Song to make the soup herself。After the third girl, she stopped speaking to her。<br>
“You’re doomed to have nothing but girls,” she snapped as her parting shot.<br>
Mrs. Song persevered. The fourth child arrived one afternoon when she was home alone in the apartment. She had left work early that day because her belly was hurting, but she hated to be idle, so she began to scrub the floors. A sharp pain surged through her body and she rushed toward the bathroom. A boy, at last. Mrs. Song was redeemed in the eyes of her family. This time her mother-in-law cooked</p>
</blockquote>
<p>宋太太第一个孩子出生时，她的婆婆(mother-in-law) 给她煮了一碗海带汤，以帮助恢复体质。第二个孩子还是女儿时，她婆婆把海带扔给她，让她自己做汤。生下第三个小孩还是女儿后，她婆婆非常生气地说“你注定只会生女孩”。但宋太太第四个孩子是男孩时，这一次她婆婆做饭了。<br>
可见“<strong>重男轻女</strong>”思想不仅仅中国存在，朝鲜和其他儒家哲学主导的国家都存在且不亚于中国。</p>
<blockquote>
<p>Other memories of this period were bitter. Kim Ji-eun, who was at the time a recent medical graduate doing her residency, went to the orchards one weekend with her parents, a married sister, the sister’s husband, and two small children. Carrying the whiny toddlers mos of the way, they didn’t get to the orchards until midafternoon. Too many others had come before them. They found one slightly rotter pear on the ground. They took it home and boiled it, then cut it into five parts for the children, the elderly parents, and Kim Ji-eun’ brother-in-law. Ji-eun and her sister didn’t get any.</p>
</blockquote>
<p>他们发现地上有一个略腐烂的梨，他们把它带回家煮了，然后分给孩子们和老人吃。看着真是辛酸，珍惜我们现在的美好生活吧</p>
<blockquote>
<p>“Eight boys and nine girls are singing anthems in praise of Kim Il-sung. How many children are singing in total?”“A girl is acting as a messenger to our patriotic troops during the war against the Japanese occupation. She carries messages in a baske containing five apples, but is stopped by a Japanese soldier at a checkpoint. He steals two of her apples. How many are left?&quot;&quot;Three soldiers from the Korean People’s Army killed thirty American soldiers. How many American soldiers were killed by each o them if they all killed an equal number of enemy soldiers?&quot;A first-grade reading primer published in 2003 included the following poem, entitled “Where Are We Going?”:<br>
<em>Where have we gone?<br>
We have gone to the forest Where are we going?<br>
We are going over the hills.What are we going to do?<br>
We are going to kill the Japanese soldiers.</em></p>
</blockquote>
<p>朝鲜小学生有很多关于歌颂金日成、反日以及反美的题目。</p>
<blockquote>
<p>It is axiomatic that one death is a tragedy, a thousand is a statistic. So it was for Mi-ran. What she didn’t realize is that her indifference was an acquired survival skill. In order to get through the 1990s alive, one had to suppress any impulse to share food. To avoid going insane, one had to learn to stop caring. In time, Mi-ran would learn how to walk around a dead body on the street without paying much notice. She could pass a five-year-old on the verge of death without feeling obliged to help. If she wasn’t going to share her food with her favorite pupil, she certainly wasn’t going to help a perfect stranger.</p>
</blockquote>
<p>&quot;一个死亡是一个悲剧，一千是一个统计数字&quot;是一个公理。她没有意识到的是，她的冷漠是一种后天习得的生存技能。为了活过20世纪90年代，人们必须抑制分享食物的冲动。为了避免发疯，人们必须学会停止关心别人。不久，米兰就会学会如何在街上绕着一具死尸走，而不必多加注意。她可以在一个五岁的孩子快要死的时候，不必感到有责任帮忙。如果她不打算和她最喜欢的学生分享她的食物，她肯定不会帮助一个完全陌生的人。</p>
<blockquote>
<p>He was suddenlv overcome with sadness for himself and for Mi-ran and the unhapDv life in which thev found themselves. He hadn’twished to offend her with the poem. More as a gesture of consolation than anything else, he did something he’d never done before: he leaned over and kissed her.At least it was sort of a kiss. It was little more than a brush of the lips on her cheek that trailed off before reaching the mouth, but it was far more physical intimacy than they’d shared before. They had known each other for thirteen years, dating for the past nine, and had done nothing more than hold hands.</p>
</blockquote>
<p>俊生和米兰相识13年，交往9年，除了牵手什么都没做，如此纯洁的感情。</p>
<blockquote>
<p>When North Koreans left the country on official business, they had to leave behind spouses and children who were effectively held hostage to assure their return. Defectors had to be able to live with the knowledge that their freedom came at the expense of loved ones who would likely spend the rest of their lives ir a labor camp.That changed in the late 1990s. The famine and the economic changes in China gave North Koreans new motivation to escape. From the border, they could see shiny new cars scooting along the wharf by the Tumen River. They could see with their own eyes that life in China looked good.The same networks that had helped Mi-ran cross the river quickly expanded their operations. They charted new routes across the Tumen, locating the narrowest crossing points and bribing the border guards. If you couldn’t swim, you could pay somebody to carry you across. The numbers of defectors grew exponentially. By 2001, it was estimated that 100,000 North Koreans had sneaked into China, a small percentage of whom eventually defected to South Korea.</p>
</blockquote>
<p>当朝鲜人因公务离开朝鲜时，他们不得不抛下实际上被扣为人质的配偶和子女，以确保他们回国。脱北者必须知道，他们的自由是以牺牲亲人为代价的，而这些亲人可能要在劳改营度过余生。这种情况在20世纪90年代末发生了改变。饥荒和中国的经济变化给了朝鲜人新的逃离动机。从边境线上，他们可以看到图们江边码头上飞驰的崭新轿车。他们可以亲眼看到中国的生活看起来很好。帮助米然渡河的网络也迅速扩大了他们的业务。他们绘制了穿过图们江的新路线，确定了最窄的过境点，并贿赂了边防警卫。如果你不会游泳，你可以花钱请人把你背过去。叛逃者的数量呈指数级增长。据估计，到2001年，已有10万朝鲜人潜入中国，其中一小部分人最终逃到了韩国。</p>
<blockquote>
<p>During the summer of 1999, about six months after the defecting family members arrived ir South Korea, national security police had arrested both sisters almost simultaneously at home. Mi-ran’s oldest sister, Mi-hee, the family beauty who’d married a military official and who had been so generous about providing food during the famine, and her sister Mi-sool had led blameless lives; they were loyal to their parents, their husbands, and their children, and loyal to Kim Jong-il. They were taker away in the middle of the night-the very same scenario of Mi-ran’s recurring nightmare, except that the children were left behind with the husbands, who were instructed to file for divorce.</p>
</blockquote>
<p>米兰逃到韩国半年后，她的两个姐姐就被国家安全警察带走了，即便是如此的忠于金日成。国家安全局还提出米兰姐姐离婚😨。</p>
<blockquote>
<p>Dr. Kim looked down a dirt road that led to farmhouses. Most of them had walls around them with metal gates. She tried one; it turned out to be unlocked. She pushed it open and peered inside. On the ground she saw a small metal bowl with food. She looked closer-i was rice, white rice, mixed with scraps of meat. Dr. Kim couldn’t remember the last time she’d seen a bowl of pure white rice. What was a bowl of rice doing there, just sitting out on the ground? She figured it out just before she heard the dog’s bark.Up until that moment, a part of her had hoped that China would be just as poor as North Korea. She still wanted to believe that her country was the best place in the world. The beliefs she had cherished for a lifetime would be vindicated. But now she couldn’t deny what was staring her plainly in the face: dogs in China ate better than doctors in North Korea.</p>
</blockquote>
<p>这是金博士逃到中国的一个村庄后看到米饭的感受：中国的狗都比朝鲜的博士吃得好。在这之前，她一直认为中国和朝鲜一样穷。她仍然相信她的国家是世界上最好的地。</p>
<blockquote>
<p>Tens of thousands of North Korean women have been sold to Chinese men.<br>
The Chinese government didn’t recognize marriages to North Korean women, so the couple’s child would not be registered as a citizen and<br>
would not be able to go to school</p>
</blockquote>
<p>成千上万的妇女被卖到中国，给人当老婆。中国政府不承认与朝鲜妇女的婚姻，孩子不能登记 不能上学。</p>
<blockquote>
<p>IN ARICLE II or its constitution, South Korea holds itself out as the rightful government of the entire Korean peninsula, which means that all o its people-including North Koreans-are automatically citizens.</p>
</blockquote>
<p>韩国宪法规定，自己是整个朝鲜半岛的合法政府，这意味着包括朝鲜人民在内的所有韩国人都自动成为韩国公民。所有韩国政府不会排斥朝鲜的叛逃者。</p>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p>这是我看的一本较有深度的英文原著，从书中六个叛逃者的故事，我看到了一个高度集权、社会等级分类明显、极度个人崇拜、完全封闭、人民生活极度艰苦的体制，我也感受到金日成死后造成的大饥荒以及全国秩序混乱最后出现市场经济的过程，还有俊生和米兰那纯洁的爱情故事至今萦绕在脑海。当然，距这本书写完已有10来年，相信现在朝鲜已经慢慢开放、生活水平也提高不少，希望有机会去感受下这个邻近却又神奇的国度。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《男人来自火星，女人来自金星3》读书笔记</title>
    <url>/2020/05/10/Men_are_from_Mars_Women_are_from_Venus/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/fedf994adcf297d9ab232aade0409a13.jpeg" alt="在这里插入图片描述"><br>
书名：男人来自火星，女人来自金星<br>
副标题: 性爱篇<br>
作者:  [美] 约翰·格雷<br>
译者: 刘增莉<br>
读完时间：2020年05月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<ul>
<li>男人为性而爱，女人为爱而性</li>
<li>火星人是蓝色的，喜欢冷静和沉默；金星人是粉色的，喜欢表达和倾诉</li>
<li>火星人看重的是性爱的快乐，金星人注重的是爱情的浪漫</li>
<li>火星人好比喷灯，激情和兴趣来势凶猛，去势匆匆；金星人则如火炉，看似温吞之水，却会愈演愈烈</li>
<li>男人就像汽油，粘火就着，而女人则需要逐渐释放自己的欲望</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《刻意练习》读书笔记</title>
    <url>/2020/06/17/Peak/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/09a74269a69a54ca1d9b1d33ba1dc5e4.png" width="460px" align="center"></img> 	<br>
书名：刻意练习<br>
英文名: <em>Peak:Secrets from the New Science of Expertise</em><br>
副标题: 如何从新手到大师<br>
作者：[美]安德斯·艾利克森、罗伯特.普尔<br>
译者: 王正林<br>
读完时间：2020年06月</br></p>
<span id="more"></span>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/091ad1e49374405000801b990837e567.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境下安装Nginx</title>
    <url>/2020/02/04/Linux_nginx/</url>
    <content><![CDATA[<p>在Linux环境安装Nginx，可以通过系统包管理工具或者自己下载安装包来安装，用包管理工具安装的优点是方便、快捷 但是不能自己选择版本，用安装包安装的优点是可以选择安装最新版本 但是容易碰到错误。不同Linux系统版本安装遇到的问题也会不同，我用的版本Ubantu18.04。</p>
<span id="more"></span>
<h2 id="通过包管理工具安装"><a class="header-anchor" href="#通过包管理工具安装"></a>通过包管理工具安装</h2>
<p>执行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更新工具包</span></span><br><span class="line">apt update</span><br><span class="line"><span class="comment">#安装Nginx</span></span><br><span class="line">apt install nginx</span><br></pre></td></tr></table></figure>
<p>这样不出意外就安装完成了。可以通过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure>
<p>来查看具体安装位置。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/e9322d6213138e3af6affac4a1045ac7.png" alt="在这里插入图片描述"><br>
/usr/sbin下面启动nginx，所有配置文件放在/etc/nginx下。</br><br>
根据需要修改nginx.conf文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  server &#123;</span><br><span class="line">listen       <span class="number">1111</span>;</span><br><span class="line">server_name  localhost;</span><br><span class="line">location / &#123;</span><br><span class="line">	root   /usr/local/blog;</span><br><span class="line">	index  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">location = /50x.html &#123;</span><br><span class="line">	root   html;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><strong>如果没有server,在http{}的gzip on代码前加入</strong>。重启nginx就可以看到效果了。</p>
<h2 id="通过安装包安装"><a class="header-anchor" href="#通过安装包安装"></a>通过安装包安装</h2>
<h3 id="下载适合版本的nginx安装包-br"><a class="header-anchor" href="#下载适合版本的nginx安装包-br"></a><a href="http://nginx.org/download/">下载</a>适合版本的nginx安装包</br></h3>
<h3 id="解压安装包到指定文件夹-br"><a class="header-anchor" href="#解压安装包到指定文件夹-br"></a>解压安装包到指定文件夹</br></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.9.9.tar.gz -C  /usr/local/</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a class="header-anchor" href="#配置"></a>配置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx-1.9.9</span><br><span class="line">./configure --prefix=/usr/local/nginx-1.9.9</span><br></pre></td></tr></table></figure>
<h3 id="编译安装"><a class="header-anchor" href="#编译安装"></a>编译安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h3 id="根据需要修改配置文件nginx-conf"><a class="header-anchor" href="#根据需要修改配置文件nginx-conf"></a>根据需要修改配置文件nginx.conf</h3>
<p>同工具包安装修改方式一样。<br>
</br><br>
在Ubantu18.04中会碰到很多问题，一般可以通过百度解决。常见错误解决过程参考<a href="https://blog.csdn.net/pengshengli/article/details/86694967">错误解决1</a>、<a href="https://blog.csdn.net/u010889616/article/details/82867091">错误解决2</a></p>
<h2 id="Nginx常用命令"><a class="header-anchor" href="#Nginx常用命令"></a>Nginx常用命令</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-启动Nginx服务</span></span><br><span class="line">sbin/./nginx                                           </span><br><span class="line"><span class="comment">#不中断服务的情况下重新加载配置文件</span></span><br><span class="line">sbin/./nginx -s reload  </span><br><span class="line"><span class="comment">#完整有序的停止nginx                               </span></span><br><span class="line">sbin/./nginx -s quit 								   </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础笔记</title>
    <url>/2020/02/29/Python_basic_notes/</url>
    <content><![CDATA[<h2 id="怎么运行写好的Python程序"><a class="header-anchor" href="#怎么运行写好的Python程序"></a>怎么运行写好的Python程序</h2>
<ul>
<li>直接双击</li>
<li>cmd进入文件所在目录输入python helloworld.py命令按回车；再执行helloworld.py</li>
</ul>
<span id="more"></span>
<h2 id="变量"><a class="header-anchor" href="#变量"></a>变量</h2>
<h3 id="变量与对象"><a class="header-anchor" href="#变量与对象"></a>变量与对象</h3>
<p>在Python中，一切都是对象，一切都是对象的引用。首先分析下面的赋值语句。</br><br>
X=5</br><br>
Python在执行该语句时，其执行过程包含三个步骤：<br>
第一步：创建表示整数5的对象(分配一块内存)。<br>
第二步：检测变量x是否存在，若不存在则创建它<br>
第三步：将变量与对象，通过指针连接起来，从变量到对象的连接称之为引用(变量引用对象)</p>
<!--more-->
<p>内存图如下所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/c218b32e1216ee99a73a0b39deaf5a27.jpeg" alt="在这里插入图片描述">	<br>
使用Python变量时必须理解下面几点：<br>
<strong>变量没有数据类型的概念，这一点和java C有区别。数据类型属于对象。<br>
变量引用了对象。变量在使用前必须赋值。</strong><br>
例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">5</span>  <span class="comment">#创建变量x 引用对象5</span></span><br><span class="line"><span class="built_in">print</span>(x+<span class="number">3</span>) <span class="comment">#执行时变量x被对象5替代，语句实际为print(5+3)</span></span><br></pre></td></tr></table></figure>
<h3 id="对象的垃圾回收"><a class="header-anchor" href="#对象的垃圾回收"></a>对象的垃圾回收</h3>
<p>Python为每一个对象创建一个计数器，计数器记录对象的引用次数。当计数器为0时（即没有任何变量引用时），对象被删除，其占用的内存空间会被自动回收。<br>
例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X=<span class="number">5</span>  x=<span class="number">3.3</span> <span class="comment">#使变量x引用浮点数对象3.3，对象5被回收</span></span><br></pre></td></tr></table></figure>
<h3 id="变量的共享引用"><a class="header-anchor" href="#变量的共享引用"></a>变量的共享引用</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">5</span></span><br><span class="line">y=x   <span class="comment">#实际执行y=5 ，x和y共同引用变量5</span></span><br><span class="line">x=<span class="number">6</span>   <span class="comment">#给变量引用新对象6 并不影响y的引用</span></span><br><span class="line"><span class="built_in">print</span>(x <span class="keyword">is</span> y)<span class="comment">#输出false</span></span><br></pre></td></tr></table></figure>
<h2 id="数据类型"><a class="header-anchor" href="#数据类型"></a>数据类型</h2>
<p>Python的主要数据类型有集合、字符串、列表、元组、字典、文件。其中字符串、列表和元组都属于序列，字典属于映射。</p>
<h3 id="集合"><a class="header-anchor" href="#集合"></a>集合</h3>
<p>集合用{}表示，例如{1,2,3},<strong>集合元素是无序、不能重复且不可改变的</strong>，相当于java的set数据类型，因此不能将可变对象放入集合中。集合、列表和字典对象均不能加入集合。元组可以作为一个元素加入集合。</p>
<p>集合的一些常用方法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(集合)            <span class="comment">#求集合的元素个数</span></span><br><span class="line">元素 <span class="keyword">in</span> 集合        <span class="comment">#判断某个元素是否属于集合</span></span><br><span class="line">集合A – 集合B      <span class="comment">#求差集，用A中不属于B的元素创建新集合</span></span><br><span class="line">集合A | 集合B      <span class="comment">#求并集，用A、B两个集合中的全部元素创建新集合</span></span><br><span class="line">集合A &amp; 集合B      <span class="comment">#求交集，用同时属于A、B的元素创建新集合</span></span><br><span class="line">copy() 				   <span class="comment">#复制集合</span></span><br><span class="line">add(元素)            <span class="comment">#为集合添加一个元素</span></span><br><span class="line">update(集合)         <span class="comment">#为集合添加多个元素</span></span><br><span class="line">remove(元素)/discard(元素) <span class="comment">#从集合中删除指定元素</span></span><br><span class="line">clear()               <span class="comment">#删除集合中全部元素</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串"><a class="header-anchor" href="#字符串"></a>字符串</h3>
<p>字符串是一种有序的字符集合，用于表示文本数据。单引号和双引号无区别，可以相互嵌套，三引号用于表示多行字符串(块字符)。</p>
<p>字符串的一些常用方法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(字符串)                 <span class="comment">#求字符串长度</span></span><br><span class="line">元素 <span class="keyword">in</span> 字符串             <span class="comment">#判断字符串是否包含元素</span></span><br><span class="line">字符串+字符串+字符串      <span class="comment">#用加法运算将多个字符串连接</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> 字符串:<span class="built_in">print</span>(a)	     <span class="comment">#循环字符串</span></span><br><span class="line"><span class="built_in">str</span>(数字)					<span class="comment">#将数字转换为字符串</span></span><br><span class="line">count(sub,start,end)        <span class="comment">#返回子字符串sub在指定范围内出现的次数</span></span><br><span class="line">endswith(sub,start,end)     <span class="comment">#判断指定范围内的子字符串是否以sub字符串结尾startswith(sub,start,end)    #判断指定范围内的子字符串是否以sub字符串开头</span></span><br><span class="line">find(sub,start,end)   <span class="comment">#在指定范围内查找子字符串sub，返回偏移量。没有返回-1</span></span><br><span class="line">find(sub,start,end)   <span class="comment">#同find()，返回偏移量,但没有时抛ValueError异常</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="列表"><a class="header-anchor" href="#列表"></a>列表</h3>
<p>列表用[]表示，例如：[3,4,’ab’]。列表的主要特点如下：</p>
<ul>
<li>列表可以包含任意类型的对象</li>
<li>列表是一个有序序列</li>
<li><strong>列表是可变的</strong>。可以添加或者删除列表成员，列表对象可直接修改。</li>
<li>列表存储的是对象引用而不是对象本身</li>
</ul>
<p>列表的常用方法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[]/<span class="built_in">list</span>(列表元素)  <span class="comment">#创建一个列表</span></span><br><span class="line"><span class="built_in">len</span>()            <span class="comment">#求列表长度</span></span><br><span class="line">列表A+列表B   <span class="comment">#合并列表</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> 列表:<span class="built_in">print</span>(a) <span class="comment">#循环列表</span></span><br><span class="line">元素 <span class="keyword">in</span> 列表     <span class="comment">#判断元素是否属于列表</span></span><br><span class="line">append(对象)     <span class="comment">#在列表末尾添加一个对象</span></span><br><span class="line">extend(对象)     <span class="comment">#在列表末尾添加多个对象</span></span><br><span class="line">insert(索引, 对象)  <span class="comment">#在指定位置插入对象</span></span><br><span class="line">remove(对象)     <span class="comment">#按值删除对象</span></span><br><span class="line">pop(索引)        <span class="comment">#按位置删除对象</span></span><br><span class="line">clear()			  <span class="comment">#删除全部对象</span></span><br><span class="line">copy()           <span class="comment">#复制列表</span></span><br><span class="line">sort()           <span class="comment">#将列表中的对象排序，若包含多种数据类型则会出错</span></span><br><span class="line">reverse()        <span class="comment">#反转对象顺序</span></span><br></pre></td></tr></table></figure>
<h3 id="元组"><a class="header-anchor" href="#元组"></a>元组</h3>
<p>元组用()表示，例如：(3,4,’ab’)。元组的主要特点如下：</p>
<ul>
<li>元组可以包含任意类型的对象</li>
<li>元组是一个有序序列</li>
<li><strong>元组是不可变的</strong>。不可以添加或者删除元组成员，元组对象也不能改变。</li>
<li>元组存储的是对象引用而不是对象本身</li>
</ul>
<p>元组的常用方法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">()/<span class="built_in">tuple</span>()        <span class="comment">#创建一个元组对象</span></span><br><span class="line"><span class="built_in">len</span>()            <span class="comment">#求元组长度</span></span><br><span class="line">元组A+元组B       <span class="comment">#合并元组</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> 元组:<span class="built_in">print</span>(a)  <span class="comment">#元组列表</span></span><br><span class="line">元素 <span class="keyword">in</span> 元组        <span class="comment">#判断对象是否属于元组</span></span><br><span class="line">count(对象)          <span class="comment">#返回指定对象在元组中出现的次数</span></span><br><span class="line">index(value,start,end)   <span class="comment">#在指定范围内查找指定值，返回偏移量。没有会报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="字典"><a class="header-anchor" href="#字典"></a>字典</h3>
<p>字典是一种无序的可变的映射的集合，包含一系列的键值对。字典用{}表示，例如：{‘name’:’Jack’,’age’:18,’sex’:’男’}。字典的主要特点如下：</p>
<ul>
<li>字典键一般用字符串，字典值可以是任意类型(包括字典)</li>
<li><strong>字典是无序可变的映射</strong></li>
<li>字典存储的是对象引用而不是对象本身</li>
</ul>
<p>字典的的常用方法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#125;/<span class="built_in">dict</span>(字典)    <span class="comment">#创建字典</span></span><br><span class="line"><span class="built_in">len</span>(字典)       <span class="comment">#求长度</span></span><br><span class="line">键 <span class="keyword">in</span> 字典     <span class="comment">#用于判断字典是否包含某个键</span></span><br><span class="line">clear()         <span class="comment">#删除全部字典</span></span><br><span class="line">copy()         <span class="comment">#复制字典对象</span></span><br><span class="line">get(key,default)  <span class="comment">#返回键key对应的值，若不存在返回default。</span></span><br><span class="line">pop(key,default)  <span class="comment">#删除key并返回映射值，若不存在返回default。未指定会报错</span></span><br><span class="line">items()          <span class="comment">#返回所有键值对集合</span></span><br><span class="line">keys()           <span class="comment">#返回所有键集合</span></span><br><span class="line">values()         <span class="comment">#返回所有值集合</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="文件"><a class="header-anchor" href="#文件"></a>文件</h3>
<p>Python用内置的open()函数来打开文件，并创建一个文件对象。open()函数基本格式如下：myfile = open(filename,mode)  mode为读写模式<br>
文件的读写模式有下面几种：</p>
<ul>
<li>w:写文件。创建新文件，若已存在覆盖原文件</li>
<li>a:以追加方式写文件。若文件不存在会创建新文件</li>
<li>r:读文件</li>
<li>b:访问二进制文件。例：wb、ab、 rb</li>
<li>+:可同时进行读写操作。如open(file,’w+’)表示以写方式打开文件同时可读</li>
</ul>
<h2 id="函数"><a class="header-anchor" href="#函数"></a>函数</h2>
<h3 id="定义函数"><a class="header-anchor" href="#定义函数"></a>定义函数</h3>
<p>Python定义函数的基本格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数列表</span>):</span><br><span class="line">	函数体</span><br><span class="line">	<span class="keyword">return</span> 返回值</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>参数列表和返回值都不是必须的</strong></p>
<h3 id="函数的参数"><a class="header-anchor" href="#函数的参数"></a>函数的参数</h3>
<h4 id="参数的多态性"><a class="header-anchor" href="#参数的多态性"></a>参数的多态性</h4>
<p>Python中的变量无类型属性，变量可引用不同类型的对象。同一个函数，传递的实际参数类型不同时，可获得不同的结果，体现了多态性。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):<span class="keyword">return</span> a+b    <span class="comment">#支持+运算的对象均可以作为参数</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">3.3</span>)               <span class="comment">#执行加法运算，返回4.3</span></span><br><span class="line">add(‘abc’,’de’)            <span class="comment">#执行字符串连接，返回’abcde’</span></span><br><span class="line">add((<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>))           <span class="comment">#执行元组合并，返回(1,2,3,4)</span></span><br></pre></td></tr></table></figure>
<h4 id="参数赋值传递"><a class="header-anchor" href="#参数赋值传递"></a>参数赋值传递</h4>
<p>先看一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(b=‘abc’,a=’de’)   <span class="comment">#返回’deabc’</span></span><br></pre></td></tr></table></figure>
<p>即参数赋值传递与参数的顺序无关</p>
<h4 id="可变参数可在函数中被修改"><a class="header-anchor" href="#可变参数可在函数中被修改"></a>可变参数可在函数中被修改</h4>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a</span>): a[<span class="number">0</span>]=’abc’     <span class="comment">#修改列表第一个值 </span></span><br><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">f(x)               <span class="comment">#调用函数后 x的值变为[‘abc’,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span> (a):a=<span class="number">100</span>     </span><br><span class="line">x=<span class="number">10</span></span><br><span class="line">f(x)              <span class="comment">#此时调用函数 x的值还是10。Python函数只改变可变参数。</span></span><br></pre></td></tr></table></figure>
<h4 id="有默认值的参数"><a class="header-anchor" href="#有默认值的参数"></a>有默认值的参数</h4>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span>(a,b=<span class="number">20</span>):<span class="keyword">return</span> a+b        <span class="comment">#参数b默认值为20</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)                    <span class="comment">#传递指定参数。返回3</span></span><br><span class="line">add(<span class="number">1</span>)                     <span class="comment">#未传递实参则取默认值。返回21</span></span><br></pre></td></tr></table></figure>
<h4 id="传递任意个数的参数"><a class="header-anchor" href="#传递任意个数的参数"></a>传递任意个数的参数</h4>
<p>在参数前加*可以接受任意个数的参数(或不传)，这些参数会保存在一个元组中。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,*b</span>):</span><br><span class="line">s=a</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> b:</span><br><span class="line">s+=x</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)    <span class="comment">#返回3</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)    <span class="comment">#返回6</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)    <span class="comment">#返回10</span></span><br></pre></td></tr></table></figure>
<h4 id="必须通过赋值传递的参数"><a class="header-anchor" href="#必须通过赋值传递的参数"></a>必须通过赋值传递的参数</h4>
<p>在定义函数时，带星号参数后的参数必须通过赋值传递</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,*b,c</span>):</span><br><span class="line">s=a+c</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> b:</span><br><span class="line">s+=x</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)          <span class="comment">#形参c未使用赋值传递会报错</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">3</span>)       <span class="comment">#可以正常运行</span></span><br><span class="line">add(<span class="number">1</span>,c=<span class="number">3</span>)        <span class="comment">#省略带星号参数，可以正常运行</span></span><br></pre></td></tr></table></figure>
<h3 id="lambda函数"><a class="header-anchor" href="#lambda函数"></a>lambda函数</h3>
<p>lambda函数用于定义一个匿名函数，可将函数赋值给变量，通过变量调用。其基本格式如下：<br>
lambda 参数表：表达式<br>
例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add= <span class="keyword">lambda</span> a,b:a+b                    <span class="comment">#定义函数并赋值给变量</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)                              <span class="comment">#调用函数。返回3</span></span><br></pre></td></tr></table></figure>
<p><strong>lambda函数体中不能使用其他Python函数</strong></p>
<h3 id="函数列表"><a class="header-anchor" href="#函数列表"></a>函数列表</h3>
<p>Python允许将函数作为列表对象，然后通过列表所以来调用函数。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=[<span class="keyword">lambda</span> a,b:a+b,<span class="keyword">lambda</span> a,b:a*b]    <span class="comment">#使用lambda函数创建一个列表</span></span><br><span class="line">d[<span class="number">0</span>](<span class="number">4</span>,<span class="number">5</span>)                          <span class="comment">#调用第一个函数。返回9</span></span><br><span class="line">d[<span class="number">1</span>](<span class="number">4</span>,<span class="number">5</span>)							  <span class="comment">#调用第二个函数.返回20</span></span><br></pre></td></tr></table></figure>
<h2 id="模块"><a class="header-anchor" href="#模块"></a>模块</h2>
<h3 id="导入模块"><a class="header-anchor" href="#导入模块"></a>导入模块</h3>
<p>在Python中，模块就是一个包含变量、函数或者类的程序文件(*.py)。模块需要先导入才能使用其中的变量或者函数。可使用import或者from语句来导入模块，基本格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名称</span><br><span class="line"><span class="keyword">import</span>模块名称 <span class="keyword">as</span> 新名称</span><br><span class="line"><span class="keyword">from</span> 模块名称 <span class="keyword">import</span> 导入对象名称</span><br><span class="line"><span class="keyword">from</span> 模块名称 <span class="keyword">import</span> 导入对象名称 <span class="keyword">as</span> 新名称</span><br><span class="line"><span class="keyword">from</span> 模块名称 <span class="keyword">import</span>*</span><br></pre></td></tr></table></figure>
<p><strong>import语句用于导入整个模块，通过“模块名称.对象名称”的方式来引用；from语句用于导入模块中的指定对象，导入对象可以直接使用，不需要使用模块名称来作为限定符。</strong></p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.fabs(-<span class="number">3</span>)</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> fabs</span><br><span class="line">fabs(-<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p><strong>使用from导入模块时，应注意可修改对象、同名变量(函数)覆盖问题。为避免不必要冲突，尽量用import导入。</strong></p>
<h3 id="执行模块"><a class="header-anchor" href="#执行模块"></a>执行模块</h3>
<p>下面的模块文件helloworld.py包含了一条赋值语句和一条输出语句，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这是模块helloworld.py的输出！&quot;</span>)</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;输入任意键退出&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>用import导入helloworld模块<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/a21921c706df8e8df6d9f53ae0b9c2d8.png" alt="在这里插入图片描述">	<br>
可以看出<strong>用import导入模块时，重新导入并不会改变模块中变量在之前已经赋的值</strong><br>
</br><br>
用from导入helloworld模块<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/5e0307dce7274155289c732b6b27c60a.png" alt="在这里插入图片描述">	<br>
可以看出用<strong>from导入模块时，重新导入会使模块变量初始化</strong></p>
<h3 id="重新载入模块"><a class="header-anchor" href="#重新载入模块"></a>重新载入模块</h3>
<p>Python提供了reload函数来重新载入并执行模块代码，以初始化相关变量 。使用reload重载模块时，如果模块文件已经被修改，则会执行修改后的代码。如果模块未导入，执行reload重载则会报错。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> imp <span class="keyword">import</span> reload           <span class="comment">#导入reload函数</span></span><br><span class="line">reload(模块名)					  <span class="comment">#重载模块</span></span><br></pre></td></tr></table></figure>
<h3 id="模块搜索路径"><a class="header-anchor" href="#模块搜索路径"></a>模块搜索路径</h3>
<p>在使用模块导入功能时，不能在import或者from语句中指定模块文件路径，只能依赖于Python模块搜索路径。可以使用标准模块sys的path属性来查看当前搜索路径设置。例如：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/0e5b4f55fa68784e351ca73b8aa29be2.png" alt="在这里插入图片描述">	<br>
Python按照先后顺序依次在path列表中搜索模块。如果要导入的模块不在这些目录中，导入操作失败。通常，sys.path有四部分组成。</p>
<ul>
<li>程序的当前目录</li>
<li>Python标准库文件</li>
<li><strong>任何.pth文件包含的目录(手动配置)</strong></li>
<li><strong>操作系统的环境变量PYTHONPATH中包含的目录(手动配置)</strong><br>
.pth文件通常放在Python安装目录中，例如D:\Python35，文件名可以随意取。.pth文件中，每个目录占一行，可包含多个目录，例如：<br>
F:\myCodes\ECMAScript6<br>
F:\Desktop</li>
</ul>
<p>在操作系统中设置环境变量PYTHONPATH的值<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/c64d687379d5652ba0269d26ed7dc644.png" alt="在这里插入图片描述">	<br>
sys.path列表在程序启动时，自动进行初始化。例如：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/38b6a54638c1b87fac2db093848444d4.png" alt="在这里插入图片描述">	<br>
图片中标红的地方正是刚刚.pth文件和环境变量中设置的路径。操作模块路径的一些方法(临时操作)如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> path[<span class="number">2</span>]                 <span class="comment">#删除第三个路径</span></span><br><span class="line">path.append(r’路径地址’)     <span class="comment">#添加一条搜索路径</span></span><br></pre></td></tr></table></figure>
<p>隐藏模块数据<br>
用from语句导入模块时，以单下划线开头的变量不会被导入。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#helloworld.py</span></span><br><span class="line">x=<span class="number">100</span></span><br><span class="line">_y=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_add</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;隐藏模块show()执行&quot;</span>)    </span><br><span class="line">    </span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;输入任意键退出&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>在交互模式下导入helloworld.py：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/c50fb49d4d0fe02f281b6c7833691aa4.png" alt="在这里插入图片描述">	<br>
可以看到_y和_add没有导入。<br>
可以在模块文件开头使用__all__变量设置使用from导入时的变量名。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#helloworld.py</span></span><br><span class="line">__all__=[<span class="string">&#x27;_y&#x27;</span>,<span class="string">&#x27;_add&#x27;</span>,<span class="string">&#x27;show&#x27;</span>]     <span class="comment">#设置可导入变量名列表</span></span><br><span class="line">x=<span class="number">100</span></span><br><span class="line">_y=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_add</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;隐藏模块show()执行&quot;</span>)    </span><br><span class="line">    </span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;输入任意键退出&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>在交互模式下导入模式测试：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/213ba1d8c315474402183eae01fe19ff.png" alt="在这里插入图片描述">	<br>
只要是__all__列表中的变量名，不管是否以下划线开头均会导入。不在__all__列表中的变量不会被导入。</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>《中国的男人和女人》读书笔记</title>
    <url>/2020/12/13/Sexual_Roles_in_China/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/9dcd7b607bed24b12ecc0c3de60bb9cd.jpeg" alt="在这里插入图片描述"></p>
<p>书名：中国的男人和女人<br>
作者：易中天<br>
读完时间：2020年12月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<p>◆ 奶油小生</p>
<ul>
<li>力量，原本应该是男性的特征。一个真正的男子汉，应该是刚强坚毅，孔武有力的。当然，这里说的“力”，并不只是体力，也指智力，而且主要是指意志力。但那些动不动就跪、就哭的角色，肯定无此力量。一个男人没有力量，照说也就应该没有魅力，然而却偏能获取芳心，这真是咄咄怪事！</li>
</ul>
<p>◆ 忠臣孝子</p>
<ul>
<li>
<p>认真说来，责任心和责任感，才是一个男人最重要的品质。</p>
</li>
<li>
<p>所谓忠臣孝子或正人君子一流的人物，当然不会有这等下贱行为，因为他们多半不通奸，也就无奸可捉。但在危难之时，他们同样是既不承担保护女人的责任，也完全没有保护女人的能力。当国难或家难临头时，比方说，府邸、城池、国都被匪人或敌兵包围，眼看抵挡不住时，他们的第一反应，也往往是先逼自己的妻妾和女儿自尽，甚或亲手杀了她们，然后再自尽，或逃亡，或投降做俘虏。可见，中国的男人，实在是靠不住。比较靠得住的，只是侠客和江湖好汉。但可惜，侠客和好汉们往往又不爱女人。</p>
</li>
<li>
<p>从原始时代起，男人和女人，对于自己家族、氏族和民族的存亡继绝，就有不同的分工和责任。女人的任务，主要是生儿育女，保证族类生命的延续；男人的任务，则主要是猎取食物和保卫部落，保证族类的现实存活。可见，保家卫国，从来就是男人义不容辞的责任，而女人至多只是做一些辅助工作，绝没有挑大梁的道理。</p>
</li>
</ul>
<p>◆ 贤妻良母</p>
<ul>
<li>男人没有“良父”的义务，更没有“贤夫”的责任。在中国传统社会里，只有贤或不贤的妻，没有贤或不贤的夫。或者说，丈夫们似乎天然就是贤的，有不贤之可能的只是妻子。所以，只有因其不贤而休妻者，却没有因其不贤而休夫者。主动要求与丈夫离异的也有（比如汉代的朱买臣之妻），但那多半是因为丈夫“贫贱”，而非“不贤”。</li>
</ul>
<p>◆ 弱女子与女强人</p>
<ul>
<li>然而，尽管男人中不乏平庸、胆小、无能的窝囊废，但能干、勇敢、刚强的男人绝不会被称为“男强人”。这无非因为在传统观念看来，男人原本是该强，而女人原本是该弱的。所以，男人强是正常现象，不必特别说明他是“男强人”，只要说他是男人即可；而女人强则不正常，必须特别地加以强调。这显然是男性中心论的观念在作怪。只因为这种观念太根深蒂固，人们便不以为怪了。</li>
</ul>
<p>◆ 淫毒妇与贞烈女</p>
<ul>
<li>男人见了漂亮女人，很少有不动心的。如果得知对方是寡妇，便更会想入非非，甚至惹是生非。寡妇没有男人保护，好欺负；寡妇有过性的经验，好勾引。所以，“寡妇门前是非多”，年轻漂亮的寡妇门前是非就更多。</li>
</ul>
<p>◆ 二十世纪新女性</p>
<ul>
<li>。“不缠足”解放了她们的身，“兴女学”解放了她们的心，“废除包办婚姻”还其恋爱自由，“实行一夫一妻”使其免受奴役，“男女同工同酬”提高了她们的经济地位，“妇女参政议政”提高了她们的政治地位，而“男女一律平等”则更从法律上保证了她们成为和男子一样，有着公民权利与义务的独立、自主以及人身人格不受侵犯的人。</li>
</ul>
<p>◆ 神圣祭坛</p>
<ul>
<li>
<p>性，是男女之间最自然的关系。所谓“最自然的关系”，也就是最天然、最当然、最不勉强、最合乎天性因此自然而然就会发生的一种关系。然而，这个最自然的关系，又曾经被弄得很不自然。它不但登不得大雅之堂，即便在大雅之堂外面，在穷街陋巷、田边陇上，也未必就那么冠冕堂皇，多半仍要通过俚词、俗话、民谣、小曲、暗号、谜语、歇后语等形式曲折地表现。正规的教育，更是没有性这一课。似乎性既不是文化，也不是知识，竟是可以无师自通的事情。</p>
</li>
<li>
<p>生殖崇拜最早是对女性的崇拜，而且首先是对女性生殖器的崇拜。因为所有的孩子都是女人生的。这样，女人和女性生殖器，也就理所当然地被看作是神秘生殖力的源泉，或神秘生殖力的寓所。于是，女性生殖器（后来也扩展到男性生殖器）便被制作成各种图像和模型，而加以崇拜。而且，女性生殖器偶像都是按照张弛状态塑造的，男性生殖器偶像则是照勃起状态塑造的，因为这正是它们发挥魔力时的状态，因此有脱离人体而特别加以崇拜的意义。</p>
</li>
</ul>
<p>◆ 形式与内容</p>
<ul>
<li>
<p>婚姻是中国人的大事。正因为是大事，所以不敢马虎。在中国传统社会，其具体操作，大体上要经过和履行下列法定或约定的程序：第一步叫“纳采”，近代俗称“说媒”，即先由媒人往女方家中陈述男家求婚之意，询问待字之女的年岁与生肖，然后由男家请术士“合婚”，卜算生肖是否相合，婚姻是否吉利，双方同意了，男方就送一只雁给女方，作为“献纳采择”之礼，所以又叫“委禽”。宋代以后用羊、酒、彩缎为礼，叫“敲门”。第二步叫“问名”，近代俗称“定婚”，即双方正式交换庚帖，甚至详至两造三代及主婚人的姓名、荣衔、里居等。第三步叫“纳吉”，近代俗称“小聘”，即男家向宗庙问卜于祖先，如得吉卜就往告女家，并致送定婚礼品（一般为女子衣饰），女家也致答礼（一般为冠履及文房四宝），婚约即告成立。第四步叫“纳征”，近代俗称“聘礼”，即于迎娶前几日，男方将议定之聘金，并布帛、衣服、首饰、礼饼等物，如数以盛大仪仗送之女家。女家收受后，分赠亲友邻里，以示女儿出嫁有期。第五步叫“请期”，近代俗称“择吉”，即由男家择定迎娶之吉日，并通知女方。第六步叫“亲迎”，即在喜结良缘之日，新郎躬率鼓乐、仪仗、彩舆（俗称花轿），到女家以礼迎娶新娘，并一同归家。此节为以上六项程序中最隆重最重要者，通常所谓婚礼即从此开始。远自先秦，近至当代，上至品官，下至庶民，新婚之日，无不亲迎，唯皇帝因至尊而例外。同时，它也是传统社会中一个女子一生中所能享受的最高荣宠，因此也历来为女性所看重，倘无花轿，决不嫁人。以上六大程序，合起来就叫“六礼”。依六礼而婚娶者，就叫“明媒正娶”，有着不可动摇的合法性。</p>
</li>
<li>
<p>只生男孩当然没有问题：生一个是“喜得贵子”，生两个是“龙腾虎跃”，生三个是“三虎为彪”，生四个是“四大金刚”，生五个是“五虎上将”。“家有五虎将，半个土皇上”，父老乡亲，都要另眼相看，不敢欺侮怠慢。男孩女孩都生也行，叫“儿女双全”，同样被视为有福气的事情。有些地方的风俗，要在婚床上放红枣和栗子，取“早早立子”之意；放莲子，取“连连得子”之意；还要放花生，意思是说“花着生”，男孩女孩都有，花色品种齐全，更能尽享天伦之乐。这两种情况，都算好运气。最倒霉的是一个也不生，这会被认为是夫家的“家门不幸”。老百姓们会说：“母鸡还下蛋呢，哪有女人不生孩子的？”于是，这个女人就可能被休弃，因为她“无出”，够了被休的资格。只生女孩也很糟糕，因为她尽生“赔钱货”，等于是一个弄得企业年年亏损的厂长，董事会当然要撤他的职。所以只生女孩的媳妇便只有两条路可走：或者也被休弃，因为她同样是“无出”；或者继续不停顿地一口气生下去，直至生出男孩为止。无论何种前途，对于一个女人来说都很惨。</p>
</li>
</ul>
<p>◆ 所谓“明媒正娶”</p>
<ul>
<li>在中国古代，是连两个家族缔结婚姻的可能性，都是要取决于媒妁的。不但男女青年不能私定终身，就连双方家族也不能私结良缘。</li>
</ul>
<p>◆ 无性之恋</p>
<ul>
<li>
<p>事实上，不少包办婚姻，都相当地类似于圈养牲口。男女当事人，素不相识，毫无感情，有的甚至连面都没有见过一回，稀里糊涂地被拉扯到一起，晕头转向地拜了天地，然后就被推进“洞房”。“洞房”这个词，从字面看，也是四周封闭，黑咕隆咚有如洞穴。直到这时，才可能掀开盖头，在昏暗的灯光下一睹“庐山真面目”。接下来，便是吹灭灯火去上床。这样的一面之交，如说有性吸引，除非真是郎才女貌，可以一见钟情。就多数情况而言，则恐怕与强奸没有什么太大的区别。实际上，生活中也有新娘见新郎过于丑陋而拒不从命，最后被男方家人捆起来由新郎实施强奸的。这样的性关系，在某种意义上可以说真是禽兽不如。因为动物，尤其是野生动物，在交配之前也尚有性挑逗和性选择，而且决无强奸行为。</p>
</li>
<li>
<p>女性不但被规定为不得有性要求，而且还规定为不得有性魅力，长得太性感或打扮得太漂亮，都是不守妇道和不遵妇德。</p>
</li>
</ul>
<p>◆ 妻与妾</p>
<ul>
<li>
<p>总之，妻为正，妾为副；妻为主，妾为仆。明媒正娶的妻，与“来路不明”的妾，其地位不可同日而语。</p>
</li>
<li>
<p>首先，妻与夫，是配偶、伴侣关系；而夫与妾，则是主仆、主奴关系。这样，妻与妾，在理论上也是主仆关系。至少妻对于妾，是半个主子，与夫一样，对妾握有生杀予夺大权。依礼，夫纳妾，应经妻的批准；夫与妾同房，也应经妻同意。因为“纳妾”之义，原本就有须经妻“容纳”的意思。尽管在事实上，不少男子纳妾，未必要妻批准；与妾同房，也完全由自己兴之所至。但至少在理论上，妻是拥有这一权限的。而且，在历史上，也确有因妻坚决反对而丈夫终于未能纳妾者，比如东晋的当朝显贵谢安即是。</p>
</li>
<li>
<p>妻与妾既然有主仆的名分，则妾对于妻，也应谦卑自抑，恭敬有加。她应称妻为“夫人”“太太”，晨起晚睡时，要向妻请安。妻吃饭时，妾应站在旁边伺候。如妻赐座，也只能坐半边屁股，而且时时站起来添饭、布菜。总之，妾绝不可与妻平起平坐。因为依礼，“妾，接也，言得接见君子而不得伉俪也”。妾既与夫“不得伉俪”（不匹配、不对等），当然也不能与妻对等。妾不但不能与妻平起平坐，而且还要受妻管辖。因为妻作为“主妇”“主母”，享有法定的“治内权”，即管理家内事物的一切权力。这个权力是礼法授予的，连夫也不得僭越和干预。夫如干预妻治内，一旦妻搬出“礼”来，则连夫也只能自讨没趣。这个治内权，当然也包括管理妾在内。比方说，未经妻批准，妾不得出门；妻训斥妾时，妾不得还口；他人赠物与妾，未经妻允许，妾不得接受等等。甚至，在法定由妻陪侍夫的日子，即便妻不在，妾也不得代行其事。妻妾之间的这种不平等关系是终身的。许多朝代，都有不得以妾为妻的规定。唐代的杜佑，就因为晚年以妾为妻，颇受士林的指责。甚至直到死后，妾与妻也仍不能平等：妻死可以与夫同椁，而妾则无此殊荣。其次，不但妾的地位低于妻，而且妾之家族的地位也与妻之家族不可并论。</p>
</li>
<li>
<p>前已说过，妻族与夫族是“合二姓之好”的婚姻关系，妾族则不然。郑玄对《礼记·坊记》的笺注说：“妾言买者，以其贱同之于众物也。”也就是说，妾就像市场上流通的商品一样，是一种如同娼妓人皆可夫的“众物”。所不同者，娼妓是零售商品，妾则被一次性“买断”。既然是“众物”，当然也是没有家族的。即便有，也不把妾的家族视为家族，因此，一般地说，夫家与妾家不相往来，也不认这门亲戚。即便打交道，也只不过视为奴仆，只能享受奴才的待遇。</p>
</li>
<li>
<p>第三，不但妾不如妻，妾族不如妻族，便是妾之子，也不如妻之子。</p>
</li>
<li>
<p>对于这一点，礼法有极其严格的规定。依法，妻之子曰“嫡子”，又叫“嫡出”；妾之子曰“庶子”，又叫“庶出”。嫡子是宗族血统的当然继承者，庶子决不能僭越嫡子承继宗祧。也就是说，嫡子与庶子，一生下来，就有高低贵贱之分。母为妻，则贵；为妾，则贱。这就叫“子以母贵”。</p>
</li>
<li>
<p>道理也很简单：妾虽然生了儿子，但这儿子却是替妻生的。从名分上讲，妻才是这些儿子的母亲。换言之，生儿子的是妾，做母亲的是妻。所有的子女，无论嫡出庶出，都要认父之妻为母。对于自己的生母，则可认可不认。</p>
</li>
<li>
<p>嫡子交由庶母抚育，是一种特殊情况下的权益之计；而庶子交由嫡母抚育，则是堂堂正正的常规之举。尤其是，当正妻无出或庶子居长时，更是理应交嫡母抚育。</p>
</li>
</ul>
<p>◆ 妾不如婢</p>
<ul>
<li>如果说妾在封建家族中的地位是“人下人”，那么，婢的地位就可以说“不是人”。</li>
</ul>
<p>◆ 起源与类别</p>
<ul>
<li>比如越王勾践伐吴，将士思家，军心不稳，勾践便组织了妓女慰问团送往前线，谓之“游军士”，这大概就是中国最早的军妓。军妓到了汉武帝时，就成了一种制度，叫“营妓”。起先，军妓只是一种临时性措施，难免有些不够稳定。后来，采取了“抑配”制度，将罪人之妻女强制性地许配给军士。但这种“随军家属”，人多了会导致军队臃肿，人少了又难免苦乐不均，徒起矛盾。所以，干脆实行营妓制度，三军将士，一律自由平等，就不怕“不患寡而患不均”了。</li>
</ul>
<p>◆ 青楼的功能</p>
<ul>
<li>
<p>中国古代的妓女，总体上可以分为两大类，即“艺妓”和“色妓”。“艺妓”系由“艺伎”演化而来，主要提供艺术娱乐服务；“色妓”则是比较纯粹的卖淫者，靠出卖色相和肉体过日子。从娼妓的发展史看，先秦至六朝，大约以艺妓为主；唐宋两代，大约是两妓并存；到了明清，艺妓已属凤毛麟角，基本上是色妓的一统天下。总之，艺妓和色妓，是两类不同的妓女。</p>
</li>
<li>
<p>艺妓和色妓，不但服务内容不同，而且她们本身也有雅俗之别。一般地说，有资格当艺妓的，不但要貌美，还要有才华；不但要有天赋，还要受训练，有的简直就堪称艺术家。比如北魏妓女徐月华，是一个箜篌演奏艺术家。有一次，她“徐鼓箜篌而歌，哀声入云”，街上的行人听了，都停下脚步来欣赏，一会儿工夫，门前就挤满了人。又如南齐钱塘名妓苏小小，是个诗人，曾写过中国文学史上第一首出自妓女的诗——《西陵歌》。《西陵歌》云：“妾乘油壁车，郎骑青骢马。何处结同心？西陵松柏下。”这首诗，描写了一个妓女和她心中“白马王子”的恋情，含蓄隽永，朴直优美。正因为苏小小有此诗才，所以后世不断有人写诗怀念她。直到清朝，苏小小墓也还是有名的古迹，有些文人还对她低徊不尽、凭吊不已，可见其影响与魅力之大。</p>
</li>
<li>
<p>最高级的妓院叫“青楼”。“青楼”这个词，原本指豪华精致的楼房，有时则作为豪门高户的代称，比如“南开朱门，北望青楼”即是。朱门是红漆大门，青楼是青漆高楼，朱门外把守着家丁，青楼内大约就蓄养着倡妓吧？</p>
</li>
<li>
<p>青楼上的妓女，一般是艺妓，也有色艺双绝，两种服务都提供的。但无论如何，吟诗诵词、弹琴唱曲，仍是最主要的节目，也是青楼最主要的收入来源。没有艺术兴趣和艺术修养的客人，一般是不会光顾这里的，因为那会使他们白花许多“冤枉钱”。</p>
</li>
<li>
<p>中档的妓院叫“酒楼”。这里提供的服务，主要不是声色之美，而是口腹之乐。酒楼的烹调和器皿都极其讲究，而且有衣着华丽、年轻貌美的姑娘陪酒。美酒佳肴，鲜汤甜点，弦管笙歌，莺声燕语，彻夜不息。当然，楼上也另有密室以供他用。一到晚上，这些酒楼便会“大红灯笼高高挂”，让人一看便知那是灯红酒绿的“红灯区”。</p>
</li>
<li>
<p>低档的妓院叫“瓦舍”，是政府经营的廉价娼馆。至于民营的下等妓院，恐怕连瓦舍都不是，而只是一间破板壁房，叫“寮”；甚或只有一条破船，好听一点叫“舫”（高级的“花舫”则例外）。明代还有一种叫做“窑子”的地方，是连妓院都不够资格叫的，也许只能叫“娼窝”。一般是贫困小民，找一间破窑，弄几个丐女，裸卧其中，让过路人观看。看好了，挑一个，投钱七文，便可一泄其欲。所以，后来人们也将妓院蔑称为“窑子”，将妓女蔑称为“窑姐”，将匆匆行淫称为“打钉”，起源就在这里。</p>
</li>
<li>
<p>窑子和瓦舍事，我们可以不去管它，因为那比较简单。青楼和酒楼就不一样了。人们到那里去，并不仅仅只是为了性的需求。</p>
</li>
<li>
<p>首先，青楼的选址就十分讲究，既要在市区，方便客人往来，又要不喧闹，以免影响情绪。一般选在可以闹中取静之处。最好是通衢大道之旁一小巷，曲曲弯弯给人“小径通幽”之感。门前最好有杨柳，取“依人”之义；窗外最好有流水，含“不尽”之情。宅内的建筑，也十分考究。厅堂要宽，庭院要美，前后植花卉，左右立怪石，池中泛游鱼，轩内垂帘幕。室内的陈设，更是精致，须有琴棋书画，笔墨纸砚，望之有如艺术沙龙，绝非“肉铺”。进入这样的所在，首先便让人心旷神怡，病气、晦气、疲劳之气，都会被扫得干干净净。其次，菜肴、点心、瓜果、餐具、酒盅、茶杯，都要十分精致而洁净。高档的青楼，都有特级名厨主理，服务也极其周到。菜是清淡的，酒是清醇的，茶是清香的，器皿是干净的，再由一双双纤纤玉手捧了过来，莺声燕语，款款待客，全无俗人酒席上的吆三喝六，狂呼乱叫，能不是一种特殊的享受吗？第三，最重要的，是这里有色艺双绝的姑娘。这些姑娘都受过特殊的训练，一个个楚楚动人，仪态万方。尽管作为妓，她们终归是要卖身的，但高级的青楼妓女，也并不轻易献身；而不少客人到此，也相当地客客气气。因为和这些青楼女子见面、交谈，听她们宛转的歌曲，看她们清新的字画，性紧张便能得到极大的缓解。况且，修养极高的妓女，其自身的气质，也常会使人有不敢亵慢之感。比如宋代的徽宗皇帝赵佶第一次去东京名妓李师师家，就是又喝茶，又吃水果，又看风景，又吃夜宵，又香汤沐浴，折腾了老半天，才见到李师师一面。听了一支曲子后，连手指头都没碰一下，就回宫去了，而万岁爷还感到“意趣闲适”，十分满意。 青楼不但是放松身心的好去处，而且也是欣赏艺术的好地方。事实上，在没有剧院、影院、歌厅、舞厅的时代，青楼是一个重要的艺术场所。尽管中国历来就有国家歌舞团，但那是专供皇上享用的，一般民众难得一睹风采。正所谓“此曲只应天上有，人间能得几回闻”。民间人士要想欣赏比较高雅的歌舞，便只好到说起来并不高雅的地方去。古代的妓院，稍微上一点档次的，都能提供音乐舞蹈服务。不同之处，也许仅在于中低档的只有淫词艳曲，高档的则有清音雅声罢了。当然，客人如果高兴，也可以“卡拉”一番，有人伴奏，有人伴唱，有人伴舞，有人喝彩，这可是家里面享受不到的乐趣。</p>
</li>
<li>
<p>诗词歌赋靠妓女传播，音乐舞蹈靠妓女表演，中国文学艺术的发展有着妓女的贡献，中国文学艺术的繁荣有着青楼的功劳。精湛的艺术和精致的建筑、精美的食品一样，也是吸引人们来到青楼的原因之一。</p>
</li>
</ul>
<p>◆ 婢不如妓</p>
<ul>
<li>据我看来，妻、妾、婢都不如妓的原因，主要在于只有与妓女，才有可能（当然并不一定）建立一种无拘无束、轻松自由的异性朋友关系。</li>
</ul>
<p>◆ 妓不如窃</p>
<ul>
<li>
<p>但凡考察和研究过中国娼妓史的人，都多少会产生一些怪异感，觉得中国古代社会的一些事情，实在不可思议。比方说，中国古代社会极其讲究“设男女之大防”，已嫁女子回到娘家，和自己的亲兄弟都不能同桌吃饭，然而却又允许素不相识的男男女女，在妓院里眉来眼去、勾肩搭背、打情骂俏、随便上床；中国古代社会极其讲究女人的贞操，强调新娘必须是黄花闺女，妻妾必须要从一而终，寡妇再嫁都要视为失节，然而却又允许甚至要求一部分女子不守贞节，去充当人尽可夫的妓女，而且越淫荡、越放浪越好；中国古代社会也极其讲究男人的“守志”，强调一个有志气、有作为、有理想的男子汉大丈夫，应该不好色、不淫乱，不能玩物丧志，然而男子狎妓，却又被视为风流韵事，不俗而雅，可以写进诗词广为传唱，载入史册千古留名，连至尊天子有时也要去凑凑热闹，体验一下生活。这就实在让人弄不清楚，中国古代社会究竟是提倡什么，反对什么，宣扬什么，禁止什么。</p>
</li>
<li>
<p>偷情偷情，有因情而偷者，也有为偷而情者，但无论何种情况，都是叛逆，都要冒险，当然也都会有难以忘怀的体验。</p>
</li>
</ul>
<p>◆ 荤话与风话</p>
<ul>
<li>因此我怀疑，闹房与听房之俗，大约古已有之。它们很可能是一种极其古老的原始习俗，其本来目的，是对部落的青年进行性启蒙教育。不过天长日久，世风日下，民心不古，性教育的方式，便变成了性宣泄的手段。而且，在某些时代和某些地方，还闹得极不像话。有的把新娘引至庭前，翻衣服，脱鞋子，品头论足，任意戏弄，以至“庙见之妇，同于倚门之娼”；有的大动干戈，舞弄棍棒，吊打新郎，甚至弄出人命案来，使“红事”变成了“白事”。显然，这就不是性的宣泄，而是心理变态了。</li>
</ul>
<p>◆ 微妙关系两种</p>
<ul>
<li>做丈夫的必须积极支持和肯定妻子疼爱小叔子，做妻子的却断然不会容忍丈夫疼爱小姨子。中国传统社会男女之间不平等，而且总是男的占便宜女的吃亏，唯独这是一个例外。</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>关于《楚门的世界》的几句话</title>
    <url>/2020/06/16/The_Truman_Show/</url>
    <content><![CDATA[<p><img src="https://i-blog.csdnimg.cn/blog_migrate/c01279ad22c865afc52a42730ee49ff7.png" alt="在这里插入图片描述"></p>
<span id="more"></span>
<ul>
<li>“some birds aren’t meant to be caged, thats all. Their feathers are just too bright…”</li>
<li>“Good morning, and in case I don’t see you, good afternoon, good evening, and good night!”</li>
<li>电影中楚门的私生活被亿万观众一览无余，很同情楚门的遭遇。</li>
<li>事实上，我们每个人都生活在一个比较大的&quot;楚门世界&quot;，每天都在演着自己各种角色，只是没那么多观众…</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>电影</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>关于《火星救援》的几句话</title>
    <url>/2020/02/11/The_Martian/</url>
    <content><![CDATA[<p><img src="https://i-blog.csdnimg.cn/blog_migrate/f0396043233cc642d0d702fa69f50bdd.png" alt="在这里插入图片描述"></p>
<span id="more"></span>	
<ul>
<li>拍摄的画面确实非常美！故事的开头火星沙尘暴和后续飞行器对接贼精彩和刺激！</li>
<li>中国航天局也太草率了吧，说改变计划就改变了</li>
<li>总而言之，不幸被困在火星要想尽办法活下去和回家</li>
<li>主角在火星中很酷，若更苦，可能更有看头</li>
<li>“This is space.It does not cooperate.At some point,everything is going to go south on you and you are going to say’This is it.'Now,you can either accept that or you can get to work.That is all it is.You just begin.You do the math.You solve one peoblem then you solve the next one.And then the next. And If you solve enough problems,you get to come home”</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>电影</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>《爱的五种语言》读书笔记</title>
    <url>/2020/11/24/The_five_love_languages/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/9ea44fbdf2e43f52cec36300da10f1cc.jpeg" width="460px" align="center"></img></p>
<p>书名：爱的五种语言<br>
原作名：<em>The five love languages</em><br>
作者：[美]盖瑞.查普曼<br>
译者：王云良<br>
读完时间：2020年11月</br></p>
<span id="more"></span>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p>作者总结出爱的五种语言肯定的言词、精心的时刻、接受礼物、服务的行动和身体的接触。部分观点我并不赞同。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《富爸爸，穷爸爸》读书笔记</title>
    <url>/2020/08/02/Rich_Dad_Poor_Dad/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<img src="https://i-blog.csdnimg.cn/blog_migrate/bd2afe98cf2f61df72ccd9e3bec59c0d.jpeg" width="460px" align="center" />
<p>书名：富爸爸，穷爸爸<br>
英文名：<em>Rich Dad,Poor Dad</em><br>
作者：（美）罗伯特.T.清崎 / 莎伦.L.莱希特<br>
译者：杨君，杨明<br>
读完时间：2020年07月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<ul>
<li>穷人在为钱而工作，富人让钱为他们工作。</li>
<li>穷爸爸：“我不富的原因是我有孩子。”<br>
富爸爸：“我必须富的原因是我有孩子。</li>
<li>富人买入资产;穷人只有支出;中产阶级买他们以为是资产的负债。</li>
<li>学校是产生好雇员而不是好雇主的地方。</li>
<li>真正的资产可以分为下列几类：1.不需我到场就可以正常运作的业务。我拥有它们，但由别人经营和管理。如果我必须在那儿工作，那它就不是我的事业而是我的 职业了;2.股票;3.债券;4.共同基金;5.产生收入的房地产;6.票据(借据);7.专利权如音乐、手稿、专利;8.任何其他有价值、可产生收入或 可能增值并且有很好的流通市场的东西。</li>
<li>过分的畏惧和自我怀疑是浪费我们才能的最大因素。</li>
<li>风险总是无处不在，要学会驾驭风险，而不是一味回避风险。</li>
<li>为了赚钱，只有一项技能的人只能努力工作。</li>
<li>对于受过良好教育的爸爸来说，稳定的工作就是一切。而对于富爸爸来说，不断学习才是一切。</li>
<li>世界上到处都是有才华的穷人。</li>
<li>傲慢是无知的另一面。</li>
<li>穷爸爸努力存钱，富爸爸不断投资。</li>
<li>最大的损失是机会损失。</li>
<li>我受过高等教育的爸爸总是鼓励我去一家大公司找个好工作。他的价值观是：“顺着公司的梯子，一步步往上爬”。他不知道，仅仅依赖雇主的工资，就永远只能是一头乖乖待挤的奶牛。</li>
<li>金钱不是真实的资产，我们唯一的，最重要的资产就是我们的头脑。</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Python面向对象编程</title>
    <url>/2020/03/11/Python_object_oriented/</url>
    <content><![CDATA[<h2 id="理解Python面向对象"><a class="header-anchor" href="#理解Python面向对象"></a>理解Python面向对象</h2>
<h3 id="Python中的类"><a class="header-anchor" href="#Python中的类"></a>Python中的类</h3>
<p>在Python中。类使用class语句来定义。在类的代码中包含了一系列语句，用赋值语句创建变量，用def定义函数等。Python中的类只要有下面几个特点：</p>
<ul>
<li>一个类可以有多个实例对象，每个实例对象拥有自己的命名空间。</li>
<li>类支持继承，通过继承对类进行扩展。</li>
<li>支持运算符重载。通过内置的特定方法，可以使类的对象支持内置类型的各种运算。</li>
</ul>
<span id="more"></span>
<h3 id="Python中的对象"><a class="header-anchor" href="#Python中的对象"></a>Python中的对象</h3>
<h4 id="类对象"><a class="header-anchor" href="#类对象"></a>类对象</h4>
<p>类对象具有如下特点：</p>
<ul>
<li>Python执行class语句时创建一个类对象和一个变量(名称就是类名称)，变量引用对象。导入类模块时，class语句被执行，创建类对象。</li>
<li>类的数据(变量)用“对象名.属性名”格式来访问。</li>
<li>类的方法属性用“对象名.方法名()”格式来访问。</li>
<li>类的数据(变量)和方法由所有实例对象共享</li>
</ul>
<h4 id="实例对象"><a class="header-anchor" href="#实例对象"></a>实例对象</h4>
<p>实例对象具有如下特点：</p>
<ul>
<li>实例对象通过调用类对象来创建。</li>
<li>每个实例对象继承类对象的属性，并获得自己的命名空间。</li>
</ul>
<p>实例对象拥有私有属性。类的方法函数的第一个参数默认为self，表示引用方法对象的实例。在方法中对self属性赋值才会创建属于实例对象的属性。</p>
<h2 id="定义和使用类"><a class="header-anchor" href="#定义和使用类"></a>定义和使用类</h2>
<p>类定义的基本格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>：</span><br><span class="line">	赋值语句 </span><br><span class="line">	赋值语句</span><br><span class="line">	……</span><br><span class="line">	<span class="keyword">def</span>语句定义函数</span><br><span class="line">	<span class="keyword">def</span>语句定义函数</span><br><span class="line">	……</span><br></pre></td></tr></table></figure>
<p>各种语句的先后顺序没有关系。</p>
<h3 id="定义类"><a class="header-anchor" href="#定义类"></a>定义类</h3>
<p>下面的代码演示了定义了一个testclass类:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">testclass</span>:</span><br><span class="line">    data=<span class="number">100</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setpdata</span>(<span class="params">self,value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.pdata = value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showpdata</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;self.pdata=&quot;</span>,<span class="variable language_">self</span>.pdata)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类testclass加载完成！&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="使用类"><a class="header-anchor" href="#使用类"></a>使用类</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(testclass) <span class="comment">#输出&lt;class &#x27;type&#x27;&gt; Python的所有类对象都是type类型</span></span><br><span class="line">testclass.data <span class="comment">#输出100</span></span><br><span class="line">testclass.showpdata() <span class="comment">#类的方法需要实例对象来调用 否则会报错</span></span><br><span class="line">类的方法不能通过类对象直接调用，因为含有参数<span class="variable language_">self</span>,它代表实例对象。调用方式如下：</span><br><span class="line">x = testclass() <span class="comment">#调用类创建第一个实例对象</span></span><br><span class="line">x.setpdata(<span class="string">&#x27;abc&#x27;</span>)<span class="comment">#调用方法给实例对象的数据属性pdata设置值</span></span><br><span class="line">x.showpdata()   <span class="comment">#输出self.pdata=abc,调用方法显示实例对象的属性值</span></span><br><span class="line">y=testclass()   <span class="comment">#调用类创建第二个实例对象</span></span><br><span class="line">x.setpdata(<span class="string">&#x27;123&#x27;</span>)<span class="comment">#调用方法给实例对象的数据属性pdata设置值</span></span><br><span class="line">x.showpdata()   <span class="comment">#输出self.pdata=123,调用方法显示实例对象的属性值</span></span><br><span class="line">类对象的属性可以实例对象共享，例如：</span><br><span class="line">x.data,y.data <span class="comment">#输出(100,100)</span></span><br><span class="line">testclass.data = <span class="number">200</span> <span class="comment">#通过类对象修改共享属性</span></span><br><span class="line">x.data,y.data <span class="comment">#输出(200,200)</span></span><br></pre></td></tr></table></figure>
<h2 id="对象的属性和方法"><a class="header-anchor" href="#对象的属性和方法"></a>对象的属性和方法</h2>
<h3 id="对象的属性"><a class="header-anchor" href="#对象的属性"></a>对象的属性</h3>
<p>在Python中实例对象继承了类对象的所有属性和方法，可以通过dir()方法来查看。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>(testclass)  <span class="comment"># 输出[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;data&#x27;, &#x27;setpdata&#x27;, &#x27;showpdata&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>以双下划线开始和结尾的变量名属于内置属性。</p>
<h4 id="共享属性"><a class="header-anchor" href="#共享属性"></a>共享属性</h4>
<p>类对象的数据属性是全局的，即默认情况下它属于类对象，并可以通过实例变量来引用。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = testclass()</span><br><span class="line">y = testclass()</span><br><span class="line">testclass.data,x.data,y.data <span class="comment">#输出(100,100,100)</span></span><br><span class="line">testclass.data = <span class="number">200</span> <span class="comment">#对全局属性data赋值</span></span><br><span class="line">testclass.data,x.data,y.data <span class="comment">#输出(200,200,200)</span></span><br><span class="line">x.data = <span class="number">300</span>       <span class="comment">#对实例变量的data属性赋值</span></span><br><span class="line">testclass.data,x.data,y.data <span class="comment">#输出(200,300,200)</span></span><br></pre></td></tr></table></figure>
<p>在没有给实例对象赋值时，它引用的是类对象的同名属性。给实例对象的属性赋值时，使其引用了新对象，不再与类对象的同名属性相关联。所以出现了x的data属性值与testclass和y的属性值不一样。实例对象和类对象的关系如下所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/a332c54b544d653f974bac3d95e5935c.jpeg" alt="在这里插入图片描述"></p>
<h4 id="实例对象的“私有”属性"><a class="header-anchor" href="#实例对象的“私有”属性"></a>实例对象的“私有”属性</h4>
<p>实例对象的“私有”属性指类的函数中以”self.属性值=值”格式进行赋值创建的属性。“私有”属性只属于当前实例对象。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = testclass()</span><br><span class="line">x.pdata <span class="comment">#会报AttibuteError &#x27;testclass&#x27; object has no attribute &#x27;pdata&#x27;错误</span></span><br><span class="line">x.setpdata(<span class="number">1234</span>)</span><br><span class="line">x.pdata <span class="comment">#可以访问</span></span><br></pre></td></tr></table></figure>
<h4 id="对象的属性具有动态性"><a class="header-anchor" href="#对象的属性具有动态性"></a>对象的属性具有动态性</h4>
<p>对于类对象或者实例对象而言，当给不存在的属性赋值时，Python为其创建属性。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = testclass()</span><br><span class="line">testclass.data2 = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">testclass.data3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">testclass.data2,x.data2,x.data3 <span class="comment">#输出(&#x27;aaa&#x27;,&#x27;aaa&#x27;,[1, 2, 3])</span></span><br></pre></td></tr></table></figure>
<p>可以看出实例对象也自动拥有了为类对象动态添加的属性。</p>
<h3 id="对象的方法"><a class="header-anchor" href="#对象的方法"></a>对象的方法</h3>
<p>实例对象没有自己的方法，只是通过继承的方法名变量来引用属于类对象的方法。通过实例对象调用方法时，当前实例对象作为一个参数传递给方法，所以在定义供实例对象调用的方法时，通常第一个参数名称为self(也可以用其他的名称)。<br>
例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">        <span class="keyword">return</span> a+b</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add2</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test.add(<span class="number">2</span>,<span class="number">3</span>)) <span class="comment">#输出5，通过类对象调用方法</span></span><br><span class="line"><span class="built_in">print</span>(test.add2(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">#输出7，通过类对象调用方法</span></span><br><span class="line">x = test()  <span class="comment">#创建实例对象</span></span><br><span class="line">x.add(<span class="number">2</span>,<span class="number">3</span>)  <span class="comment">#会报错，显示需要2个参数但传递了3个</span></span><br><span class="line"><span class="built_in">print</span>(x.add2(<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">#输出7，通过实例对象调用方法</span></span><br></pre></td></tr></table></figure>
<p>可以看出类对象可以调用类中的所有方法，只是需要记住参数个数。在执行“test.add2(2,3,4)”时第一个参数在函数中未使用。</p>
<h3 id="类的”伪私有”属性和方法"><a class="header-anchor" href="#类的”伪私有”属性和方法"></a>类的”伪私有”属性和方法</h3>
<p>在模块中使用双下划线作为变量名前缀，可以避免变量在使用from…import*语句时被导入。类似地，在类中使用双下划线作为变量名前缀，这些变量名不能直接在类外使用。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>:</span><br><span class="line">    data = <span class="number">100</span></span><br><span class="line">    __data2 = <span class="number">200</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">        <span class="keyword">return</span> a+b</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sub</span>(<span class="params">a,b</span>):</span><br><span class="line">        <span class="keyword">return</span> a-b</span><br><span class="line">test.data <span class="comment">#100</span></span><br><span class="line">test.add(<span class="number">2</span>,<span class="number">3</span>) <span class="comment">#5</span></span><br><span class="line">test. __data2 <span class="comment">#报AttributeError: type object &#x27;test&#x27; has no attribute &#x27;data2&#x27;错</span></span><br><span class="line">test.__sub(<span class="number">2</span>,<span class="number">3</span>) <span class="comment">#AttributeError: type object &#x27;test&#x27; has no attribute &#x27;__sub&#x27;</span></span><br></pre></td></tr></table></figure>
<p>可以看出类对象不能直接访问双下划线作为变量名前缀的属性和方法。之所以成为”伪私有”，是Python在处理这类变量名时自动在带双下划线前缀的变量名前加上”_类名”。比如上面的例子可以通过<strong>test._test__data2访问__data2变量，test._test__sub访问__sub方法</strong></p>
<h3 id="构造函数和析构函数"><a class="header-anchor" href="#构造函数和析构函数"></a>构造函数和析构函数</h3>
<p>类的构造函数和析构函数名称是由Python预设的，__init__为构造函数名，__del__为析构函数名。构造函数在调用类创建实例对象时自动被调用，完成对实例对象的初始化。<strong>析构函数在实例对象被回收时调用</strong>。在定义类时，可以不定义构造函数和析构函数。</p>
<h2 id="类的继承"><a class="header-anchor" href="#类的继承"></a>类的继承</h2>
<p>通过继承，子类(新类)可以获得父类(超类)的属性和方法。在子类中可以定义新的属性和方法，从而实现对父类的扩展。基本代码格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">超类名</span>)： <span class="comment">#如果超类有多个用,分隔</span></span><br><span class="line">	子类中的语句</span><br></pre></td></tr></table></figure>
<h3 id="简单继承"><a class="header-anchor" href="#简单继承"></a>简单继承</h3>
<p>下面的代码定义一个空的子类来说明子类继承了超类的所有属性和方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">supper_class</span>:</span><br><span class="line">    data=<span class="number">100</span></span><br><span class="line">    __data2=<span class="number">200</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showinfo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;超类showinfo()方法调用&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__showinfo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;超类__showinfo()方法调用&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sub_class</span>(<span class="title class_ inherited__">supper_class</span>):<span class="keyword">pass</span> <span class="comment">#定义空的子类,pass表示空操作</span></span><br><span class="line"><span class="built_in">print</span>(sub_class.data) <span class="comment">#输出100</span></span><br><span class="line"><span class="built_in">print</span>(sub_class._supper_class__data2) <span class="comment">#输出200</span></span><br><span class="line">x = sub_class()   <span class="comment">#创建子类的实例对象</span></span><br><span class="line">x.showinfo()    <span class="comment">#输出“超类showinfo()方法调用”</span></span><br><span class="line">x._supper_class__showinfo() <span class="comment">#输出“超类__showinfo()方法调用”</span></span><br></pre></td></tr></table></figure>
<h3 id="定义子类的属性和方法"><a class="header-anchor" href="#定义子类的属性和方法"></a>定义子类的属性和方法</h3>
<p>如果子类定义的方法和属性与父类的方法和属性重名，那么子类实例对象调用子类中定义的方法和属性。这在java中叫方法重写。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">supper_class</span>:</span><br><span class="line">    data1=<span class="number">10</span></span><br><span class="line">    data2=<span class="number">20</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;超类show1()方法调用&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;超类show2()方法调用&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sub_class</span>(<span class="title class_ inherited__">supper_class</span>): <span class="comment">#定义子类</span></span><br><span class="line">    data1=<span class="number">111</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;子类show1()方法调用&quot;</span>)</span><br><span class="line"></span><br><span class="line">x = sub_class()   <span class="comment">#创建子类的实例对象</span></span><br><span class="line"><span class="built_in">print</span>(x.data1)  <span class="comment">#输出111</span></span><br><span class="line"><span class="built_in">print</span>(x.data2)  <span class="comment">#输出20</span></span><br><span class="line">x.show1()    <span class="comment">#输出“子类show1()方法调用”</span></span><br><span class="line">x.show2()    <span class="comment">#输出“超类show2()方法调用”</span></span><br></pre></td></tr></table></figure>
<p><strong>Python中允许子类方法中通过类对象直接调用父类的方法</strong>。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">sub_class</span>(<span class="title class_ inherited__">supper_class</span>): <span class="comment">#定义子类</span></span><br><span class="line">    data1=<span class="number">111</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;子类show1()方法调用&quot;</span>)</span><br><span class="line">        supper_class.show1(<span class="variable language_">self</span>) <span class="comment">#调用超类的方法</span></span><br><span class="line">        supper_class.show2(<span class="variable language_">self</span>) <span class="comment">#调用超类的方法</span></span><br></pre></td></tr></table></figure>
<h3 id="调用超类的构造函数"><a class="header-anchor" href="#调用超类的构造函数"></a>调用超类的构造函数</h3>
<p>在使用构造函数对实例对象进行初始化时，可以在子类的构造函数中调用超类的构造函数。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">supper</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a</span>):</span><br><span class="line">        <span class="variable language_">self</span>.supper_data = a</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sub</span>(<span class="title class_ inherited__">supper</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        <span class="variable language_">self</span>.sub_data = b</span><br><span class="line">        supper.__init__(<span class="variable language_">self</span>,a) <span class="comment">#调用超类的构造方法</span></span><br><span class="line"></span><br><span class="line">x = sub(<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(x.sub_data) <span class="comment">#输出6</span></span><br><span class="line"><span class="built_in">print</span>(x.supper_data) <span class="comment">#输出5</span></span><br></pre></td></tr></table></figure>
<h3 id="多重继承"><a class="header-anchor" href="#多重继承"></a>多重继承</h3>
<p>多重继承指子类可以同时继承多个超类。如果超类中存在同名的属性或方法，Python按照从左到右的顺序在超类中搜索，如果左边的超类中找到了就不再从右边找。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">supperone</span>:</span><br><span class="line">    one = <span class="number">10</span></span><br><span class="line">    two = <span class="number">20</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showone</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;supperone中的showone()方法调用&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showtwo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;supperone中的showtwo()方法调用&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">suppertwo</span>:</span><br><span class="line">    one = <span class="number">100</span></span><br><span class="line">    three = <span class="number">30</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showtwo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;suppertwo中的showtwo()方法调用&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showthree</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;suppertwo中的showthree()方法调用&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sub</span>(supperone,suppertwo): <span class="keyword">pass</span> <span class="comment">#定义子类</span></span><br><span class="line"></span><br><span class="line">x = sub()</span><br><span class="line"><span class="built_in">print</span>(x.one) <span class="comment">#输出10</span></span><br><span class="line"><span class="built_in">print</span>(x.two) <span class="comment">#输出20</span></span><br><span class="line"><span class="built_in">print</span>(x.three) <span class="comment">#输出30</span></span><br><span class="line">x.showone() <span class="comment">#输出&quot;supperone中的showone()方法调用&quot;</span></span><br><span class="line">x.showtwo() <span class="comment">#输出&quot;supperone中的showtwo()方法调用&quot;</span></span><br><span class="line">x.showthree() <span class="comment">#输出&quot;suppertwo中的showthree()方法调用&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="运算符重载"><a class="header-anchor" href="#运算符重载"></a>运算符重载</h3>
<p>重载运算符就是在类中定义相应的方法，当使用实例对象执行相关运算时，则调用对应方法。</p>
<center>部分运算符重载方法表格如下</center>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">何时调用方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">__add __</td>
<td style="text-align:center">加法运算</td>
<td style="text-align:center">对象加法：x+y、x+=y</td>
</tr>
<tr>
<td style="text-align:center">__sub __</td>
<td style="text-align:center">减法运算</td>
<td style="text-align:center">对象减法：x-y、x-=y</td>
</tr>
<tr>
<td style="text-align:center">__mul __</td>
<td style="text-align:center">乘法运算</td>
<td style="text-align:center">对象乘法：x*y、x*=y</td>
</tr>
<tr>
<td style="text-align:center">__div __</td>
<td style="text-align:center">除法运算</td>
<td style="text-align:center">对象除法：x/y、x/=y</td>
</tr>
<tr>
<td style="text-align:center">__mod __</td>
<td style="text-align:center">取模运算</td>
<td style="text-align:center">对象取模：x%y、x%=y</td>
</tr>
<tr>
<td style="text-align:center">__contains __</td>
<td style="text-align:center">成员测试</td>
<td style="text-align:center">item in x</td>
</tr>
<tr>
<td style="text-align:center">__getitem __</td>
<td style="text-align:center">索引、分片</td>
<td style="text-align:center">x[i]、x[i:j]、没有__iter__的for循环等</td>
</tr>
<tr>
<td style="text-align:center">__setitem __</td>
<td style="text-align:center">索引赋值</td>
<td style="text-align:center">x[i]=值、x[i:j]=序列对象</td>
</tr>
<tr>
<td style="text-align:center">__len __</td>
<td style="text-align:center">求长度</td>
<td style="text-align:center">len(x)</td>
</tr>
<tr>
<td style="text-align:center">__iter __、__next __</td>
<td style="text-align:center">迭代</td>
<td style="text-align:center">Iter(x)、next(x)、for循环等</td>
</tr>
</tbody>
</table>
<h4 id="加法运算符重载"><a class="header-anchor" href="#加法运算符重载"></a>加法运算符重载</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a</span>): <span class="comment">#构造方法</span></span><br><span class="line">        <span class="variable language_">self</span>.data = a[:]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, obj</span>):    <span class="comment">#实现加法运算方法的重载，将两个列表对应元素相加(列表长度需要一样)</span></span><br><span class="line">        x = <span class="built_in">len</span>(<span class="variable language_">self</span>.data)</span><br><span class="line">        y = <span class="built_in">len</span>(obj.data)</span><br><span class="line">        <span class="built_in">max</span> = x <span class="keyword">if</span> x&gt;y <span class="keyword">else</span> y</span><br><span class="line">        nl = []</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>):</span><br><span class="line">            nl.append(<span class="variable language_">self</span>.data[n]+obj.data[n])</span><br><span class="line">        <span class="keyword">return</span> test(nl[:])</span><br><span class="line">x = test([<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line">y = test([<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>])</span><br><span class="line">z = x + y</span><br><span class="line"><span class="built_in">print</span>(z.data) <span class="comment">#输出 [6, 9, 13]</span></span><br></pre></td></tr></table></figure>
<h4 id="getitem-方法"><a class="header-anchor" href="#getitem-方法"></a>__getitem__方法</h4>
<p>在对实例执行索引、分片或for循环时，调用__getitem__方法。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a</span>): <span class="comment">#构造方法</span></span><br><span class="line">        <span class="variable language_">self</span>.data = a[:]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self,index</span>):<span class="comment">#定义索引、分片重载方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.data[index]</span><br><span class="line"></span><br><span class="line">x = test([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">2</span>]) <span class="comment">#输出30</span></span><br><span class="line"><span class="built_in">print</span>(x[:]) <span class="comment">#输出[10, 20, 30, 40]</span></span><br><span class="line"><span class="built_in">print</span>(x[:<span class="number">3</span>]) <span class="comment">#输出[10, 20, 30],分片返回部分值</span></span><br></pre></td></tr></table></figure>
<h4 id="setitem方法"><a class="header-anchor" href="#setitem方法"></a><strong>setitem方法</strong></h4>
<p>在通过赋值语句给索引或分片赋值时，调用__setitem__方法，实现对序列对象的修改。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a</span>): <span class="comment">#构造方法</span></span><br><span class="line">        <span class="variable language_">self</span>.data = a[:]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self,index,value</span>):<span class="comment">#重载索引、分片赋值运算方法</span></span><br><span class="line">        <span class="variable language_">self</span>.data[index] = value</span><br><span class="line"></span><br><span class="line">x = test([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])</span><br><span class="line">x[<span class="number">0</span>] = <span class="number">100</span>  <span class="comment">#修改列表第一个值</span></span><br><span class="line"><span class="built_in">print</span>(x.data) <span class="comment">#输出[100, 20, 30, 40]</span></span><br><span class="line">x[<span class="number">1</span>:<span class="number">3</span>] = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>] <span class="comment">#将列表中的分片[1:3]替换</span></span><br><span class="line"><span class="built_in">print</span>(x.data) <span class="comment">#输出[100, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 40]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>《未来简史》读书笔记</title>
    <url>/2020/09/20/brief_history_of_tomorrow/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/bfb1b28028abd5596a1b72e1bfc2d009.jpeg" width="460px" align="center"></img></p>
<p>书名：未来简史<br>
英文名: <em>A Brief History of Tomorrow</em><br>
作者：[以色列]尤瓦尔·赫拉利<br>
译者: 林俊宏<br>
读完时间：2020年09月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<ul>
<li>事实并非如此。伊壁鸠鲁把幸福快乐定义成至善的时候,就曾告诫弟子,快乐是件辛苦的差使。仅有物质成就,并不能让我们长久感到满足。事实上,盲目追求金钱、名誉和欢愉,只会让我们痛苦不堪。举例来说,伊壁鸠鲁就建议吃喝要适量,性欲也要控制。从长远来看,深厚的友谊会比一夜狂欢让人更快乐。</li>
<li>如果我认定快乐就是这些稍纵即逝的快感,并且渴望得到更多,我就别无选择,只能不断追求下去。好不容易得到之后,快感又很快消·失,而且因为仅有过去快乐的回忆并不足以令我满足,所以我又得从头再来。像这样的追求,就算持续几十年,也永远无法带来任何长久的成果;相反,我越渴望这些快感,就会变得更加压力重重、无法满足。</li>
<li>更重要的是，已经有越来越多的人觉得不可能发生战争政府。当政府、企业和个人规划不远的将来时，多半不会考虑战争的可能性，这是史无前例的。<br>
核武器发明之后，超级大国之间如果还想挑起战事，无异于集体自杀的疯狂举动，于是逼着全球最强大的几个国家找出和平的替代方案来解决冲突。<br>
同时，全球经济导向也已经从物质经济转变为知识经济。过去主要的财富来源是物资产，比如金矿、麦田、油井，现在的主要财富来源则是知识，发动战争虽然能抢下油田，却无法霸占知识。因此，随着知识成为最重要的经济资源，战争能带来的获利已下降；<br>
可能发生战争的地方越来越局限在世界的特定区域(比如中东和中非)，这些地方仍然维持着老式的物质经济。</li>
<li>但现在德国野外究竟还剩几只狼?不到100只(而且多半是波兰野狼,只是近年跨越边界而来),与之相对照的是,德国现在家犬的数目达到500万。全球总共只有约20万只野狼在野外游荡,但家犬数目足足超过4亿。世界上现在有4万头狮子,但有6亿只家猫;有90万头非洲水牛,但有15亿头驯化的牛;有5000万只企鹅,但有200亿只鸡。</li>
<li>这是进化心理学基本的一课:几千世代以前形成的需求,就算已经不再是今日生存和繁行所需,仍然会留存在主观感受中。可悲的是,农业革命让人类有了确保家畜生存和繁衍的能力,却忽视了家畜的主观需求。</li>
<li>生命科学家近几十年间已经证实,情感并不是只能用来写诗谱曲的神秘精神现象,而是对所有哺乳动物生存和繁衍至为关键的生物算法。</li>
<li>诸神承诺风调雨顺、五谷丰登、虫病不兴,而人类也要提供一些回报。这就是农业交易的本质。诸神负责保护农业,让农业丰收,而人类则将部分农产品献给诸神。这笔交易对人和神都好,却牺牲了生态系统的其他成员。</li>
<li>法老时代的埃及是当时最强大的王国,但对于底层的农民来说,强大的国力只代表着他们要缴税、要服劳役,并不代表能得到健康保障或社会安全服务。</li>
<li>公司、货币和国家,都只存在于我们的想象之中,是人类发明了这些概念,好让它们为人类服务;为什么最后反而是人类为这些概念服务,甚至牺牲性命呢?</li>
<li>但他们对某些生物学事实有不同意见:究竟人命是始于受孕那一刻、出生那一刻,还是两者之间的某一刻?事实上,有些文化甚至认为,就算到了出生那一刻,生命也还没真正开始。比如卡拉哈里沙漠(KalahariDesert)的库恩人(!Kung)和北极的因纽特人(Inuit),都认为人命始,于婴儿得到名字之后。婴儿出生时,家族会先等待一段时间,如果决定不留下他(可能因为肢体畸形,或因为经济困难),家族就会把他杀掉。这时只要还没有举行命名仪式,就不算是谋杀。这些文化的人群可能也和自由主义者或基督徒一样认为人命神圣、谋杀是种可憎的罪行,却能允许杀婴。</li>
<li>例如,印度的人口年增率为1.2%,也就是说,印度经济每年至少要增长1.2%,否则失业率就会上升、薪资将会下降,平均生活水平也会下降。最后,就算印度的人口停止增长,中产阶级也对目前生活水平感到满意,那些上亿的贫困印度人口又该怎么办?整块经济大饼,只有这么大,如果经济不增长,想多给穷人一点,就必须从富人那里挖来一些,这一定会造成一些非常困难的选择,也很可能导致诸多不满甚至暴力。而如果想避开这些选择、不满或暴力,我们就需要一块更大的饼。</li>
<li>科学最大的发现正是让人类发现了自己的无知。人类发现自己对这个世界所知竟如此之少,就突然有了很好的理由要去追求新知,开启了用科学推动进步的道路。</li>
<li>历史从无正义可言。每当灾难发生,就算这场悲剧根本就是由富人引起的,但穷人受到的苦雄几乎总是远远大于富人。在干旱的非洲国家,全球变暖已经开始影响到那里穷人的生活,这些人受影响的程度远比富裕的西方人来得高。充满矛盾的是,科学的力量越大,带来的危险也会越大,原因就在于这让富人自鸣得意。</li>
<li>2015年12月,《巴黎协定》制定出较远大的目标,即呼吁将全球平均气温升幅限制在工业化前水平以上1.5℃以内。然而,许多为了达成这项目标所必要采取的痛苦措施却都被轻描淡写地延迟到2030年,甚至是21世纪的下半叶,其实也就是把这个烫手山芋丢给了下一代。目前的主政者表面上重视环保,收割眼前的政治利益,然而减少排放(也就会减缓增长)要付出的重大政治代价却留给未来的主政者。</li>
<li>穷人怎么了?他们为什么不抗议?如果洪水真的来临,穷人将付出所有代价;然而,如果经济停滞,穷人也首当其冲。在资本主义世界里,穷人的生活唯有在经济增长时才可能改善。因此,如果一定要放慢当下的经济增长速度,以减少未来的生态威胁,并不太可能得到他们的支持。保护环境是个很好的主意,但如果有人连房租都交不出来,对于没钱的恐惧就会远远高过对冰层融化的担心。</li>
<li>于是,到了21世纪早期,政治已不再有宏伟愿景,政府就只剩下行政功能,维持着国家现状,却不再能够带领人民向前、政府确保教师每月拿到薪水、下水道不会阻塞，却不知道20年后国家该走向何方。</li>
<li>由于我们无法预知2030年或2040年的就业形势,现在也就不知道该如何教育下一代。等到孩子长到40岁,他们在学校学的一切知识可能都已经过时。传统上,人生主要分为两大时期:学习期,再加上之后的工作期。但这种传统模式很快就会彻底过时,想要不被淘汰只有一条路:一辈子不断学习,不断打造全新的自己。只不过,许多人,甚至是大多数人,大概都做不到这一点。</li>
<li>安吉丽娜·朱莉发表在《纽约时报》的文章中,就提过基因测试成本高昂。她进行的测试就要价3000美元(还不包括实际的乳腺切除术、重建手术和相关治疗),而在这个世界上,还有10亿人每天收入不到1美元, 15亿人每天收入在1到2美元之间。就算他们一辈子努力工作,也不可能负担得起要价3000美元的基因测试。目前贫富差距还在逐渐拉大。到2016年年初,全球62名最富有的人,拥有的财产总值等于最贫穷的36亿人的总和!由于目前全球人口约为72亿,也就是说,这62名亿万富翁所拥有的财富,大约就是较为贫穷的全球一半人口的财产总和。</li>
</ul>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p>人类战胜饥饿、瘟疫和战争，少数精英分子升级为身体、情感和智力都远超过普通人的超人类，太可怕了…</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/2020/12/15/bubbleSort/</url>
    <content><![CDATA[<h2 id="冒泡排序"><a class="header-anchor" href="#冒泡排序"></a>冒泡排序</h2>
<p>冒泡排序是一种简单的排序算法，它也是一种稳定排序算法。它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果顺序（如从大到小、首字母从Z到A）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素列已经排序完成。</p>
<span id="more"></span>
<p>这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。<br>
<a href="https://baike.baidu.com/item/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/4602306?fr=aladdin">参考链接</a></p>
<h3 id="算法描述"><a class="header-anchor" href="#算法描述"></a>算法描述</h3>
<p>1、比较相邻的两个元素。如果第一个比第二个大，就交换他们两个。<br>
2、对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>
3、针对所有的元素重复以上的步骤，除了最后一个。<br>
4、持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。<br>
<a href="https://baike.baidu.com/item/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/4602306?fr=aladdin">参考链接</a></p>
<h3 id="动图演示"><a class="header-anchor" href="#动图演示"></a>动图演示</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/3ed22c2eeeb333ffe8e94cebb73728b0.gif#pic_center" alt="在这里插入图片描述"></p>
<h3 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h3>
<h4 id="Java"><a class="header-anchor" href="#Java"></a>Java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySorts</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[]arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j= <span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">                    swapReferences(arr,j,j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swapReferences</span><span class="params">(<span class="type">int</span>[]arr,<span class="type">int</span> index0,<span class="type">int</span> index1)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[index0];</span><br><span class="line">        arr[index0] = arr[index1];</span><br><span class="line">        arr[index1] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">6</span>,<span class="number">25</span>,<span class="number">32</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        bubbleSort(array);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序結果：&quot;</span>+ Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>排序結果：[6, 8, 9, 11, 18, 25, 26, 32, 37, 45]</p>
<h4 id="JavaScript"><a class="header-anchor" href="#JavaScript"></a>JavaScript</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span>-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;        </span><br><span class="line">				<span class="title function_">swapReferences</span>(arr,j,j+<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swapReferences</span>(<span class="params">arr,index0,index1</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> tmp = arr[index0];</span><br><span class="line">	arr[index0] = arr[index1];</span><br><span class="line">	arr[index1] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>,<span class="number">25</span>,<span class="number">32</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> arrSorted = <span class="title function_">bubbleSort</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrSorted);</span><br></pre></td></tr></table></figure>
<p>(10) [6, 8, 9, 11, 18, 25, 26, 32, 37, 45]</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaScript</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>《人类简史》读书笔记</title>
    <url>/2020/03/28/brief_history_of_humankind/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/bc916a59015d7c77d84a1934b4e1f1dd.jpeg" alt="在这里插入图片描述"><br>
书名：人类简史<br>
副标题: 从动物到上帝<br>
英文名: <em>A brief history of humankind</em><br>
作者：[以色列]尤瓦尔·赫拉利<br>
译者: 林俊宏<br>
读完时间：2020年03月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<h3 id="第一部分-认知革命"><a class="header-anchor" href="#第一部分-认知革命"></a>第一部分 认知革命</h3>
<ul>
<li>但事实是,从大约200万年前到大约1万年前为止,整个世界其实同时存在多种不同人种。这其实也十分合理。就像今天,地球上还是有许多种的狐狸、熊或是猪,而在几十万年前的地球上,至少就有6种不同的人。从整个历史来看,过去多种人种共存其实是常态,现在地球上只有“一种人”,这才是异常。</li>
<li>直立的步行方式需要让臀部变窄,于是产道宽度受限,而且别忘了婴儿的头还越来越大。于是,分娩死亡成了女性的一大风险。而如果早点儿生产,婴儿的大脑和头部都还比较小,也比较柔软,这位母亲就更有机会渡过难关,未来也可能再生下更多孩子。于是, 自然选择（natural selection,又译“天择”或“自然淘汰”)就让生产开始提前。与其他动物相较,人类可说都是早产儿,许多重要器官的发育都还不够完善。看看小马,出生没多久就能开始小跑步;小猫出生不过几周,也能离开母亲自行觅食。相较之下,人类的婴儿只能说没用得很,许多年都得当个啃老族来被抚养、保护和教育。</li>
<li>除了存在于人类共同的想象之外,这个宇宙中根本没有神、没有国家、没有钱、没有人权、没有法律,也没有正义。</li>
<li>有些演化心理学家认为,古代的采集部落主要并不是由一夫一妻的核心家庭组成,而是一群人共同住在一起,没有私有财产,没有一夫一妻的婚姻关系,甚至没有父亲这种身份的概念。在这样的部落中,女性可以同时和几个男人(和女人)有性行为,形成亲密关系,而部落里的所有成年男女则是共同养育部落的小孩。正由于男人都没办法确定小孩是不是自己的,对所有孩子门教养也就不会有偏心的问题。</li>
<li>有证据显示, 自从采集时代以来,智人的脑容量其实是逐渐减少! &quot;要在那个时代活下来,每个人都必须有高超的心智能力。而等到农业和工业时代开展,人类开始能靠着别人的技能生存下来,就算是低能的人也开始有了生存空间。例如只要肯挑水或是当个生产线的工人,就能活下来,并把自己那些平庸无奇的基因传下去。</li>
<li>在巴拉圭的丛林里,曾有一个狩猎采集部落亚契人(Ache)存活到20世纪60年代,他们让我们得以一窥采集生活的黑暗面。根据亚契人的习俗,如果某位有价值的部落成员死亡,就要杀一个小女孩陪葬。如果某个亚契女性已经年纪太大、成了部落的负担,部落里的年轻男子就会潜伏在她身后,找机会一斧头砍进她的脑子里。曾有一个亚契人,告诉人类学家他在丛林里的黄金年代: “我常常杀老女人,我杀过我的阿姨、婶婶、姑姑她们……女人都怕我…但现在跟这些白人在一起,我也变弱了。”如果新生儿没有头发,会被认为发育不良,必须被立刻杀死。就有一位妇女回忆说,她的第一个女儿就是被活活打死,原因只是部落里的男人已经不想再多个女孩了。而另一次,有个男人杀了个小男婴,原因只是他“心情不好,小孩又哭个不停&quot;。甚至有个小孩被活埋,原因是“那玩意儿看起来怪怪的,其他小孩也会笑它”。&quot;</li>
<li>事实是,亚契社会就像任何一个人类社会一样复杂难解。我们要小心不能,只有了肤浅的认识,就断然将其妖魔化或理想化。亚契人既不是天使,也不是魔鬼,不过就是人类。同样,远古的狩猎采集者,就是和我们一样的人。</li>
<li>如果澳大利亚的物种灭绝只是单一事件,对于人类的无辜或许我们还能姑且信之。但翻开历史记录,智人看起来就是个生态的连环杀手。</li>
<li>在认知革命发生的时候,地球上大约有200属体重超过50公斤的大型陆生哺乳动物。而等到农业革命的时候,只剩下大约100属。换句话说,甚至远在人类还没有发明轮子、文字和铁器之前,智人就已经让全球大约一半的大型兽类魂归西天、就此灭绝。</li>
</ul>
<h3 id="第二部分-农业革命"><a class="header-anchor" href="#第二部分-农业革命"></a>第二部分 农业革命</h3>
<ul>
<li>人类以为自己驯化了植物,但其实是植物驯化了智人。</li>
<li>然而,人口一多,就耗去了原本的粮食剩余,于是耕种面积又得加大。这时,因为人类开始定居在易有疾病肆虐的聚落,孩子吃母乳的比率越来越少,吃谷类则越来越多,再加上得要共享这些粥的兄弟姐妹也越来越多,让儿童死亡率一路飙升。在大多数的远古农业社会里,至少1/3的儿童无法长到二十岁成人。然而,人口出生的速度仍然大于死亡速度,人类养育子女的数字也居高不下。</li>
<li>一连串为了让生活更轻松的“进步”,最后却像是在这些农民的身上加了一道又一道沉重的枷锁。</li>
<li>人类一心追求更轻松的生活,于是释放出一股巨大的力量,改变了世界的面貌,但结果并没有任何人料想得到,甚至也不是任何人所乐见的。并没有人在背后操纵农业革命发生,或是意图让人依赖谷类维生。一开始只是各种小事,主要就是希望吃饱一点、生活安全一点,但最后累积引起的效应,就是让远古的采集者开始花上整天的时间,在烈日之下挑水务农。</li>
<li>在传统的想象中,人是先建立起村落,接着等到村落繁荣之后,再在村落中心盖起信仰中心。但哥贝克力石阵显示,很有可能其实是先建立起信仰中心,之后才围绕着它形成村子。</li>
<li>为了把牛、马、驴、骆驼训练成听话的役用动物,就必须打破它们的天性和社会连接,抑制它们的侵略和性能力,并且限制它们的行动自由。农民还发明各种控制技术,像是把动物关在兽栏和兽笼里、套上枷锁链条,用皮鞭和刺棒来训练,甚至刻意造成动物伤残。驯化动物的过程几乎总是会将雄性阉割,好抑制雄性的侵略性,也让人类能够控制挑选牲畜的生育。</li>
<li>而为了确保猪跑不掉,新几内亚北部的农民会把猪的鼻子切掉一大块。这样一来,每次猪想闻东西,都会感到强烈的疼痛,不但无法觅食,甚至连找路都做不到,于是不得不完全依赖人类主人。</li>
<li>乳品业自有一套来强迫动物听话。奶牛、山羊和绵羊只有生了小牛小羊之后才会产奶,而且也仅限哺乳期这一段时间。想要动物不断供奶,农民必须让它们生下小牛小羊,但又不能让小牛小羊把奶吸光。所以,整个历史上常用的方法就是干脆等到小牛小羊出生后不久就全宰了,如此一来人类就能霸占所有牛奶羊奶,等到它们停奶之后再重新怀胎即可。听来残忍,但甚至到现在这种做法仍然十分普遍。在许多现代的酪农场里,奶牛通常只能活到5岁就会被宰杀。这5年中,它几乎一直在怀孕,为了维持最大的产奶量,在分娩后大约60-120天就要再次受精。至于它的小牛们,则是一出生没多久就被带走,母的被养大成为新一代的奶牛,而公的就进了肉类产业的手里。</li>
<li>另一种方式,是虽然容许小牛小羊接近妈妈,却用上各种方式不让它们喝得太多。最简单的办法,是让小牛小羊开始吸奶,但在奶要流出来之前就把它们抱走。可以想见,这种方式会同时受到母亲和孩子两方的抗。有些畜牧部落过去的做法,是将小牛小羊宰杀食用,但拿东西塞回空的毛皮做成标本,再送回妈妈身边刺激它们产奶。而在苏丹的努尔族(Nuer)还更进一步,在标本上涂着牛妈妈的尿液,所以这只假小牛连闻起来也很像个样子。努尔族的另一项技术则是在小牛的嘴边绑上一圈刺,小牛想吃奶就会刺伤牛妈妈,好让牛妈妈排斥让小牛吃奶。31撒哈拉的图阿雷格族(Tuareg)养骆驼,他们过去会将小骆驼的鼻子和上唇的部分穿孔或切除,如此一来只要一吸奶就会疼痛,也就不会喝得太多。</li>
<li>每当人类整体的能力大幅增加、看来似乎大获成功,个人的苦痛也总是随之增长。</li>
<li>他们生产出来的多余食粮养活了一小撮的精英分子:国王、官员、战士、牧师、艺术家和思想家,但历史写的几乎全是这些人的故事。于是,历史只告诉了我们极少数的人在做些什么,而其他绝大多数人的生活就是不停挑水耕田。</li>
<li>演化的基础是差异,而不是平等。每个人身上带的基因码都有些许不同,而且从出生以后就接受着不同的环境影响,发展出不同的特质,导致不同的生存概率。“生而平等”其实该是“演化各有不同”。</li>
<li>整个种姓系统的基本原则仍然相同,每个人出生就属于特定的阶级,而破坏阶级就是污染了个人,也污染了整个社会。</li>
<li>随着时间流逝,不公不义的歧视常常只是加剧而不是改善。富者越富,而贫者越贫。教育带来进一步的教育,而无知只会造成进一步的无知。历史上过去的受害者,很可能会再次受害。而历史上过去的特权分子,他们的特权也很可能依然存在。</li>
</ul>
<h3 id="第三部分-人类的融合和统一"><a class="header-anchor" href="#第三部分-人类的融合和统一"></a>第三部分 人类的融合和统一</h3>
<ul>
<li>于是,金钱就成了共通的交易媒介,几乎任何东西之间都能完成交换。于是,志愿军人退伍的时候,拿着退职金去上大学,可以说就是用体力来换脑力。而男爵出售土地城堡来养活家臣手下,就是用物业来换忠诚。医师拿病人看病的钱来聘任律师(或是贿赂法官),就是用健康来换正义。甚至像是15世纪的妓女,她们先和男人上床取得报酬,再用钱来买天主教教会的赎罪券,就是用性来换取救赎。</li>
<li>金钱货币史上真正的突破,就是人类终于开始相信某些货币形式,虽然它们本身没什么固有价值,但却能方便储存与运送。这样的金钱制度,大约出现于公元前2500年的美索不达米亚:银舍客勒制度。</li>
<li>宗教信仰的重点是自己相信,但金钱信仰的重点是“别人相信&quot;。</li>
<li>农业革命最初的宗教意义,就是让动植物从与人类平等的生物,变成了人类的所有物。</li>
<li>释迦牟尼认为,人遇到事情通常就会产生欲念,而欲念总是会造成不满。遇到不喜欢的事,就想躲开;遇到喜欢的事,就想维持并增加这份愉快。但正因如此,人心就永远不满、永远不安。这点在碰上不悦的时候格外明显,像是感觉疼痛的时候,只要疼痛持续,我们就一直感到不满,用尽办法想要解决。然而,就算是遇上欢乐的事,我们也从不会真正满足,而是一直担心这种欢乐终将结束或是无法再持续或增强。有些人多年来一直在寻找爱情,但等到真的找着了爱情,却还是不满足。有的开始整天担心对方可能会离开;有的又觉得自己太过屈就,应该再找更好的人。</li>
<li>释迦牟尼找到一种方法可以跳出这种恶性循环。在事物带来快乐或痛苦的时候,重点是要看清事物的本质,而不是着重在它带来的感受,于是就能不再为此所困。虽然感受悲伤,但不要希望悲伤结束,于是虽然仍有悲伤,也能不再为此而困。即使仍然悲伤,也是一种丰硕的经验。虽然感受快乐,但不要希望快乐继续,于是虽然仍有快乐,也能不失去心中的平静。</li>
<li>无欲则无苦。</li>
<li>历史的铁则就是:事后看来无可避免的事,在当时看来总是毫不明显。直到今天,情况仍是如此。</li>
<li>历史就是这样的一团混沌,历史就是无法解释得斩钉截铁,无法预测得十拿九稳。在同一时间,有多方力量互相影响、互相牵制,只要某方力量有了极小的改变,结果就会有巨大的不同。</li>
<li>我们之所以研究历史,不是为了要知道未来,而是要拓展视野,要了解现在的种种绝非“自然”,也并非无可避免。未来的可能性远超过我们的想象。举例来说,研究欧洲人究竟是如何控制了非洲人,我们就知道种族歧视绝非自然或无可避免,而且知道世界大有可能是完全不同的样貌。</li>
<li>甚至还有学者认为,文化就像是精神感染或寄生虫,而人类就是毫不知情的宿主。寄生虫或病毒就是这样住在宿主体内,繁殖、传播,从一个宿主到另一个宿主,夺取养分,让宿主衰弱,有时甚至丧命。只要宿主能够活着让寄生虫继续繁衍,寄生虫就很少关心宿主的情形。至于文化,其实也是以这种方式寄生在人类的心中。它们从一个宿主传播到另一个宿主,有时候让宿主变得衰弱,有时候甚至让宿主丧命。任何一个文化概念(像是基督教在天上的天堂),都可能让某个人毕生致力于传播这种想法,甚至为此牺牲生命。于是,人类死亡了,但想法持续传播。根据这种说法,文化并不是某些人为了剥削他人而设计出的阴谋,而是因为种种机缘巧合所出现的心理寄生虫,从出现之后就开始剥削所有受到感染的人。<strong>(这个理论很高级)</strong></li>
</ul>
<h3 id="第四部分-科学革命"><a class="header-anchor" href="#第四部分-科学革命"></a>第四部分 科学革命</h3>
<ul>
<li>所有的非欧洲政权中,第一个派出军事远征队前往美洲的是日本。在1942年6月,一支日本的远征军占领了阿留申群岛的吉斯卡岛(Kiska )和阿图岛(Attu ),这两个岛位于阿拉斯加海岸,而过程中还俘虏了10名美军士兵和一条狗。但日本就再也没有向大陆更进一步了。</li>
<li>西方文化根植发展于欧洲,具有民主、宽容、性别平等诸多特质,而穆斯林文化根植发展于中东地区,于是具有阶级政治、宗教狂热、歧视女性的特质。正因为这两种文化如此不同,而且许多穆斯林移民不愿(或许也不能)采纳西方的价值观,所以欧洲不应允许他们移居进入西方社会,以免造成内部冲突、破坏欧洲民主和自由主义。</li>
<li>换句话说,也代表我们银行户头上看到的那些金钱,有超过九成其实只是数字,而没有实体的硬币或钞票。举例来说,如果今天汇丰银行的所有储户都忽然要求结清账户、提领现金,汇丰银行就会立刻倒闭(除非政府介入拯救),而且,就算是产业龙头的英国劳埃德银行(Lloyds)、德意志银行、花旗银行,世上任何银行都是如此。</li>
<li>真正让银行(以及整个经济)得以存活甚至大发利市的,其实是我们对未来的信任。“信任”就是世上绝大多数金钱的唯一后盾。</li>
<li>至于打下印度次大陆的,同样也不是英国官方,而是英国东印度公司的佣兵。这家公司的成就甚至比荷兰东印度公司更加辉煌。公司总部位于伦敦的利德贺街( Leadenhall Street),而在近一世纪的时间里,这家公司就是从这里统治着一整个儿强大的印度帝国,掌握着多达35万士兵的庞大军力,就连英国王室也只能自叹弗如。一直要到1858年,英国王室才将印度及英国东印度公司的军队收编国有。当时拿破仑曾嘲笑英国,说他们是个“店小二的民族” (nation ofshopkeepers)。只不过,就是这群店小二打败了拿破仑本人,还建立起有史以来最大的帝国。</li>
<li>在19世纪末,中国鸦片成瘾者约有4000万,足足占了全国人口1/10。</li>
<li>从16世纪到19世纪,大约有1000万非洲奴隶被运到美洲,其中有大约七成都在甘蔗园里工作。奴隶的劳动条件极度恶劣,大多数奴隶生活悲惨、英年早逝。而且欧洲人发动战争俘虏非洲人,再从非洲内陆千里迢迢运至美洲,数百万非洲人就这样在战乱或运送过程中丧命。而这一切,不过就是为了让欧洲人能够在茶里加糖、能吃到甜点,让人能够靠着贩糖而获取暴利。</li>
<li>然而,就像农业革命一样,所谓的现代经济成长也可能只是个巨大的骗局。虽然人类和全球经济看来都在继续成长,但更多的人却活在饥饿和困乏之中。</li>
<li>在工业革命之前,人类的能源市场几乎完全只能靠植物。这就像是住在一个容量每年3000艾焦的水库旁边,想办法尽可能多抽一点水出来。然而,这里有个明确的总容量。但到了工业革命时期,人类发现能用的能源不是一个水库,而是一整片海洋,容量可能有几千亿艾焦。我们唯一需要的,只是个更好的抽水泵罢了。</li>
<li>肥胖这件事,可以说是消费主义的双重胜利。,一方面,如果大家吃得太少,就会导致经济萎缩,这可不妙;另一方面,大家吃多了之后,就得购买减肥产品,再次促进经济成长。</li>
<li>无论是转型成农业还是后来再转型到工业,都是让我们堕入不自然的生活方式,让我们无法完全实现基因中固有的倾向和本能,也就不可能满足我们最深切的渴望。就算是都市中产阶级,过着舒适的生活,生活中却再也没有什么比得上狩猎采集者猎到长毛象那种兴奋和纯粹的快乐。每次出现新发明,只是让我们与伊甸园又离得更远。</li>
<li>金钱、社会地位、整形手术、豪宅、握有大权的职位,这些都不会给你带来快乐。想要有长期的快乐,只能靠血清素、多巴胺和催产素。</li>
</ul>
<h3 id="历史年表"><a class="header-anchor" href="#历史年表"></a>历史年表</h3>
<ul>
<li>距今135亿年 物质和能量出现。物理学的开始。原子和分子出现。化学的开始。</li>
<li>距今45亿年 地球形成。</li>
<li>距今38亿年 有机生物形成。生物学的开始。</li>
<li>距今600万年 人类和黑猩猩最后的共同祖先。</li>
<li>距今250万年 非洲的人属开始演化。出现最早的石器。</li>
<li>距今200万年 人类由非洲传播到欧亚大陆。演化为不同人种。</li>
<li>距今50万年 尼安德特人在欧洲和中东演化。</li>
<li>距今30万年 开始日常用火。</li>
<li>距今7万年 认知革命。出现能够描述虚拟故事的语言。历史学的开始。</li>
<li>距今4.5万年 智人抵达澳大利亚。澳大利亚巨型动物绝种。</li>
<li>距今1.6万年 智人抵达美洲。美洲巨型动物绝种。</li>
<li>距今1.2万年 农业革命。驯化动植物。出现永久聚落。</li>
<li>距今5000年 出现最早的王国、文字和金钱。多神教信仰。</li>
<li>距今4250年 出现最早的帝国：萨尔贡大帝的阿卡德帝国。</li>
<li>距今2500年 出现最早的硬币。</li>
<li>距今2000年 中国汉帝国。地中海罗马帝国。基督教。</li>
<li>距今1400年 伊斯兰教。</li>
<li>距今500年 科学革命。欧洲人开始政府美洲和各大洋。资本主义兴起。</li>
<li>距今200年 工业革命。家庭和社群被国家和市场取代。动植物大规模绝种。</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(四)</title>
    <url>/2020/06/14/coding_notes_four/</url>
    <content><![CDATA[<h2 id="Java虚拟机"><a class="header-anchor" href="#Java虚拟机"></a>Java虚拟机</h2>
<p>Java对象实例存放在堆中；常量存放在方法区的常量池；虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据放在方法区；以上区域是所有线程共享的<br>
栈是线程私有的，存放该方法的局部变量表（基本类型、对象引用）、操作数栈、动态链接、方法出口等信息。<br>
一个Java程序对应一个JVM，一个方法（线程）对应一个Java栈</p>
<span id="more"></span>
<h2 id="Runnable与Callable接口区别"><a class="header-anchor" href="#Runnable与Callable接口区别"></a>Runnable与Callable接口区别</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Runnable</th>
<th style="text-align:right">Callable</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">执行方法run()</td>
<td style="text-align:right">执行方法call()</td>
</tr>
<tr>
<td style="text-align:left">没有返回值</td>
<td style="text-align:right">有返回值</td>
</tr>
<tr>
<td style="text-align:left">run()不能抛异常（需要内部处理）</td>
<td style="text-align:right">call()方法可以抛异常</td>
</tr>
<tr>
<td style="text-align:left">可以提交给Thread直接启动线程（也可以提交给ExcuteService来执行）</td>
<td style="text-align:right">一般是提交给ExcuteService来执行</td>
</tr>
</tbody>
</table>
<h2 id="实现Runnable接口相比继承Thread的好处"><a class="header-anchor" href="#实现Runnable接口相比继承Thread的好处"></a>实现Runnable接口相比继承Thread的好处</h2>
<p>1、避免Java语言单继承的局限性，一个类可以实现多个接口<br>
2、Thread类本身也是实现了Runnable接口的</p>
<h2 id="Java-keytool生成ssl证书"><a class="header-anchor" href="#Java-keytool生成ssl证书"></a>Java keytool生成ssl证书</h2>
<p>这个是自制证书，浏览器不认，可以用于本地测试</p>
<h2 id="把主分支合并到自己分支并提交代码全过程"><a class="header-anchor" href="#把主分支合并到自己分支并提交代码全过程"></a>把主分支合并到自己分支并提交代码全过程</h2>
<p>例如，基于dev分支建立dev_lqh,把合并dev分支合并到dev_lqh并提交的正确流程如下所示：</p>
<h3 id="方法一：使用IDEA合并远程其他分支到本地-推荐"><a class="header-anchor" href="#方法一：使用IDEA合并远程其他分支到本地-推荐"></a>方法一：使用IDEA合并远程其他分支到本地 (推荐)</h3>
<ul>
<li>切换到自己的分支dev_lqh</li>
<li>鼠标放到项目目录上右击</li>
<li>点击Git</li>
<li>点击Repository</li>
<li>点击pull</li>
<li>在Branchs to merge中选择远程分支dev</li>
<li>git push origin</li>
</ul>
<h3 id="方法二：使用Git命令"><a class="header-anchor" href="#方法二：使用Git命令"></a>方法二：使用Git命令</h3>
<p><strong>具体步骤如下：</strong><br>
本地代码暂存-&gt;先在本地拉取dev分支-&gt;切换到自己的分支dev_lqh-&gt;合并分支-&gt;解决冲突–&gt;本地修改代码还原–&gt;解决冲突-提交代码</p>
<p><strong>对应Git命令：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git checkout dev</span><br><span class="line">git pull origin</span><br><span class="line">git checkout dev_lqh</span><br><span class="line">git merge dev</span><br><span class="line">git commit -m <span class="string">&quot;提交注释&quot;</span></span><br><span class="line">git push origin</span><br><span class="line">// 或者git stash pop 会删除stash</span><br><span class="line">git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure>
<p><strong>建议合并主干分支前把本地分支的代码先提交到远程仓库，方便解决冲突。</strong></p>
<p><strong>其他Git命令：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 还原变更</span><br><span class="line">git reset --hard</span><br><span class="line">// 查看状态</span><br><span class="line">git status</span><br><span class="line">// 查看暂存列表</span><br><span class="line">git stash list</span><br><span class="line">// 查看提交日志，有commit的<span class="built_in">id</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">// 查看本地提交详情</span><br><span class="line">git show commit的<span class="built_in">id</span> </span><br></pre></td></tr></table></figure>
<h2 id="Git回退到指定版本"><a class="header-anchor" href="#Git回退到指定版本"></a>Git回退到指定版本</h2>
<h3 id="git-reset"><a class="header-anchor" href="#git-reset"></a>git reset</h3>
<p><strong>示例命令及参数说明：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 回退到上一个版本</span><br><span class="line">git reset --soft HEAD^</span><br><span class="line"></span><br><span class="line">// 参数说明：</span><br><span class="line">// HEAD^ 是上一个版本的意思</span><br><span class="line">// --soft  不删除工作空间改动代码，撤销commit，不撤销git add . 操作。</span><br><span class="line">// --mixed 不删除工作空间改动代码，撤销commit，并且撤销git add . 操作。</span><br><span class="line">// --mixed 为默认参数,即git reset --mixed HEAD^ 和 git reset HEAD^ 效果是一样的。</span><br><span class="line">// --hard 删除工作空间改动代码，撤销commit，撤销git add . 操作。注意完成这个操作后，就恢复到了上一次的commit状态。</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 回退到指定版本</span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">git reset --hard 版本库地址(commit的<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 若是个人分支回退可以使用强制推送</span><br><span class="line">git push origin 分支名 -f</span><br></pre></td></tr></table></figure>
<p><a href="http://www.voidme.com/content/ifeycxxzdg">Git-回退到指定版本</a>、<a href="https://blog.csdn.net/qq_30614883/article/details/80996656">Git回滚commit的近几次版本</a>、<a href="https://blog.csdn.net/gnnulzy/article/details/52413698">Git使用本地仓库之基本操作–版本回退</a></p>
<h3 id="git-commit-amend"><a class="header-anchor" href="#git-commit-amend"></a>git commit --amend</h3>
<p>如果commit注释写错了，只是想改一下注释，只需要执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>
<p>此时会进入默认vim编辑器，修<strong>改注释完毕后 按esc退出编辑-&gt;输入:wq保存就好了</strong>。<br>
注意：如提示文件默认readonly 用:w!强制保存 再退出。</p>
<h2 id="MySQL修改表语句"><a class="header-anchor" href="#MySQL修改表语句"></a>MySQL修改表语句</h2>
<p>alter table 表名 rename to 新表名</p>
<h2 id="自定义分页的limit"><a class="header-anchor" href="#自定义分页的limit"></a>自定义分页的limit</h2>
<p>(pageVo.getCurPage()-1)*pageVo.getPageSize,pageVo.getPageSize<br>
备注：limit a,b 表示从第a+1条开始取 取b条</p>
<h2 id="cookie添加httponly属性避免XSS攻击"><a class="header-anchor" href="#cookie添加httponly属性避免XSS攻击"></a>cookie添加httponly属性避免XSS攻击</h2>
<h2 id="打开-jar-报could-not-find-the-main-class解决方法"><a class="header-anchor" href="#打开-jar-报could-not-find-the-main-class解决方法"></a>打开.jar  报could not find the main class解决方法</h2>
<p>（根本原因是jar包打开方式绑定问题）<br>
管理员进入cmd<br>
1、ftype|find “jarfile”  查看<br>
2、ftype jarfile=“javahome/jre/bin/javaw.exe” -jar “%1” %*修改<br>
3、type|find “jarfile”  再次查看是否运行成功</p>
<h2 id="BurpSuite测试找不到的上传图片接口"><a class="header-anchor" href="#BurpSuite测试找不到的上传图片接口"></a>BurpSuite测试找不到的上传图片接口</h2>
<p>前置条件：知道接口路径但页面找不到<br>
大致步骤：先拦截一个上传接口，替换接口路径，如果拦截的接口不能上传图片需要替换其文件流数据。<br>
替换文件流步骤：把文件流的文件名改为&quot;xxx.png&quot;，把文件类型改为&quot;Content-Type:image/png&quot;，文件内容改为&quot;xxx等任意文本&quot;<br>
这样就可以请求成功了。</p>
<h2 id="Markdown表格语法"><a class="header-anchor" href="#Markdown表格语法"></a>Markdown表格语法</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>|、-、:之间的多余空格会被忽略，不影响布局</li>
<li>-:表示内容和标题栏居右对齐，:-表示内容和标题栏居左对齐，:-:表示内容和标题栏居中对齐</li>
<li>内容和|之间的多余空格会被忽略，每行第一个|和最后一个|可以省略，-的数量至少有一个</li>
<li>默认标题栏居中对齐，内容居左对齐。</li>
</ul>
<p>效果如下所示：</p>
<table>
<thead>
<tr>
<th style="text-align:left">左对齐</th>
<th style="text-align:right">右对齐</th>
<th style="text-align:center">居中对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
</tbody>
</table>
<h2 id="Markdown的图片大小修改"><a class="header-anchor" href="#Markdown的图片大小修改"></a>Markdown的图片大小修改</h2>
<p>把Markdown的插入图片代码改为HTML的img标签，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;&quot;</span> width=<span class="string">&quot;460px&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;&lt;/img&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MySQL</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序猿搬砖笔记(三)</title>
    <url>/2020/04/04/coding_notes_three/</url>
    <content><![CDATA[<h2 id="Java程序猿搬砖笔记-三"><a class="header-anchor" href="#Java程序猿搬砖笔记-三"></a>Java程序猿搬砖笔记(三)</h2>
<p>1、Servlet是服务器创建的，因此，不属于IOC管理，所以不能用自动装配，在Controller的对应方法用参数绑定；如果你只用@Autowire 或者 @Resource 注解，依赖都是在应用启动时注入的，当你应用启动的时候请求还没来呢，哪儿来的 Request和Response对象啊。<br>
所以当你需要Request 和Response对象时，需要将其放到controller的方法的参数中，这样每次请求时，Spring MVC框架就会自动将HttpServeletRequest 或 HttpServeletResponse对象注入。<br>
PS：Request对象表示一次请求，里面包含了本次请求的所有信息，包括Http Header和 Body，<br>
Response对象表示对请求的响应，可以设置响应的header和body</p>
<span id="more"></span>
<p>2、$(this).data();注意没有参数，把当前jQuery对象的所有data属性取出来,返回结果为一个对象<br>
例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">     <span class="keyword">var</span> <span class="title class_">WarehouseDetail</span> = [];</span><br><span class="line">$trs.<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> $this = $(<span class="variable language_">this</span>);</span><br><span class="line">	<span class="keyword">var</span> product = $this.<span class="title function_">data</span>();</span><br><span class="line">	product.<span class="property">quantity</span> = $this.<span class="title function_">find</span>(<span class="string">&#x27;.quantity&#x27;</span>).<span class="title function_">val</span>();</span><br><span class="line">	product.<span class="property">remark</span> = $this.<span class="title function_">find</span>(<span class="string">&#x27;.remark&#x27;</span>).<span class="title function_">text</span>();</span><br><span class="line">	<span class="title class_">WarehouseDetail</span>.<span class="title function_">push</span>(product);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>3、货物处置订单列表分页出了问题，需要加个子查询语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> dol.<span class="operator">*</span>, det.order_detail_id, det.product_id, det.product_name, det.sku_code, det.quantity, det.unit_price, det.product_unit, det.order_price, det.class_id, pe.batch_entrust_name</span><br><span class="line"> <span class="keyword">from</span> disposal_order_list dol</span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> disposal_order_detail det <span class="keyword">using</span> ( order_id )</span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> purchase_entrust pe <span class="keyword">on</span> pe.purchase_entrust_id<span class="operator">=</span>dol.purchase_entrust_id</span><br><span class="line"> <span class="keyword">where</span> dol.order_id <span class="keyword">in</span>(</span><br><span class="line"> <span class="keyword">select</span> order_id</span><br><span class="line"> <span class="keyword">from</span> disposal_order_list tmp</span><br><span class="line"> limit #&#123;<span class="keyword">start</span>&#125;,#&#123;pageSize&#125;) <span class="keyword">order</span> <span class="keyword">by</span> order_date <span class="keyword">desc</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>注意:dol.*是同事挖的坑，子查询是我加的<br>
然后mysql执行报错<strong>This version of MySQL doesn’t yet support ‘LIMIT &amp; IN/ALL/ANY/SOME subquery’</strong> 意思是这个版本的 MySQL不支持使用 LIMIT 子句的 IN/ALL/ANY/SOME子查询，按照意思只需要在外面加一层就可以成功执行了<br>
修改后代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">where</span> dol.order_id <span class="keyword">in</span>(<span class="keyword">select</span> t.order_id <span class="keyword">from</span> (</span><br><span class="line">	<span class="keyword">select</span> order_id <span class="keyword">from</span> disposal_order_list tmp</span><br><span class="line">	limit #&#123;<span class="keyword">start</span>&#125;,#&#123;pageSize&#125;)t)</span><br></pre></td></tr></table></figure>
<p>4、IE和Safari浏览器不支持’-‘格式的日期字符串，需要将其替换成’/’<br>
例如：2019/11/13 21:53:05</p>
<p>5、IDEA Maven拉取jar包时一直报&quot;<strong>Unable to import maven project: See logs for details</strong>&quot;错误</p>
<p>java.lang.RuntimeException: com.google.inject.CreationException: Unable to create injector, see the following errors:</p>
<p>No implementation for org.apache.maven.model.path.PathTranslator was bound.<br>
while locating org.apache.maven.model.path.PathTranslator<br>
for field at org.apache.maven.model.interpolation.AbstractStringBasedModelInterpolator.pathTranslator(Unknown Source)<br>
at org.codehaus.plexus.DefaultPlexusContainer$1.configure(DefaultPlexusContainer.java:350)</p>
<p>经过检查以及百度发现我用的MAVEN版本比公司用的高，于是换成和公司一样的成功解决问题</p>
<p>6、换项目后，JRebel热部署不起作用了，IDEA报错信息如下：<br>
<strong>11:43	Invalid rebel.xml: Invalid ‘dir’ defined in class path of rebel.xml</strong><br>
(jar:file:/E:/supSCE_jskj/itonghui_web_cloud/target/MobileSchool-chat/WEB-INF/lib/itonghui-biz-marketing-rebate-0.0.2.ITHJS-SNAPSHOT.jar!/rebel.xml):<br>
Directory ‘E:/supSCE_jskj/itonghui_web_cloud/src/main/webapp/static/wechat/bin’ does not exist<br>
可能maven项目Jrebel默认路径生成错误<br>
修改rebel.xml中的<classpath>标签下的路径为实际classes存放路径即可，如图所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/e0530b60de6430a9dba27d4765fcafe3.png" alt="在这里插入图片描述"><br>
<a href="https://blog.csdn.net/qq_36698956/article/details/86629196">参考链接</a></p>
<p>7、MySQL查询数据库表的所有字段并用逗号分隔<br>
参考：Java程序猿搬砖笔记(十八)</p>
<p>8、JavaScript delete 删除属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//delete 只适用于删除对象属性</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">b</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">delete</span> a.<span class="property">b</span>;</span><br></pre></td></tr></table></figure>
<p>9、chrome调试模式控制台capture可以捕获整屏网页截图(手机模式)</p>
<p>10、JavaScript遍历map的一种方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> map)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(key,map[key]);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>11、修改Mapper.xml不用重启项目的方法<br>
在maven中添加依赖</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改applicationContext-mybatis.xml文件，添加下面的配置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mappper.xml自动热部署 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.spring.MybatisMapperRefresh&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath*:com/itonghui/biz/**/dao/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;delaySeconds&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sleepSeconds&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;enabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>	</span><br></pre></td></tr></table></figure>
<p>其中delaySeconds是延迟加载时间,sleepSeconds是刷新时间间隔,enabled开启热加载(默认是false),mapperLocations的值与sqlSessionFactory配置的路径一致</p>
<p>12、MySQL排序字段为空的排在最后面<br>
如果是降序,为空的数据会自动排到后面,如果是升序,需要加上is null，代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> u <span class="keyword">order</span> <span class="keyword">by</span> u.user_id <span class="keyword">is</span> <span class="keyword">null</span>, u.user_id</span><br></pre></td></tr></table></figure>
<p>13、既验证手机号码也能验证固定电话的正则表达式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//固定电话规则:前3(4)位为0开头,后面为7或8位</span></span><br><span class="line">^((<span class="number">0</span>\d&#123;<span class="number">2</span>,<span class="number">3</span>&#125;-\d&#123;<span class="number">7</span>,<span class="number">8</span>&#125;)|(<span class="number">1</span>[<span class="number">357894</span>]\d&#123;<span class="number">9</span>&#125;))$</span><br></pre></td></tr></table></figure>
<p>14、MySQL设计数据库字段时应当给个默认值，不要null(所有使用NULL值的情况，都可以通过一个有意义的值的表示，这样有利于代码的可读性和可维护性，并能从约束上增强业务数据的规范性)<br>
比如receive_num + #{receivedNum},如果receive_num为null，运算结果永远为null,需要改为ifnull(received_num,0) + #{item.receivedNum};<br>
比如NOT IN、!= 等负向条件查询在有 NULL 值的情况下返回永远为空结果，查询容易出错</p>
<p>15、mybatis-plus的or和and连用<br>
例如：<br>
java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EntityWrapper&lt;AgreementManagement&gt; entityWrapper = <span class="keyword">new</span> <span class="title class_">EntityWrapper</span>&lt;&gt;();</span><br><span class="line">entityWrapper.eq(<span class="string">&quot;first_cust_id&quot;</span>,agreementManagementDTO.getAddCustId()).or().eq(<span class="string">&quot;second_cust_id&quot;</span>,agreementManagementDTO.getAddCustId()).or().eq(<span class="string">&quot;third_cust_id&quot;</span>,agreementManagementDTO.getAddCustId());</span><br><span class="line">ToolUtil.isNotEmpty(agreementManagementDTO.getEndDate(), ()-&gt;&#123;<span class="comment">//addNew()是为sql语句加上()</span></span><br><span class="line">        entityWrapper.andNew().le(<span class="string">&quot;add_time&quot;</span>, agreementManagementDTO.getEndDate());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>输出sql：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> (first_cust_id <span class="operator">=</span> <span class="number">104248</span> <span class="keyword">OR</span> second_cust_id <span class="operator">=</span> <span class="number">104248</span> <span class="keyword">OR</span> third_cust_id <span class="operator">=</span> <span class="number">104248</span>) <span class="keyword">AND</span> (add_time <span class="operator">&gt;=</span> <span class="string">&#x27;2020-02-27 00:00:00.0&#x27;</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> add_time <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<p>16、获取web项目的绝对路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>返回值示例：E:\supSCE_jskj\itonghui_web_cloud\target\MobileSchool-chat</p>
<p>17、jQuery的属性选择器<br>
语法[attribute=value]<br>
例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;[id=&#x27;5&#x27;]&quot;</span>)<span class="comment">//筛选属性id值为5的元素</span></span><br><span class="line">$(<span class="string">&quot;li[data-product-id=&#x27;322&#x27;]&quot;</span>)<span class="comment">//筛选li中属性data-product-id值为322的元素</span></span><br><span class="line">$(<span class="string">&#x27;.productGroup li[productId=&#x27;</span><span class="number">322</span><span class="string">&#x27;]&#x27;</span>)<span class="comment">//筛选productGroup下的li中，属性productId值为322的元素</span></span><br></pre></td></tr></table></figure>
<p>18、滚动条默认在最底部显示(聊天窗口用到)<br>
代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="string">&quot;#contentSpan&quot;</span>).<span class="title function_">scrollTop</span>($(<span class="string">&quot;#contentSpan&quot;</span>)[<span class="number">0</span>].<span class="property">scrollHeight</span>);</span><br></pre></td></tr></table></figure>
<p>由于这个方法需要在页面元素加载完毕才执行，所以可以设置定时执行，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            $(<span class="string">&quot;#contentSpan&quot;</span>).<span class="title function_">scrollTop</span>($(<span class="string">&quot;#contentSpan&quot;</span>)[<span class="number">0</span>].<span class="property">scrollHeight</span>);</span><br><span class="line">        &#125;,<span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<p>19、Java集合排序的几种方式</p>
<ul>
<li>对于集合比较使用Collections.sort()</li>
<li>对于集合中的对象比较，需要指定比较逻辑，指定比较逻辑需要实现 Comparable接口并重写compareTo方法自定义逻辑</li>
<li>匿名内部类方式。对于需要临时改变比较规则，需要使用Collections.sort(List,Comparator),采用回调方式重写</li>
</ul>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>MySQL</tag>
        <tag>MyBatis</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>《文明、现代化、价值投资与中国》读书笔记</title>
    <url>/2020/10/24/civilization_modernization_valueinvestment/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/9e0e4ef56c1148a803352d6b7189f824.jpeg" alt="在这里插入图片描述"></p>
<p>书名：文明、现代化、价值投资与中国<br>
作者：李录<br>
读完时间：2020年09月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<ul>
<li>一个自由竞争的市场就是一个不断自我进化、自我进步、自我完善的机制，现代科技的介入使得这一过程异常迅猛。这样在相互竞争的不同市场之间，最大的市场最终会成为唯一的市场，任何人、企业、社会、国家，离开这个最大的市场之后就会不断落后，并最终被迫加入。一个国家增加实力最好的方法是放弃自己的关税壁垒，加入到这个全球最大的国际自由市场体系里去；反之，闭关锁国就会导致相对落后。这就是3.0文明的铁律。</li>
<li>今天，几乎所有重要的创新知识、技术、自然科学、社会科学、商业、文化、艺术等领域内的最新思想都最先在英语中出现。英语早已不再是美国、英国的专属，而成为全世界商业和从事创造性职业人士的共用语言。中文及其他所有语言恐怕都没有了这个机会。</li>
<li>据李慎之回忆，在邓小平复出后访美的途中，他曾对李慎之讲过为什么他最重视中美关系。邓说，据他的观察，二战后凡是和美国好的国家都富了，凡是与苏联好的国家都贫穷。</li>
</ul>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p>李录把人类文明史分成了三个阶段1.0狩猎文明、2.0农业文明、3.0科技文明，也是换汤不换药啊。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>关于《沙漠之花》的几句话</title>
    <url>/2020/09/14/desert_flower/</url>
    <content><![CDATA[<p><img src="https://i-blog.csdnimg.cn/blog_migrate/463250675102e273f33ff1efdee2531d.jpeg" alt="在这里插入图片描述"></p>
<span id="more"></span>
<ul>
<li>演员选得太好了，小时候和成人的华莉丝仿佛就是一个人。</li>
<li>看着胆战心惊，里面有很多的情节触人心弦。很难找到合适的词语去感受她的感受。</li>
<li>她的每一步都是奇迹，比如几岁的时候赤脚走出沙漠隔壁、没有任何联系方式也能找到外婆、外婆怎么确认她是自己的外孙女…</li>
<li>电影里面有一个细节印象很深。华莉丝下体剧痛，玛丽莲带她到医院就诊。医生表示失去的东西不能复原但肯定可以通过手术来减轻她的痛苦。而在手术台前，因为语言不通，医生叫来会说索马里语的黑人医生来当翻译，而这位黑人医生却完全曲解了他的话：”我们的传统不该由外人干涉!你这样做是背叛你的母亲和传统,离经叛道！”。听着心寒…</li>
<li>&quot;你受了这么多苦,一定是为了值得的东西”。</li>
<li>这是一个很好的故事，也是一部很好的电影。</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>电影</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>被骗经历</title>
    <url>/2020/05/05/experience_of_being_cheated/</url>
    <content><![CDATA[<h2 id="过程"><a class="header-anchor" href="#过程"></a>过程</h2>
<p>2020年元旦那天我路过沙井一个手机店，门口的小伙子拿着传单跟我说“帅哥帮我进店投个票吧，五分钟就好了” ，我心想举手之劳而已，能帮就帮吧，于是我跟着他们进店了。</p>
<span id="more"></span>
<p>进店后那个小哥说“88块钱直接送一台华为平板，只要支付宝积分650以上就行了”根本没有说投票的事情。也怪我贪小便宜 ，我没过几分钟就转了88元给他们财务。然后剧情开始了，他拿着一张协议单过来，里面有保证不把产品是自己使用、每个月客服会回访六次、必须每天打一个电话用几兆流量、三年后合约自动解除等六条规定。注意这一次他们一句话只读一遍，而且很快的那种，读完没有解释什么意思直接问你能不能做到，这没仔细看看当然能做到。那哥们一遍一遍的读干扰自己阅读。读完后他就让你签字，我也没多犹豫就签字了。</p>
<p>这时候我已经站起来准备走了，他们说不要站起来会摄像，我特么客户搞得像面试一样，然后换了一个哥们开始给我一条条解释了：每个月客服回访六次左右，必须接听，如果有一次接不到电话会扣200块违约金；手机卡 身份证 平板必须都是同一个身份证的，三证合一。我日，你特么之前从来没有提到过违约金的事情，我当场直接说“做不到，没有人能保证三年一直开机，我要解除合约”，然后店员死活不肯解除了，说什么录入系统了解除不了。于是又扯皮了一段时间才跟我说可以换到套餐二：充4288元话费这个平板使用就没限制了。我从一开始签了那个协议就很被动，不得不换成套餐二。真后悔当时没有马上报警，唉！</p>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/3496d3c7093e5839a620fcca4e3f7ac0.jpeg" alt="在这里插入图片描述"></p>
<p>88是转给店里财务的，4200转给他们经理，麻痹的都是个人账号。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/bc943c0ff1f6391d71ad4062f101ddae.jpeg" alt="在这里插入图片描述"><br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/9a5d21a6a85db3ea62b713f3b73ac1cc.jpeg" alt="在这里插入图片描述"></p>
<p>那一天一共损失至少4288-1700，关键是手机卡和平板都不是我的需求，劳资就是好心好意来给你投票的😹。</p>
<p>我本以为事情就这么结束了，没想到这个手机卡预存只有300块话费，一个月月租69，现在还剩24块。我前两天联系陈方越说越不靠谱“每个月返30，返到1072后你再来店里匹配”第一他之前没说要来店里匹配，如果他说要我会当场报警的（因为我是去沙井找朋友玩的 离那边30多公里），第二返完1072再匹配这不赤裸裸的坑人吗 这么好的服务有人用？</p>
<p>我现在手上只有这些证据，能找到店地址，而且单据没有店里的公章，想周末去店里吧差价要回来，然后和联通解除合约，尽可能减少损失。不然要么我每个月自己充话费，要么等着联通拉黑我，唉！</p>
<p>后面去了一次手机店找他们，说着一直会返还月租不用交话费，当时也没理由没报警，害！</p>
<p>今天(0505)到联通自己处理，微信吧店员诅咒一番然后拉黑他们，完！</p>
<p>备注：手机店位置：深圳沙井沙井路192号（京基百纳附近）大家不要去这个店、平板型号是华为青春版M5，网购1700左右。</p>
<h2 id="感悟"><a class="header-anchor" href="#感悟"></a>感悟</h2>
<p>1、不轻易填真实手机号、身份证号码（尤为重要）。不轻易签字 不轻易签字 不轻易签字。<br>
2、任何陌生人相关的活动，五分钟搞不定直接跑路。<br>
我曾经也很单纯 这个复杂的社会让我多了一份警惕。<br>
3、如果再遇到类似的，一定要当场报警!一定要当场报警!一定要当场报警!</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>《人性的弱点》读书笔记</title>
    <url>/2020/09/13/how_to_win_friends_and_influence_people/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/29b03fe09c51b46755deb25c02661632.jpeg" alt="在这里插入图片描述"><br>
书名：人性的弱点<br>
副标题：如何赢取友谊与影响他人<br>
英文名：<em>How to Win Friends &amp; Influence People</em><br>
作者：[美]戴尔·卡耐基<br>
译者：平湖<br>
读完时间：2020年07月</br></p>
<span id="more"></span>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p>我把书的重点内容整理成了一个思维导图，如下所示：<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/d694db201b7b4f630551a572f726283e.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>上海杭州印象</title>
    <url>/2020/11/22/impression_of_Shanghai_and_Hangzhou/</url>
    <content><![CDATA[<h2 id="上海印象"><a class="header-anchor" href="#上海印象"></a>上海印象</h2>
<p>国庆在上海待了三天两夜，根据观察，总结下面几点：</p>
<span id="more"></span>
<ul>
<li>
<p>上海地铁老旧、即使南京路也有许多小巷道路破烂，把老上海的气息展现地淋漓尽致。当然，外滩相当繁华，尤其是在晚上。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/093d0d3b703abb0ea55a7cd13f32f497.png" alt="在这里插入图片描述"></p>
</li>
<li>
<p>过地铁的时候不会让你喝一口。</p>
</li>
<li>
<p>国庆期间上海所有警察都在维持治安，很赞!<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/9e40846c1a0a5446c5052b4654c4f585.jpeg" alt="在这里插入图片描述"></p>
</li>
<li>
<p>出租车后座不用系安全带，自行车上机动车道以劝告为主不用罚款。</p>
</li>
<li>
<p>会比深圳早黑半小时。</p>
</li>
</ul>
<h2 id="杭州印象"><a class="header-anchor" href="#杭州印象"></a>杭州印象</h2>
<ul>
<li>目前只有三条地铁，交通相比一线城市还有很大差距。</li>
<li>出租车后座不用系安全带，自行车上机动车道以劝告为主不用罚款。</li>
<li>非机动车道几乎覆盖整个市区，很赞!</li>
<li>夜晚没有灯火通明的感觉。</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>上海</tag>
        <tag>杭州</tag>
      </tags>
  </entry>
  <entry>
    <title>生成履行行行号及RedisTemplate使用碰坑</title>
    <url>/2020/10/24/generate_linenumber/</url>
    <content><![CDATA[<h2 id="大致实现逻辑"><a class="header-anchor" href="#大致实现逻辑"></a>大致实现逻辑</h2>
<p>后台写一个通用方法，参数为履行合同业务类型和公司代码，返回值为16位的履行行行号。</p>
<span id="more"></span>
<ul>
<li>生成规则：履行合同业务类型1位+公司代码4位+年份2位+流水号9位（每个公司每年的流水号都从1开始）。例如：1 0021 20 000000001。</li>
<li>用子项目编码+公司代码+年份做Redis键，值为流水号。</li>
<li>流水号：由于直接用Java代码生成在集群环境会有问题，故采用redisTemplate的increment(key,delta)方法生成，初次调用该方法会返回1。</li>
<li>格式化：Redis返回的是自增的数字，需要格式化为9位流水号。Java代码如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String.format(<span class="string">&quot;%09d&quot;</span>,serialNumber);</span><br></pre></td></tr></table></figure>
<h2 id="RedisTemplate使用碰坑"><a class="header-anchor" href="#RedisTemplate使用碰坑"></a>RedisTemplate使用碰坑</h2>
<p>redisTemplate. opsForValue(). set(key,value)这种方式存入Redis后会把数字型的值转为字符串，以后调用increment(key,delta)方法报错。原因是底层采用了JdkSerializationRedisSerializer序列化机制。解决方法有如下两种：</p>
<ul>
<li>采用序列化方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br></pre></td></tr></table></figure>
<p>赋值方法也要改(值为字符串)，例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redisTemplate. opsForValue().set(key,<span class="string">&quot;0&quot;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>使用StringRedisTemplate</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">serialNumber</span> <span class="operator">=</span> stringRedisTemplate. opsForValue().increment(key,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序</title>
    <url>/2020/12/22/insertionSort/</url>
    <content><![CDATA[<h2 id="插入排序"><a class="header-anchor" href="#插入排序"></a>插入排序</h2>
<p>插入排序是一种简单直观的排序算法，它也是一种稳定排序算法。它的工作原理是通过构建有序序列，对于未排序的数据，在已排序序列中从后向前扫描，找到相应位置并插入，直到全部插入为止。</p>
<span id="more"></span>
<h3 id="算法描述"><a class="header-anchor" href="#算法描述"></a>算法描述</h3>
<p>1、将序列的第一个元素看成是有序的，把第二个元素到最后一个元素看成是无序的。<br>
2、取出下一个元素(待插入元素)，在已经排序的元素中从后向前扫描。<br>
3、如果该元素(已排序)大于待插入元素，将该元素移动到下一位置。<br>
4、重复步骤3，直到找到已排序的元素不大于待插入元素的位置。<br>
5、将待插入元素插入到该位置。<br>
6、重复步骤2~5。</p>
<h3 id="动图演示"><a class="header-anchor" href="#动图演示"></a>动图演示</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/65a85ea82b7fcea7bc1f5cbc97488622.gif#pic_center" alt="在这里插入图片描述"></p>
<h3 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h3>
<h4 id="Java"><a class="header-anchor" href="#Java"></a>Java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySorts</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;<span class="comment">//从第二个元素开始</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];<span class="comment">//待插入元素</span></span><br><span class="line">            <span class="type">int</span> j;<span class="comment">//待插入位置</span></span><br><span class="line">            <span class="keyword">for</span>(j=i;j&gt;<span class="number">0</span>&amp;&amp;tmp&lt;arr[j-<span class="number">1</span>];j--)&#123;</span><br><span class="line">                arr[j] = arr[j-<span class="number">1</span>];<span class="comment">//后移</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//内循环结束说明找到了插入位置</span></span><br><span class="line">            arr[j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">23</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">14</span>&#125;;</span><br><span class="line">        insertionSort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序結果：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>排序結果：[6, 8, 9, 13, 14, 15, 20, 23, 32, 45]</p>
<h4 id="JavaScript"><a class="header-anchor" href="#JavaScript"></a>JavaScript</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">		<span class="keyword">var</span> j;</span><br><span class="line">		<span class="keyword">for</span>(j=i;j&gt;<span class="number">0</span>&amp;&amp;tmp&lt;arr[j-<span class="number">1</span>];j--)&#123;</span><br><span class="line">			arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		arr[j] = tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">23</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">14</span>];</span><br><span class="line"><span class="keyword">var</span> arrSorted = <span class="title function_">insertionSort</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrSorted);</span><br></pre></td></tr></table></figure>
<p>(10) [6, 8, 9, 13, 14, 15, 20, 23, 32, 45]</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaScript</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Dear John 读书笔记</title>
    <url>/2020/03/01/dear_John/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/216f052efdcf7f979039fa6a3a2ee3e2.png" alt="在这里插入图片描述"><br>
书名：<em>Dear John</em><br>
中文名：分手信<br>
作者：Nicholas Sparks<br>
读完时间：2020年02月</p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<blockquote>
<p>Surfing is a solitary sport, one in which long stretches<br>
of boredom are interspersed with frantic activity, and it teaches you to flow with nature, instead of fighting it</p>
</blockquote>
<p>冲浪是一项孤独、长时间无聊夹杂着疯狂的运动，它教会你与自然和谐相处，而不是与之抗争。原文第55页。</p>
<blockquote>
<p>the saddest people I’ve ever met in life are the ones who don’t care deeply about anything at all. Passion and satisfaction go hand in hand, and without them, any happiness is only temporary, because there’s nothing to make it last.</p>
</blockquote>
<p>我一生中遇到的最悲伤的人是那些对任何事情都漠不关心的人。激情和满足是相辅相成的，没有激情和满足，任何幸福都只是暂时的，因为没有什么能让它持久。原文第71页。</p>
<blockquote>
<p>A car passed by, breaking the spell. She took a step toward the house, then stopped and put her hand on my arm. In an innocent gesture, she kissed me on the cheek. It was almost sisterly, but her lips were soft and the scent of her engulfed me, lingering even after she pulled back.</p>
</blockquote>
<p>这段描述Savannah亲吻John脸颊的过程。原文第93页。</p>
<blockquote>
<p>Outside my window, I saw a shooting star cross the sky in a brilliant streak of white. I wanted to believe it was an omen, though of what, I wasn’t sure. Instead, all I could do was replay Savannah’s gentle kiss on my cheek for the hundredth time and wonder how I could be falling for a girl that I’d met only the day before.</p>
</blockquote>
<p>在我的窗外，我看到一颗白条状的明亮白色流星划过天空。我想相信这是一个预兆，尽管我不确定是什么预兆。相反，我所能做的就是在我的脸颊上重演萨凡纳温柔的吻，这已经是第一百次了。原文第93页。</p>
<blockquote>
<p>For a second, I wondered whether kissing her would break the spell we both were under, but it was too late to stop. And when her lips met mine, I knew that I could live to be a hundred and visit every country in the world, but nothing would ever compare to that single moment when I first kissed the girl of my dreams and knew that my love would last forever.</p>
</blockquote>
<p>当她的嘴唇碰到我的嘴唇时，我知道我可以活到一百岁，可以走遍世界上的每一个国家，但是没有什么能与我第一次吻我梦中的女孩的那一刻相比，我知道我的爱会永远持续下去。原文第131页。</p>
<blockquote>
<p>I’d done my part in giving the Russians something to think about if they were debating whether or not to invade Germany with dozens of mechanized divisions</p>
</blockquote>
<p>刚看这段话还蛮难理解的。原文第195页。</p>
<blockquote>
<p>She was wearing one of those strappy tank tops that accentuated her tan, and all I could think was that she was the sexiest woman I’d ever seen</p>
</blockquote>
<p>她穿着一件吊带背心，突出了她的古铜色皮肤，我能想到的就是她是我见过的最性感的女人。原文196页。</p>
<blockquote>
<p>The prices amazed me and I suspected that my father’s collection, despite the fall in coin prices since gold was in its heyday, was probably ten times as valuable as the house he’d owned outright for years. My father, unable to master the art of even simple conversation, had become richer than anyone I knew.</p>
</blockquote>
<p>价格让我吃惊，我怀疑我父亲的收藏，尽管自黄金全盛时期以来硬币价格下跌，但价值可能是他拥有多年的房子的十倍。我的父亲，甚至不能掌握简单交谈的艺术，却变得比我认识的任何人都富有。原文第218页。</p>
<blockquote>
<p>Steep roofed and square, with flaking white paint and a chimney pointing toward the sky, it seemed to rise from the earth like a ghostly image a hundred years in the making. A single bulb glowed above the battered front door, and a small potted plant hung near an American flag, both moving gently in the breeze. Off to the side of the house was a weathered barn and a small corral</p>
</blockquote>
<p>屋顶陡峭，四四方方，白色油漆剥落，烟囱指向天空，它似乎像一个一百年来一直在塑造的幽灵形象从地面升起。破旧的前门上只挂着一个灯泡，一株盆栽植物挂在一面美国国旗旁边，它们都在微风中轻轻摇曳。房子的一侧是一个饱经风霜的谷仓和一个小畜栏。这段场景描写的很好。原文第259页。</p>
<blockquote>
<p>love meant that you care for another person’s happiness more than your own,no matter how painful the choices you face might be</p>
</blockquote>
<p>爱意味着你关心别人的幸福胜过自己，不管你面对的选择有多么痛苦。原文第333页。</p>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p><em>Dear john</em> is a English novel about love which I have read for the first time.All of the book is about love,the love between John and his father,the love between John and Savannah,the love beteen Tim and Savannah and so on.</p>
<p>The emotional description of the book is very delicate and the story of the novel attracts me to continue reading.Obviously,it is a story which is bittersweet but have a surprising ending.</p>
<p>The last chapter of the novel is most touching place.After attending his father’s funeral,John passes Savannah’s home knowing that Savannah married Tim and Tim had cancer.However,John agrees to go to meet Tim.What a magnanimity  man!Lastly,John sold all of his coins which left by his father and gave them to Savannah anonymously to help Tim get better treatment.Maybe,it is true love.</p>
<p>I love the writing of Nicholas Sparks.It is easy to understand but beautiful and it won’t be dificult to read.I will read more Sparks’s books.</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《爱情不设限》读书笔记</title>
    <url>/2020/05/05/love_without_limits/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/8af3d22e34e8b13ebcd09d0037a5146d.jpeg" alt="在这里插入图片描述"><br>
书名：爱情不设限<br>
英文名: <em>Love without limits</em><br>
作者：[澳大利亚]力克·胡哲<br>
译者: 吴果锦<br>
读完时间：2020年05月</br></p>
<span id="more"></span>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p>该书是在某猫买书送的，几小时翻完，仅做个阅读记录。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《病毒星球》读书笔记</title>
    <url>/2020/02/18/plant_of_viruses/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/02050e0de6887e785dc09e5dbaf35d10.jpeg" alt="在这里插入图片描述"><br>
书名：病毒星球<br>
英文名：<em>A Planet of Viruses</em><br>
作者：卡尔.齐默<br>
译者：刘旸<br>
读完时间：2020年02月</p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<ul>
<li>人的肺里平均驻扎了174种之多的病毒，其中只有10%是已发现病毒的近亲，另外90%就和水晶洞里躲藏的病毒一样陌生</li>
<li>蛋白质占了病毒组成的95%，另外5%是另一种神奇的长条状分子，也就是核酸。在很多年以后，科学家会发现，核酸就是构成基因的物质，也正是在核酸的指导下，细胞才得以合成蛋白质和其他分子</li>
<li>抗生素只对细菌感染有用，对病毒丝毫起不了作用。有时候，医生开抗生素，只是因为很难确诊病人究竟是感冒还是细菌感染，还有的时候是焦虑不已的病人指望医生做点什么，医生就开点抗生素作为回应。但抗生素不仅无法治感冒，还把我们所有人都置于另一种危险之中。抗生素滥用，促使细菌在人体和环境中演化出越来越强的抗药性。一些医生非但没能治好他的病人，还提高了所有人遭遇其他疾病的风险</li>
<li>人鼻病毒可以训练我们的免疫系统，这样未来遇到一些小刺激时，免疫系统就不会过度反应，而可以养精蓄锐，去攻击那些真正的敌人</li>
<li>禽流感病毒每次复制，新病毒的遗传物质都会出点小错，我们称这些小错误为“突变”。有些突变实际上没有任何效果，有些则让病毒不能自我复制，还有极少数突变能给禽流感病毒带来繁殖优势</li>
<li>当HPV病毒(乳头瘤病毒)的一部分遗传物质“不小心”整合到宿主细胞的DNA中之后，HPV就会诱发癌症。被感染的细胞会快速自我复制，在增殖的同时产生新的突变。这些细胞不会像正常细胞那样自然衰老和死亡，而会永葆青春。它们也不太会从组织表面脱落，而是逐渐形成肿瘤，从组织表面隆起，挤压周围正常的组织</li>
<li>抗生素毕竟不是活的生物，而是真菌或细菌合成的化学物质或蛋白质，因此医生们对抗生素的反应积极得多。抗生素也不负众望，它们通常能在数天内清除感染，效果惊人</li>
<li>海洋中大约存在着10<sup>31</sup>个病毒颗粒。这个数字实在太大了，大到根本找不到一个例子来类比。在海洋中，病毒的数量是其他所有海洋居民加起来总量的15倍，而它们的总重量则相当于7500万头蓝鲸（整个星球上只有不到1万头蓝鲸）。如果你把海洋中所有病毒挨个儿排成一排，会延长到4200万光年之外</li>
<li>海洋病毒中只有极小部分会感染人类，也有的会感染鱼类和其他海洋动物，但迄今为止，它们最常见的目标是细菌和其他单细胞微生物</li>
<li>而微生物本身又是地球上最伟大的地质工程师，二者角力，甚至会影响整个地球的大气层。藻类和光合细菌生产了大约一半我们吸入的氧气，藻类的代谢还会生成二甲基硫，这种气体释放到空气中，水汽围绕它们开始凝结，就形成了云。云层把来自外太空的阳光反射回去，就使地表冷却下来。微生物还会吸收和释放出大量二氧化碳，这些二氧化碳通过捕获大气中的热量来调节大气温度</li>
<li>粗略估算，地球上10%的光合作用都是病毒基因开展的。也就是说，你每呼吸十次，就有一口氧气是病毒惠予的</li>
<li>上百万年来，内源性逆转录病毒一直在反复不断地入侵我们的基因组，日积月累，到今天已经数量惊人。我们每个人的基因组中携带了近10万个内源性逆转录病毒的DNA片段，占到人类DNA总量的8%。反过来看，人类基因组中2万个负责蛋白质编码的基因，也只不过占到1.2%而已。换句话说，我们的基因组中简直病毒泛滥</li>
<li>很多西非人把白顶白眉猴当宠物一样养，猎人也经常捕杀这种猴子，卖它们的肉。当白顶白眉猴和人发生血液接触——比如猴子咬了猎人，或者屠夫切猴子肉的时候，病毒就有可能从猴子进入人体。几个世纪以来，喀麦隆的猎人会捕杀黑猩猩和大猩猩，吃他们的肉，在捕猎的过程中时不时被猿类的SIV病毒感染</li>
<li>西尼罗河病毒不仅能感染鸟类，它的威力也波及亚洲、欧洲和非洲部分地区的人。没人能想到布朗克斯动物园的鸟竟然是死于西尼罗河病毒，因为此前它们在整个西半球的鸟类身上从来没有出现过</li>
<li>蚊子从受到感染的鸟体内吸血，病毒随血液进入蚊子体内。接着病毒入侵蚊子的中肠细胞，再入侵它的唾液腺，随时准备注射到新的鸟体内。蚊子如同给病毒插上了翅膀</li>
<li>目前还没有任何西尼罗河病毒疫苗获批。给美国人广泛接种疫苗的代价是极其昂贵的，远远超过救治那些感染者所需的费用</li>
<li>8000人被SARS传染，900人死亡，死亡率高达10%；1026人被诊断为感染了MERS，其中376人死亡</li>
<li>人类作为一种哺乳动物，已经和病毒组成了难以分割的混合体。移除了身上的病毒基因，我们可能根本无法活着从子宫里生出来。而人在日常生活中抵御感染可能也是借助了病毒DNA的帮助。就连我们每日呼吸的氧气中的一部分，也是海洋中的病毒和细菌共同产生的</li>
<li>双链DNA分子有可能就是RNA病毒“发明”出来的，双链有不同的结构，能保护基因免受攻击。最终，这些病毒的宿主反而接管了DNA分子，接着接管了整个世界。也就是说，现在所知的生命可能全起源于病毒</li>
<li>病毒在某种意义上的确是致命的，但它们也赋予了这个世界必不可少的创造力。创造和毁灭又一次完美地结合在一起</li>
</ul>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p>本书用具体案例详细叙述了人鼻病毒、流感病毒、乳头瘤病毒、噬菌体病毒、海洋中的病毒、内源性逆转录病毒、人类免疫缺陷病毒、西尼罗河病毒、埃博拉等相似病毒(SARS、MERS)、人类战胜的病毒(天花病毒和牛瘟病毒)和拟菌病毒，是一本不错的病毒知识科普读物。这本书是2019新型冠状病毒疫情期间在家隔离期间读的，读完很过瘾，涨知识啦。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>病毒</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序</title>
    <url>/2020/12/27/selectionSort/</url>
    <content><![CDATA[<h2 id="选择排序"><a class="header-anchor" href="#选择排序"></a>选择排序</h2>
<p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是：第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。选择排序是不稳定的排序方法。</p>
<span id="more"></span>
<p><a href="https://baike.baidu.com/item/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/9762418?fr=aladdin#reference-%5B2%5D-547263-wrap">参考链接</a></p>
<h3 id="算法描述"><a class="header-anchor" href="#算法描述"></a>算法描述</h3>
<p>1、首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。<br>
2、再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。<br>
3、重复第二步，直到所有元素均排序完毕。</p>
<h3 id="动图演示"><a class="header-anchor" href="#动图演示"></a>动图演示</h3>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/71088f20b636351455c087a10b24817c.gif#pic_center" alt="在这里插入图片描述"></p>
<h3 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h3>
<h4 id="Java"><a class="header-anchor" href="#Java"></a>Java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySorts</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">23</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        selectionSort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序結果：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;<span class="comment">//最小数位置</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;arr.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j+<span class="number">1</span>]&lt;arr[minIndex])&#123;</span><br><span class="line">                    minIndex = j+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//内循环结束说明找到了最小数位置</span></span><br><span class="line">            <span class="keyword">if</span>(minIndex != i)&#123;</span><br><span class="line">                swapReferences(arr,minIndex,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swapReferences</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> minIndex, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[minIndex];</span><br><span class="line">        arr[minIndex] = arr[i];</span><br><span class="line">        arr[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>排序結果：[1, 5, 6, 8, 9, 15, 20, 23, 32, 45]</p>
<h4 id="JavaScript"><a class="header-anchor" href="#JavaScript"></a>JavaScript</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">	 <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">var</span> minIndex = i;<span class="comment">//最小数位置</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> j=i;j&lt;arr.<span class="property">length</span>-<span class="number">1</span>;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[j+<span class="number">1</span>]&lt;arr[minIndex])&#123;</span><br><span class="line">				minIndex = j+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//内循环结束说明找到了最小数位置</span></span><br><span class="line">		<span class="keyword">if</span>(minIndex != i)&#123;</span><br><span class="line">			<span class="title function_">swapReferences</span>(arr,minIndex,i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swapReferences</span>(<span class="params">arr,minIndex,i</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> tmp = arr[minIndex];</span><br><span class="line">	arr[minIndex] = arr[i];</span><br><span class="line">	arr[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">23</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> arrSorted = <span class="title function_">selectionSort</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrSorted);</span><br></pre></td></tr></table></figure>
<p>(10) [1, 5, 6, 8, 9, 15, 20, 23, 32, 45]</p>
]]></content>
      <categories>
        <category>搬砖笔记</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaScript</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>《非暴力沟通》读书笔记</title>
    <url>/2020/07/11/nonviolent_communication/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<img src="https://i-blog.csdnimg.cn/blog_migrate/01bd4dd513304658a48a4c3f64edecc7.jpeg" width="460px" align="center" />
<p>书名：非暴力沟通<br>
英文名：<em>Nonviolent Communication</em><br>
作者：[美]马歇尔.卢森堡<br>
译者：阮胤华<br>
读完时间：2020年06月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<ul>
<li>当我们褪去隐蔽的精神暴力，爱将自然流露。</li>
<li>不带评论的观察是人类智力的最高形式。</li>
<li>非暴力沟通的目的不是为了改变他人来迎合我们。相反，非暴力沟通重视每个人的需要，它的目的是帮助我们在诚实和倾听的基础上与人联系。</li>
<li>遭遇他人的痛苦时，我们常常急于提建议，安慰或表达我们的态度和感受。可是，倾听意味着全心全意地体会他人的信息—这位他人充分表达痛苦创造了条件。有一句佛教格言恰如其分地描述了这种能力：“不要急着做什么，站在那里”</li>
</ul>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p>我把重点整理成了思维导图，如下所示。<br>
<img src="https://i-blog.csdnimg.cn/blog_migrate/a16d440ff982c3797cb015675bb05764.jpeg" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《简约至上》读书笔记</title>
    <url>/2020/08/16/simple_and_usable/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<img src="https://i-blog.csdnimg.cn/blog_migrate/89f84c7504ca19abf885d3740dce1f45.jpeg" width="460px" align="center" />
<p>书名：简约至上<br>
副标题：交互式设计四策略<br>
英文名：Simple and Usable Web,Mobile,and Interaction Design<br>
作者：[英]Giles Colborne<br>
译者：李松峰/秦绪文<br>
读完时间：2020年07月</br></p>
<span id="more"></span>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<ul>
<li>让最核心的理念随处可见，提醒人们时刻谨记。随时随地使用，让它成为人们时刻不忘的追求。把它公之于众，意味着团队所有成员都知道自己应该交付什么样的功能。</li>
<li>简约四策略： 删除—去掉不必要的； 组织—分组有意义的； 隐藏—隐藏不重要的； 转移。</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《品三国》读书笔记</title>
    <url>/2020/11/22/tasting_the_three_kingdoms/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<p><img src="https://i-blog.csdnimg.cn/blog_migrate/7effa51acb7d21472952c762799af88a.jpeg" alt="在这里插入图片描述"></p>
<p>书名：品三国<br>
作者：易中天<br>
读完时间：2020年11月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<ul>
<li>秦的时间为什么短？因为这是中国历史“换届”的时候，既换统治阶级，又换国家形态。秦以前的统治阶级是谁？领主阶级。秦以后呢？地主阶级。秦以前的国家形态是什么？邦国。秦以后呢？帝国。邦国和帝国有什么不同？邦国是封建制，帝国是郡县制。封建，就是“封土建国”。什么叫“封土建国”？封土，就是划定疆域；建国，就是指定国君。具体地说，就是天底下的地方叫“天下”，天下有一个共同的君主，叫“天子”。天子把天下分成若干领地，封给“诸侯”，叫“国”。诸侯再把“国”分成若干领地，封给“大夫”，叫“家”。大夫、诸侯、天子都有“领地”，因此都是“领主”。不过大夫有领地，无政权，所以只能叫“家”。诸侯有领地，也有政权，所以叫“国”。国与国之间可以交战、媾和、联盟、通商，但都要尊奉天子为“天下共主”。这就是“封建制”，也叫“邦国制”。<br>
封建制的要义是“封土建国”，郡县制的特点是“中央集权”。封建制是“一个天下，许多国家；一个天子，许多国君”，郡县制则是“一个天下，一个国家，一个元首，一个政府”。原来那些有着独立主权的“国”没有了，合并成一个统一国家，比如秦或者汉。它同时也是天下。原来那些有着独立主权的国君也没有了，合并成一个国君，比如秦始皇或者汉高祖。他同时也是天子。天子就是这个统一国家的国君，也是天下唯一的国家元首。他也不再叫王，而叫皇帝。因此这种制度就叫“帝国制”。帝国制既然只承认一个国家，一个元首，那么，无论有独立主权的“国”，还是没有独立主权的“家”，便都不能再存在。邦国时代的国和家，必须变成帝国的郡和县。郡县与帝国的关系，是地方与中央的关系。管理郡、县的人，是中央政府任命和派出的官员。这个制度，就叫郡县制。<br>
郡县制与封建制还有一个区别，就是封建时代（邦国时代）的天子、诸侯、大夫都是世袭的，郡县时代（帝国时代）只有皇帝世袭，郡守和县令则不世袭。不但郡守、县令，帝国所有的官员，无论在中央在地方，原则上也都不世袭。世袭的是贵族，不世袭的是官僚。所以封建制同时也是贵族制，郡县制同时也是官僚制。</li>
<li>现在我们清楚了。邦国制与封建制、贵族制是三位一体的，帝国制则与郡县制、官僚制三位一体。邦国时代，天子、诸侯、大夫，都是领主，所以它的统治阶级是领主阶级。帝国时代，管理国家的是官僚。官僚无领地，不世袭，所以帝国的统治阶级是地主阶级。秦灭六国，一统天下，不再封建，就是要变贵族制为官僚制，变封建制为郡县制，变邦国制为帝国制，由地主阶级取代领主阶级成为统治阶级。很显然，这是一次“大换届”，因此社会矛盾特别尖锐，阶级冲突特别激烈。再加上新的统治阶级没有经验，选择了错误的意识形态（法家学说），采取了错误的统治方式（暴力方式），弄得天怒人怨，结果二世而亡。汉代统治阶级吸取了秦的教训，更换了意识形态（先是道家学说，后是儒家学说），也改变了统治方式（先是与民休息，后是王霸杂用），于是天下太平，汉的国祚也长达四百多年。<br>
然而秦的历史虽短，却是开创者。汉，不过是秦王朝政治遗嘱的执行人。而且，不仅两汉，以后的历代王朝，实行的都是秦开创的制度。帝国时代的统治阶级，也都是地主阶级。但同为地主阶级，也有不同类型。因此，在不同历史时期，就由不同的地主阶级来担纲。具体地说，秦汉是贵族地主，魏晋是士族地主，隋唐以后是庶族地主。<br>
贵族地主是由封建领主转变而来的。封建领主都是贵族，因此也叫贵族领主阶级。秦灭六国以后，废除了“封土建国”的“封建制”，代之以“中央集权”的“郡县制”。领主没有了，变成了地主。地主既然由领主变化而来，就难免仍然带有贵族的性质。至少，那些最大的地主，掌权的地主，控制了国家机器和中央政府的地主，只能是贵族地主。这就是皇族和外戚，以及有食邑的公侯。他们有封爵也有封地，但“有产权无治权”，或者说“有财权无政权”，不能行使独立国家的主权，只能食赋税，享受经济利益。无政权，政治上就是地主；有财权，经济上是领主。这样的人，应该说是“半领主半地主”，无妨称之为“贵族地主”。他们是秦汉帝国的统治者。所以，秦汉是贵族地主阶级的时代。</li>
<li>但是，帝国制度在本质上是非贵族的。因此，帝国的统治阶级内部也要“换届”，由贵族地主换为士族地主，最后“落实”为庶族地主。我们在《殊途同归》一章讲过，士族，就是世代做官的家族，也叫望族（有声望）、势族（有权势）。既没有权势又没有声望的庶民之家，就叫“寒门”，也叫“庶族”或“寒族”。为什么庶族地主是帝国的最后一个统治阶级，而且持续的时间那么长，从隋唐直至明清呢？因为这个阶级最符合帝国的要求。庶族地主是地主阶级当中社会地位最低的，他们要进入国家政权，只能通过读书和考试。而且每一代都要自己读、自己考，不可能世袭。这就完全合拍，也最让人放心。<br>
让庶族地主阶级成员通过读书考试进入国家政权的制度，就是“科举制”。科，就是设科考试；举，就是选拔官吏。这种制度通过考试来分科取士，所以叫“科举”。考试也是早就有了的，两晋时期就有“孝廉试经，秀才试策”的制度。但是，直到隋文帝废除九品中正制，科举制才算正式登上历史舞台。因此，隋，便也是一个“换届”的时代。故而和秦一样，时间很短。当然，这是“小换届”。斗争的激烈程度，就不如秦。而且，由于帝国已经找到了最适合自己的统治阶级和人事制度，以后的改朝换代，就只是庶族地主阶级内部的事情，即只更换统治者，不更换统治阶级。</li>
<li>不过，历史的发展需要一个过程，贵族地主阶级不可能马上就换成庶族地主阶级。这里显然要有一个过渡，而能够起到过渡作用的就是士族地主阶级。士族与贵族的区别是什么呢？贵族成为贵族，靠的是血缘关系；士族成为士族，靠的是读书做官。士族与庶族的区别又是什么呢？庶族做官，只需要读书考试；士族做官，则主要看家庭出身。所以，士族一半像贵族，一半像庶族，正好用来过渡。魏晋南北朝，就正是这样一个过渡时期。<br>
作为过渡时期，魏晋南北朝的政治制度是“门阀制度”，也叫“士族制度”。所谓“门阀制度”，就是一个人要做官，光会读书不行，还要看家族的名气声望、贵贱等级、功绩经历。名气声望叫“门望”，贵贱等级叫“门第”，功绩经历叫“阀阅”。当时的仕宦人家，大门外都有两根柱子，用来题记他们家族的功绩经历。标榜功绩的叫“阀”，在左边。标榜经历的叫“阅”，在右边。阀与阅都从“门”。这个“门”，就是“家门”，也就是家族。家族的门望、门第、阀阅，合起来就叫“门阀”。门望有高低，声望高的叫“望族”。门第也有高低，等级高的叫“高门”。一个家族能够成为望族、高门，不因为别的，只因为他们读书做官，甚至世代做官。做官才有阀阅，有阀阅才有声望、等级。所以，门望、门第、阀阅，是三位一体的，这才叫“门阀”。显然，门阀，就是当时世代为官的显贵之家。门阀制度，则是保护这个阶级政治利益的制度。它的实施方案，就是“九品官人法”或“九品中正制”。</li>
<li>军阀，就是拥有自己独立武装力量的地方豪强。这样的豪强其实早就有了，那就是由东汉王朝姑息纵容培养出来的土豪。东汉末年，尤其是黄巾起义以后，中央政府对地方的控制能力越来越弱，土豪们的势力也就越来越强。他们有的在地方上称雄称霸，叫“豪霸”；有的建立自己的私人武装，叫“豪帅”；有的利用朝廷任命的官职实施割据，成为“诸侯”。但因为都有武装力量，所以是“军阀”。只不过，在汉灵帝去世之前，他们还不成气候。<br>
军阀要成气候，有一个先决条件，就是中央政府垮台，或者名存实亡。中央控制不了地方，豪强就称霸；文官治理不了国家，军阀就横行。这时，差一点成为统治阶级的士族，就只能交出统治权。实际上，士族（也包括其他政治势力）炙手可热，根本原因在于中央集权，朝廷可以号令天下。但是，如果皇帝当真变成了孤家寡人，甚至由“天子”变成了“浪子”，各地牧守都不听指挥，他们也就牛不起来。这个时候，单单门第高有名望是没有用的，就连印把子也不一定管用，说得起话的只有枪杆子。谁掌握着枪杆子呢？军阀。把中央政府搞得名存实亡的又是谁呢？也是军阀。而且我们知道，他就是董卓。<br>
董卓是第一个杀进历史舞台的军阀。他原本是凉州的地方豪强，早就拥兵自重的。他的部属用范文澜先生的话说，则是一些地方上的“土霸”和羌族胡族的“豪酋”。这就是不折不扣的军阀了。不过平心而论，董卓并不以军阀自居。他进洛阳，也不是为了当军阀，反倒是要建立新秩序的。问题在于，董卓并不知道新秩序应该怎样建立，他自己又是一个不按牌理出牌的人。结果是新秩序没能建立，旧秩序的寿命也到了头。</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>电影《末代皇帝》笔记</title>
    <url>/2020/02/13/the_last_emperor/</url>
    <content><![CDATA[<p><img src="https://i-blog.csdnimg.cn/blog_migrate/4c8ec3b6b9d58ebcaf684c9127bf8991.jpeg" alt="在这里插入图片描述"><br>
电影讲述了清朝末代皇帝溥仪的一生。他三岁登基，辛亥革命后被迫退位，1924年被冯玉祥赶出皇宫，九一八事变之后在日本人控制下做了伪满洲国的傀儡皇帝，1945年抗战胜利后准备出逃日本时被苏联红军俘虏，1950年被押送回国时试图在洗手间割腕自杀未果，1959年获得特赦后在北京植物园做园丁。<!---more-->溥仪是一个经历三个时代的人，他好学，还说想去牛津大学，可是连家门都出不去；身为天子，却不能选择自己的妻子，确实可悲;看似皇权至上，实则只有摔死老鼠的能力；他愿意接受很多新事物，可惜生不逢时啊。关于电影的几句话：</p>
<ul>
<li>“自登基之日起皇上就被软禁在宫中，退位后他仍然没有自由，现在他已经长大了，也许他自己也纳闷，自己为什么是中国唯一不能走出家门的人，皇上是世界上最孤独的孩子”</li>
<li>三个人一起睡是咋回事？</li>
<li>剧中宛容抽大烟、同性恋和司机通情，天呐！上世纪30年代的上层阶级也太open了吧。</li>
<li>总而言之，这部电影讲好了一个故事是部好电影。</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>电影</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>《百年孤独》读书笔记</title>
    <url>/2020/07/19/one_hundred_years_of_solitude/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<img src="https://i-blog.csdnimg.cn/blog_migrate/2d2722395a074b987dfd5fc99197f204.jpeg" width="460px" align="center" />
<p>书名：百年孤独<br>
英文名：<em>One Hundred Years of Solitude</em><br>
作者：[哥伦比亚]加西亚·马尔克斯<br>
译者：范晔<br>
读完时间：2020年06月</br></p>
<span id="more"></span>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p>《百年孤独》是本好书，鸿篇巨著，但故事情节曲折，家族七代人物众多，加上作者奇葩想象力(魔幻现实主义)，我没看懂，我只是一个写代码的😂。看到一半的时候激起了内心深处的悲凉，不忍卒读。希望若干年后多些沉淀，对生命有更深理解后，我再重新翻开它。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>两枚奇葩</title>
    <url>/2020/05/10/two_wonderful_flower/</url>
    <content><![CDATA[<p>最近工作中遇到两枚奇葩，他们的行为和沟通方式真是令我耳目一新。</p>
<span id="more"></span>
<h2 id="奇葩一"><a class="header-anchor" href="#奇葩一"></a>奇葩一</h2>
<p>这是个比我多工作两年、代码写的烂、脾气火爆的女奇葩。</p>
<h3 id="情景一"><a class="header-anchor" href="#情景一"></a>情景一</h3>
<p>多次不回消息，当面找她态度不友好。</p>
<p>我一直认为咱们是一个团队，大家都有义务把项目做好。后面试图跟她沟通，发现根本不在一个频道。</p>
<h3 id="情景二"><a class="header-anchor" href="#情景二"></a>情景二</h3>
<p>某天我做列表导出功能需要用到她写的查询列表的代码。然而发现了好几点问题：</p>
<ul>
<li>swagger和java实体字段名还不一致(又有驼峰又有下划线)</li>
<li>一个方法竟然带五个参数(就不能用Map接收么)</li>
<li>少了两个筛选条件</li>
</ul>
<p>她写的源代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty(value=“项目编码”,name=“project_code”)</span></span><br><span class="line"><span class="keyword">private</span> String projectCode;</span><br><span class="line"></span><br><span class="line">List&lt;HashMap&gt; <span class="title function_">searchProjectReport</span><span class="params">(<span class="meta">@Param(“projectCode”)</span>String projectCode,<span class="meta">@Param(“region”)</span>String region,<span class="meta">@Param(“category1”)</span>String category1,<span class="meta">@Param(“startDate”)</span>String startDate,<span class="meta">@Param(“endDate”)</span>String endDate,<span class="meta">@Param(“mileNames”)</span>String mileNames)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">我跟她说明情况以后她直接跑到我的工位说：</span><br><span class="line"><span class="string">&quot;不要大早上找茬，你自己写一个方法&quot;</span></span><br></pre></td></tr></table></figure>
<p>天，没得救了!</p>
<h3 id="情景三"><a class="header-anchor" href="#情景三"></a>情景三</h3>
<p>老是找我茬，当然几乎都不是我的问题。某天下午她突然跑到我的工位对我说：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;你以后不要在我的建的controller中写代码，要写代码自己重新建一个controller这样就不会有冲突了&quot;</span>。</span><br><span class="line">我当时也没控制住情绪，直接怼过去了：</span><br><span class="line"><span class="string">&quot;有冲突你不会解决吗？一般来说一个表对应一个controller你不知道吗？你干脆让我不要在这工作算了&quot;</span></span><br></pre></td></tr></table></figure>
<p>想象一下：你在专心工作，突然有人对你咆哮…尽是找茬就算了，还提这么无理的要求，不能忍。</p>
<h3 id="情景四"><a class="header-anchor" href="#情景四"></a>情景四</h3>
<p>某天上午，我发现她的代码的实体类少了一个变量(前台筛选需要)，然后跟她说了。然而她的回复竟然是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;我自己写的代码我知道哪儿有问题不用你管&quot;</span></span><br></pre></td></tr></table></figure>
<p>下午我们开会的时候她说之前就有写那个变量，然后我一看提交记录是中午提交的。为什么要用这么low的方式证明自己不犯错？承认自己的错误会怎么样呢？</p>
<h3 id="情景五"><a class="header-anchor" href="#情景五"></a>情景五</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">某次开会她刚见到我就问</span><br><span class="line"><span class="string">&quot;你刚入职的时候公司给你定的是什么级别&quot;</span></span><br><span class="line">后来</span><br><span class="line"><span class="string">&quot;你承认自己级别低了吧&quot;</span></span><br></pre></td></tr></table></figure>
<p>用工作年限把人分类就很low，后来了解到她的职级也就4A，吹上了天。再说她的代码各种批量插入 、 vo没先判空直接给里面的属性判空、双重for循环查列表、关联表分页等，工作那么长在我看来远不如真正打磨两年的经验。我也意识到职场中大部分人只是混一口饭吃，仅此而已。</p>
<h3 id="情景六"><a class="header-anchor" href="#情景六"></a>情景六</h3>
<p>我在Model里面加了三个字段，然后导致她写的接口调不通，原因是Mybatis会默认加载所有Model的字段作为sql的筛选条件。 	然而，她直接打电话过来说:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">她：<span class="string">&quot;你赶紧把这删了 不要加在这儿&quot;</span></span><br><span class="line">我：<span class="string">&quot;我删了我的接口怎么办?&quot;</span></span><br><span class="line">过了不到五分钟，在群里问我改了没</span><br><span class="line">我：<span class="string">&quot;有这么快吗？你只关心自己的东西&quot;</span></span><br></pre></td></tr></table></figure>
<p>催那么着急，从不给解决方案，只关心自己的东西，幸好我知道 <strong>@TableFiled(exist = false)</strong> 注解。</p>
<p><strong>小结：</strong><br>
<strong>每一句话都在试图证明自己有多么牛逼，然而每一句话都暴露了自己有多么无知。</strong></p>
<h2 id="奇葩二"><a class="header-anchor" href="#奇葩二"></a>奇葩二</h2>
<h3 id="情景一-v2"><a class="header-anchor" href="#情景一-v2"></a>情景一</h3>
<p>一天之内两三次代码没提交全。导致我更新代码下来报错，要知道更新代码-&gt;解决冲突-&gt;提交代码-&gt;合并代码-&gt;相关负责人审批-&gt;合并通过整个流程走一次花的时间也不少，一天卡两三次没法玩了。事实上，他前一天上午提交不全代码直到第二天下午才解决，这个过程我没法合并代码，严重影响了项目开发进度。</p>
<h3 id="情景二-v2"><a class="header-anchor" href="#情景二-v2"></a>情景二</h3>
<p>他两次电话找我确认他自己改的代码要不要删😳。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">他：<span class="string">&quot;你这个代码还要吗？不要我就删了？&quot;</span>。</span><br><span class="line">我：<span class="string">&quot;这个代码不是我写的我不知道&quot;</span>。</span><br><span class="line">然后我翻了下提交记录，看着是他自己修改的，接着说</span><br><span class="line"><span class="string">&quot;你连自己修改的代码都不知道吗&quot;</span>。</span><br><span class="line">然后我给他解释了git提交过程和看了提交记录。</span><br><span class="line">后面过了几分钟竟然又打了个电话过来。</span><br><span class="line">他：<span class="string">&quot;证据都在这儿了你还推锅&quot;</span>。</span><br><span class="line">我：<span class="string">&quot;没推锅。不是你提交的我这边合并下来怎么会有你的记录呢&quot;</span>。</span><br></pre></td></tr></table></figure>
<p><strong>小结：</strong><br>
<strong>不怕神一样的对手，就怕猪一样的队友。</strong></p>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>唯有不断学习，努力提高自己，去更好的环境，才能摆脱奇葩。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>我对病毒的一些认识</title>
    <url>/2020/02/15/understanding_of_virus/</url>
    <content><![CDATA[<p>病毒没有细胞结构，只有一种核酸(DNA或者RNA)，必须寄生在活细胞中然后不断复制才能活下去。病毒早在人类出现之前就在地球上生活几亿年了，沙漠、海底等极端环境都有病毒，病毒无处不在。病毒感染人类的目的并不是杀死我们，而是复制繁殖。因为只有宿主活着，它们才能更多地复制和繁殖；宿主死了，如果找不到新的宿主，它们也会死。<span id="more"></span></p>
<p>人类在病毒面前其实非常渺小，但是病毒要消灭人类也并不易。人类与病毒相互抗争，相互改进，人类不可能消灭病毒，最多消灭某种病毒，这就是大自然法则。人类若被埃博拉、SARS、2019新型冠状等类似病毒感染是没有特效药的，说有特效药的都是谣言。SARS当时没有任何特效药，到夏天时温度升高，大自然帮助我们杀死病毒，到现在17年了还尚未出现有预防价值的药物或者疫苗；埃博拉病毒1976年发现，直到2019年研究出的预防疫苗才在美国获批上市。2019新型冠状病毒才出两个月就说研究出特效药的那些人是有多乐观还是根本就不懂病毒？</p>
<p>确定病毒的传染源也并非易事，当然官方也用的是“可能”。因为第一个被确诊的患者很可能是其他的潜伏期患者把病毒传给他，他并不是第一个，而潜伏期的患者又没有任何症状，第一个患者都找不到怎么确定传染源？</p>
<p>其实在病毒面前也不必过于恐慌，因为人类自身就有一套很强的由白细胞、巨噬细胞、T细胞和B细胞组成的免疫系统来与病毒抗争。那些治愈(出院)的患者都是自身免疫力战胜病毒的成果，医院隔离只是让你不要传染别人，切断传染源。而那些死亡的患者多是自身免疫力太低没能抵抗住病毒的入侵。</p>
<p>现代医学可以治疗很多疾病，可是大部分的疾病都治不好的，人救不如自救。这段时间好好在家隔离，待到春暖花开，规律作息、健康饮食、加强锻炼、增加自身免疫力，必百毒不侵。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>病毒</tag>
      </tags>
  </entry>
  <entry>
    <title>进化论的几个疑点</title>
    <url>/2020/10/03/theory_of_evolution/</url>
    <content><![CDATA[<p>作为现代生物学基础的进化论存在很多疑点，如下所示：</p>
<!---more-->
<ul>
<li>无法解释生命的起源。</li>
<li>进化论认为生物进化具有渐变性：从海洋到陆地，从低等生物到高等生物。地球诞生46亿年，但是在前面40多亿年几乎没有生命的迹象，没有出土任何那个时期的化石。然而在寒武纪(约5亿4000多万年前)突然出现很多生物，这种生物爆发式增长，进化论无法解释。</li>
<li>目前科学界基本认为人类是先直立行走再制造工具的，直立行走后跑和爬都没其他动物快，而且你也没工具，进化都是朝着有利的方向进行的，这在进化论里说不通。</li>
<li>人类祖先几百万年前就制造出工具。狩猎采集社会到农业社会开始有几百万年，人类都开始种植谷物了，地球上有这么多生物，起码也有一两种生物可以制造出工具了吧，可是没有。人类进化这么快，不符合进化论的渐进式进化。</li>
</ul>
<p>当然，科技在不断发展，相信不远的将来，这些问题都会迎刃而解的。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>《野蛮生长》读书笔记</title>
    <url>/2020/08/01/yemanshengzhang/</url>
    <content><![CDATA[<h2 id="书籍简介"><a class="header-anchor" href="#书籍简介"></a>书籍简介</h2>
<img src="https://i-blog.csdnimg.cn/blog_migrate/a262f168dc60457ea8a099c32810e77a.jpeg" width="460px" align="center" />
<p>书名：野蛮生长<br>
作者：冯仑<br>
读完时间：2020年07月</br></p>
<span id="more"></span>
<h2 id="原文摘录"><a class="header-anchor" href="#原文摘录"></a>原文摘录</h2>
<ul>
<li>人(扩大说也可以指一个公司)一生会有三个钱包，他可以使用三种钱。第一个是现金或资产，第二个是信用，第三个是心理的钱包。</li>
<li>钱是是非地，是非人玩的是非物。</li>
<li>弄清楚钱的是非，否则宁愿不要接受。</li>
<li>熟人往往能满足你片刻的虚荣心，但会导致你不必要的交往，花了时间、精力，同时又导致你过度的成本支出。</li>
<li>熟人关系是有选择地超越规则，熟人之间有亲疏、有利害，亲密的、利害大的关系超越制度就多一点儿，疏远的一般关系超越就少一点。</li>
<li>提升幸福度的三件事：不算小钱、不算时间、不讲是非。</li>
<li>伟大就是管理自己。过去，我们老以为伟大是领导别人，这实际是错的。当你不能管理自己的时候，你便失去了所有领导别人的资格和能力。当一个人走向伟大的时候，千万先把自己管理好，管理自己的金钱、自己周边的人脉社会关系，管理自己的行为。你管理好了自己，我们称之为自律，称之为守法，很多类似的美德就有了。</li>
<li>我在越南的一个监狱里看到胡志明在墙上写的那些诗和文字时，我理解到一个真正伟大的人是不会被监狱关住、被时空限制住的，他的能量所释放出的光芒是永恒的。</li>
<li>我们在追求幸福的过程中往往就失去了很多幸福；当我们获得幸福的时候，我们会感觉更加不满足，我们永远希望获得更多。</li>
<li>每天的痛苦大多都跟时间有关，几点这样几点那样，人成了时间的奴隶。人类发明钟表以后效率提高了，但人的确不大幸福，相信十万年以前的人没有这么多和时间过不去的痛苦。</li>
<li>所有的自由来源于内心的自由，其次才源于你的物质手段。</li>
<li>物质上的幸福越庸俗越自然，越堕落越人性。</li>
<li>要想快乐必须要有信仰，有信仰的人快乐，其中有宗教信仰的人因为把自己的欲望管理得很好而快乐。</li>
<li>女人永远是男人的老师。</li>
</ul>
<h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2>
<p>书中写了很多创业采坑经历，很适合创业者借鉴；书中也写了很多人情事故，值得学习。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>奇葩说第六季语录</title>
    <url>/2020/01/29/wonderful_flower_sixth/</url>
    <content><![CDATA[<p>最近看完奇葩说第六季，这个节目也是越来越规范化，还依稀记得第一季辩手们“骂娘”场景。我收集了一些受触动的语句，如下所示：</p>
<span id="more"></span>
<ul>
<li>母胎solo并不是缺点 是我怕自己太肤浅</li>
<li>爱情是行云流水的事情 我们不该带着标签被选择 过去的经历只是我过去的生活状态 我不需要你将我归类 去约会、去相处、去感受恋爱中的笨拙和不用言语的心领神会 你所有的答案都会在之后我们相处的日子里自然的获得</li>
<li>两个人相处其实是两个人的事我不需要认识这么多男生来学习怎么跟男性相处 我只要学习怎么跟你相处 我是第一次谈恋爱 我是母胎solo 你也是第一次和我谈恋爱 你也是solo 放心我们都是第一次 请多多指教</li>
<li>相识满天下 知心有几人 学会差别对待 你才更有价值</li>
<li>分手当面聊清楚我才能坦然放下 我以后才不会有无限遐想 既然我们开始有仪式 那我们结束也该有仪式  我当面说不是为了体面 而是我为了见你最后一面</li>
<li>越怕越要做 越做越脱敏 只有约会分手 我们才会从爱情这所学校毕业</li>
<li>人这一辈子啊 弹指一挥间 一不小心说没可能就没了 你以为年纪轻轻精致穷是不节俭 你怎么知道不是在安享晚年 及时行乐的潜台词是时日无多</li>
<li>在这些精致生活指南的指南下 我们都囤积了很多挪作他用的东西 我们家里都有一个用来盖泡面的kindle 都有一个摆在鞋柜最高处但是又不轻易穿的网红跑鞋  这些东西让我们觉得和精致的距离很近就是下单的那一瞬间 同款的那种魔力让我们一下子就觉得靠近了榜样 可是我们和榜样的真实距离是他真的有去读书和他真的有去跑步</li>
<li>未经审视的生活是不值得过</li>
<li>对于粗糙恐惧让你宁可精致的穷</li>
<li>一个健康的人既能接受粗糙又能接受精致</li>
<li>人生本质就是粗糙 不能感受到粗糙带来的自由你将会很痛苦</li>
<li>恋爱不是生活里面的必须品 好的恋爱是生活中的奢侈品 非要急于求成 只能找到赝品</li>
<li>社会要鼓励人做好事 从来不是靠告诉每个人 做每件好事总会有物质回报而恰恰是告诉每个人人间的回报不是只有物质 有的东西虽然没有价格但是依然有价值</li>
<li>担心让你思考地更多 可是恐惧是担心过了头 恐惧让你停止思考</li>
<li>我们出门我们会穿鞋 有人自己做了鞋 有人买了鞋 我们不会去问[你买的是别人做给你的鞋啊 为什么不自己做一双] 我们不会问这种问题 因为我们知道鞋从哪里来不重要 你要去哪里才重要 这就是克服恐惧 我们要克服恐惧才能出门。有人可以自己做鞋 他可以自行用自己的能力克服恐惧 有人没那么幸运 他得买鞋 他那双鞋也许不是他自己做给自己的 是别人做给他的 但是无所谓 鞋从哪里来不重要 我愿意出门很重要。不要告诉我 学着做鞋你可以成长 我出门之后我也可以成长 不要去纠结靠着别人做的鞋丢不丢脸 你要相信你走到的远方就是光荣的</li>
<li>每一种情绪都值得聆听而不是被消灭。没有任何一种情绪是不应该的</li>
<li>我珍惜此刻 因为对于此刻的珍惜 我希望我们有一个值得珍惜的未来</li>
<li>你了解一个人越多 你不了解他的地方就越多</li>
<li>我要告诉孩子 我只想告诉他 从小你的爸爸妈妈就没有把你当小孩看 你从来就不是一个简单的小孩 因为你一直都在成长</li>
<li>你越沉溺与童话中的美好 你就越难面对现实中注定的不美好</li>
<li>如果现实给了你一张建议苦涩的脸 请你一定要留住心中那颗童话曾经给你的最甜的水果糖</li>
<li>历史长河漫漫 天上星星无数 无论如何没颗星星都应该拥有同等的机会 等待着一双眼睛 终究有一双眼睛去发现</li>
<li>再平凡的人 你生命的每一刻都在做记录</li>
<li>生命是可以停止的 但是爱没有遵循这个规律</li>
<li>勇敢做自己 世事没有对错 人生没有高下</li>
<li>其实做一件事的时候不要把自己放得这么伟大 而你为对方做任何事的时候 如果你总觉得是我为你付出的话 那叫交易</li>
<li>在亲密关系中 你把自己弄舒服了 幸福感会溢出来 让身边的人也舒服</li>
<li>这世界上所有的美好最怕的就是三个字[看穿了]  其实很多时候当我们把这些美好都看透了 拆解干净了 那份美好也就被我们肢解了 所有的善意背后都难免有那么一份私心</li>
<li>身在阴沟里 我们心向阳光就好了</li>
<li>在人生的绝大多数场合 对事不对人是在保持我们社会的公平、正义和真实</li>
<li>在未来对事不对人会越来越珍贵 因为对人不对事是一个人的本能 但是对事不对人才是一个人真正的本事</li>
<li>我们总是理所应当的以为自己就是父母的一切 所以你过时了 你必须跟我一样 我改变你 为你好等等 可是我们从来没有真的去看见和尊重他们也有他们自己的全部的生活啊</li>
<li>人的一生很短 有一些高山 我们无法企及 那就远远看看也行</li>
<li>我们曾经如此渴望命运的波澜 到最后才发现 人生最曼妙的风景竟是内心淡定与从容 我们曾如此期盼外界的认可 到最后才知道 世界是自己的 与他人毫无关系</li>
<li>更好的割舍才是更好的出发。与其拉长战线不如猛烈地增强炮火</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
        <category>综艺</category>
      </categories>
      <tags>
        <tag>奇葩说</tag>
        <tag>语录</tag>
        <tag>综艺</tag>
      </tags>
  </entry>
</search>
